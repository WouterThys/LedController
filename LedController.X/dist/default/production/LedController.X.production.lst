

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 16 19:30:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.40
    79                           ; Generated 01/12/2016 GMT
    80                           ; 
    81                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F2550 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  00215A                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _ackCharacter
   118  00215A  35                 	db	low STR_5
   119  00215B  08                 	db	high STR_5
   120                           
   121                           ;initializer for _blockCharacter
   122  00215C  39                 	db	low STR_4
   123  00215D  08                 	db	high STR_4
   124                           
   125                           ;initializer for _startCharacter
   126  00215E  63                 	db	low STR_1
   127  00215F  08                 	db	high STR_1
   128                           
   129                           ;initializer for _stopCharacter
   130  002160  61                 	db	low STR_2
   131  002161  08                 	db	high STR_2
   132                           
   133                           ;initializer for fade@b_cnt
   134  002162  FF                 	db	255
   135                           
   136                           ;initializer for fade@g_cnt
   137  002163  80                 	db	128
   138                           
   139                           	psect	idataBANK0
   140  0021BA                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _messageCharacter
   144  0021BA  3D                 	db	low STR_3
   145  0021BB  08                 	db	high STR_3
   146                           
   147                           	psect	smallconst
   148  000800                     __psmallconst:
   149                           	opt stack 0
   150  000800  00                 	db	0
   151  000801                     _dpowers:
   152                           	opt stack 0
   153  000801  0001               	dw	1
   154  000803  000A               	dw	10
   155  000805  0064               	dw	100
   156  000807  03E8               	dw	1000
   157  000809  2710               	dw	10000
   158  00080B                     __end_of_dpowers:
   159                           	opt stack 0
   160  00080B                     _hexpowers:
   161                           	opt stack 0
   162  00080B  0001               	dw	1
   163  00080D  0010               	dw	16
   164  00080F  0100               	dw	256
   165  000811  1000               	dw	4096
   166  000813                     __end_of_hexpowers:
   167                           	opt stack 0
   168  000813                     STR_33:
   169  000813  30                 	db	48	;'0'
   170  000814  31                 	db	49	;'1'
   171  000815  32                 	db	50	;'2'
   172  000816  33                 	db	51	;'3'
   173  000817  34                 	db	52	;'4'
   174  000818  35                 	db	53	;'5'
   175  000819  36                 	db	54	;'6'
   176  00081A  37                 	db	55	;'7'
   177  00081B  38                 	db	56	;'8'
   178  00081C  39                 	db	57	;'9'
   179  00081D  61                 	db	97	;'a'
   180  00081E  62                 	db	98	;'b'
   181  00081F  63                 	db	99	;'c'
   182  000820  64                 	db	100	;'d'
   183  000821  65                 	db	101	;'e'
   184  000822  66                 	db	102	;'f'
   185  000823  00                 	db	0
   186  000824                     STR_14:
   187  000824  69                 	db	105	;'i'
   188  000825  6E                 	db	110	;'n'
   189  000826  69                 	db	105	;'i'
   190  000827  74                 	db	116	;'t'
   191  000828  00                 	db	0
   192  000829                     STR_29:
   193  000829  53                 	db	83	;'S'
   194  00082A  43                 	db	67	;'C'
   195  00082B  41                 	db	65	;'A'
   196  00082C  00                 	db	0
   197  00082D                     STR_31:
   198  00082D  53                 	db	83	;'S'
   199  00082E  54                 	db	84	;'T'
   200  00082F  41                 	db	65	;'A'
   201  000830  00                 	db	0
   202  000831                     STR_25:
   203  000831  52                 	db	82	;'R'
   204  000832  47                 	db	71	;'G'
   205  000833  42                 	db	66	;'B'
   206  000834  00                 	db	0
   207  000835                     STR_5:
   208  000835  5B                 	db	91	;'['
   209  000836  41                 	db	65	;'A'
   210  000837  5D                 	db	93	;']'
   211  000838  00                 	db	0
   212  000839                     STR_4:
   213  000839  5B                 	db	91	;'['
   214  00083A  42                 	db	66	;'B'
   215  00083B  5D                 	db	93	;']'
   216  00083C  00                 	db	0
   217  00083D                     STR_3:
   218  00083D  5B                 	db	91	;'['
   219  00083E  4D                 	db	77	;'M'
   220  00083F  5D                 	db	93	;']'
   221  000840  00                 	db	0
   222  000841                     STR_23:
   223  000841  46                 	db	70	;'F'
   224  000842  41                 	db	65	;'A'
   225  000843  00                 	db	0
   226  000844                     STR_21:
   227  000844  46                 	db	70	;'F'
   228  000845  4C                 	db	76	;'L'
   229  000846  00                 	db	0
   230  000847                     STR_24:
   231  000847  53                 	db	83	;'S'
   232  000848  4D                 	db	77	;'M'
   233  000849  00                 	db	0
   234  00084A                     STR_22:
   235  00084A  53                 	db	83	;'S'
   236  00084B  54                 	db	84	;'T'
   237  00084C  00                 	db	0
   238  00084D                     STR_11:
   239  00084D  25                 	db	37
   240  00084E  64                 	db	100	;'d'
   241  00084F  00                 	db	0
   242  000850                     STR_6:
   243  000850  25                 	db	37
   244  000851  78                 	db	120	;'x'
   245  000852  00                 	db	0
   246  000853                     STR_19:
   247  000853  44                 	db	68	;'D'
   248  000854  00                 	db	0
   249  000855                     STR_16:
   250  000855  47                 	db	71	;'G'
   251  000856  00                 	db	0
   252  000857                     STR_13:
   253  000857  49                 	db	73	;'I'
   254  000858  00                 	db	0
   255  000859                     STR_12:
   256  000859  50                 	db	80	;'P'
   257  00085A  00                 	db	0
   258  00085B                     STR_15:
   259  00085B  52                 	db	82	;'R'
   260  00085C  00                 	db	0
   261  00085D                     STR_18:
   262  00085D  53                 	db	83	;'S'
   263  00085E  00                 	db	0
   264  00085F                     STR_20:
   265  00085F  55                 	db	85	;'U'
   266  000860  00                 	db	0
   267  000861                     STR_2:
   268  000861  24                 	db	36
   269  000862  00                 	db	0
   270  000863                     STR_1:
   271  000863  26                 	db	38
   272  000864  00                 	db	0
   273  000865                     STR_7:
   274  000865  3A                 	db	58	;':'
   275  000866  00                 	db	0
   276  0000                     
   277                           ; #config settings
   278  000867  00                 	db	0	; dummy byte at the end
   279  0000                     
   280                           	psect	nvBANK0
   281  0000E4                     __pnvBANK0:
   282                           	opt stack 0
   283  0000E4                     _deviceName:
   284                           	opt stack 0
   285  0000E4                     	ds	3
   286  0000                     _ADCON1	set	4033
   287  0000                     _BAUDCONbits	set	4024
   288  0000                     _INTCON2bits	set	4081
   289  0000                     _INTCONbits	set	4082
   290  0000                     _IPR1bits	set	3999
   291  0000                     _PIE1bits	set	3997
   292  0000                     _PIR1bits	set	3998
   293  0000                     _PORTA	set	3968
   294  0000                     _PORTB	set	3969
   295  0000                     _PORTBbits	set	3969
   296  0000                     _PORTC	set	3970
   297  0000                     _RCONbits	set	4048
   298  0000                     _RCREG	set	4014
   299  0000                     _RCSTAbits	set	4011
   300  0000                     _SPBRG	set	4015
   301  0000                     _T0CONbits	set	4053
   302  0000                     _TMR0H	set	4055
   303  0000                     _TMR0L	set	4054
   304  0000                     _TRISA	set	3986
   305  0000                     _TRISB	set	3987
   306  0000                     _TRISBbits	set	3987
   307  0000                     _TRISC	set	3988
   308  0000                     _TRISCbits	set	3988
   309  0000                     _TXREG	set	4013
   310  0000                     _TXSTAbits	set	4012
   311                           
   312                           	psect	cinit
   313  001CEA                     __pcinit:
   314                           	opt stack 0
   315  001CEA                     start_initialization:
   316                           	opt stack 0
   317  001CEA                     __initialization:
   318                           	opt stack 0
   319                           
   320                           ; Initialize objects allocated to BANK0 (2 bytes)
   321                           ; load TBLPTR registers with __pidataBANK0
   322  001CEA  0EBA               	movlw	low __pidataBANK0
   323  001CEC  6EF6               	movwf	tblptrl,c
   324  001CEE  0E21               	movlw	high __pidataBANK0
   325  001CF0  6EF7               	movwf	tblptrh,c
   326  001CF2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   327  001CF4  6EF8               	movwf	tblptru,c
   328  001CF6  0009               	tblrd		*+	;fetch initializer
   329  001CF8  CFF5 F0E7          	movff	tablat,__pdataBANK0
   330  001CFC  0009               	tblrd		*+	;fetch initializer
   331  001CFE  CFF5 F0E8          	movff	tablat,__pdataBANK0+1
   332                           
   333                           ; Initialize objects allocated to COMRAM (10 bytes)
   334                           ; load TBLPTR registers with __pidataCOMRAM
   335  001D02  0E5A               	movlw	low __pidataCOMRAM
   336  001D04  6EF6               	movwf	tblptrl,c
   337  001D06  0E21               	movlw	high __pidataCOMRAM
   338  001D08  6EF7               	movwf	tblptrh,c
   339  001D0A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   340  001D0C  6EF8               	movwf	tblptru,c
   341  001D0E  EE00  F03C         	lfsr	0,__pdataCOMRAM
   342  001D12  EE10 F00A          	lfsr	1,10
   343  001D16                     copy_data0:
   344  001D16  0009               	tblrd		*+
   345  001D18  CFF5 FFEE          	movff	tablat,postinc0
   346  001D1C  50E5               	movf	postdec1,w,c
   347  001D1E  50E1               	movf	fsr1l,w,c
   348  001D20  E1FA               	bnz	copy_data0
   349                           
   350                           ; Clear objects allocated to BANK0 (96 bytes)
   351  001D22  EE00  F060         	lfsr	0,__pbssBANK0
   352  001D26  0E60               	movlw	96
   353  001D28                     clear_0:
   354  001D28  6AEE               	clrf	postinc0,c
   355  001D2A  06E8               	decf	wreg,f,c
   356  001D2C  E1FD               	bnz	clear_0
   357                           
   358                           ; Clear objects allocated to COMRAM (23 bytes)
   359  001D2E  EE00  F025         	lfsr	0,__pbssCOMRAM
   360  001D32  0E17               	movlw	23
   361  001D34                     clear_1:
   362  001D34  6AEE               	clrf	postinc0,c
   363  001D36  06E8               	decf	wreg,f,c
   364  001D38  E1FD               	bnz	clear_1
   365  001D3A                     end_of_initialization:
   366                           	opt stack 0
   367  001D3A                     __end_of__initialization:
   368                           	opt stack 0
   369  001D3A  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   370  001D3C  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   371  001D3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   372  001D40  6EF8               	movwf	tblptru,c
   373  001D42  0100               	movlb	0
   374  001D44  EF5C  F00C         	goto	_main	;jump to C main() function
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1l	equ	0xFE1
   383                           
   384                           	psect	bssCOMRAM
   385  000025                     __pbssCOMRAM:
   386                           	opt stack 0
   387  000025                     _read:
   388                           	opt stack 0
   389  000025                     	ds	6
   390  00002B                     _D_TIMER0_Flag:
   391                           	opt stack 0
   392  00002B                     	ds	1
   393  00002C                     _baud:
   394                           	opt stack 0
   395  00002C                     	ds	1
   396  00002D                     _blockLength:
   397                           	opt stack 0
   398  00002D                     	ds	1
   399  00002E                     _bufferCnt:
   400                           	opt stack 0
   401  00002E                     	ds	1
   402  00002F                     _scale:
   403                           	opt stack 0
   404  00002F                     	ds	1
   405  000030                     _state:
   406                           	opt stack 0
   407  000030                     	ds	1
   408  000031                     fade@b_up:
   409                           	opt stack 0
   410  000031                     	ds	1
   411  000032                     fade@g_up:
   412                           	opt stack 0
   413  000032                     	ds	1
   414  000033                     fade@r_cnt:
   415                           	opt stack 0
   416  000033                     	ds	1
   417  000034                     fade@r_up:
   418                           	opt stack 0
   419  000034                     	ds	1
   420  000035                     flash@color:
   421                           	opt stack 0
   422  000035                     	ds	1
   423  000036                     flash@count:
   424                           	opt stack 0
   425  000036                     	ds	1
   426  000037                     handleState@cnt:
   427                           	opt stack 0
   428  000037                     	ds	1
   429  000038                     smooth@color:
   430                           	opt stack 0
   431  000038                     	ds	1
   432  000039                     smooth@count:
   433                           	opt stack 0
   434  000039                     	ds	1
   435  00003A                     strobe@cnt:
   436                           	opt stack 0
   437  00003A                     	ds	1
   438  00003B                     strobe@up:
   439                           	opt stack 0
   440  00003B                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	dataCOMRAM
   451  00003C                     __pdataCOMRAM:
   452                           	opt stack 0
   453  00003C                     _ackCharacter:
   454                           	opt stack 0
   455  00003C                     	ds	2
   456  00003E                     _blockCharacter:
   457                           	opt stack 0
   458  00003E                     	ds	2
   459  000040                     _startCharacter:
   460                           	opt stack 0
   461  000040                     	ds	2
   462  000042                     _stopCharacter:
   463                           	opt stack 0
   464  000042                     	ds	2
   465  000044                     fade@b_cnt:
   466                           	opt stack 0
   467  000044                     	ds	1
   468  000045                     fade@g_cnt:
   469                           	opt stack 0
   470  000045                     	ds	1
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBANK0
   481  000060                     __pbssBANK0:
   482                           	opt stack 0
   483  000060                     _comMes:
   484                           	opt stack 0
   485  000060                     	ds	17
   486  000071                     _readData:
   487                           	opt stack 0
   488  000071                     	ds	6
   489  000077                     _PWM_Blue:
   490                           	opt stack 0
   491  000077                     	ds	2
   492  000079                     _PWM_Green:
   493                           	opt stack 0
   494  000079                     	ds	2
   495  00007B                     _PWM_Red:
   496                           	opt stack 0
   497  00007B                     	ds	2
   498  00007D                     _D_UART_ReadFlag:
   499                           	opt stack 0
   500  00007D                     	ds	1
   501  00007E                     _b:
   502                           	opt stack 0
   503  00007E                     	ds	1
   504  00007F                     _g:
   505                           	opt stack 0
   506  00007F                     	ds	1
   507  000080                     _r:
   508                           	opt stack 0
   509  000080                     	ds	1
   510  000081                     _readBuffer:
   511                           	opt stack 0
   512  000081                     	ds	63
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	dataBANK0
   523  0000E7                     __pdataBANK0:
   524                           	opt stack 0
   525  0000E7                     _messageCharacter:
   526                           	opt stack 0
   527  0000E7                     	ds	2
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	cstackBANK1
   538  000100                     __pcstackBANK1:
   539                           	opt stack 0
   540  000100                     ?_strcmp:
   541                           	opt stack 0
   542  000100                     ?___lwdiv:
   543                           	opt stack 0
   544  000100                     ?___aldiv:
   545                           	opt stack 0
   546  000100                     ?_D_UART_Read:
   547                           	opt stack 0
   548  000100                     ?_D_UART_ReadBlock:
   549                           	opt stack 0
   550  000100                     D_TIMER0_Enable@enable:
   551                           	opt stack 0
   552  000100                     D_UART_Enable@enable:
   553                           	opt stack 0
   554  000100                     D_PWM_SetDuty@duty:
   555                           	opt stack 0
   556  000100                     strToInt@str:
   557                           	opt stack 0
   558  000100                     ___lwdiv@dividend:
   559                           	opt stack 0
   560  000100                     strcmp@s1:
   561                           	opt stack 0
   562  000100                     ___aldiv@dividend:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x0
   566  000100                     	ds	1
   567  000101                     D_TIMER0_Init@prescale:
   568                           	opt stack 0
   569  000101                     writeByte@data:
   570                           	opt stack 0
   571  000101                     D_PWM_Enable@enable:
   572                           	opt stack 0
   573  000101                     D_PWM_SetDuty@which:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x1
   577  000101                     	ds	1
   578  000102                     putch@data:
   579                           	opt stack 0
   580  000102                     setRGB@g:
   581                           	opt stack 0
   582  000102                     strToInt@tmp:
   583                           	opt stack 0
   584  000102                     ___lwdiv@divisor:
   585                           	opt stack 0
   586  000102                     strcmp@s2:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x2
   590  000102                     	ds	1
   591  000103                     setRGB@b:
   592                           	opt stack 0
   593  000103                     strToInt@shift:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3
   597  000103                     	ds	1
   598  000104                     ??_strcmp:
   599  000104                     setRGB@r:
   600                           	opt stack 0
   601  000104                     strToInt@val:
   602                           	opt stack 0
   603  000104                     ___lwdiv@counter:
   604                           	opt stack 0
   605  000104                     ___aldiv@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x4
   609  000104                     	ds	1
   610  000105                     D_PWM_SetRGB@g:
   611                           	opt stack 0
   612  000105                     strcmp@r:
   613                           	opt stack 0
   614  000105                     ___lwdiv@quotient:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x5
   618  000105                     	ds	1
   619  000106                     D_PWM_SetRGB@b:
   620                           	opt stack 0
   621  000106                     D_UART_Read@cm:
   622                           	opt stack 0
   623                           
   624                           ; 17 bytes @ 0x6
   625  000106                     	ds	1
   626  000107                     ?___lwmod:
   627                           	opt stack 0
   628  000107                     D_UART_ReadBlock@cnt:
   629                           	opt stack 0
   630  000107                     D_PWM_SetRGB@r:
   631                           	opt stack 0
   632  000107                     ___lwmod@dividend:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x7
   636  000107                     	ds	1
   637  000108                     ___aldiv@counter:
   638                           	opt stack 0
   639  000108                     D_UART_ReadBlock@cm:
   640                           	opt stack 0
   641                           
   642                           ; 17 bytes @ 0x8
   643  000108                     	ds	1
   644  000109                     ___aldiv@sign:
   645                           	opt stack 0
   646  000109                     ___lwmod@divisor:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x9
   650  000109                     	ds	1
   651  00010A                     ___aldiv@quotient:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xA
   655  00010A                     	ds	1
   656  00010B                     ___lwmod@counter:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0xB
   660  00010B                     	ds	1
   661  00010C                     ?_printf:
   662                           	opt stack 0
   663  00010C                     printf@f:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0xC
   667  00010C                     	ds	2
   668  00010E                     D_UART_Init@name:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xE
   672  00010E                     	ds	2
   673  000110                     D_UART_Init@baud:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x10
   677  000110                     	ds	1
   678  000111                     ??_printf:
   679                           
   680                           ; 1 bytes @ 0x11
   681  000111                     	ds	1
   682  000112                     D_UART_Init@interrupts:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x12
   686  000112                     	ds	1
   687  000113                     _D_UART_Init$1748:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x13
   691  000113                     	ds	1
   692  000114                     printf@idx:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x14
   696  000114                     	ds	1
   697  000115                     printf@ap:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x15
   701  000115                     	ds	2
   702  000117                     printf@prec:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x17
   706  000117                     	ds	1
   707  000118                     printf@flag:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x18
   711  000118                     	ds	1
   712  000119                     printf@val:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x19
   716  000119                     	ds	2
   717  00011B                     printf@c:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x1B
   721  00011B                     	ds	1
   722  00011C                     D_UART_Write@command:
   723                           	opt stack 0
   724  00011C                     D_UART_WriteInt@command:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x1C
   728  00011C                     	ds	2
   729  00011E                     D_UART_Write@data:
   730                           	opt stack 0
   731  00011E                     D_UART_WriteInt@data:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x1E
   735  00011E                     	ds	2
   736  000120                     ??_D_UART_Write:
   737  000120                     ??_D_UART_WriteInt:
   738                           
   739                           ; 1 bytes @ 0x20
   740  000120                     	ds	1
   741  000121                     handle_message@msg:
   742                           	opt stack 0
   743                           
   744                           ; 6 bytes @ 0x21
   745  000121                     	ds	6
   746  000127                     ??_handle_message:
   747                           
   748                           ; 1 bytes @ 0x27
   749  000127                     	ds	1
   750  000128                     main@i:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x28
   754  000128                     	ds	1
   755  000129                     main@length:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x29
   759  000129                     	ds	1
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           tblptrl	equ	0xFF6
   763                           tablat	equ	0xFF5
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           postdec1	equ	0xFE5
   767                           fsr1l	equ	0xFE1
   768                           
   769                           	psect	cstackBANK0
   770  0000C0                     __pcstackBANK0:
   771                           	opt stack 0
   772  0000C0                     i1___lwmod@counter:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x0
   776  0000C0                     	ds	1
   777  0000C1                     ?i1_printf:
   778                           	opt stack 0
   779  0000C1                     i1printf@f:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x1
   783  0000C1                     	ds	5
   784  0000C6                     ??i1_printf:
   785                           
   786                           ; 1 bytes @ 0x6
   787  0000C6                     	ds	3
   788  0000C9                     i1printf@idx:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x9
   792  0000C9                     	ds	1
   793  0000CA                     i1printf@ap:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0xA
   797  0000CA                     	ds	2
   798  0000CC                     i1printf@prec:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0xC
   802  0000CC                     	ds	1
   803  0000CD                     i1printf@flag:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0xD
   807  0000CD                     	ds	1
   808  0000CE                     i1printf@val:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0xE
   812  0000CE                     	ds	2
   813  0000D0                     i1printf@c:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  0000D0                     	ds	1
   818  0000D1                     fillDataBuffer@i:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x11
   822  0000D1                     	ds	1
   823  0000D2                     fillDataBuffer@data:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x12
   827  0000D2                     	ds	1
   828  0000D3                     ??_LowISR:
   829                           
   830                           ; 1 bytes @ 0x13
   831  0000D3                     	ds	17
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           fsr1l	equ	0xFE1
   840                           
   841                           	psect	cstackCOMRAM
   842  000001                     __pcstackCOMRAM:
   843                           	opt stack 0
   844  000001                     ??_pwmColors:
   845  000001                     i2D_PWM_SetDuty@duty:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x0
   849  000001                     	ds	1
   850  000002                     i2D_PWM_SetDuty@which:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x1
   854  000002                     	ds	1
   855  000003                     pwmColors@birghtness:
   856                           	opt stack 0
   857  000003                     i2setRGB@g:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x2
   861  000003                     	ds	1
   862  000004                     i2setRGB@b:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x3
   866  000004                     	ds	1
   867  000005                     i2setRGB@r:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x4
   871  000005                     	ds	1
   872  000006                     ??_flash:
   873  000006                     ??_smooth:
   874                           
   875                           ; 1 bytes @ 0x5
   876  000006                     	ds	6
   877  00000C                     ??_HighISR:
   878                           
   879                           ; 1 bytes @ 0xB
   880  00000C                     	ds	14
   881  00001A                     ?i1___lwdiv:
   882                           	opt stack 0
   883  00001A                     i1D_UART_Enable@enable:
   884                           	opt stack 0
   885  00001A                     i1___lwdiv@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x19
   889  00001A                     	ds	1
   890  00001B                     readByte@dum:
   891                           	opt stack 0
   892  00001B                     i1writeByte@data:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x1A
   896  00001B                     	ds	1
   897  00001C                     i1putch@data:
   898                           	opt stack 0
   899  00001C                     i1___lwdiv@divisor:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x1B
   903  00001C                     	ds	2
   904  00001E                     i1___lwdiv@counter:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x1D
   908  00001E                     	ds	1
   909  00001F                     i1___lwdiv@quotient:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1E
   913  00001F                     	ds	2
   914  000021                     ?i1___lwmod:
   915                           	opt stack 0
   916  000021                     i1___lwmod@dividend:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x20
   920  000021                     	ds	2
   921  000023                     i1___lwmod@divisor:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x22
   925  000023                     	ds	2
   926  000025                     tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           
   935                           ; 1 bytes @ 0x24
   936 ;;
   937 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   938 ;;
   939 ;; *************** function _main *****************
   940 ;; Defined at:
   941 ;;		line 65 in file "main.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  i               1   40[BANK1 ] unsigned char 
   946 ;;  length          1   41[BANK1 ] unsigned char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         0       0       0       0       0       0       0       0       0
   957 ;;      Locals:         0       0       2       0       0       0       0       0       0
   958 ;;      Temps:          0       0       0       0       0       0       0       0       0
   959 ;;      Totals:         0       0       2       0       0       0       0       0       0
   960 ;;Total ram usage:        2 bytes
   961 ;; Hardware stack levels required when called:   18
   962 ;; This function calls:
   963 ;;		_D_PWM_SetRGB
   964 ;;		_D_UART_BlockLength
   965 ;;		_D_UART_Read
   966 ;;		_D_UART_ReadBlock
   967 ;;		_handle_message
   968 ;;		_initialize
   969 ;; This function is called by:
   970 ;;		Startup code after reset
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text0
   975  0018B8                     __ptext0:
   976                           	opt stack 0
   977  0018B8                     _main:
   978                           	opt stack 13
   979                           
   980                           ;main.c: 67: initialize();
   981                           
   982                           ;incstack = 0
   983  0018B8  EC12  F00E         	call	_initialize	;wreg free
   984                           
   985                           ;main.c: 69: D_PWM_SetRGB(0xff, 0xff, 0xff);
   986  0018BC  0EFF               	movlw	255
   987  0018BE  0101               	movlb	1	; () banked
   988  0018C0  6F05               	movwf	D_PWM_SetRGB@g& (0+255),b
   989  0018C2  0EFF               	movlw	255
   990  0018C4  0101               	movlb	1	; () banked
   991  0018C6  6F06               	movwf	D_PWM_SetRGB@b& (0+255),b
   992  0018C8  0EFF               	movlw	255
   993  0018CA  EC7F  F010         	call	_D_PWM_SetRGB
   994  0018CE                     l3843:
   995                           
   996                           ;main.c: 73: if (D_UART_ReadFlag) {
   997  0018CE  0100               	movlb	0	; () banked
   998  0018D0  517D               	movf	_D_UART_ReadFlag& (0+255),w,b
   999  0018D2  B4D8               	btfsc	status,2,c
  1000  0018D4  D7FC               	goto	l3843
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 74: D_UART_ReadFlag = 0;
  1004  0018D6  0E00               	movlw	0
  1005  0018D8  0100               	movlb	0	; () banked
  1006  0018DA  6F7D               	movwf	_D_UART_ReadFlag& (0+255),b
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;main.c: 75: uint8_t length = D_UART_BlockLength();
  1010  0018DC  ECD6  F010         	call	_D_UART_BlockLength	;wreg free
  1011  0018E0  0101               	movlb	1	; () banked
  1012  0018E2  6F29               	movwf	main@length& (0+255),b
  1013                           
  1014                           ; BSR set to: 1
  1015                           ;main.c: 76: if (length == 1) {
  1016  0018E4  0101               	movlb	1	; () banked
  1017  0018E6  0529               	decf	main@length& (0+255),w,b
  1018  0018E8  A4D8               	btfss	status,2,c
  1019  0018EA  D010               	goto	l3853
  1020                           
  1021                           ; BSR set to: 1
  1022                           ;main.c: 77: handle_message(D_UART_Read());
  1023  0018EC  EC56  F00F         	call	_D_UART_Read	;wreg free
  1024  0018F0  CFE9 FFD9          	movff	fsr0l,fsr2l
  1025  0018F4  CFEA FFDA          	movff	fsr0h,fsr2h
  1026  0018F8  EE01  F021         	lfsr	0,handle_message@msg
  1027  0018FC  0E05               	movlw	5
  1028  0018FE                     u3401:
  1029  0018FE  CFDB FFEB          	movff	plusw2,plusw0
  1030  001902  06E8               	decf	wreg,f,c
  1031  001904  E2FC               	bc	u3401
  1032  001906  EC34  F004         	call	_handle_message	;wreg free
  1033                           
  1034                           ;main.c: 78: } else if (length > 1) {
  1035  00190A  D7E1               	goto	l3843
  1036  00190C                     l3853:
  1037  00190C  0E01               	movlw	1
  1038  00190E  0101               	movlb	1	; () banked
  1039  001910  6529               	cpfsgt	main@length& (0+255),b
  1040  001912  D7DD               	goto	l3843
  1041                           
  1042                           ; BSR set to: 1
  1043                           ;main.c: 79: uint8_t i;
  1044                           ;main.c: 80: for (i=0; i < length; i++) {
  1045  001914  0E00               	movlw	0
  1046  001916  0101               	movlb	1	; () banked
  1047  001918  6F28               	movwf	main@i& (0+255),b
  1048  00191A  D013               	goto	l3861
  1049  00191C                     l3857:
  1050                           
  1051                           ; BSR set to: 1
  1052                           ;main.c: 81: handle_message(D_UART_ReadBlock(i));
  1053  00191C  0101               	movlb	1	; () banked
  1054  00191E  5128               	movf	main@i& (0+255),w,b
  1055  001920  ECD3  F00E         	call	_D_UART_ReadBlock
  1056  001924  CFE9 FFD9          	movff	fsr0l,fsr2l
  1057  001928  CFEA FFDA          	movff	fsr0h,fsr2h
  1058  00192C  EE01  F021         	lfsr	0,handle_message@msg
  1059  001930  0E05               	movlw	5
  1060  001932                     u3421:
  1061  001932  CFDB FFEB          	movff	plusw2,plusw0
  1062  001936  06E8               	decf	wreg,f,c
  1063  001938  E2FC               	bc	u3421
  1064  00193A  EC34  F004         	call	_handle_message	;wreg free
  1065  00193E  0101               	movlb	1	; () banked
  1066  001940  2B28               	incf	main@i& (0+255),f,b
  1067  001942                     l3861:
  1068                           
  1069                           ; BSR set to: 1
  1070  001942  0101               	movlb	1	; () banked
  1071  001944  5129               	movf	main@length& (0+255),w,b
  1072  001946  0101               	movlb	1	; () banked
  1073  001948  5D28               	subwf	main@i& (0+255),w,b
  1074  00194A  B0D8               	btfsc	status,0,c
  1075  00194C  D7C0               	goto	l3843
  1076  00194E  D7E6               	goto	l3857
  1077  001950                     __end_of_main:
  1078                           	opt stack 0
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           plusw0	equ	0xFEB
  1085                           fsr0h	equ	0xFEA
  1086                           fsr0l	equ	0xFE9
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1l	equ	0xFE1
  1090                           plusw2	equ	0xFDB
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function _initialize *****************
  1096 ;; Defined at:
  1097 ;;		line 46 in file "main.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;		None
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;		None
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1111 ;;      Params:         0       0       0       0       0       0       0       0       0
  1112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1114 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1115 ;;Total ram usage:        0 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:   17
  1118 ;; This function calls:
  1119 ;;		_D_PORT_Init
  1120 ;;		_D_PWM_Enable
  1121 ;;		_D_PWM_Init
  1122 ;;		_D_UART_Enable
  1123 ;;		_D_UART_Init
  1124 ;;		_D_UART_Write
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text1
  1131  001C24                     __ptext1:
  1132                           	opt stack 0
  1133  001C24                     _initialize:
  1134                           	opt stack 13
  1135                           
  1136                           ;main.c: 47: D_PORT_Init();
  1137                           
  1138                           ; BSR set to: 1
  1139                           ;incstack = 0
  1140  001C24  EC70  F010         	call	_D_PORT_Init	;wreg free
  1141                           
  1142                           ;main.c: 50: D_UART_Init("P", 19200, 1);
  1143  001C28  0E59               	movlw	low STR_12
  1144  001C2A  0101               	movlb	1	; () banked
  1145  001C2C  6F0E               	movwf	D_UART_Init@name& (0+255),b
  1146  001C2E  0E08               	movlw	high STR_12
  1147  001C30  0101               	movlb	1	; () banked
  1148  001C32  6F0F               	movwf	(D_UART_Init@name+1)& (0+255),b
  1149  001C34  0E4B               	movlw	75
  1150  001C36  0101               	movlb	1	; () banked
  1151  001C38  6F11               	movwf	(D_UART_Init@baud+1)& (0+255),b
  1152  001C3A  0E00               	movlw	0
  1153  001C3C  6F10               	movwf	D_UART_Init@baud& (0+255),b
  1154  001C3E  0E01               	movlw	1
  1155  001C40  0101               	movlb	1	; () banked
  1156  001C42  6F12               	movwf	D_UART_Init@interrupts& (0+255),b
  1157  001C44  EC63  F00B         	call	_D_UART_Init	;wreg free
  1158                           
  1159                           ;main.c: 51: D_UART_Enable(1);
  1160  001C48  0E01               	movlw	1
  1161  001C4A  EC19  F010         	call	_D_UART_Enable
  1162                           
  1163                           ;main.c: 54: D_PWM_Init();
  1164  001C4E  EC9F  F00F         	call	_D_PWM_Init	;wreg free
  1165                           
  1166                           ;main.c: 55: D_PWM_Enable(1);
  1167  001C52  0E01               	movlw	1
  1168  001C54  EC9F  F010         	call	_D_PWM_Enable
  1169                           
  1170                           ;main.c: 58: r = 128;
  1171  001C58  0E80               	movlw	128
  1172  001C5A  0100               	movlb	0	; () banked
  1173  001C5C  6F80               	movwf	_r& (0+255),b
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;main.c: 59: g = 128;
  1177  001C5E  0E80               	movlw	128
  1178  001C60  0100               	movlb	0	; () banked
  1179  001C62  6F7F               	movwf	_g& (0+255),b
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 60: b = 128;
  1183  001C64  0E80               	movlw	128
  1184  001C66  0100               	movlb	0	; () banked
  1185  001C68  6F7E               	movwf	_b& (0+255),b
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 62: D_UART_Write("I", "init");
  1189  001C6A  0E57               	movlw	low STR_13
  1190  001C6C  0101               	movlb	1	; () banked
  1191  001C6E  6F1C               	movwf	D_UART_Write@command& (0+255),b
  1192  001C70  0E08               	movlw	high STR_13
  1193  001C72  0101               	movlb	1	; () banked
  1194  001C74  6F1D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1195  001C76  0E24               	movlw	low STR_14
  1196  001C78  0101               	movlb	1	; () banked
  1197  001C7A  6F1E               	movwf	D_UART_Write@data& (0+255),b
  1198  001C7C  0E08               	movlw	high STR_14
  1199  001C7E  0101               	movlb	1	; () banked
  1200  001C80  6F1F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1201  001C82  ECF9  F00A         	call	_D_UART_Write	;wreg free
  1202  001C86  0012               	return		;funcret
  1203  001C88                     __end_of_initialize:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           postinc0	equ	0xFEE
  1210                           plusw0	equ	0xFEB
  1211                           fsr0h	equ	0xFEA
  1212                           fsr0l	equ	0xFE9
  1213                           wreg	equ	0xFE8
  1214                           postdec1	equ	0xFE5
  1215                           fsr1l	equ	0xFE1
  1216                           plusw2	equ	0xFDB
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function _D_UART_Write *****************
  1222 ;; Defined at:
  1223 ;;		line 271 in file "Drivers/UART_Driver.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  command         2   28[BANK1 ] PTR const unsigned char 
  1226 ;;		 -> STR_13(2), 
  1227 ;;  data            2   30[BANK1 ] PTR const unsigned char 
  1228 ;;		 -> STR_14(5), 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1240 ;;      Params:         0       0       4       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1243 ;;      Totals:         0       0       5       0       0       0       0       0       0
  1244 ;;Total ram usage:        5 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:   16
  1247 ;; This function calls:
  1248 ;;		_printf
  1249 ;; This function is called by:
  1250 ;;		_initialize
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text2
  1255  0015F2                     __ptext2:
  1256                           	opt stack 0
  1257  0015F2                     _D_UART_Write:
  1258                           	opt stack 13
  1259                           
  1260                           ;UART_Driver.c: 272: printf(startCharacter);
  1261                           
  1262                           ;incstack = 0
  1263  0015F2  C040  F10C         	movff	_startCharacter,printf@f
  1264  0015F6  C041  F10D         	movff	_startCharacter+1,printf@f+1
  1265  0015FA  0101               	movlb	1	; () banked
  1266  0015FC  510C               	movf	printf@f& (0+255),w,b
  1267  0015FE  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1268  001600  A4D8               	btfss	status,2,c
  1269  001602  0E00               	movlw	low (__mediumconst shr (0+16))
  1270  001604  6F0E               	movwf	(printf@f+2)& (0+255),b
  1271  001606  EC29  F007         	call	_printf	;wreg free
  1272                           
  1273                           ;UART_Driver.c: 274: printf(messageCharacter);
  1274  00160A  C0E7  F10C         	movff	_messageCharacter,printf@f
  1275  00160E  C0E8  F10D         	movff	_messageCharacter+1,printf@f+1
  1276  001612  0101               	movlb	1	; () banked
  1277  001614  510C               	movf	printf@f& (0+255),w,b
  1278  001616  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1279  001618  A4D8               	btfss	status,2,c
  1280  00161A  0E00               	movlw	low (__mediumconst shr (0+16))
  1281  00161C  6F0E               	movwf	(printf@f+2)& (0+255),b
  1282  00161E  EC29  F007         	call	_printf	;wreg free
  1283                           
  1284                           ;UART_Driver.c: 275: printf(deviceName);
  1285  001622  C0E4  F10C         	movff	_deviceName,printf@f
  1286  001626  C0E5  F10D         	movff	_deviceName+1,printf@f+1
  1287  00162A  C0E6  F10E         	movff	_deviceName+2,printf@f+2
  1288  00162E  EC29  F007         	call	_printf	;wreg free
  1289                           
  1290                           ;UART_Driver.c: 277: printf(":");printf(command);
  1291  001632  0E65               	movlw	low STR_7
  1292  001634  0101               	movlb	1	; () banked
  1293  001636  6F0C               	movwf	printf@f& (0+255),b
  1294  001638  0E08               	movlw	high STR_7
  1295  00163A  0101               	movlb	1	; () banked
  1296  00163C  6F0D               	movwf	(printf@f+1)& (0+255),b
  1297  00163E  0101               	movlb	1	; () banked
  1298  001640  510C               	movf	printf@f& (0+255),w,b
  1299  001642  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1300  001644  A4D8               	btfss	status,2,c
  1301  001646  0E00               	movlw	low (__mediumconst shr (0+16))
  1302  001648  6F0E               	movwf	(printf@f+2)& (0+255),b
  1303  00164A  EC29  F007         	call	_printf	;wreg free
  1304  00164E  C11C  F10C         	movff	D_UART_Write@command,printf@f
  1305  001652  C11D  F10D         	movff	D_UART_Write@command+1,printf@f+1
  1306  001656  0101               	movlb	1	; () banked
  1307  001658  510C               	movf	printf@f& (0+255),w,b
  1308  00165A  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1309  00165C  A4D8               	btfss	status,2,c
  1310  00165E  0E00               	movlw	low (__mediumconst shr (0+16))
  1311  001660  6F0E               	movwf	(printf@f+2)& (0+255),b
  1312  001662  EC29  F007         	call	_printf	;wreg free
  1313                           
  1314                           ;UART_Driver.c: 279: printf(":");printf(data);
  1315  001666  0E65               	movlw	low STR_7
  1316  001668  0101               	movlb	1	; () banked
  1317  00166A  6F0C               	movwf	printf@f& (0+255),b
  1318  00166C  0E08               	movlw	high STR_7
  1319  00166E  0101               	movlb	1	; () banked
  1320  001670  6F0D               	movwf	(printf@f+1)& (0+255),b
  1321  001672  0101               	movlb	1	; () banked
  1322  001674  510C               	movf	printf@f& (0+255),w,b
  1323  001676  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1324  001678  A4D8               	btfss	status,2,c
  1325  00167A  0E00               	movlw	low (__mediumconst shr (0+16))
  1326  00167C  6F0E               	movwf	(printf@f+2)& (0+255),b
  1327  00167E  EC29  F007         	call	_printf	;wreg free
  1328  001682  C11E  F10C         	movff	D_UART_Write@data,printf@f
  1329  001686  C11F  F10D         	movff	D_UART_Write@data+1,printf@f+1
  1330  00168A  0101               	movlb	1	; () banked
  1331  00168C  510C               	movf	printf@f& (0+255),w,b
  1332  00168E  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1333  001690  A4D8               	btfss	status,2,c
  1334  001692  0E00               	movlw	low (__mediumconst shr (0+16))
  1335  001694  6F0E               	movwf	(printf@f+2)& (0+255),b
  1336  001696  EC29  F007         	call	_printf	;wreg free
  1337                           
  1338                           ;UART_Driver.c: 281: printf(stopCharacter);
  1339  00169A  C042  F10C         	movff	_stopCharacter,printf@f
  1340  00169E  C043  F10D         	movff	_stopCharacter+1,printf@f+1
  1341  0016A2  0101               	movlb	1	; () banked
  1342  0016A4  510C               	movf	printf@f& (0+255),w,b
  1343  0016A6  110D               	iorwf	(printf@f+1)& (0+255),w,b
  1344  0016A8  A4D8               	btfss	status,2,c
  1345  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  1346  0016AC  6F0E               	movwf	(printf@f+2)& (0+255),b
  1347  0016AE  EC29  F007         	call	_printf	;wreg free
  1348                           
  1349                           ;UART_Driver.c: 282: _delay((unsigned long)((1)*(48000000/4000.0)));
  1350  0016B2  0E10               	movlw	16
  1351  0016B4  0101               	movlb	1	; () banked
  1352  0016B6  6F20               	movwf	??_D_UART_Write& (0+255),b
  1353  0016B8  0E94               	movlw	148
  1354  0016BA                     u3447:
  1355  0016BA  2EE8               	decfsz	wreg,f,c
  1356  0016BC  D7FE               	bra	u3447
  1357  0016BE  2F20               	decfsz	??_D_UART_Write& (0+255),f,b
  1358  0016C0  D7FC               	bra	u3447
  1359  0016C2  F000               	nop	
  1360  0016C4  0012               	return		;funcret
  1361  0016C6                     __end_of_D_UART_Write:
  1362                           	opt stack 0
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           postinc0	equ	0xFEE
  1368                           plusw0	equ	0xFEB
  1369                           fsr0h	equ	0xFEA
  1370                           fsr0l	equ	0xFE9
  1371                           wreg	equ	0xFE8
  1372                           postdec1	equ	0xFE5
  1373                           fsr1l	equ	0xFE1
  1374                           plusw2	equ	0xFDB
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _D_UART_Init *****************
  1380 ;; Defined at:
  1381 ;;		line 233 in file "Drivers/UART_Driver.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  name            2   14[BANK1 ] PTR const unsigned char 
  1384 ;;		 -> STR_12(2), 
  1385 ;;  baud            2   16[BANK1 ] unsigned int 
  1386 ;;  interrupts      1   18[BANK1 ] unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1398 ;;      Params:         0       0       5       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1401 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1402 ;;Total ram usage:        9 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:   13
  1405 ;; This function calls:
  1406 ;;		_D_UART_Enable
  1407 ;;		___aldiv
  1408 ;; This function is called by:
  1409 ;;		_initialize
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text3
  1414  0016C6                     __ptext3:
  1415                           	opt stack 0
  1416  0016C6                     _D_UART_Init:
  1417                           	opt stack 16
  1418                           
  1419                           ;UART_Driver.c: 235: TRISCbits.TRISC6 = 0;
  1420                           
  1421                           ;incstack = 0
  1422  0016C6  9C94               	bcf	3988,6,c	;volatile
  1423                           
  1424                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 1;
  1425  0016C8  8E94               	bsf	3988,7,c	;volatile
  1426                           
  1427                           ;UART_Driver.c: 239: deviceName = name;
  1428  0016CA  C10E  F0E4         	movff	D_UART_Init@name,_deviceName
  1429  0016CE  C10F  F0E5         	movff	D_UART_Init@name+1,_deviceName+1
  1430  0016D2  0100               	movlb	0	; () banked
  1431  0016D4  51E4               	movf	_deviceName& (0+255),w,b
  1432  0016D6  11E5               	iorwf	(_deviceName+1)& (0+255),w,b
  1433  0016D8  A4D8               	btfss	status,2,c
  1434  0016DA  0E00               	movlw	low (__mediumconst shr (0+16))
  1435  0016DC  6FE6               	movwf	(_deviceName+2)& (0+255),b
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;UART_Driver.c: 240: D_UART_ReadFlag = 0;
  1439  0016DE  0E00               	movlw	0
  1440  0016E0  0100               	movlb	0	; () banked
  1441  0016E2  6F7D               	movwf	_D_UART_ReadFlag& (0+255),b
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;UART_Driver.c: 243: D_UART_Enable(0);
  1445  0016E4  0E00               	movlw	0
  1446  0016E6  EC19  F010         	call	_D_UART_Enable
  1447                           
  1448                           ;UART_Driver.c: 246: TXSTAbits.TX9 = 0;
  1449  0016EA  9CAC               	bcf	4012,6,c	;volatile
  1450                           
  1451                           ;UART_Driver.c: 247: TXSTAbits.SYNC = 0;
  1452  0016EC  98AC               	bcf	4012,4,c	;volatile
  1453                           
  1454                           ;UART_Driver.c: 248: TXSTAbits.BRGH = 0;
  1455  0016EE  94AC               	bcf	4012,2,c	;volatile
  1456                           
  1457                           ;UART_Driver.c: 251: RCSTAbits.RX9 = 0;
  1458  0016F0  9CAB               	bcf	4011,6,c	;volatile
  1459                           
  1460                           ;UART_Driver.c: 254: BAUDCONbits.RXDTP = 0;
  1461  0016F2  9AB8               	bcf	4024,5,c	;volatile
  1462                           
  1463                           ;UART_Driver.c: 255: BAUDCONbits.TXCKP = 0;
  1464  0016F4  98B8               	bcf	4024,4,c	;volatile
  1465                           
  1466                           ;UART_Driver.c: 256: BAUDCONbits.BRG16 = 0;
  1467  0016F6  96B8               	bcf	4024,3,c	;volatile
  1468                           
  1469                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1470  0016F8  C110  F104         	movff	D_UART_Init@baud,___aldiv@divisor
  1471  0016FC  C111  F105         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1472  001700  0101               	movlb	1	; () banked
  1473  001702  6B06               	clrf	(___aldiv@divisor+2)& (0+255),b
  1474  001704  6B07               	clrf	(___aldiv@divisor+3)& (0+255),b
  1475  001706  0E00               	movlw	0
  1476  001708  0101               	movlb	1	; () banked
  1477  00170A  6F00               	movwf	___aldiv@dividend& (0+255),b
  1478  00170C  0E6C               	movlw	108
  1479  00170E  6F01               	movwf	(___aldiv@dividend+1)& (0+255),b
  1480  001710  0EDC               	movlw	220
  1481  001712  6F02               	movwf	(___aldiv@dividend+2)& (0+255),b
  1482  001714  0E02               	movlw	2
  1483  001716  6F03               	movwf	(___aldiv@dividend+3)& (0+255),b
  1484  001718  EC90  F009         	call	___aldiv	;wreg free
  1485  00171C  C100  F113         	movff	?___aldiv,_D_UART_Init$1748
  1486  001720  C101  F114         	movff	?___aldiv+1,_D_UART_Init$1748+1
  1487  001724  C102  F115         	movff	?___aldiv+2,_D_UART_Init$1748+2
  1488  001728  C103  F116         	movff	?___aldiv+3,_D_UART_Init$1748+3
  1489                           
  1490                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1491  00172C  C113  F100         	movff	_D_UART_Init$1748,___aldiv@dividend
  1492  001730  C114  F101         	movff	_D_UART_Init$1748+1,___aldiv@dividend+1
  1493  001734  C115  F102         	movff	_D_UART_Init$1748+2,___aldiv@dividend+2
  1494  001738  C116  F103         	movff	_D_UART_Init$1748+3,___aldiv@dividend+3
  1495  00173C  0E40               	movlw	64
  1496  00173E  0101               	movlb	1	; () banked
  1497  001740  6F04               	movwf	___aldiv@divisor& (0+255),b
  1498  001742  0E00               	movlw	0
  1499  001744  6F05               	movwf	(___aldiv@divisor+1)& (0+255),b
  1500  001746  0E00               	movlw	0
  1501  001748  6F06               	movwf	(___aldiv@divisor+2)& (0+255),b
  1502  00174A  0E00               	movlw	0
  1503  00174C  6F07               	movwf	(___aldiv@divisor+3)& (0+255),b
  1504  00174E  EC90  F009         	call	___aldiv	;wreg free
  1505  001752  0101               	movlb	1	; () banked
  1506  001754  0500               	decf	?___aldiv& (0+255),w,b
  1507  001756  6EAF               	movwf	4015,c	;volatile
  1508                           
  1509                           ; BSR set to: 1
  1510                           ;UART_Driver.c: 261: if (interrupts) {
  1511  001758  0101               	movlb	1	; () banked
  1512  00175A  5112               	movf	D_UART_Init@interrupts& (0+255),w,b
  1513  00175C  0101               	movlb	1	; () banked
  1514  00175E  B4D8               	btfsc	status,2,c
  1515  001760  0012               	return	
  1516                           
  1517                           ; BSR set to: 1
  1518                           ;UART_Driver.c: 262: RCONbits.IPEN = 1;
  1519  001762  8ED0               	bsf	4048,7,c	;volatile
  1520                           
  1521                           ;UART_Driver.c: 263: INTCONbits.GIEH = 1;
  1522  001764  8EF2               	bsf	intcon,7,c	;volatile
  1523                           
  1524                           ;UART_Driver.c: 264: INTCONbits.GIEL = 1;
  1525  001766  8CF2               	bsf	intcon,6,c	;volatile
  1526                           
  1527                           ;UART_Driver.c: 265: PIR1bits.RCIF = 0;
  1528  001768  9A9E               	bcf	3998,5,c	;volatile
  1529                           
  1530                           ;UART_Driver.c: 266: IPR1bits.RCIP = 0;
  1531  00176A  9A9F               	bcf	3999,5,c	;volatile
  1532                           
  1533                           ;UART_Driver.c: 267: PIE1bits.RCIE = 1;
  1534  00176C  8A9D               	bsf	3997,5,c	;volatile
  1535  00176E  0012               	return	
  1536  001770                     __end_of_D_UART_Init:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           intcon	equ	0xFF2
  1543                           postinc0	equ	0xFEE
  1544                           plusw0	equ	0xFEB
  1545                           fsr0h	equ	0xFEA
  1546                           fsr0l	equ	0xFE9
  1547                           wreg	equ	0xFE8
  1548                           postdec1	equ	0xFE5
  1549                           fsr1l	equ	0xFE1
  1550                           plusw2	equ	0xFDB
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function ___aldiv *****************
  1556 ;; Defined at:
  1557 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/aldiv.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  dividend        4    0[BANK1 ] long 
  1560 ;;  divisor         4    4[BANK1 ] long 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  quotient        4   10[BANK1 ] long 
  1563 ;;  sign            1    9[BANK1 ] unsigned char 
  1564 ;;  counter         1    8[BANK1 ] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  4    0[BANK1 ] long 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1574 ;;      Params:         0       0       8       0       0       0       0       0       0
  1575 ;;      Locals:         0       0       6       0       0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1577 ;;      Totals:         0       0      14       0       0       0       0       0       0
  1578 ;;Total ram usage:       14 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:   12
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_D_UART_Init
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text4
  1589  001320                     __ptext4:
  1590                           	opt stack 0
  1591  001320                     ___aldiv:
  1592                           	opt stack 16
  1593                           
  1594                           ; BSR set to: 1
  1595                           ;incstack = 0
  1596  001320  0E00               	movlw	0
  1597  001322  0101               	movlb	1	; () banked
  1598  001324  6F09               	movwf	___aldiv@sign& (0+255),b
  1599                           
  1600                           ; BSR set to: 1
  1601  001326  0101               	movlb	1	; () banked
  1602  001328  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1603  00132A  D00C               	goto	l3315
  1604                           
  1605                           ; BSR set to: 1
  1606  00132C  0101               	movlb	1	; () banked
  1607  00132E  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1608  001330  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1609  001332  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1610  001334  6D04               	negf	___aldiv@divisor& (0+255),b
  1611  001336  0E00               	movlw	0
  1612  001338  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1613  00133A  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1614  00133C  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1615                           
  1616                           ; BSR set to: 1
  1617  00133E  0E01               	movlw	1
  1618  001340  0101               	movlb	1	; () banked
  1619  001342  6F09               	movwf	___aldiv@sign& (0+255),b
  1620  001344                     l3315:
  1621                           
  1622                           ; BSR set to: 1
  1623  001344  0101               	movlb	1	; () banked
  1624  001346  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1625  001348  D00C               	goto	l3321
  1626                           
  1627                           ; BSR set to: 1
  1628  00134A  0101               	movlb	1	; () banked
  1629  00134C  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1630  00134E  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1631  001350  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1632  001352  6D00               	negf	___aldiv@dividend& (0+255),b
  1633  001354  0E00               	movlw	0
  1634  001356  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1635  001358  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1636  00135A  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1637                           
  1638                           ; BSR set to: 1
  1639  00135C  0E01               	movlw	1
  1640  00135E  0101               	movlb	1	; () banked
  1641  001360  1B09               	xorwf	___aldiv@sign& (0+255),f,b
  1642  001362                     l3321:
  1643                           
  1644                           ; BSR set to: 1
  1645  001362  0E00               	movlw	0
  1646  001364  0101               	movlb	1	; () banked
  1647  001366  6F0A               	movwf	___aldiv@quotient& (0+255),b
  1648  001368  0E00               	movlw	0
  1649  00136A  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1650  00136C  0E00               	movlw	0
  1651  00136E  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1652  001370  0E00               	movlw	0
  1653  001372  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1654                           
  1655                           ; BSR set to: 1
  1656  001374  0101               	movlb	1	; () banked
  1657  001376  5104               	movf	___aldiv@divisor& (0+255),w,b
  1658  001378  0101               	movlb	1	; () banked
  1659  00137A  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1660  00137C  0101               	movlb	1	; () banked
  1661  00137E  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1662  001380  0101               	movlb	1	; () banked
  1663  001382  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1664  001384  B4D8               	btfsc	status,2,c
  1665  001386  D042               	goto	l3343
  1666                           
  1667                           ; BSR set to: 1
  1668  001388  0E01               	movlw	1
  1669  00138A  0101               	movlb	1	; () banked
  1670  00138C  6F08               	movwf	___aldiv@counter& (0+255),b
  1671  00138E  D008               	goto	l3329
  1672  001390                     l3327:
  1673                           
  1674                           ; BSR set to: 1
  1675  001390  0101               	movlb	1	; () banked
  1676  001392  90D8               	bcf	status,0,c
  1677  001394  3704               	rlcf	___aldiv@divisor& (0+255),f,b
  1678  001396  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1679  001398  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1680  00139A  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1681  00139C  0101               	movlb	1	; () banked
  1682  00139E  2B08               	incf	___aldiv@counter& (0+255),f,b
  1683  0013A0                     l3329:
  1684                           
  1685                           ; BSR set to: 1
  1686  0013A0  0101               	movlb	1	; () banked
  1687  0013A2  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1688  0013A4  D7F5               	goto	l3327
  1689  0013A6                     l3331:
  1690                           
  1691                           ; BSR set to: 1
  1692  0013A6  0101               	movlb	1	; () banked
  1693  0013A8  90D8               	bcf	status,0,c
  1694  0013AA  370A               	rlcf	___aldiv@quotient& (0+255),f,b
  1695  0013AC  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1696  0013AE  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1697  0013B0  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1698                           
  1699                           ; BSR set to: 1
  1700  0013B2  0101               	movlb	1	; () banked
  1701  0013B4  5104               	movf	___aldiv@divisor& (0+255),w,b
  1702  0013B6  0101               	movlb	1	; () banked
  1703  0013B8  5D00               	subwf	___aldiv@dividend& (0+255),w,b
  1704  0013BA  0101               	movlb	1	; () banked
  1705  0013BC  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1706  0013BE  0101               	movlb	1	; () banked
  1707  0013C0  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1708  0013C2  0101               	movlb	1	; () banked
  1709  0013C4  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1710  0013C6  0101               	movlb	1	; () banked
  1711  0013C8  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1712  0013CA  0101               	movlb	1	; () banked
  1713  0013CC  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1714  0013CE  0101               	movlb	1	; () banked
  1715  0013D0  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1716  0013D2  A0D8               	btfss	status,0,c
  1717  0013D4  D012               	goto	l3339
  1718                           
  1719                           ; BSR set to: 1
  1720  0013D6  0101               	movlb	1	; () banked
  1721  0013D8  5104               	movf	___aldiv@divisor& (0+255),w,b
  1722  0013DA  0101               	movlb	1	; () banked
  1723  0013DC  5F00               	subwf	___aldiv@dividend& (0+255),f,b
  1724  0013DE  0101               	movlb	1	; () banked
  1725  0013E0  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1726  0013E2  0101               	movlb	1	; () banked
  1727  0013E4  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1728  0013E6  0101               	movlb	1	; () banked
  1729  0013E8  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1730  0013EA  0101               	movlb	1	; () banked
  1731  0013EC  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1732  0013EE  0101               	movlb	1	; () banked
  1733  0013F0  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1734  0013F2  0101               	movlb	1	; () banked
  1735  0013F4  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1736                           
  1737                           ; BSR set to: 1
  1738  0013F6  0101               	movlb	1	; () banked
  1739  0013F8  810A               	bsf	___aldiv@quotient& (0+255),0,b
  1740  0013FA                     l3339:
  1741                           
  1742                           ; BSR set to: 1
  1743  0013FA  0101               	movlb	1	; () banked
  1744  0013FC  90D8               	bcf	status,0,c
  1745  0013FE  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1746  001400  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1747  001402  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1748  001404  3304               	rrcf	___aldiv@divisor& (0+255),f,b
  1749                           
  1750                           ; BSR set to: 1
  1751  001406  0101               	movlb	1	; () banked
  1752  001408  2F08               	decfsz	___aldiv@counter& (0+255),f,b
  1753  00140A  D7CD               	goto	l3331
  1754  00140C                     l3343:
  1755                           
  1756                           ; BSR set to: 1
  1757  00140C  0101               	movlb	1	; () banked
  1758  00140E  5109               	movf	___aldiv@sign& (0+255),w,b
  1759  001410  0101               	movlb	1	; () banked
  1760  001412  B4D8               	btfsc	status,2,c
  1761  001414  D009               	goto	l3347
  1762                           
  1763                           ; BSR set to: 1
  1764  001416  0101               	movlb	1	; () banked
  1765  001418  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1766  00141A  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1767  00141C  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1768  00141E  6D0A               	negf	___aldiv@quotient& (0+255),b
  1769  001420  0E00               	movlw	0
  1770  001422  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1771  001424  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1772  001426  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1773  001428                     l3347:
  1774                           
  1775                           ; BSR set to: 1
  1776  001428  C10A  F100         	movff	___aldiv@quotient,?___aldiv
  1777  00142C  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
  1778  001430  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
  1779  001434  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
  1780  001438  0012               	return	
  1781  00143A                     __end_of___aldiv:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           intcon	equ	0xFF2
  1788                           postinc0	equ	0xFEE
  1789                           plusw0	equ	0xFEB
  1790                           fsr0h	equ	0xFEA
  1791                           fsr0l	equ	0xFE9
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           plusw2	equ	0xFDB
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _D_PWM_Init *****************
  1801 ;; Defined at:
  1802 ;;		line 257 in file "Drivers/PWM_Driver.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1816 ;;      Params:         0       0       0       0       0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1819 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1820 ;;Total ram usage:        0 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:   14
  1823 ;; This function calls:
  1824 ;;		_D_TIMER0_Enable
  1825 ;;		_D_TIMER0_Init
  1826 ;; This function is called by:
  1827 ;;		_initialize
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text5
  1832  001F3E                     __ptext5:
  1833                           	opt stack 0
  1834  001F3E                     _D_PWM_Init:
  1835                           	opt stack 15
  1836                           
  1837                           ;PWM_Driver.c: 259: PWM_Red.duty_cnt = 0;
  1838                           
  1839                           ; BSR set to: 1
  1840                           ;incstack = 0
  1841  001F3E  0E00               	movlw	0
  1842  001F40  0100               	movlb	0	; () banked
  1843  001F42  6F7B               	movwf	_PWM_Red& (0+255),b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;PWM_Driver.c: 260: PWM_Red.duty_val = 0xFF;
  1847  001F44  0100               	movlb	0	; () banked
  1848  001F46  697C               	setf	(_PWM_Red+1)& (0+255),b
  1849                           
  1850                           ;PWM_Driver.c: 262: PWM_Green.duty_cnt = 0;
  1851  001F48  0E00               	movlw	0
  1852  001F4A  0100               	movlb	0	; () banked
  1853  001F4C  6F79               	movwf	_PWM_Green& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;PWM_Driver.c: 263: PWM_Green.duty_val = 0xFF;
  1857  001F4E  0100               	movlb	0	; () banked
  1858  001F50  697A               	setf	(_PWM_Green+1)& (0+255),b
  1859                           
  1860                           ;PWM_Driver.c: 265: PWM_Blue.duty_cnt = 0;
  1861  001F52  0E00               	movlw	0
  1862  001F54  0100               	movlb	0	; () banked
  1863  001F56  6F77               	movwf	_PWM_Blue& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;PWM_Driver.c: 266: PWM_Blue.duty_val = 0xFF;
  1867  001F58  0100               	movlb	0	; () banked
  1868  001F5A  6978               	setf	(_PWM_Blue+1)& (0+255),b
  1869                           
  1870                           ;PWM_Driver.c: 268: scale = 0;
  1871  001F5C  0E00               	movlw	0
  1872  001F5E  6E2F               	movwf	_scale,c
  1873                           
  1874                           ;PWM_Driver.c: 269: state = Color;
  1875  001F60  0E00               	movlw	0
  1876  001F62  6E30               	movwf	_state,c
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;PWM_Driver.c: 272: D_TIMER0_Init(0);
  1880  001F64  0E00               	movlw	0
  1881  001F66  EC0C  F00C         	call	_D_TIMER0_Init
  1882                           
  1883                           ;PWM_Driver.c: 273: D_TIMER0_Enable(0);
  1884  001F6A  0E00               	movlw	0
  1885  001F6C  EC3E  F010         	call	_D_TIMER0_Enable
  1886                           
  1887                           ;PWM_Driver.c: 276: TRISBbits.TRISB0 = 0;
  1888  001F70  9093               	bcf	3987,0,c	;volatile
  1889                           
  1890                           ;PWM_Driver.c: 277: TRISBbits.TRISB1 = 0;
  1891  001F72  9293               	bcf	3987,1,c	;volatile
  1892                           
  1893                           ;PWM_Driver.c: 278: TRISBbits.TRISB2 = 0;
  1894  001F74  9493               	bcf	3987,2,c	;volatile
  1895  001F76  0012               	return		;funcret
  1896  001F78                     __end_of_D_PWM_Init:
  1897                           	opt stack 0
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           intcon	equ	0xFF2
  1903                           postinc0	equ	0xFEE
  1904                           plusw0	equ	0xFEB
  1905                           fsr0h	equ	0xFEA
  1906                           fsr0l	equ	0xFE9
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1l	equ	0xFE1
  1910                           plusw2	equ	0xFDB
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _D_TIMER0_Init *****************
  1916 ;; Defined at:
  1917 ;;		line 30 in file "Drivers/TIMER0_Driver.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  prescale        1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  prescale        1    1[BANK1 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1931 ;;      Params:         0       0       0       0       0       0       0       0       0
  1932 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1934 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1935 ;;Total ram usage:        1 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:   13
  1938 ;; This function calls:
  1939 ;;		_D_TIMER0_Enable
  1940 ;; This function is called by:
  1941 ;;		_D_PWM_Init
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text6
  1946  001818                     __ptext6:
  1947                           	opt stack 0
  1948  001818                     _D_TIMER0_Init:
  1949                           	opt stack 15
  1950                           
  1951                           ;incstack = 0
  1952                           ;D_TIMER0_Init@prescale stored from wreg
  1953  001818  0101               	movlb	1	; () banked
  1954  00181A  6F01               	movwf	D_TIMER0_Init@prescale& (0+255),b
  1955                           
  1956                           ;TIMER0_Driver.c: 31: D_TIMER0_Enable(0);
  1957  00181C  0E00               	movlw	0
  1958  00181E  EC3E  F010         	call	_D_TIMER0_Enable
  1959                           
  1960                           ;TIMER0_Driver.c: 34: T0CONbits.T08BIT = 1;
  1961  001822  8CD5               	bsf	4053,6,c	;volatile
  1962                           
  1963                           ;TIMER0_Driver.c: 35: T0CONbits.T0CS = 0;
  1964  001824  9AD5               	bcf	4053,5,c	;volatile
  1965                           
  1966                           ;TIMER0_Driver.c: 36: T0CONbits.PSA = 1;
  1967  001826  86D5               	bsf	4053,3,c	;volatile
  1968                           
  1969                           ;TIMER0_Driver.c: 37: switch(prescale) {
  1970  001828  D021               	goto	l3205
  1971  00182A                     l39:
  1972                           
  1973                           ; BSR set to: 1
  1974  00182A  90D5               	bcf	4053,0,c	;volatile
  1975  00182C  92D5               	bcf	4053,1,c	;volatile
  1976  00182E  94D5               	bcf	4053,2,c	;volatile
  1977  001830  D038               	goto	l3207
  1978  001832                     l3191:
  1979                           
  1980                           ; BSR set to: 1
  1981  001832  50D5               	movf	4053,w,c	;volatile
  1982  001834  0BF8               	andlw	-8
  1983  001836  0901               	iorlw	1
  1984  001838  D013               	goto	L5
  1985  00183A                     l3193:
  1986                           
  1987                           ; BSR set to: 1
  1988  00183A  50D5               	movf	4053,w,c	;volatile
  1989  00183C  0BF8               	andlw	-8
  1990  00183E  0902               	iorlw	2
  1991  001840  D00F               	goto	L5
  1992  001842                     l3195:
  1993                           
  1994                           ; BSR set to: 1
  1995  001842  50D5               	movf	4053,w,c	;volatile
  1996  001844  0BF8               	andlw	-8
  1997  001846  0903               	iorlw	3
  1998  001848  D00B               	goto	L5
  1999  00184A                     l3197:
  2000                           
  2001                           ; BSR set to: 1
  2002  00184A  50D5               	movf	4053,w,c	;volatile
  2003  00184C  0BF8               	andlw	-8
  2004  00184E  0904               	iorlw	4
  2005  001850  D007               	goto	L5
  2006  001852                     l3199:
  2007                           
  2008                           ; BSR set to: 1
  2009  001852  50D5               	movf	4053,w,c	;volatile
  2010  001854  0BF8               	andlw	-8
  2011  001856  0905               	iorlw	5
  2012  001858  D003               	goto	L5
  2013  00185A                     l3201:
  2014                           
  2015                           ; BSR set to: 1
  2016  00185A  50D5               	movf	4053,w,c	;volatile
  2017  00185C  0BF8               	andlw	-8
  2018  00185E  0906               	iorlw	6
  2019  001860                     L5:
  2020  001860  6ED5               	movwf	4053,c	;volatile
  2021  001862  D01F               	goto	l3207
  2022  001864                     l46:
  2023                           
  2024                           ; BSR set to: 1
  2025  001864  80D5               	bsf	4053,0,c	;volatile
  2026  001866  82D5               	bsf	4053,1,c	;volatile
  2027  001868  84D5               	bsf	4053,2,c	;volatile
  2028                           
  2029                           ; BSR set to: 1
  2030                           ;TIMER0_Driver.c: 48: }
  2031  00186A  D01B               	goto	l3207
  2032  00186C                     l3205:
  2033  00186C  0101               	movlb	1	; () banked
  2034  00186E  5101               	movf	D_TIMER0_Init@prescale& (0+255),w,b
  2035                           
  2036                           ; Switch size 1, requested type "space"
  2037                           ; Number of cases is 8, Range of values is 0 to 128
  2038                           ; switch strategies available:
  2039                           ; Name         Instructions Cycles
  2040                           ; simple_byte           25    13 (average)
  2041                           ;	Chosen strategy is simple_byte
  2042  001870  0A00               	xorlw	0	; case 0
  2043  001872  B4D8               	btfsc	status,2,c
  2044  001874  D7F7               	goto	l46
  2045  001876  0A02               	xorlw	2	; case 2
  2046  001878  B4D8               	btfsc	status,2,c
  2047  00187A  D7D7               	goto	l39
  2048  00187C  0A06               	xorlw	6	; case 4
  2049  00187E  B4D8               	btfsc	status,2,c
  2050  001880  D7D8               	goto	l3191
  2051  001882  0A0C               	xorlw	12	; case 8
  2052  001884  B4D8               	btfsc	status,2,c
  2053  001886  D7D9               	goto	l3193
  2054  001888  0A18               	xorlw	24	; case 16
  2055  00188A  B4D8               	btfsc	status,2,c
  2056  00188C  D7DA               	goto	l3195
  2057  00188E  0A30               	xorlw	48	; case 32
  2058  001890  B4D8               	btfsc	status,2,c
  2059  001892  D7DB               	goto	l3197
  2060  001894  0A60               	xorlw	96	; case 64
  2061  001896  B4D8               	btfsc	status,2,c
  2062  001898  D7DC               	goto	l3199
  2063  00189A  0AC0               	xorlw	192	; case 128
  2064  00189C  B4D8               	btfsc	status,2,c
  2065  00189E  D7DD               	goto	l3201
  2066  0018A0  D7C4               	goto	l39
  2067  0018A2                     l3207:
  2068                           
  2069                           ; BSR set to: 1
  2070                           ;TIMER0_Driver.c: 49: TMR0L = 0;
  2071  0018A2  0E00               	movlw	0
  2072  0018A4  6ED6               	movwf	4054,c	;volatile
  2073                           
  2074                           ;TIMER0_Driver.c: 50: TMR0H = 0;
  2075  0018A6  0E00               	movlw	0
  2076  0018A8  6ED7               	movwf	4055,c	;volatile
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;TIMER0_Driver.c: 53: RCONbits.IPEN = 1;
  2080  0018AA  8ED0               	bsf	4048,7,c	;volatile
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;TIMER0_Driver.c: 54: INTCONbits.GIEH = 1;
  2084  0018AC  8EF2               	bsf	intcon,7,c	;volatile
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;TIMER0_Driver.c: 55: INTCONbits.GIEL = 1;
  2088  0018AE  8CF2               	bsf	intcon,6,c	;volatile
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;TIMER0_Driver.c: 56: INTCONbits.TMR0IE = 0;
  2092  0018B0  9AF2               	bcf	intcon,5,c	;volatile
  2093                           
  2094                           ; BSR set to: 1
  2095                           ;TIMER0_Driver.c: 57: INTCONbits.TMR0IF = 0;
  2096  0018B2  94F2               	bcf	intcon,2,c	;volatile
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;TIMER0_Driver.c: 58: INTCON2bits.TMR0IP = 1;
  2100  0018B4  84F1               	bsf	intcon2,2,c	;volatile
  2101                           
  2102                           ; BSR set to: 1
  2103  0018B6  0012               	return		;funcret
  2104  0018B8                     __end_of_D_TIMER0_Init:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           intcon	equ	0xFF2
  2111                           intcon2	equ	0xFF1
  2112                           postinc0	equ	0xFEE
  2113                           plusw0	equ	0xFEB
  2114                           fsr0h	equ	0xFEA
  2115                           fsr0l	equ	0xFE9
  2116                           wreg	equ	0xFE8
  2117                           postdec1	equ	0xFE5
  2118                           fsr1l	equ	0xFE1
  2119                           plusw2	equ	0xFDB
  2120                           fsr2h	equ	0xFDA
  2121                           fsr2l	equ	0xFD9
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function _D_PWM_Enable *****************
  2125 ;; Defined at:
  2126 ;;		line 281 in file "Drivers/PWM_Driver.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  enable          1    wreg     unsigned char 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  enable          1    1[BANK1 ] unsigned char 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  1    wreg      void 
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2140 ;;      Params:         0       0       0       0       0       0       0       0       0
  2141 ;;      Locals:         0       0       1       0       0       0       0       0       0
  2142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2143 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2144 ;;Total ram usage:        1 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:   13
  2147 ;; This function calls:
  2148 ;;		_D_TIMER0_Enable
  2149 ;; This function is called by:
  2150 ;;		_initialize
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text7
  2155  00213E                     __ptext7:
  2156                           	opt stack 0
  2157  00213E                     _D_PWM_Enable:
  2158                           	opt stack 16
  2159                           
  2160                           ; BSR set to: 1
  2161                           ;incstack = 0
  2162                           ;D_PWM_Enable@enable stored from wreg
  2163  00213E  0101               	movlb	1	; () banked
  2164  002140  6F01               	movwf	D_PWM_Enable@enable& (0+255),b
  2165                           
  2166                           ;PWM_Driver.c: 282: D_TIMER0_Enable(enable);
  2167  002142  0101               	movlb	1	; () banked
  2168  002144  5101               	movf	D_PWM_Enable@enable& (0+255),w,b
  2169  002146  EC3E  F010         	call	_D_TIMER0_Enable
  2170  00214A  0012               	return		;funcret
  2171  00214C                     __end_of_D_PWM_Enable:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           intcon2	equ	0xFF1
  2179                           postinc0	equ	0xFEE
  2180                           plusw0	equ	0xFEB
  2181                           fsr0h	equ	0xFEA
  2182                           fsr0l	equ	0xFE9
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           fsr1l	equ	0xFE1
  2186                           plusw2	equ	0xFDB
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _D_TIMER0_Enable *****************
  2192 ;; Defined at:
  2193 ;;		line 61 in file "Drivers/TIMER0_Driver.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  enable          1    wreg     unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  enable          1    0[BANK1 ] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         0       0       1       0       0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2210 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2211 ;;Total ram usage:        1 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:   12
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_D_TIMER0_Init
  2218 ;;		_D_PWM_Init
  2219 ;;		_D_PWM_Enable
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text8
  2224  00207C                     __ptext8:
  2225                           	opt stack 0
  2226  00207C                     _D_TIMER0_Enable:
  2227                           	opt stack 15
  2228                           
  2229                           ;incstack = 0
  2230                           ;D_TIMER0_Enable@enable stored from wreg
  2231  00207C  0101               	movlb	1	; () banked
  2232  00207E  6F00               	movwf	D_TIMER0_Enable@enable& (0+255),b
  2233                           
  2234                           ;TIMER0_Driver.c: 62: if (enable) {
  2235  002080  0101               	movlb	1	; () banked
  2236  002082  5100               	movf	D_TIMER0_Enable@enable& (0+255),w,b
  2237  002084  0101               	movlb	1	; () banked
  2238  002086  B4D8               	btfsc	status,2,c
  2239  002088  D005               	goto	l50
  2240                           
  2241                           ; BSR set to: 1
  2242                           ;TIMER0_Driver.c: 63: T0CONbits.TMR0ON = 1;
  2243  00208A  8ED5               	bsf	4053,7,c	;volatile
  2244                           
  2245                           ;TIMER0_Driver.c: 64: INTCONbits.TMR0IE = 1;
  2246  00208C  8AF2               	bsf	intcon,5,c	;volatile
  2247                           
  2248                           ; BSR set to: 1
  2249                           ;TIMER0_Driver.c: 65: D_TIMER0_Flag = 0;
  2250  00208E  0E00               	movlw	0
  2251  002090  6E2B               	movwf	_D_TIMER0_Flag,c
  2252                           
  2253                           ;TIMER0_Driver.c: 66: } else {
  2254  002092  0012               	return	
  2255  002094                     l50:
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;TIMER0_Driver.c: 67: T0CONbits.TMR0ON = 0;
  2259  002094  9ED5               	bcf	4053,7,c	;volatile
  2260                           
  2261                           ;TIMER0_Driver.c: 68: INTCONbits.TMR0IE = 0;
  2262  002096  9AF2               	bcf	intcon,5,c	;volatile
  2263                           
  2264                           ; BSR set to: 1
  2265                           ;TIMER0_Driver.c: 69: D_TIMER0_Flag = 0;
  2266  002098  0E00               	movlw	0
  2267  00209A  6E2B               	movwf	_D_TIMER0_Flag,c
  2268  00209C  0012               	return	
  2269  00209E                     __end_of_D_TIMER0_Enable:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           intcon	equ	0xFF2
  2276                           intcon2	equ	0xFF1
  2277                           postinc0	equ	0xFEE
  2278                           plusw0	equ	0xFEB
  2279                           fsr0h	equ	0xFEA
  2280                           fsr0l	equ	0xFE9
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1l	equ	0xFE1
  2284                           plusw2	equ	0xFDB
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _D_PORT_Init *****************
  2290 ;; Defined at:
  2291 ;;		line 31 in file "Drivers/PORT_Driver.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2305 ;;      Params:         0       0       0       0       0       0       0       0       0
  2306 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2308 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2309 ;;Total ram usage:        0 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:   12
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_initialize
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text9
  2320  0020E0                     __ptext9:
  2321                           	opt stack 0
  2322  0020E0                     _D_PORT_Init:
  2323                           	opt stack 17
  2324                           
  2325                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  2326                           
  2327                           ; BSR set to: 1
  2328                           ;incstack = 0
  2329  0020E0  0E00               	movlw	0
  2330  0020E2  6E92               	movwf	3986,c	;volatile
  2331  0020E4  0E00               	movlw	0
  2332  0020E6  6E80               	movwf	3968,c	;volatile
  2333                           
  2334                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  2335  0020E8  0E00               	movlw	0
  2336  0020EA  6E93               	movwf	3987,c	;volatile
  2337  0020EC  0E00               	movlw	0
  2338  0020EE  6E81               	movwf	3969,c	;volatile
  2339                           
  2340                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  2341  0020F0  0E00               	movlw	0
  2342  0020F2  6E94               	movwf	3988,c	;volatile
  2343  0020F4  0E00               	movlw	0
  2344  0020F6  6E82               	movwf	3970,c	;volatile
  2345                           
  2346                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  2347  0020F8  0E0F               	movlw	15
  2348  0020FA  6EC1               	movwf	4033,c	;volatile
  2349  0020FC  0012               	return		;funcret
  2350  0020FE                     __end_of_D_PORT_Init:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           intcon	equ	0xFF2
  2357                           intcon2	equ	0xFF1
  2358                           postinc0	equ	0xFEE
  2359                           plusw0	equ	0xFEB
  2360                           fsr0h	equ	0xFEA
  2361                           fsr0l	equ	0xFE9
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           plusw2	equ	0xFDB
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _handle_message *****************
  2371 ;; Defined at:
  2372 ;;		line 90 in file "main.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  msg             6   33[BANK1 ] struct .
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2386 ;;      Params:         0       0       6       0       0       0       0       0       0
  2387 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2388 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2389 ;;      Totals:         0       0       7       0       0       0       0       0       0
  2390 ;;Total ram usage:        7 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:   17
  2393 ;; This function calls:
  2394 ;;		_D_PWM_Fade
  2395 ;;		_D_PWM_Flash
  2396 ;;		_D_PWM_GetBlue
  2397 ;;		_D_PWM_GetGreen
  2398 ;;		_D_PWM_GetRed
  2399 ;;		_D_PWM_GetScale
  2400 ;;		_D_PWM_GetState
  2401 ;;		_D_PWM_ScaleDown
  2402 ;;		_D_PWM_ScaleUp
  2403 ;;		_D_PWM_SetRGB
  2404 ;;		_D_PWM_Smooth
  2405 ;;		_D_PWM_Strobe
  2406 ;;		_D_UART_WriteInt
  2407 ;;		_strToInt
  2408 ;;		_strcmp
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text10
  2415  000868                     __ptext10:
  2416                           	opt stack 0
  2417  000868                     _handle_message:
  2418                           	opt stack 13
  2419                           
  2420                           ;main.c: 91: if (strcmp(msg.command, "R") == 0) {
  2421                           
  2422                           ;incstack = 0
  2423  000868  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2424  00086C  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2425  000870  0E5B               	movlw	low STR_15
  2426  000872  0101               	movlb	1	; () banked
  2427  000874  6F02               	movwf	strcmp@s2& (0+255),b
  2428  000876  0E08               	movlw	high STR_15
  2429  000878  0101               	movlb	1	; () banked
  2430  00087A  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2431  00087C  EC01  F00F         	call	_strcmp	;wreg free
  2432  000880  0101               	movlb	1	; () banked
  2433  000882  5100               	movf	?_strcmp& (0+255),w,b
  2434  000884  0101               	movlb	1	; () banked
  2435  000886  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2436  000888  A4D8               	btfss	status,2,c
  2437  00088A  D011               	goto	l3755
  2438                           
  2439                           ; BSR set to: 1
  2440                           ;main.c: 92: r = strToInt(msg.message);
  2441  00088C  C125  F100         	movff	handle_message@msg+4,strToInt@str
  2442  000890  C126  F101         	movff	handle_message@msg+5,strToInt@str+1
  2443  000894  ECA4  F00E         	call	_strToInt	;wreg free
  2444  000898  0100               	movlb	0	; () banked
  2445  00089A  6F80               	movwf	_r& (0+255),b
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;main.c: 93: D_PWM_SetRGB(r, g, b);
  2449  00089C  C07F  F105         	movff	_g,D_PWM_SetRGB@g
  2450  0008A0  C07E  F106         	movff	_b,D_PWM_SetRGB@b
  2451  0008A4  0100               	movlb	0	; () banked
  2452  0008A6  5180               	movf	_r& (0+255),w,b
  2453  0008A8  EC7F  F010         	call	_D_PWM_SetRGB
  2454                           
  2455                           ;main.c: 94: return;
  2456  0008AC  0012               	return	
  2457  0008AE                     l3755:
  2458                           
  2459                           ;main.c: 95: }
  2460                           ;main.c: 97: if (strcmp(msg.command, "G") == 0) {
  2461  0008AE  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2462  0008B2  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2463  0008B6  0E55               	movlw	low STR_16
  2464  0008B8  0101               	movlb	1	; () banked
  2465  0008BA  6F02               	movwf	strcmp@s2& (0+255),b
  2466  0008BC  0E08               	movlw	high STR_16
  2467  0008BE  0101               	movlb	1	; () banked
  2468  0008C0  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2469  0008C2  EC01  F00F         	call	_strcmp	;wreg free
  2470  0008C6  0101               	movlb	1	; () banked
  2471  0008C8  5100               	movf	?_strcmp& (0+255),w,b
  2472  0008CA  0101               	movlb	1	; () banked
  2473  0008CC  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2474  0008CE  A4D8               	btfss	status,2,c
  2475  0008D0  D011               	goto	l3763
  2476                           
  2477                           ; BSR set to: 1
  2478                           ;main.c: 98: g = strToInt(msg.message);
  2479  0008D2  C125  F100         	movff	handle_message@msg+4,strToInt@str
  2480  0008D6  C126  F101         	movff	handle_message@msg+5,strToInt@str+1
  2481  0008DA  ECA4  F00E         	call	_strToInt	;wreg free
  2482  0008DE  0100               	movlb	0	; () banked
  2483  0008E0  6F7F               	movwf	_g& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 99: D_PWM_SetRGB(r, g, b);
  2487  0008E2  C07F  F105         	movff	_g,D_PWM_SetRGB@g
  2488  0008E6  C07E  F106         	movff	_b,D_PWM_SetRGB@b
  2489  0008EA  0100               	movlb	0	; () banked
  2490  0008EC  5180               	movf	_r& (0+255),w,b
  2491  0008EE  EC7F  F010         	call	_D_PWM_SetRGB
  2492                           
  2493                           ;main.c: 100: return;
  2494  0008F2  0012               	return	
  2495  0008F4                     l3763:
  2496                           
  2497                           ;main.c: 101: }
  2498                           ;main.c: 103: if (strcmp(msg.command, "B") == 0) {
  2499  0008F4  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2500  0008F8  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2501  0008FC  0E33               	movlw	low (STR_25+2)
  2502  0008FE  0101               	movlb	1	; () banked
  2503  000900  6F02               	movwf	strcmp@s2& (0+255),b
  2504  000902  0E08               	movlw	high (STR_25+2)
  2505  000904  0101               	movlb	1	; () banked
  2506  000906  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2507  000908  EC01  F00F         	call	_strcmp	;wreg free
  2508  00090C  0101               	movlb	1	; () banked
  2509  00090E  5100               	movf	?_strcmp& (0+255),w,b
  2510  000910  0101               	movlb	1	; () banked
  2511  000912  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2512  000914  A4D8               	btfss	status,2,c
  2513  000916  D011               	goto	l3771
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;main.c: 104: b = strToInt(msg.message);
  2517  000918  C125  F100         	movff	handle_message@msg+4,strToInt@str
  2518  00091C  C126  F101         	movff	handle_message@msg+5,strToInt@str+1
  2519  000920  ECA4  F00E         	call	_strToInt	;wreg free
  2520  000924  0100               	movlb	0	; () banked
  2521  000926  6F7E               	movwf	_b& (0+255),b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 105: D_PWM_SetRGB(r, g, b);
  2525  000928  C07F  F105         	movff	_g,D_PWM_SetRGB@g
  2526  00092C  C07E  F106         	movff	_b,D_PWM_SetRGB@b
  2527  000930  0100               	movlb	0	; () banked
  2528  000932  5180               	movf	_r& (0+255),w,b
  2529  000934  EC7F  F010         	call	_D_PWM_SetRGB
  2530                           
  2531                           ;main.c: 106: return;
  2532  000938  0012               	return	
  2533  00093A                     l3771:
  2534                           
  2535                           ;main.c: 107: }
  2536                           ;main.c: 109: if (strcmp(msg.command, "S") == 0) {
  2537  00093A  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2538  00093E  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2539  000942  0E5D               	movlw	low STR_18
  2540  000944  0101               	movlb	1	; () banked
  2541  000946  6F02               	movwf	strcmp@s2& (0+255),b
  2542  000948  0E08               	movlw	high STR_18
  2543  00094A  0101               	movlb	1	; () banked
  2544  00094C  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2545  00094E  EC01  F00F         	call	_strcmp	;wreg free
  2546  000952  0101               	movlb	1	; () banked
  2547  000954  5100               	movf	?_strcmp& (0+255),w,b
  2548  000956  0101               	movlb	1	; () banked
  2549  000958  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2550  00095A  A4D8               	btfss	status,2,c
  2551  00095C  D028               	goto	l3783
  2552                           
  2553                           ; BSR set to: 1
  2554                           ;main.c: 110: if (strcmp(msg.message, "D") == 0) {
  2555  00095E  C125  F100         	movff	handle_message@msg+4,strcmp@s1
  2556  000962  C126  F101         	movff	handle_message@msg+5,strcmp@s1+1
  2557  000966  0E53               	movlw	low STR_19
  2558  000968  0101               	movlb	1	; () banked
  2559  00096A  6F02               	movwf	strcmp@s2& (0+255),b
  2560  00096C  0E08               	movlw	high STR_19
  2561  00096E  0101               	movlb	1	; () banked
  2562  000970  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2563  000972  EC01  F00F         	call	_strcmp	;wreg free
  2564  000976  0101               	movlb	1	; () banked
  2565  000978  5100               	movf	?_strcmp& (0+255),w,b
  2566  00097A  0101               	movlb	1	; () banked
  2567  00097C  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2568  00097E  B4D8               	btfsc	status,2,c
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;main.c: 111: D_PWM_ScaleDown();
  2572  000980  ECB7  F010         	call	_D_PWM_ScaleDown	;wreg free
  2573                           
  2574                           ;main.c: 112: }
  2575                           ;main.c: 113: if (strcmp(msg.message, "U") == 0) {
  2576  000984  C125  F100         	movff	handle_message@msg+4,strcmp@s1
  2577  000988  C126  F101         	movff	handle_message@msg+5,strcmp@s1+1
  2578  00098C  0E5F               	movlw	low STR_20
  2579  00098E  0101               	movlb	1	; () banked
  2580  000990  6F02               	movwf	strcmp@s2& (0+255),b
  2581  000992  0E08               	movlw	high STR_20
  2582  000994  0101               	movlb	1	; () banked
  2583  000996  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2584  000998  EC01  F00F         	call	_strcmp	;wreg free
  2585  00099C  0101               	movlb	1	; () banked
  2586  00099E  5100               	movf	?_strcmp& (0+255),w,b
  2587  0009A0  0101               	movlb	1	; () banked
  2588  0009A2  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2589  0009A4  A4D8               	btfss	status,2,c
  2590  0009A6  0012               	return	
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;main.c: 114: D_PWM_ScaleUp();
  2594  0009A8  ECB2  F010         	call	_D_PWM_ScaleUp	;wreg free
  2595                           
  2596                           ;main.c: 115: }
  2597                           ;main.c: 116: return;
  2598  0009AC  0012               	return	
  2599  0009AE                     l3783:
  2600                           
  2601                           ;main.c: 117: }
  2602                           ;main.c: 119: if (strcmp(msg.command, "FL") == 0) {
  2603  0009AE  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2604  0009B2  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2605  0009B6  0E44               	movlw	low STR_21
  2606  0009B8  0101               	movlb	1	; () banked
  2607  0009BA  6F02               	movwf	strcmp@s2& (0+255),b
  2608  0009BC  0E08               	movlw	high STR_21
  2609  0009BE  0101               	movlb	1	; () banked
  2610  0009C0  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2611  0009C2  EC01  F00F         	call	_strcmp	;wreg free
  2612  0009C6  0101               	movlb	1	; () banked
  2613  0009C8  5100               	movf	?_strcmp& (0+255),w,b
  2614  0009CA  0101               	movlb	1	; () banked
  2615  0009CC  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2616  0009CE  A4D8               	btfss	status,2,c
  2617  0009D0  D003               	goto	l3789
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;main.c: 120: D_PWM_Flash();
  2621  0009D2  ECD0  F010         	call	_D_PWM_Flash	;wreg free
  2622                           
  2623                           ;main.c: 121: return;
  2624  0009D6  0012               	return	
  2625  0009D8                     l3789:
  2626                           
  2627                           ;main.c: 122: }
  2628                           ;main.c: 124: if (strcmp(msg.command, "ST") == 0) {
  2629  0009D8  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2630  0009DC  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2631  0009E0  0E4A               	movlw	low STR_22
  2632  0009E2  0101               	movlb	1	; () banked
  2633  0009E4  6F02               	movwf	strcmp@s2& (0+255),b
  2634  0009E6  0E08               	movlw	high STR_22
  2635  0009E8  0101               	movlb	1	; () banked
  2636  0009EA  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2637  0009EC  EC01  F00F         	call	_strcmp	;wreg free
  2638  0009F0  0101               	movlb	1	; () banked
  2639  0009F2  5100               	movf	?_strcmp& (0+255),w,b
  2640  0009F4  0101               	movlb	1	; () banked
  2641  0009F6  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2642  0009F8  A4D8               	btfss	status,2,c
  2643  0009FA  D003               	goto	l3795
  2644                           
  2645                           ; BSR set to: 1
  2646                           ;main.c: 125: D_PWM_Strobe();
  2647  0009FC  ECC1  F010         	call	_D_PWM_Strobe	;wreg free
  2648                           
  2649                           ;main.c: 126: return;
  2650  000A00  0012               	return	
  2651  000A02                     l3795:
  2652                           
  2653                           ;main.c: 127: }
  2654                           ;main.c: 129: if (strcmp(msg.command, "FA") == 0) {
  2655  000A02  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2656  000A06  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2657  000A0A  0E41               	movlw	low STR_23
  2658  000A0C  0101               	movlb	1	; () banked
  2659  000A0E  6F02               	movwf	strcmp@s2& (0+255),b
  2660  000A10  0E08               	movlw	high STR_23
  2661  000A12  0101               	movlb	1	; () banked
  2662  000A14  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2663  000A16  EC01  F00F         	call	_strcmp	;wreg free
  2664  000A1A  0101               	movlb	1	; () banked
  2665  000A1C  5100               	movf	?_strcmp& (0+255),w,b
  2666  000A1E  0101               	movlb	1	; () banked
  2667  000A20  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2668  000A22  A4D8               	btfss	status,2,c
  2669  000A24  D003               	goto	l3801
  2670                           
  2671                           ; BSR set to: 1
  2672                           ;main.c: 130: D_PWM_Fade();
  2673  000A26  ECD3  F010         	call	_D_PWM_Fade	;wreg free
  2674                           
  2675                           ;main.c: 131: return;
  2676  000A2A  0012               	return	
  2677  000A2C                     l3801:
  2678                           
  2679                           ;main.c: 132: }
  2680                           ;main.c: 134: if (strcmp(msg.command, "SM") == 0) {
  2681  000A2C  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2682  000A30  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2683  000A34  0E47               	movlw	low STR_24
  2684  000A36  0101               	movlb	1	; () banked
  2685  000A38  6F02               	movwf	strcmp@s2& (0+255),b
  2686  000A3A  0E08               	movlw	high STR_24
  2687  000A3C  0101               	movlb	1	; () banked
  2688  000A3E  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2689  000A40  EC01  F00F         	call	_strcmp	;wreg free
  2690  000A44  0101               	movlb	1	; () banked
  2691  000A46  5100               	movf	?_strcmp& (0+255),w,b
  2692  000A48  0101               	movlb	1	; () banked
  2693  000A4A  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2694  000A4C  A4D8               	btfss	status,2,c
  2695  000A4E  D003               	goto	l3807
  2696                           
  2697                           ; BSR set to: 1
  2698                           ;main.c: 135: D_PWM_Smooth();
  2699  000A50  ECC4  F010         	call	_D_PWM_Smooth	;wreg free
  2700                           
  2701                           ;main.c: 136: return;
  2702  000A54  0012               	return	
  2703  000A56                     l3807:
  2704                           
  2705                           ;main.c: 137: }
  2706                           ;main.c: 139: if(strcmp(msg.command, "RGB") == 0) {
  2707  000A56  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2708  000A5A  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2709  000A5E  0E31               	movlw	low STR_25
  2710  000A60  0101               	movlb	1	; () banked
  2711  000A62  6F02               	movwf	strcmp@s2& (0+255),b
  2712  000A64  0E08               	movlw	high STR_25
  2713  000A66  0101               	movlb	1	; () banked
  2714  000A68  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2715  000A6A  EC01  F00F         	call	_strcmp	;wreg free
  2716  000A6E  0101               	movlb	1	; () banked
  2717  000A70  5100               	movf	?_strcmp& (0+255),w,b
  2718  000A72  0101               	movlb	1	; () banked
  2719  000A74  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2720  000A76  A4D8               	btfss	status,2,c
  2721  000A78  D03D               	goto	l3821
  2722                           
  2723                           ; BSR set to: 1
  2724                           ;main.c: 140: D_UART_WriteInt("R", D_PWM_GetRed());
  2725  000A7A  0E5B               	movlw	low STR_15
  2726  000A7C  0101               	movlb	1	; () banked
  2727  000A7E  6F1C               	movwf	D_UART_WriteInt@command& (0+255),b
  2728  000A80  0E08               	movlw	high STR_15
  2729  000A82  0101               	movlb	1	; () banked
  2730  000A84  6F1D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2731  000A86  ECC7  F010         	call	_D_PWM_GetRed	;wreg free
  2732  000A8A  0101               	movlb	1	; () banked
  2733  000A8C  6F27               	movwf	??_handle_message& (0+255),b
  2734  000A8E  0101               	movlb	1	; () banked
  2735  000A90  5127               	movf	??_handle_message& (0+255),w,b
  2736  000A92  0101               	movlb	1	; () banked
  2737  000A94  6F1E               	movwf	D_UART_WriteInt@data& (0+255),b
  2738  000A96  6B1F               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2739  000A98  EC1D  F00A         	call	_D_UART_WriteInt	;wreg free
  2740                           
  2741                           ;main.c: 141: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2742  000A9C  0E28               	movlw	40
  2743  000A9E                     u3457:
  2744  000A9E  2EE8               	decfsz	wreg,f,c
  2745  000AA0  D7FE               	bra	u3457
  2746                           
  2747                           ;main.c: 142: D_UART_WriteInt("G", D_PWM_GetGreen());
  2748  000AA2  0E55               	movlw	low STR_16
  2749  000AA4  0101               	movlb	1	; () banked
  2750  000AA6  6F1C               	movwf	D_UART_WriteInt@command& (0+255),b
  2751  000AA8  0E08               	movlw	high STR_16
  2752  000AAA  0101               	movlb	1	; () banked
  2753  000AAC  6F1D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2754  000AAE  ECCA  F010         	call	_D_PWM_GetGreen	;wreg free
  2755  000AB2  0101               	movlb	1	; () banked
  2756  000AB4  6F27               	movwf	??_handle_message& (0+255),b
  2757  000AB6  0101               	movlb	1	; () banked
  2758  000AB8  5127               	movf	??_handle_message& (0+255),w,b
  2759  000ABA  0101               	movlb	1	; () banked
  2760  000ABC  6F1E               	movwf	D_UART_WriteInt@data& (0+255),b
  2761  000ABE  6B1F               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2762  000AC0  EC1D  F00A         	call	_D_UART_WriteInt	;wreg free
  2763                           
  2764                           ;main.c: 143: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2765  000AC4  0E28               	movlw	40
  2766  000AC6                     u3467:
  2767  000AC6  2EE8               	decfsz	wreg,f,c
  2768  000AC8  D7FE               	bra	u3467
  2769                           
  2770                           ;main.c: 144: D_UART_WriteInt("B", D_PWM_GetBlue());
  2771  000ACA  0E33               	movlw	low (STR_25+2)
  2772  000ACC  0101               	movlb	1	; () banked
  2773  000ACE  6F1C               	movwf	D_UART_WriteInt@command& (0+255),b
  2774  000AD0  0E08               	movlw	high (STR_25+2)
  2775  000AD2  0101               	movlb	1	; () banked
  2776  000AD4  6F1D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2777  000AD6  ECCD  F010         	call	_D_PWM_GetBlue	;wreg free
  2778  000ADA  0101               	movlb	1	; () banked
  2779  000ADC  6F27               	movwf	??_handle_message& (0+255),b
  2780  000ADE  0101               	movlb	1	; () banked
  2781  000AE0  5127               	movf	??_handle_message& (0+255),w,b
  2782  000AE2  0101               	movlb	1	; () banked
  2783  000AE4  6F1E               	movwf	D_UART_WriteInt@data& (0+255),b
  2784  000AE6  6B1F               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2785  000AE8  EC1D  F00A         	call	_D_UART_WriteInt	;wreg free
  2786                           
  2787                           ;main.c: 145: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2788  000AEC  0E28               	movlw	40
  2789  000AEE                     u3477:
  2790  000AEE  2EE8               	decfsz	wreg,f,c
  2791  000AF0  D7FE               	bra	u3477
  2792                           
  2793                           ;main.c: 146: return;
  2794  000AF2  0012               	return	
  2795  000AF4                     l3821:
  2796                           
  2797                           ;main.c: 147: }
  2798                           ;main.c: 149: if(strcmp(msg.command, "SCA") == 0) {
  2799  000AF4  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2800  000AF8  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2801  000AFC  0E29               	movlw	low STR_29
  2802  000AFE  0101               	movlb	1	; () banked
  2803  000B00  6F02               	movwf	strcmp@s2& (0+255),b
  2804  000B02  0E08               	movlw	high STR_29
  2805  000B04  0101               	movlb	1	; () banked
  2806  000B06  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2807  000B08  EC01  F00F         	call	_strcmp	;wreg free
  2808  000B0C  0101               	movlb	1	; () banked
  2809  000B0E  5100               	movf	?_strcmp& (0+255),w,b
  2810  000B10  0101               	movlb	1	; () banked
  2811  000B12  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2812  000B14  A4D8               	btfss	status,2,c
  2813  000B16  D012               	goto	l3827
  2814                           
  2815                           ; BSR set to: 1
  2816                           ;main.c: 150: D_UART_WriteInt("SCA", D_PWM_GetScale());
  2817  000B18  0E29               	movlw	low STR_29
  2818  000B1A  0101               	movlb	1	; () banked
  2819  000B1C  6F1C               	movwf	D_UART_WriteInt@command& (0+255),b
  2820  000B1E  0E08               	movlw	high STR_29
  2821  000B20  0101               	movlb	1	; () banked
  2822  000B22  6F1D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2823  000B24  ECDB  F010         	call	_D_PWM_GetScale	;wreg free
  2824  000B28  0101               	movlb	1	; () banked
  2825  000B2A  6F27               	movwf	??_handle_message& (0+255),b
  2826  000B2C  0101               	movlb	1	; () banked
  2827  000B2E  5127               	movf	??_handle_message& (0+255),w,b
  2828  000B30  0101               	movlb	1	; () banked
  2829  000B32  6F1E               	movwf	D_UART_WriteInt@data& (0+255),b
  2830  000B34  6B1F               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2831  000B36  EC1D  F00A         	call	_D_UART_WriteInt	;wreg free
  2832                           
  2833                           ;main.c: 151: return;
  2834  000B3A  0012               	return	
  2835  000B3C                     l3827:
  2836                           
  2837                           ;main.c: 152: }
  2838                           ;main.c: 154: if(strcmp(msg.command, "STA") == 0) {
  2839  000B3C  C123  F100         	movff	handle_message@msg+2,strcmp@s1
  2840  000B40  C124  F101         	movff	handle_message@msg+3,strcmp@s1+1
  2841  000B44  0E2D               	movlw	low STR_31
  2842  000B46  0101               	movlb	1	; () banked
  2843  000B48  6F02               	movwf	strcmp@s2& (0+255),b
  2844  000B4A  0E08               	movlw	high STR_31
  2845  000B4C  0101               	movlb	1	; () banked
  2846  000B4E  6F03               	movwf	(strcmp@s2+1)& (0+255),b
  2847  000B50  EC01  F00F         	call	_strcmp	;wreg free
  2848  000B54  0101               	movlb	1	; () banked
  2849  000B56  5100               	movf	?_strcmp& (0+255),w,b
  2850  000B58  0101               	movlb	1	; () banked
  2851  000B5A  1101               	iorwf	(?_strcmp+1)& (0+255),w,b
  2852  000B5C  A4D8               	btfss	status,2,c
  2853  000B5E  0012               	return	
  2854                           
  2855                           ; BSR set to: 1
  2856                           ;main.c: 155: D_UART_WriteInt("STA", D_PWM_GetState());
  2857  000B60  0E2D               	movlw	low STR_31
  2858  000B62  0101               	movlb	1	; () banked
  2859  000B64  6F1C               	movwf	D_UART_WriteInt@command& (0+255),b
  2860  000B66  0E08               	movlw	high STR_31
  2861  000B68  0101               	movlb	1	; () banked
  2862  000B6A  6F1D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2863  000B6C  ECD9  F010         	call	_D_PWM_GetState	;wreg free
  2864  000B70  0101               	movlb	1	; () banked
  2865  000B72  6F27               	movwf	??_handle_message& (0+255),b
  2866  000B74  0101               	movlb	1	; () banked
  2867  000B76  5127               	movf	??_handle_message& (0+255),w,b
  2868  000B78  0101               	movlb	1	; () banked
  2869  000B7A  6F1E               	movwf	D_UART_WriteInt@data& (0+255),b
  2870  000B7C  6B1F               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2871  000B7E  EC1D  F00A         	call	_D_UART_WriteInt	;wreg free
  2872                           
  2873                           ;main.c: 156: return;
  2874  000B82  0012               	return	
  2875  000B84                     __end_of_handle_message:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           intcon	equ	0xFF2
  2882                           intcon2	equ	0xFF1
  2883                           postinc0	equ	0xFEE
  2884                           plusw0	equ	0xFEB
  2885                           fsr0h	equ	0xFEA
  2886                           fsr0l	equ	0xFE9
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           plusw2	equ	0xFDB
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _strcmp *****************
  2896 ;; Defined at:
  2897 ;;		line 33 in file "/opt/microchip/xc8/v1.40/sources/common/strcmp.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  s1              2    0[BANK1 ] PTR const unsigned char 
  2900 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  2901 ;;  s2              2    2[BANK1 ] PTR const unsigned char 
  2902 ;;		 -> STR_31(4), STR_29(4), STR_25(4), STR_24(3), 
  2903 ;;		 -> STR_23(3), STR_22(3), STR_21(3), STR_20(2), 
  2904 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2905 ;;		 -> STR_15(2), 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  r               1    5[BANK1 ] char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  2    0[BANK1 ] int 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2917 ;;      Params:         0       0       4       0       0       0       0       0       0
  2918 ;;      Locals:         0       0       1       0       0       0       0       0       0
  2919 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2920 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2921 ;;Total ram usage:        6 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:   12
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_handle_message
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text11
  2932  001E02                     __ptext11:
  2933                           	opt stack 0
  2934  001E02                     _strcmp:
  2935                           	opt stack 17
  2936                           
  2937                           ;incstack = 0
  2938  001E02  D006               	goto	l3537
  2939  001E04                     l3535:
  2940  001E04  0101               	movlb	1	; () banked
  2941  001E06  4B00               	infsnz	strcmp@s1& (0+255),f,b
  2942  001E08  2B01               	incf	(strcmp@s1+1)& (0+255),f,b
  2943  001E0A  0101               	movlb	1	; () banked
  2944  001E0C  4B02               	infsnz	strcmp@s2& (0+255),f,b
  2945  001E0E  2B03               	incf	(strcmp@s2+1)& (0+255),f,b
  2946  001E10                     l3537:
  2947  001E10  C100  FFD9         	movff	strcmp@s1,fsr2l
  2948  001E14  C101  FFDA         	movff	strcmp@s1+1,fsr2h
  2949  001E18  50DF               	movf	indf2,w,c
  2950  001E1A  0101               	movlb	1	; () banked
  2951  001E1C  6F04               	movwf	??_strcmp& (0+255),b
  2952  001E1E  C102  FFF6         	movff	strcmp@s2,tblptrl
  2953  001E22  C103  FFF7         	movff	strcmp@s2+1,tblptrh
  2954  001E26                     	if	0	;tblptru may be non-zero
  2955  001E26                     	endif
  2956  001E26                     	if	0	;tblptru may be non-zero
  2957  001E26                     	endif
  2958  001E26  0008               	tblrd		*
  2959  001E28  50F5               	movf	tablat,w,c
  2960  001E2A  0800               	sublw	0
  2961  001E2C  0101               	movlb	1	; () banked
  2962  001E2E  2504               	addwf	??_strcmp& (0+255),w,b
  2963  001E30  0101               	movlb	1	; () banked
  2964  001E32  6F05               	movwf	strcmp@r& (0+255),b
  2965  001E34  0101               	movlb	1	; () banked
  2966  001E36  5105               	movf	strcmp@r& (0+255),w,b
  2967  001E38  A4D8               	btfss	status,2,c
  2968  001E3A  D007               	goto	l3541
  2969                           
  2970                           ; BSR set to: 1
  2971  001E3C  C100  FFD9         	movff	strcmp@s1,fsr2l
  2972  001E40  C101  FFDA         	movff	strcmp@s1+1,fsr2h
  2973  001E44  50DF               	movf	indf2,w,c
  2974  001E46  A4D8               	btfss	status,2,c
  2975  001E48  D7DD               	goto	l3535
  2976  001E4A                     l3541:
  2977                           
  2978                           ; BSR set to: 1
  2979  001E4A  0101               	movlb	1	; () banked
  2980  001E4C  5105               	movf	strcmp@r& (0+255),w,b
  2981  001E4E  0101               	movlb	1	; () banked
  2982  001E50  6F00               	movwf	?_strcmp& (0+255),b
  2983  001E52  6B01               	clrf	(?_strcmp+1)& (0+255),b
  2984  001E54  BF00               	btfsc	?_strcmp& (0+255),7,b
  2985  001E56  0701               	decf	(?_strcmp+1)& (0+255),f,b
  2986  001E58  0012               	return	
  2987  001E5A                     __end_of_strcmp:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           intcon	equ	0xFF2
  2994                           intcon2	equ	0xFF1
  2995                           postinc0	equ	0xFEE
  2996                           plusw0	equ	0xFEB
  2997                           fsr0h	equ	0xFEA
  2998                           fsr0l	equ	0xFE9
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1l	equ	0xFE1
  3002                           indf2	equ	0xFDF
  3003                           plusw2	equ	0xFDB
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _strToInt *****************
  3009 ;; Defined at:
  3010 ;;		line 160 in file "main.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  str             2    0[BANK1 ] PTR const unsigned char 
  3013 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  val             1    4[BANK1 ] unsigned char 
  3016 ;;  shift           1    3[BANK1 ] unsigned char 
  3017 ;;  tmp             1    2[BANK1 ] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      unsigned char 
  3020 ;; Registers used:
  3021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3027 ;;      Params:         0       0       2       0       0       0       0       0       0
  3028 ;;      Locals:         0       0       3       0       0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3030 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3031 ;;Total ram usage:        5 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:   12
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_handle_message
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text12
  3042  001D48                     __ptext12:
  3043                           	opt stack 0
  3044  001D48                     _strToInt:
  3045                           	opt stack 17
  3046                           
  3047                           ;main.c: 161: uint8_t val = 0;
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;incstack = 0
  3051  001D48  0E00               	movlw	0
  3052  001D4A  0101               	movlb	1	; () banked
  3053  001D4C  6F04               	movwf	strToInt@val& (0+255),b
  3054                           
  3055                           ;main.c: 162: uint8_t tmp = 0;
  3056  001D4E  0E00               	movlw	0
  3057  001D50  0101               	movlb	1	; () banked
  3058  001D52  6F02               	movwf	strToInt@tmp& (0+255),b
  3059                           
  3060                           ;main.c: 163: uint8_t shift = 0;
  3061  001D54  0E00               	movlw	0
  3062  001D56  0101               	movlb	1	; () banked
  3063  001D58  6F03               	movwf	strToInt@shift& (0+255),b
  3064                           
  3065                           ;main.c: 164: while(*str != '\0') {
  3066  001D5A  D01B               	goto	l3559
  3067  001D5C                     l3547:
  3068                           
  3069                           ; BSR set to: 1
  3070                           ;main.c: 165: tmp = *str - 0x30;
  3071  001D5C  C100  FFD9         	movff	strToInt@str,fsr2l
  3072  001D60  C101  FFDA         	movff	strToInt@str+1,fsr2h
  3073  001D64  50DF               	movf	indf2,w,c
  3074  001D66  0FD0               	addlw	208
  3075  001D68  0101               	movlb	1	; () banked
  3076  001D6A  6F02               	movwf	strToInt@tmp& (0+255),b
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;main.c: 166: if (shift != 0) {
  3080  001D6C  0101               	movlb	1	; () banked
  3081  001D6E  5103               	movf	strToInt@shift& (0+255),w,b
  3082  001D70  0101               	movlb	1	; () banked
  3083  001D72  B4D8               	btfsc	status,2,c
  3084  001D74  D005               	goto	l3553
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;main.c: 167: val *= 10;
  3088  001D76  0E0A               	movlw	10
  3089  001D78  0101               	movlb	1	; () banked
  3090  001D7A  0304               	mulwf	strToInt@val& (0+255),b
  3091  001D7C  50F3               	movf	prodl,w,c
  3092  001D7E  6F04               	movwf	strToInt@val& (0+255),b
  3093  001D80                     l3553:
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;main.c: 168: }
  3097                           ;main.c: 169: val += tmp;
  3098  001D80  0101               	movlb	1	; () banked
  3099  001D82  5102               	movf	strToInt@tmp& (0+255),w,b
  3100  001D84  0101               	movlb	1	; () banked
  3101  001D86  2704               	addwf	strToInt@val& (0+255),f,b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;main.c: 170: shift++;
  3105  001D88  0101               	movlb	1	; () banked
  3106  001D8A  2B03               	incf	strToInt@shift& (0+255),f,b
  3107                           
  3108                           ; BSR set to: 1
  3109                           ;main.c: 171: str++;
  3110  001D8C  0101               	movlb	1	; () banked
  3111  001D8E  4B00               	infsnz	strToInt@str& (0+255),f,b
  3112  001D90  2B01               	incf	(strToInt@str+1)& (0+255),f,b
  3113  001D92                     l3559:
  3114                           
  3115                           ; BSR set to: 1
  3116  001D92  C100  FFD9         	movff	strToInt@str,fsr2l
  3117  001D96  C101  FFDA         	movff	strToInt@str+1,fsr2h
  3118  001D9A  50DF               	movf	indf2,w,c
  3119  001D9C  A4D8               	btfss	status,2,c
  3120  001D9E  D7DE               	goto	l3547
  3121                           
  3122                           ; BSR set to: 1
  3123                           ;main.c: 172: }
  3124                           ;main.c: 173: return val;
  3125                           
  3126                           ; BSR set to: 1
  3127  001DA0  0101               	movlb	1	; () banked
  3128  001DA2  5104               	movf	strToInt@val& (0+255),w,b
  3129  001DA4  0012               	return	
  3130  001DA6                     __end_of_strToInt:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodl	equ	0xFF3
  3137                           intcon	equ	0xFF2
  3138                           intcon2	equ	0xFF1
  3139                           postinc0	equ	0xFEE
  3140                           plusw0	equ	0xFEB
  3141                           fsr0h	equ	0xFEA
  3142                           fsr0l	equ	0xFE9
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           plusw2	equ	0xFDB
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _D_UART_WriteInt *****************
  3153 ;; Defined at:
  3154 ;;		line 285 in file "Drivers/UART_Driver.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  command         2   28[BANK1 ] PTR const unsigned char 
  3157 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3158 ;;		 -> STR_26(2), 
  3159 ;;  data            2   30[BANK1 ] int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3171 ;;      Params:         0       0       4       0       0       0       0       0       0
  3172 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3174 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3175 ;;Total ram usage:        5 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:   16
  3178 ;; This function calls:
  3179 ;;		_printf
  3180 ;; This function is called by:
  3181 ;;		_handle_message
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text13
  3186  00143A                     __ptext13:
  3187                           	opt stack 0
  3188  00143A                     _D_UART_WriteInt:
  3189                           	opt stack 13
  3190                           
  3191                           ;UART_Driver.c: 286: printf(startCharacter);
  3192                           
  3193                           ; BSR set to: 1
  3194                           ;incstack = 0
  3195  00143A  C040  F10C         	movff	_startCharacter,printf@f
  3196  00143E  C041  F10D         	movff	_startCharacter+1,printf@f+1
  3197  001442  0101               	movlb	1	; () banked
  3198  001444  510C               	movf	printf@f& (0+255),w,b
  3199  001446  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3200  001448  A4D8               	btfss	status,2,c
  3201  00144A  0E00               	movlw	low (__mediumconst shr (0+16))
  3202  00144C  6F0E               	movwf	(printf@f+2)& (0+255),b
  3203  00144E  EC29  F007         	call	_printf	;wreg free
  3204                           
  3205                           ;UART_Driver.c: 288: printf(messageCharacter);
  3206  001452  C0E7  F10C         	movff	_messageCharacter,printf@f
  3207  001456  C0E8  F10D         	movff	_messageCharacter+1,printf@f+1
  3208  00145A  0101               	movlb	1	; () banked
  3209  00145C  510C               	movf	printf@f& (0+255),w,b
  3210  00145E  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3211  001460  A4D8               	btfss	status,2,c
  3212  001462  0E00               	movlw	low (__mediumconst shr (0+16))
  3213  001464  6F0E               	movwf	(printf@f+2)& (0+255),b
  3214  001466  EC29  F007         	call	_printf	;wreg free
  3215                           
  3216                           ;UART_Driver.c: 289: printf(deviceName);
  3217  00146A  C0E4  F10C         	movff	_deviceName,printf@f
  3218  00146E  C0E5  F10D         	movff	_deviceName+1,printf@f+1
  3219  001472  C0E6  F10E         	movff	_deviceName+2,printf@f+2
  3220  001476  EC29  F007         	call	_printf	;wreg free
  3221                           
  3222                           ;UART_Driver.c: 291: printf(":");printf(command);
  3223  00147A  0E65               	movlw	low STR_7
  3224  00147C  0101               	movlb	1	; () banked
  3225  00147E  6F0C               	movwf	printf@f& (0+255),b
  3226  001480  0E08               	movlw	high STR_7
  3227  001482  0101               	movlb	1	; () banked
  3228  001484  6F0D               	movwf	(printf@f+1)& (0+255),b
  3229  001486  0101               	movlb	1	; () banked
  3230  001488  510C               	movf	printf@f& (0+255),w,b
  3231  00148A  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3232  00148C  A4D8               	btfss	status,2,c
  3233  00148E  0E00               	movlw	low (__mediumconst shr (0+16))
  3234  001490  6F0E               	movwf	(printf@f+2)& (0+255),b
  3235  001492  EC29  F007         	call	_printf	;wreg free
  3236  001496  C11C  F10C         	movff	D_UART_WriteInt@command,printf@f
  3237  00149A  C11D  F10D         	movff	D_UART_WriteInt@command+1,printf@f+1
  3238  00149E  0101               	movlb	1	; () banked
  3239  0014A0  510C               	movf	printf@f& (0+255),w,b
  3240  0014A2  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3241  0014A4  A4D8               	btfss	status,2,c
  3242  0014A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3243  0014A8  6F0E               	movwf	(printf@f+2)& (0+255),b
  3244  0014AA  EC29  F007         	call	_printf	;wreg free
  3245                           
  3246                           ;UART_Driver.c: 293: printf(":");printf("%d",data);
  3247  0014AE  0E65               	movlw	low STR_7
  3248  0014B0  0101               	movlb	1	; () banked
  3249  0014B2  6F0C               	movwf	printf@f& (0+255),b
  3250  0014B4  0E08               	movlw	high STR_7
  3251  0014B6  0101               	movlb	1	; () banked
  3252  0014B8  6F0D               	movwf	(printf@f+1)& (0+255),b
  3253  0014BA  0101               	movlb	1	; () banked
  3254  0014BC  510C               	movf	printf@f& (0+255),w,b
  3255  0014BE  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3256  0014C0  A4D8               	btfss	status,2,c
  3257  0014C2  0E00               	movlw	low (__mediumconst shr (0+16))
  3258  0014C4  6F0E               	movwf	(printf@f+2)& (0+255),b
  3259  0014C6  EC29  F007         	call	_printf	;wreg free
  3260  0014CA  0E4D               	movlw	low STR_11
  3261  0014CC  0101               	movlb	1	; () banked
  3262  0014CE  6F0C               	movwf	printf@f& (0+255),b
  3263  0014D0  0E08               	movlw	high STR_11
  3264  0014D2  0101               	movlb	1	; () banked
  3265  0014D4  6F0D               	movwf	(printf@f+1)& (0+255),b
  3266  0014D6  0101               	movlb	1	; () banked
  3267  0014D8  510C               	movf	printf@f& (0+255),w,b
  3268  0014DA  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3269  0014DC  A4D8               	btfss	status,2,c
  3270  0014DE  0E00               	movlw	low (__mediumconst shr (0+16))
  3271  0014E0  6F0E               	movwf	(printf@f+2)& (0+255),b
  3272  0014E2  C11E  F10F         	movff	D_UART_WriteInt@data,?_printf+3
  3273  0014E6  C11F  F110         	movff	D_UART_WriteInt@data+1,?_printf+4
  3274  0014EA  EC29  F007         	call	_printf	;wreg free
  3275                           
  3276                           ;UART_Driver.c: 295: printf(stopCharacter);
  3277  0014EE  C042  F10C         	movff	_stopCharacter,printf@f
  3278  0014F2  C043  F10D         	movff	_stopCharacter+1,printf@f+1
  3279  0014F6  0101               	movlb	1	; () banked
  3280  0014F8  510C               	movf	printf@f& (0+255),w,b
  3281  0014FA  110D               	iorwf	(printf@f+1)& (0+255),w,b
  3282  0014FC  A4D8               	btfss	status,2,c
  3283  0014FE  0E00               	movlw	low (__mediumconst shr (0+16))
  3284  001500  6F0E               	movwf	(printf@f+2)& (0+255),b
  3285  001502  EC29  F007         	call	_printf	;wreg free
  3286                           
  3287                           ;UART_Driver.c: 296: _delay((unsigned long)((1)*(48000000/4000.0)));
  3288  001506  0E10               	movlw	16
  3289  001508  0101               	movlb	1	; () banked
  3290  00150A  6F20               	movwf	??_D_UART_WriteInt& (0+255),b
  3291  00150C  0E94               	movlw	148
  3292  00150E                     u3487:
  3293  00150E  2EE8               	decfsz	wreg,f,c
  3294  001510  D7FE               	bra	u3487
  3295  001512  2F20               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  3296  001514  D7FC               	bra	u3487
  3297  001516  F000               	nop	
  3298  001518  0012               	return		;funcret
  3299  00151A                     __end_of_D_UART_WriteInt:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           intcon2	equ	0xFF1
  3308                           postinc0	equ	0xFEE
  3309                           plusw0	equ	0xFEB
  3310                           fsr0h	equ	0xFEA
  3311                           fsr0l	equ	0xFE9
  3312                           wreg	equ	0xFE8
  3313                           postdec1	equ	0xFE5
  3314                           fsr1l	equ	0xFE1
  3315                           indf2	equ	0xFDF
  3316                           plusw2	equ	0xFDB
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _printf *****************
  3322 ;; Defined at:
  3323 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  f               3   12[BANK1 ] PTR const unsigned char 
  3326 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3327 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  3328 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  3329 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  3330 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  idx             1   20[BANK1 ] unsigned char 
  3333 ;;  tmpval          4    0        struct .
  3334 ;;  cp              3    0        PTR const unsigned char 
  3335 ;;  val             2   25[BANK1 ] unsigned int 
  3336 ;;  ap              2   21[BANK1 ] PTR void [1]
  3337 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3338 ;;  len             2    0        unsigned int 
  3339 ;;  c               1   27[BANK1 ] char 
  3340 ;;  flag            1   24[BANK1 ] unsigned char 
  3341 ;;  prec            1   23[BANK1 ] char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  2   12[BANK1 ] int 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3351 ;;      Params:         0       0       5       0       0       0       0       0       0
  3352 ;;      Locals:         0       0       8       0       0       0       0       0       0
  3353 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3354 ;;      Totals:         0       0      16       0       0       0       0       0       0
  3355 ;;Total ram usage:       16 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:   15
  3358 ;; This function calls:
  3359 ;;		___lwdiv
  3360 ;;		___lwmod
  3361 ;;		_putch
  3362 ;; This function is called by:
  3363 ;;		_D_UART_Write
  3364 ;;		_D_UART_WriteInt
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text14
  3369  000E52                     __ptext14:
  3370                           	opt stack 0
  3371  000E52                     _printf:
  3372                           	opt stack 13
  3373                           
  3374                           ;doprnt.c: 466: va_list ap;
  3375                           ;doprnt.c: 499: signed char c;
  3376                           ;doprnt.c: 506: signed char prec;
  3377                           ;doprnt.c: 508: unsigned char flag;
  3378                           ;doprnt.c: 523: union {
  3379                           ;doprnt.c: 524: unsigned long vd;
  3380                           ;doprnt.c: 525: double integ;
  3381                           ;doprnt.c: 526: } tmpval;
  3382                           ;doprnt.c: 528: unsigned int val;
  3383                           ;doprnt.c: 529: unsigned len;
  3384                           ;doprnt.c: 530: const char * cp;
  3385                           ;doprnt.c: 533: *ap = __va_start();
  3386                           
  3387                           ;incstack = 0
  3388  000E52  0E0F               	movlw	low (?_printf+3)
  3389  000E54  0101               	movlb	1	; () banked
  3390  000E56  6F15               	movwf	printf@ap& (0+255),b
  3391  000E58  0E01               	movlw	high (?_printf+3)
  3392  000E5A  0101               	movlb	1	; () banked
  3393  000E5C  6F16               	movwf	(printf@ap+1)& (0+255),b
  3394                           
  3395                           ;doprnt.c: 536: while(c = *f++) {
  3396  000E5E  D115               	goto	l3303
  3397  000E60                     l3223:
  3398                           
  3399                           ; BSR set to: 1
  3400                           ;doprnt.c: 538: if(c != '%')
  3401  000E60  0E25               	movlw	37
  3402  000E62  0101               	movlb	1	; () banked
  3403  000E64  191B               	xorwf	printf@c& (0+255),w,b
  3404  000E66  B4D8               	btfsc	status,2,c
  3405  000E68  D005               	goto	l3227
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;doprnt.c: 540: {
  3409                           ;doprnt.c: 541: (putch(c) );
  3410  000E6A  0101               	movlb	1	; () banked
  3411  000E6C  511B               	movf	printf@c& (0+255),w,b
  3412  000E6E  ECA6  F010         	call	_putch
  3413                           
  3414                           ;doprnt.c: 542: continue;
  3415  000E72  D10B               	goto	l3303
  3416  000E74                     l3227:
  3417                           
  3418                           ;doprnt.c: 543: }
  3419                           ;doprnt.c: 548: flag = 0;
  3420  000E74  0E00               	movlw	0
  3421  000E76  0101               	movlb	1	; () banked
  3422  000E78  6F18               	movwf	printf@flag& (0+255),b
  3423                           
  3424                           ;doprnt.c: 635: switch(c = *f++) {
  3425  000E7A  D008               	goto	l3235
  3426  000E7C                     l3229:
  3427                           
  3428                           ; BSR set to: 1
  3429                           ;doprnt.c: 721: flag |= 0x80;
  3430  000E7C  0101               	movlb	1	; () banked
  3431  000E7E  8F18               	bsf	printf@flag& (0+255),7,b
  3432                           
  3433                           ;doprnt.c: 723: break;
  3434  000E80  D028               	goto	l504
  3435  000E82                     l3231:
  3436                           
  3437                           ; BSR set to: 1
  3438                           ;doprnt.c: 809: (putch(c) );
  3439  000E82  0101               	movlb	1	; () banked
  3440  000E84  511B               	movf	printf@c& (0+255),w,b
  3441  000E86  ECA6  F010         	call	_putch
  3442                           
  3443                           ;doprnt.c: 810: continue;
  3444  000E8A  D0FF               	goto	l3303
  3445  000E8C                     l3235:
  3446  000E8C  C10C  F111         	movff	printf@f,??_printf
  3447  000E90  C10D  F112         	movff	printf@f+1,??_printf+1
  3448  000E94  C10E  F113         	movff	printf@f+2,??_printf+2
  3449  000E98  0101               	movlb	1	; () banked
  3450  000E9A  2B0C               	incf	printf@f& (0+255),f,b
  3451  000E9C  0E00               	movlw	0
  3452  000E9E  230D               	addwfc	(printf@f+1)& (0+255),f,b
  3453  000EA0  230E               	addwfc	(printf@f+2)& (0+255),f,b
  3454  000EA2  C111  FFF6         	movff	??_printf,tblptrl
  3455  000EA6  C112  FFF7         	movff	??_printf+1,tblptrh
  3456  000EAA  C113  FFF8         	movff	??_printf+2,tblptru
  3457  000EAE  0008               	tblrd		*
  3458  000EB0  CFF5 F11B          	movff	tablat,printf@c
  3459  000EB4  0101               	movlb	1	; () banked
  3460  000EB6  511B               	movf	printf@c& (0+255),w,b
  3461                           
  3462                           ; Switch size 1, requested type "space"
  3463                           ; Number of cases is 4, Range of values is 0 to 120
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte           13     7 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  000EB8  0A00               	xorlw	0	; case 0
  3469  000EBA  B4D8               	btfsc	status,2,c
  3470  000EBC  0012               	return	
  3471  000EBE  0A64               	xorlw	100	; case 100
  3472  000EC0  B4D8               	btfsc	status,2,c
  3473  000EC2  D007               	goto	l504
  3474  000EC4  0A0D               	xorlw	13	; case 105
  3475  000EC6  B4D8               	btfsc	status,2,c
  3476  000EC8  D004               	goto	l504
  3477  000ECA  0A11               	xorlw	17	; case 120
  3478  000ECC  B4D8               	btfsc	status,2,c
  3479  000ECE  D7D6               	goto	l3229
  3480  000ED0  D7D8               	goto	l3231
  3481  000ED2                     l504:
  3482                           
  3483                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3484  000ED2  0101               	movlb	1	; () banked
  3485  000ED4  BF18               	btfsc	printf@flag& (0+255),7,b
  3486  000ED6  D019               	goto	l3247
  3487                           
  3488                           ; BSR set to: 1
  3489                           ;doprnt.c: 1253: {
  3490                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3491  000ED8  C115  FFD9         	movff	printf@ap,fsr2l
  3492  000EDC  C116  FFDA         	movff	printf@ap+1,fsr2h
  3493  000EE0  CFDE F119          	movff	postinc2,printf@val
  3494  000EE4  CFDD F11A          	movff	postdec2,printf@val+1
  3495                           
  3496                           ; BSR set to: 1
  3497  000EE8  0E02               	movlw	2
  3498  000EEA  0101               	movlb	1	; () banked
  3499  000EEC  2715               	addwf	printf@ap& (0+255),f,b
  3500  000EEE  0E00               	movlw	0
  3501  000EF0  2316               	addwfc	(printf@ap+1)& (0+255),f,b
  3502                           
  3503                           ; BSR set to: 1
  3504                           ;doprnt.c: 1261: if((int)val < 0) {
  3505  000EF2  0101               	movlb	1	; () banked
  3506  000EF4  AF1A               	btfss	(printf@val+1)& (0+255),7,b
  3507  000EF6  D053               	goto	l3281
  3508                           
  3509                           ; BSR set to: 1
  3510                           ;doprnt.c: 1262: flag |= 0x03;
  3511  000EF8  0E03               	movlw	3
  3512  000EFA  0101               	movlb	1	; () banked
  3513  000EFC  1318               	iorwf	printf@flag& (0+255),f,b
  3514                           
  3515                           ; BSR set to: 1
  3516                           ;doprnt.c: 1263: val = -val;
  3517  000EFE  0101               	movlb	1	; () banked
  3518  000F00  6D19               	negf	printf@val& (0+255),b
  3519  000F02  1F1A               	comf	(printf@val+1)& (0+255),f,b
  3520  000F04  B0D8               	btfsc	status,0,c
  3521  000F06  2B1A               	incf	(printf@val+1)& (0+255),f,b
  3522                           
  3523                           ; BSR set to: 1
  3524                           ;doprnt.c: 1264: }
  3525                           ;doprnt.c: 1266: }
  3526  000F08  D04A               	goto	l3281
  3527  000F0A                     l3247:
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;doprnt.c: 1268: else
  3531                           ;doprnt.c: 1273: {
  3532                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3533  000F0A  C115  FFD9         	movff	printf@ap,fsr2l
  3534  000F0E  C116  FFDA         	movff	printf@ap+1,fsr2h
  3535  000F12  CFDE F119          	movff	postinc2,printf@val
  3536  000F16  CFDD F11A          	movff	postdec2,printf@val+1
  3537                           
  3538                           ; BSR set to: 1
  3539  000F1A  0E02               	movlw	2
  3540  000F1C  0101               	movlb	1	; () banked
  3541  000F1E  2715               	addwf	printf@ap& (0+255),f,b
  3542  000F20  0E00               	movlw	0
  3543  000F22  2316               	addwfc	(printf@ap+1)& (0+255),f,b
  3544                           
  3545                           ; BSR set to: 1
  3546                           ;doprnt.c: 1287: }
  3547                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3548  000F24  D03C               	goto	l3281
  3549  000F26                     l3251:
  3550                           
  3551                           ; BSR set to: 1
  3552                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3553  000F26  0E01               	movlw	1
  3554  000F28  0101               	movlb	1	; () banked
  3555  000F2A  6F1B               	movwf	printf@c& (0+255),b
  3556  000F2C                     l3253:
  3557                           
  3558                           ; BSR set to: 1
  3559  000F2C  0E05               	movlw	5
  3560  000F2E  0101               	movlb	1	; () banked
  3561  000F30  191B               	xorwf	printf@c& (0+255),w,b
  3562  000F32  B4D8               	btfsc	status,2,c
  3563  000F34  D03D               	goto	l3283
  3564                           
  3565                           ; BSR set to: 1
  3566                           ;doprnt.c: 1306: if(val < dpowers[c])
  3567                           
  3568                           ; BSR set to: 1
  3569                           
  3570                           ; BSR set to: 1
  3571  000F36  0101               	movlb	1	; () banked
  3572  000F38  511B               	movf	printf@c& (0+255),w,b
  3573  000F3A  0D02               	mullw	2
  3574  000F3C  0E01               	movlw	low _dpowers
  3575  000F3E  24F3               	addwf	prodl,w,c
  3576  000F40  6EF6               	movwf	tblptrl,c
  3577  000F42  0E08               	movlw	high _dpowers
  3578  000F44  20F4               	addwfc	prodh,w,c
  3579  000F46  6EF7               	movwf	tblptrh,c
  3580  000F48                     	if	0	;There are less than 3 active tblptr bytes
  3581  000F48                     	endif
  3582  000F48  0009               	tblrd		*+
  3583  000F4A  50F5               	movf	tablat,w,c
  3584  000F4C  0101               	movlb	1	; () banked
  3585  000F4E  5D19               	subwf	printf@val& (0+255),w,b
  3586  000F50  0009               	tblrd		*+
  3587  000F52  50F5               	movf	tablat,w,c
  3588  000F54  0101               	movlb	1	; () banked
  3589  000F56  591A               	subwfb	(printf@val+1)& (0+255),w,b
  3590  000F58  A0D8               	btfss	status,0,c
  3591  000F5A  D02A               	goto	l3283
  3592                           
  3593                           ; BSR set to: 1
  3594                           
  3595                           ; BSR set to: 1
  3596                           
  3597                           ; BSR set to: 1
  3598                           ;doprnt.c: 1307: break;
  3599  000F5C  0101               	movlb	1	; () banked
  3600  000F5E  2B1B               	incf	printf@c& (0+255),f,b
  3601  000F60  D7E5               	goto	l3253
  3602  000F62                     l3265:
  3603                           
  3604                           ; BSR set to: 1
  3605                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3606  000F62  0E01               	movlw	1
  3607  000F64  0101               	movlb	1	; () banked
  3608  000F66  6F1B               	movwf	printf@c& (0+255),b
  3609  000F68                     l3267:
  3610                           
  3611                           ; BSR set to: 1
  3612  000F68  0E04               	movlw	4
  3613  000F6A  0101               	movlb	1	; () banked
  3614  000F6C  191B               	xorwf	printf@c& (0+255),w,b
  3615  000F6E  B4D8               	btfsc	status,2,c
  3616  000F70  D01F               	goto	l3283
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3620                           
  3621                           ; BSR set to: 1
  3622                           
  3623                           ; BSR set to: 1
  3624  000F72  0101               	movlb	1	; () banked
  3625  000F74  511B               	movf	printf@c& (0+255),w,b
  3626  000F76  0D02               	mullw	2
  3627  000F78  0E0B               	movlw	low _hexpowers
  3628  000F7A  24F3               	addwf	prodl,w,c
  3629  000F7C  6EF6               	movwf	tblptrl,c
  3630  000F7E  0E08               	movlw	high _hexpowers
  3631  000F80  20F4               	addwfc	prodh,w,c
  3632  000F82  6EF7               	movwf	tblptrh,c
  3633  000F84                     	if	0	;There are less than 3 active tblptr bytes
  3634  000F84                     	endif
  3635  000F84  0009               	tblrd		*+
  3636  000F86  50F5               	movf	tablat,w,c
  3637  000F88  0101               	movlb	1	; () banked
  3638  000F8A  5D19               	subwf	printf@val& (0+255),w,b
  3639  000F8C  0009               	tblrd		*+
  3640  000F8E  50F5               	movf	tablat,w,c
  3641  000F90  0101               	movlb	1	; () banked
  3642  000F92  591A               	subwfb	(printf@val+1)& (0+255),w,b
  3643  000F94  A0D8               	btfss	status,0,c
  3644  000F96  D00C               	goto	l3283
  3645                           
  3646                           ; BSR set to: 1
  3647                           
  3648                           ; BSR set to: 1
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;doprnt.c: 1318: break;
  3652  000F98  0101               	movlb	1	; () banked
  3653  000F9A  2B1B               	incf	printf@c& (0+255),f,b
  3654  000F9C  D7E5               	goto	l3267
  3655  000F9E                     l3281:
  3656                           
  3657                           ; BSR set to: 1
  3658  000F9E  0101               	movlb	1	; () banked
  3659  000FA0  5118               	movf	printf@flag& (0+255),w,b
  3660  000FA2  0B80               	andlw	128
  3661                           
  3662                           ; Switch size 1, requested type "space"
  3663                           ; Number of cases is 2, Range of values is 0 to 128
  3664                           ; switch strategies available:
  3665                           ; Name         Instructions Cycles
  3666                           ; simple_byte            7     4 (average)
  3667                           ;	Chosen strategy is simple_byte
  3668  000FA4  0A00               	xorlw	0	; case 0
  3669  000FA6  B4D8               	btfsc	status,2,c
  3670  000FA8  D7BE               	goto	l3251
  3671  000FAA  0A80               	xorlw	128	; case 128
  3672  000FAC  B4D8               	btfsc	status,2,c
  3673  000FAE  D7D9               	goto	l3265
  3674  000FB0                     l3283:
  3675                           
  3676                           ; BSR set to: 1
  3677                           ;doprnt.c: 1422: {
  3678                           ;doprnt.c: 1438: if(flag & 0x03)
  3679  000FB0  C118  F111         	movff	printf@flag,??_printf
  3680  000FB4  0E03               	movlw	3
  3681  000FB6  0101               	movlb	1	; () banked
  3682  000FB8  1711               	andwf	??_printf& (0+255),f,b
  3683  000FBA  B4D8               	btfsc	status,2,c
  3684  000FBC  D003               	goto	l3287
  3685                           
  3686                           ; BSR set to: 1
  3687                           ;doprnt.c: 1439: (putch('-') );
  3688  000FBE  0E2D               	movlw	45
  3689  000FC0  ECA6  F010         	call	_putch
  3690  000FC4                     l3287:
  3691                           
  3692                           ;doprnt.c: 1469: }
  3693                           ;doprnt.c: 1472: prec = c;
  3694  000FC4  C11B  F117         	movff	printf@c,printf@prec
  3695                           
  3696                           ;doprnt.c: 1474: while(prec--) {
  3697  000FC8  D05A               	goto	l3301
  3698  000FCA                     l3289:
  3699                           
  3700                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3701  000FCA  0101               	movlb	1	; () banked
  3702  000FCC  5117               	movf	printf@prec& (0+255),w,b
  3703  000FCE  0D02               	mullw	2
  3704  000FD0  0E01               	movlw	low _dpowers
  3705  000FD2  24F3               	addwf	prodl,w,c
  3706  000FD4  6EF6               	movwf	tblptrl,c
  3707  000FD6  0E08               	movlw	high _dpowers
  3708  000FD8  20F4               	addwfc	prodh,w,c
  3709  000FDA  6EF7               	movwf	tblptrh,c
  3710  000FDC                     	if	0	;There are less than 3 active tblptr bytes
  3711  000FDC                     	endif
  3712  000FDC  0009               	tblrd		*+
  3713  000FDE  CFF5 F102          	movff	tablat,___lwdiv@divisor
  3714  000FE2  000A               	tblrd		*-
  3715  000FE4  CFF5 F103          	movff	tablat,___lwdiv@divisor+1
  3716  000FE8  C119  F100         	movff	printf@val,___lwdiv@dividend
  3717  000FEC  C11A  F101         	movff	printf@val+1,___lwdiv@dividend+1
  3718  000FF0  EC68  F00D         	call	___lwdiv	;wreg free
  3719  000FF4  C100  F107         	movff	?___lwdiv,___lwmod@dividend
  3720  000FF8  C101  F108         	movff	?___lwdiv+1,___lwmod@dividend+1
  3721  000FFC  0E00               	movlw	0
  3722  000FFE  0101               	movlb	1	; () banked
  3723  001000  6F0A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3724  001002  0E0A               	movlw	10
  3725  001004  6F09               	movwf	___lwmod@divisor& (0+255),b
  3726  001006  EC44  F00E         	call	___lwmod	;wreg free
  3727  00100A  0101               	movlb	1	; () banked
  3728  00100C  5107               	movf	?___lwmod& (0+255),w,b
  3729  00100E  0F30               	addlw	48
  3730  001010  0101               	movlb	1	; () banked
  3731  001012  6F1B               	movwf	printf@c& (0+255),b
  3732                           
  3733                           ;doprnt.c: 1491: break;
  3734  001014  D030               	goto	l3299
  3735  001016                     l3291:
  3736                           
  3737                           ; BSR set to: 1
  3738                           ;doprnt.c: 1499: {
  3739                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3740  001016  C119  F100         	movff	printf@val,___lwdiv@dividend
  3741  00101A  C11A  F101         	movff	printf@val+1,___lwdiv@dividend+1
  3742  00101E  0101               	movlb	1	; () banked
  3743  001020  5117               	movf	printf@prec& (0+255),w,b
  3744  001022  0D02               	mullw	2
  3745  001024  0E0B               	movlw	low _hexpowers
  3746  001026  24F3               	addwf	prodl,w,c
  3747  001028  6EF6               	movwf	tblptrl,c
  3748  00102A  0E08               	movlw	high _hexpowers
  3749  00102C  20F4               	addwfc	prodh,w,c
  3750  00102E  6EF7               	movwf	tblptrh,c
  3751  001030                     	if	0	;There are less than 3 active tblptr bytes
  3752  001030                     	endif
  3753  001030  0009               	tblrd		*+
  3754  001032  CFF5 F102          	movff	tablat,___lwdiv@divisor
  3755  001036  000A               	tblrd		*-
  3756  001038  CFF5 F103          	movff	tablat,___lwdiv@divisor+1
  3757  00103C  EC68  F00D         	call	___lwdiv	;wreg free
  3758  001040  0101               	movlb	1	; () banked
  3759  001042  5100               	movf	?___lwdiv& (0+255),w,b
  3760  001044  0B0F               	andlw	15
  3761  001046  0101               	movlb	1	; () banked
  3762  001048  6F14               	movwf	printf@idx& (0+255),b
  3763                           
  3764                           ; BSR set to: 1
  3765                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3766  00104A  0101               	movlb	1	; () banked
  3767  00104C  5114               	movf	printf@idx& (0+255),w,b
  3768  00104E  0D01               	mullw	1
  3769  001050  0E13               	movlw	low STR_33
  3770  001052  24F3               	addwf	prodl,w,c
  3771  001054  6EF6               	movwf	tblptrl,c
  3772  001056  0E08               	movlw	high STR_33
  3773  001058  20F4               	addwfc	prodh,w,c
  3774  00105A  6EF7               	movwf	tblptrh,c
  3775  00105C                     	if	0	;There are less than 3 active tblptr bytes
  3776  00105C                     	endif
  3777  00105C  0008               	tblrd		*
  3778  00105E  CFF5 F11B          	movff	tablat,printf@c
  3779                           
  3780                           ; BSR set to: 1
  3781                           ;doprnt.c: 1523: }
  3782                           
  3783                           ;doprnt.c: 1508: }
  3784                           ;doprnt.c: 1510: break;
  3785  001062  D009               	goto	l3299
  3786  001064                     l3297:
  3787  001064  0101               	movlb	1	; () banked
  3788  001066  5118               	movf	printf@flag& (0+255),w,b
  3789  001068  0B80               	andlw	128
  3790                           
  3791                           ; Switch size 1, requested type "space"
  3792                           ; Number of cases is 2, Range of values is 0 to 128
  3793                           ; switch strategies available:
  3794                           ; Name         Instructions Cycles
  3795                           ; simple_byte            7     4 (average)
  3796                           ;	Chosen strategy is simple_byte
  3797  00106A  0A00               	xorlw	0	; case 0
  3798  00106C  B4D8               	btfsc	status,2,c
  3799  00106E  D7AD               	goto	l3289
  3800  001070  0A80               	xorlw	128	; case 128
  3801  001072  B4D8               	btfsc	status,2,c
  3802  001074  D7D0               	goto	l3291
  3803  001076                     l3299:
  3804                           
  3805                           ; BSR set to: 1
  3806                           ;doprnt.c: 1524: (putch(c) );
  3807  001076  0101               	movlb	1	; () banked
  3808  001078  511B               	movf	printf@c& (0+255),w,b
  3809  00107A  ECA6  F010         	call	_putch
  3810  00107E                     l3301:
  3811  00107E  0101               	movlb	1	; () banked
  3812  001080  0717               	decf	printf@prec& (0+255),f,b
  3813  001082  0101               	movlb	1	; () banked
  3814  001084  2917               	incf	printf@prec& (0+255),w,b
  3815  001086  A4D8               	btfss	status,2,c
  3816  001088  D7ED               	goto	l3297
  3817  00108A                     l3303:
  3818  00108A  C10C  F111         	movff	printf@f,??_printf
  3819  00108E  C10D  F112         	movff	printf@f+1,??_printf+1
  3820  001092  C10E  F113         	movff	printf@f+2,??_printf+2
  3821  001096  0101               	movlb	1	; () banked
  3822  001098  2B0C               	incf	printf@f& (0+255),f,b
  3823  00109A  0E00               	movlw	0
  3824  00109C  230D               	addwfc	(printf@f+1)& (0+255),f,b
  3825  00109E  230E               	addwfc	(printf@f+2)& (0+255),f,b
  3826  0010A0  C111  FFF6         	movff	??_printf,tblptrl
  3827  0010A4  C112  FFF7         	movff	??_printf+1,tblptrh
  3828  0010A8  C113  FFF8         	movff	??_printf+2,tblptru
  3829  0010AC  0008               	tblrd		*
  3830  0010AE  CFF5 F11B          	movff	tablat,printf@c
  3831  0010B2  0101               	movlb	1	; () banked
  3832  0010B4  511B               	movf	printf@c& (0+255),w,b
  3833  0010B6  B4D8               	btfsc	status,2,c
  3834  0010B8  0012               	return	
  3835  0010BA  D6D2               	goto	l3223
  3836  0010BC                     __end_of_printf:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           intcon2	equ	0xFF1
  3846                           postinc0	equ	0xFEE
  3847                           plusw0	equ	0xFEB
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1l	equ	0xFE1
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           plusw2	equ	0xFDB
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _putch *****************
  3862 ;; Defined at:
  3863 ;;		line 353 in file "Drivers/UART_Driver.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  data            1    wreg     unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  data            1    2[BANK1 ] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0
  3878 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3880 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3881 ;;Total ram usage:        1 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:   14
  3884 ;; This function calls:
  3885 ;;		_writeByte
  3886 ;; This function is called by:
  3887 ;;		_printf
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text15
  3892  00214C                     __ptext15:
  3893                           	opt stack 0
  3894  00214C                     _putch:
  3895                           	opt stack 13
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;incstack = 0
  3899                           ;putch@data stored from wreg
  3900  00214C  0101               	movlb	1	; () banked
  3901  00214E  6F02               	movwf	putch@data& (0+255),b
  3902                           
  3903                           ;UART_Driver.c: 354: writeByte(data);
  3904  002150  0101               	movlb	1	; () banked
  3905  002152  5102               	movf	putch@data& (0+255),w,b
  3906  002154  EC8C  F010         	call	_writeByte
  3907  002158  0012               	return		;funcret
  3908  00215A                     __end_of_putch:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           postinc0	equ	0xFEE
  3919                           plusw0	equ	0xFEB
  3920                           fsr0h	equ	0xFEA
  3921                           fsr0l	equ	0xFE9
  3922                           wreg	equ	0xFE8
  3923                           postdec1	equ	0xFE5
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           plusw2	equ	0xFDB
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _writeByte *****************
  3934 ;; Defined at:
  3935 ;;		line 84 in file "Drivers/UART_Driver.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  data            1    wreg     unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  data            1    1[BANK1 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       1       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3953 ;;Total ram usage:        1 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:   13
  3956 ;; This function calls:
  3957 ;;		_D_UART_Enable
  3958 ;; This function is called by:
  3959 ;;		_putch
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text16
  3964  002118                     __ptext16:
  3965                           	opt stack 0
  3966  002118                     _writeByte:
  3967                           	opt stack 13
  3968                           
  3969                           ;incstack = 0
  3970                           ;writeByte@data stored from wreg
  3971  002118  0101               	movlb	1	; () banked
  3972  00211A  6F01               	movwf	writeByte@data& (0+255),b
  3973                           
  3974                           ;UART_Driver.c: 85: D_UART_Enable(1);
  3975  00211C  0E01               	movlw	1
  3976  00211E  EC19  F010         	call	_D_UART_Enable
  3977  002122                     l107:
  3978  002122  A2AC               	btfss	4012,1,c	;volatile
  3979  002124  D7FE               	goto	l107
  3980                           
  3981                           ;UART_Driver.c: 87: TXREG = data;
  3982  002126  C101  FFAD         	movff	writeByte@data,4013	;volatile
  3983  00212A  0012               	return		;funcret
  3984  00212C                     __end_of_writeByte:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           intcon2	equ	0xFF1
  3994                           postinc0	equ	0xFEE
  3995                           plusw0	equ	0xFEB
  3996                           fsr0h	equ	0xFEA
  3997                           fsr0l	equ	0xFE9
  3998                           wreg	equ	0xFE8
  3999                           postdec1	equ	0xFE5
  4000                           fsr1l	equ	0xFE1
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           postdec2	equ	0xFDD
  4004                           plusw2	equ	0xFDB
  4005                           fsr2h	equ	0xFDA
  4006                           fsr2l	equ	0xFD9
  4007                           status	equ	0xFD8
  4008                           
  4009 ;; *************** function _D_UART_Enable *****************
  4010 ;; Defined at:
  4011 ;;		line 319 in file "Drivers/UART_Driver.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  enable          1    wreg     unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  enable          1    0[BANK1 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0
  4026 ;;      Locals:         0       0       1       0       0       0       0       0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4028 ;;      Totals:         0       0       1       0       0       0       0       0       0
  4029 ;;Total ram usage:        1 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:   12
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_writeByte
  4036 ;;		_D_UART_Init
  4037 ;;		_initialize
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text17
  4042  002032                     __ptext17:
  4043                           	opt stack 0
  4044  002032                     _D_UART_Enable:
  4045                           	opt stack 13
  4046                           
  4047                           ;incstack = 0
  4048                           ;D_UART_Enable@enable stored from wreg
  4049  002032  0101               	movlb	1	; () banked
  4050  002034  6F00               	movwf	D_UART_Enable@enable& (0+255),b
  4051                           
  4052                           ;UART_Driver.c: 320: if(enable) {
  4053  002036  0101               	movlb	1	; () banked
  4054  002038  5100               	movf	D_UART_Enable@enable& (0+255),w,b
  4055  00203A  0101               	movlb	1	; () banked
  4056  00203C  B4D8               	btfsc	status,2,c
  4057  00203E  D006               	goto	l185
  4058                           
  4059                           ; BSR set to: 1
  4060                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  4061  002040  9C94               	bcf	3988,6,c	;volatile
  4062                           
  4063                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  4064  002042  8E94               	bsf	3988,7,c	;volatile
  4065                           
  4066                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  4067  002044  8AAC               	bsf	4012,5,c	;volatile
  4068                           
  4069                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  4070  002046  88AB               	bsf	4011,4,c	;volatile
  4071                           
  4072                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  4073  002048  8EAB               	bsf	4011,7,c	;volatile
  4074                           
  4075                           ;UART_Driver.c: 326: } else {
  4076  00204A  0012               	return	
  4077  00204C                     l185:
  4078                           
  4079                           ; BSR set to: 1
  4080                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  4081  00204C  9C94               	bcf	3988,6,c	;volatile
  4082                           
  4083                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  4084  00204E  9E94               	bcf	3988,7,c	;volatile
  4085                           
  4086                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  4087  002050  9AAC               	bcf	4012,5,c	;volatile
  4088                           
  4089                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  4090  002052  98AB               	bcf	4011,4,c	;volatile
  4091                           
  4092                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  4093  002054  9EAB               	bcf	4011,7,c	;volatile
  4094  002056  0012               	return	
  4095  002058                     __end_of_D_UART_Enable:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           intcon2	equ	0xFF1
  4105                           postinc0	equ	0xFEE
  4106                           plusw0	equ	0xFEB
  4107                           fsr0h	equ	0xFEA
  4108                           fsr0l	equ	0xFE9
  4109                           wreg	equ	0xFE8
  4110                           postdec1	equ	0xFE5
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           plusw2	equ	0xFDB
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function ___lwmod *****************
  4121 ;; Defined at:
  4122 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  dividend        2    7[BANK1 ] unsigned int 
  4125 ;;  divisor         2    9[BANK1 ] unsigned int 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  counter         1   11[BANK1 ] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  2    7[BANK1 ] unsigned int 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4137 ;;      Params:         0       0       4       0       0       0       0       0       0
  4138 ;;      Locals:         0       0       1       0       0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4140 ;;      Totals:         0       0       5       0       0       0       0       0       0
  4141 ;;Total ram usage:        5 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:   12
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_printf
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text18
  4152  001C88                     __ptext18:
  4153                           	opt stack 0
  4154  001C88                     ___lwmod:
  4155                           	opt stack 15
  4156                           
  4157                           ; BSR set to: 1
  4158                           ;incstack = 0
  4159  001C88  0101               	movlb	1	; () banked
  4160  001C8A  5109               	movf	___lwmod@divisor& (0+255),w,b
  4161  001C8C  0101               	movlb	1	; () banked
  4162  001C8E  110A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4163  001C90  B4D8               	btfsc	status,2,c
  4164  001C92  D026               	goto	l942
  4165                           
  4166                           ; BSR set to: 1
  4167  001C94  0E01               	movlw	1
  4168  001C96  0101               	movlb	1	; () banked
  4169  001C98  6F0B               	movwf	___lwmod@counter& (0+255),b
  4170  001C9A  D006               	goto	l3133
  4171  001C9C                     l3131:
  4172                           
  4173                           ; BSR set to: 1
  4174  001C9C  0101               	movlb	1	; () banked
  4175  001C9E  90D8               	bcf	status,0,c
  4176  001CA0  3709               	rlcf	___lwmod@divisor& (0+255),f,b
  4177  001CA2  370A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4178  001CA4  0101               	movlb	1	; () banked
  4179  001CA6  2B0B               	incf	___lwmod@counter& (0+255),f,b
  4180  001CA8                     l3133:
  4181                           
  4182                           ; BSR set to: 1
  4183  001CA8  0101               	movlb	1	; () banked
  4184  001CAA  AF0A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4185  001CAC  D7F7               	goto	l3131
  4186  001CAE                     l3135:
  4187                           
  4188                           ; BSR set to: 1
  4189  001CAE  0101               	movlb	1	; () banked
  4190  001CB0  5109               	movf	___lwmod@divisor& (0+255),w,b
  4191  001CB2  0101               	movlb	1	; () banked
  4192  001CB4  5D07               	subwf	___lwmod@dividend& (0+255),w,b
  4193  001CB6  0101               	movlb	1	; () banked
  4194  001CB8  510A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4195  001CBA  0101               	movlb	1	; () banked
  4196  001CBC  5908               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4197  001CBE  A0D8               	btfss	status,0,c
  4198  001CC0  D008               	goto	l3139
  4199                           
  4200                           ; BSR set to: 1
  4201  001CC2  0101               	movlb	1	; () banked
  4202  001CC4  5109               	movf	___lwmod@divisor& (0+255),w,b
  4203  001CC6  0101               	movlb	1	; () banked
  4204  001CC8  5F07               	subwf	___lwmod@dividend& (0+255),f,b
  4205  001CCA  0101               	movlb	1	; () banked
  4206  001CCC  510A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4207  001CCE  0101               	movlb	1	; () banked
  4208  001CD0  5B08               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4209  001CD2                     l3139:
  4210                           
  4211                           ; BSR set to: 1
  4212  001CD2  0101               	movlb	1	; () banked
  4213  001CD4  90D8               	bcf	status,0,c
  4214  001CD6  330A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4215  001CD8  3309               	rrcf	___lwmod@divisor& (0+255),f,b
  4216                           
  4217                           ; BSR set to: 1
  4218  001CDA  0101               	movlb	1	; () banked
  4219  001CDC  2F0B               	decfsz	___lwmod@counter& (0+255),f,b
  4220  001CDE  D7E7               	goto	l3135
  4221  001CE0                     l942:
  4222                           
  4223                           ; BSR set to: 1
  4224  001CE0  C107  F107         	movff	___lwmod@dividend,?___lwmod
  4225  001CE4  C108  F108         	movff	___lwmod@dividend+1,?___lwmod+1
  4226                           
  4227                           ; BSR set to: 1
  4228  001CE8  0012               	return		;funcret
  4229  001CEA                     __end_of___lwmod:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           intcon2	equ	0xFF1
  4239                           postinc0	equ	0xFEE
  4240                           plusw0	equ	0xFEB
  4241                           fsr0h	equ	0xFEA
  4242                           fsr0l	equ	0xFE9
  4243                           wreg	equ	0xFE8
  4244                           postdec1	equ	0xFE5
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function ___lwdiv *****************
  4255 ;; Defined at:
  4256 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  dividend        2    0[BANK1 ] unsigned int 
  4259 ;;  divisor         2    2[BANK1 ] unsigned int 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  quotient        2    5[BANK1 ] unsigned int 
  4262 ;;  counter         1    4[BANK1 ] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  2    0[BANK1 ] unsigned int 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4272 ;;      Params:         0       0       4       0       0       0       0       0       0
  4273 ;;      Locals:         0       0       3       0       0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4275 ;;      Totals:         0       0       7       0       0       0       0       0       0
  4276 ;;Total ram usage:        7 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:   12
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_printf
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text19
  4287  001AD0                     __ptext19:
  4288                           	opt stack 0
  4289  001AD0                     ___lwdiv:
  4290                           	opt stack 15
  4291                           
  4292                           ; BSR set to: 1
  4293                           ;incstack = 0
  4294  001AD0  0E00               	movlw	0
  4295  001AD2  0101               	movlb	1	; () banked
  4296  001AD4  6F06               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4297  001AD6  0E00               	movlw	0
  4298  001AD8  6F05               	movwf	___lwdiv@quotient& (0+255),b
  4299                           
  4300                           ; BSR set to: 1
  4301  001ADA  0101               	movlb	1	; () banked
  4302  001ADC  5102               	movf	___lwdiv@divisor& (0+255),w,b
  4303  001ADE  0101               	movlb	1	; () banked
  4304  001AE0  1103               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4305  001AE2  B4D8               	btfsc	status,2,c
  4306  001AE4  D02C               	goto	l932
  4307                           
  4308                           ; BSR set to: 1
  4309  001AE6  0E01               	movlw	1
  4310  001AE8  0101               	movlb	1	; () banked
  4311  001AEA  6F04               	movwf	___lwdiv@counter& (0+255),b
  4312  001AEC  D006               	goto	l3113
  4313  001AEE                     l3111:
  4314                           
  4315                           ; BSR set to: 1
  4316  001AEE  0101               	movlb	1	; () banked
  4317  001AF0  90D8               	bcf	status,0,c
  4318  001AF2  3702               	rlcf	___lwdiv@divisor& (0+255),f,b
  4319  001AF4  3703               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4320  001AF6  0101               	movlb	1	; () banked
  4321  001AF8  2B04               	incf	___lwdiv@counter& (0+255),f,b
  4322  001AFA                     l3113:
  4323                           
  4324                           ; BSR set to: 1
  4325  001AFA  0101               	movlb	1	; () banked
  4326  001AFC  AF03               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4327  001AFE  D7F7               	goto	l3111
  4328  001B00                     l3115:
  4329                           
  4330                           ; BSR set to: 1
  4331  001B00  0101               	movlb	1	; () banked
  4332  001B02  90D8               	bcf	status,0,c
  4333  001B04  3705               	rlcf	___lwdiv@quotient& (0+255),f,b
  4334  001B06  3706               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4335                           
  4336                           ; BSR set to: 1
  4337  001B08  0101               	movlb	1	; () banked
  4338  001B0A  5102               	movf	___lwdiv@divisor& (0+255),w,b
  4339  001B0C  0101               	movlb	1	; () banked
  4340  001B0E  5D00               	subwf	___lwdiv@dividend& (0+255),w,b
  4341  001B10  0101               	movlb	1	; () banked
  4342  001B12  5103               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4343  001B14  0101               	movlb	1	; () banked
  4344  001B16  5901               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4345  001B18  A0D8               	btfss	status,0,c
  4346  001B1A  D00A               	goto	l3123
  4347                           
  4348                           ; BSR set to: 1
  4349  001B1C  0101               	movlb	1	; () banked
  4350  001B1E  5102               	movf	___lwdiv@divisor& (0+255),w,b
  4351  001B20  0101               	movlb	1	; () banked
  4352  001B22  5F00               	subwf	___lwdiv@dividend& (0+255),f,b
  4353  001B24  0101               	movlb	1	; () banked
  4354  001B26  5103               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4355  001B28  0101               	movlb	1	; () banked
  4356  001B2A  5B01               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4357                           
  4358                           ; BSR set to: 1
  4359  001B2C  0101               	movlb	1	; () banked
  4360  001B2E  8105               	bsf	___lwdiv@quotient& (0+255),0,b
  4361  001B30                     l3123:
  4362                           
  4363                           ; BSR set to: 1
  4364  001B30  0101               	movlb	1	; () banked
  4365  001B32  90D8               	bcf	status,0,c
  4366  001B34  3303               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4367  001B36  3302               	rrcf	___lwdiv@divisor& (0+255),f,b
  4368                           
  4369                           ; BSR set to: 1
  4370  001B38  0101               	movlb	1	; () banked
  4371  001B3A  2F04               	decfsz	___lwdiv@counter& (0+255),f,b
  4372  001B3C  D7E1               	goto	l3115
  4373  001B3E                     l932:
  4374                           
  4375                           ; BSR set to: 1
  4376  001B3E  C105  F100         	movff	___lwdiv@quotient,?___lwdiv
  4377  001B42  C106  F101         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4378                           
  4379                           ; BSR set to: 1
  4380  001B46  0012               	return		;funcret
  4381  001B48                     __end_of___lwdiv:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           intcon2	equ	0xFF1
  4391                           postinc0	equ	0xFEE
  4392                           plusw0	equ	0xFEB
  4393                           fsr0h	equ	0xFEA
  4394                           fsr0l	equ	0xFE9
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           plusw2	equ	0xFDB
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function _D_PWM_Strobe *****************
  4407 ;; Defined at:
  4408 ;;		line 342 in file "Drivers/PWM_Driver.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0
  4423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4425 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4426 ;;Total ram usage:        0 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:   12
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_handle_message
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text20
  4437  002182                     __ptext20:
  4438                           	opt stack 0
  4439  002182                     _D_PWM_Strobe:
  4440                           	opt stack 17
  4441                           
  4442                           ;PWM_Driver.c: 343: state = Strobe;
  4443                           
  4444                           ; BSR set to: 1
  4445                           ;incstack = 0
  4446  002182  0E02               	movlw	2
  4447  002184  6E30               	movwf	_state,c
  4448  002186  0012               	return		;funcret
  4449  002188                     __end_of_D_PWM_Strobe:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           intcon	equ	0xFF2
  4458                           intcon2	equ	0xFF1
  4459                           postinc0	equ	0xFEE
  4460                           plusw0	equ	0xFEB
  4461                           fsr0h	equ	0xFEA
  4462                           fsr0l	equ	0xFE9
  4463                           wreg	equ	0xFE8
  4464                           postdec1	equ	0xFE5
  4465                           fsr1l	equ	0xFE1
  4466                           indf2	equ	0xFDF
  4467                           postinc2	equ	0xFDE
  4468                           postdec2	equ	0xFDD
  4469                           plusw2	equ	0xFDB
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _D_PWM_Smooth *****************
  4475 ;; Defined at:
  4476 ;;		line 350 in file "Drivers/PWM_Driver.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      void 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4493 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:   12
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_handle_message
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text21
  4505  002188                     __ptext21:
  4506                           	opt stack 0
  4507  002188                     _D_PWM_Smooth:
  4508                           	opt stack 17
  4509                           
  4510                           ;PWM_Driver.c: 351: state = Smooth;
  4511                           
  4512                           ;incstack = 0
  4513  002188  0E04               	movlw	4
  4514  00218A  6E30               	movwf	_state,c
  4515  00218C  0012               	return		;funcret
  4516  00218E                     __end_of_D_PWM_Smooth:
  4517                           	opt stack 0
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           prodh	equ	0xFF4
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           intcon2	equ	0xFF1
  4526                           postinc0	equ	0xFEE
  4527                           plusw0	equ	0xFEB
  4528                           fsr0h	equ	0xFEA
  4529                           fsr0l	equ	0xFE9
  4530                           wreg	equ	0xFE8
  4531                           postdec1	equ	0xFE5
  4532                           fsr1l	equ	0xFE1
  4533                           indf2	equ	0xFDF
  4534                           postinc2	equ	0xFDE
  4535                           postdec2	equ	0xFDD
  4536                           plusw2	equ	0xFDB
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _D_PWM_SetRGB *****************
  4542 ;; Defined at:
  4543 ;;		line 301 in file "Drivers/PWM_Driver.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  r               1    wreg     unsigned char 
  4546 ;;  g               1    5[BANK1 ] unsigned char 
  4547 ;;  b               1    6[BANK1 ] unsigned char 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  r               1    7[BANK1 ] unsigned char 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      void 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4559 ;;      Params:         0       0       2       0       0       0       0       0       0
  4560 ;;      Locals:         0       0       1       0       0       0       0       0       0
  4561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4562 ;;      Totals:         0       0       3       0       0       0       0       0       0
  4563 ;;Total ram usage:        3 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:   14
  4566 ;; This function calls:
  4567 ;;		_setRGB
  4568 ;; This function is called by:
  4569 ;;		_main
  4570 ;;		_handle_message
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text22
  4575  0020FE                     __ptext22:
  4576                           	opt stack 0
  4577  0020FE                     _D_PWM_SetRGB:
  4578                           	opt stack 15
  4579                           
  4580                           ;incstack = 0
  4581                           ;D_PWM_SetRGB@r stored from wreg
  4582  0020FE  0101               	movlb	1	; () banked
  4583  002100  6F07               	movwf	D_PWM_SetRGB@r& (0+255),b
  4584                           
  4585                           ;PWM_Driver.c: 302: setRGB(r, g, b);
  4586  002102  C105  F102         	movff	D_PWM_SetRGB@g,setRGB@g
  4587  002106  C106  F103         	movff	D_PWM_SetRGB@b,setRGB@b
  4588  00210A  0101               	movlb	1	; () banked
  4589  00210C  5107               	movf	D_PWM_SetRGB@r& (0+255),w,b
  4590  00210E  EC2C  F010         	call	_setRGB
  4591                           
  4592                           ;PWM_Driver.c: 303: state = Color;
  4593  002112  0E00               	movlw	0
  4594  002114  6E30               	movwf	_state,c
  4595  002116  0012               	return		;funcret
  4596  002118                     __end_of_D_PWM_SetRGB:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           postinc0	equ	0xFEE
  4607                           plusw0	equ	0xFEB
  4608                           fsr0h	equ	0xFEA
  4609                           fsr0l	equ	0xFE9
  4610                           wreg	equ	0xFE8
  4611                           postdec1	equ	0xFE5
  4612                           fsr1l	equ	0xFE1
  4613                           indf2	equ	0xFDF
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           plusw2	equ	0xFDB
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _setRGB *****************
  4622 ;; Defined at:
  4623 ;;		line 40 in file "Drivers/PWM_Driver.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  r               1    wreg     unsigned char 
  4626 ;;  g               1    2[BANK1 ] unsigned char 
  4627 ;;  b               1    3[BANK1 ] unsigned char 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  r               1    4[BANK1 ] unsigned char 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4639 ;;      Params:         0       0       2       0       0       0       0       0       0
  4640 ;;      Locals:         0       0       1       0       0       0       0       0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4642 ;;      Totals:         0       0       3       0       0       0       0       0       0
  4643 ;;Total ram usage:        3 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:   13
  4646 ;; This function calls:
  4647 ;;		_D_PWM_SetDuty
  4648 ;; This function is called by:
  4649 ;;		_D_PWM_SetRGB
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text23
  4654  002058                     __ptext23:
  4655                           	opt stack 0
  4656  002058                     _setRGB:
  4657                           	opt stack 15
  4658                           
  4659                           ;incstack = 0
  4660                           ;setRGB@r stored from wreg
  4661  002058  0101               	movlb	1	; () banked
  4662  00205A  6F04               	movwf	setRGB@r& (0+255),b
  4663                           
  4664                           ;PWM_Driver.c: 41: D_PWM_SetDuty(0, r);
  4665  00205C  C104  F100         	movff	setRGB@r,D_PWM_SetDuty@duty
  4666  002060  0E00               	movlw	0
  4667  002062  ECD6  F00F         	call	_D_PWM_SetDuty
  4668                           
  4669                           ;PWM_Driver.c: 42: D_PWM_SetDuty(1, g);
  4670  002066  C102  F100         	movff	setRGB@g,D_PWM_SetDuty@duty
  4671  00206A  0E01               	movlw	1
  4672  00206C  ECD6  F00F         	call	_D_PWM_SetDuty
  4673                           
  4674                           ;PWM_Driver.c: 43: D_PWM_SetDuty(2, b);
  4675  002070  C103  F100         	movff	setRGB@b,D_PWM_SetDuty@duty
  4676  002074  0E02               	movlw	2
  4677  002076  ECD6  F00F         	call	_D_PWM_SetDuty
  4678  00207A  0012               	return		;funcret
  4679  00207C                     __end_of_setRGB:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           intcon	equ	0xFF2
  4688                           intcon2	equ	0xFF1
  4689                           postinc0	equ	0xFEE
  4690                           plusw0	equ	0xFEB
  4691                           fsr0h	equ	0xFEA
  4692                           fsr0l	equ	0xFE9
  4693                           wreg	equ	0xFE8
  4694                           postdec1	equ	0xFE5
  4695                           fsr1l	equ	0xFE1
  4696                           indf2	equ	0xFDF
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           plusw2	equ	0xFDB
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _D_PWM_SetDuty *****************
  4705 ;; Defined at:
  4706 ;;		line 285 in file "Drivers/PWM_Driver.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  which           1    wreg     unsigned char 
  4709 ;;  duty            1    0[BANK1 ] unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  which           1    1[BANK1 ] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4721 ;;      Params:         0       0       1       0       0       0       0       0       0
  4722 ;;      Locals:         0       0       1       0       0       0       0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4724 ;;      Totals:         0       0       2       0       0       0       0       0       0
  4725 ;;Total ram usage:        2 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:   12
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_setRGB
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text24
  4736  001FAC                     __ptext24:
  4737                           	opt stack 0
  4738  001FAC                     _D_PWM_SetDuty:
  4739                           	opt stack 15
  4740                           
  4741                           ;incstack = 0
  4742                           ;D_PWM_SetDuty@which stored from wreg
  4743  001FAC  0101               	movlb	1	; () banked
  4744  001FAE  6F01               	movwf	D_PWM_SetDuty@which& (0+255),b
  4745                           
  4746                           ;PWM_Driver.c: 286: switch(which) {
  4747  001FB0  D009               	goto	l3103
  4748  001FB2                     l334:
  4749                           
  4750                           ; BSR set to: 1
  4751                           ;PWM_Driver.c: 288: PWM_Red.duty_val = duty;
  4752  001FB2  C100  F07C         	movff	D_PWM_SetDuty@duty,_PWM_Red+1
  4753                           
  4754                           ;PWM_Driver.c: 289: break;
  4755  001FB6  0012               	return	
  4756  001FB8                     l336:
  4757                           
  4758                           ; BSR set to: 1
  4759                           ;PWM_Driver.c: 292: PWM_Green.duty_val = duty;
  4760  001FB8  C100  F07A         	movff	D_PWM_SetDuty@duty,_PWM_Green+1
  4761                           
  4762                           ;PWM_Driver.c: 293: break;
  4763  001FBC  0012               	return	
  4764  001FBE                     l337:
  4765                           
  4766                           ; BSR set to: 1
  4767                           ;PWM_Driver.c: 296: PWM_Blue.duty_val = duty;
  4768  001FBE  C100  F078         	movff	D_PWM_SetDuty@duty,_PWM_Blue+1
  4769                           
  4770                           ; BSR set to: 1
  4771                           ;PWM_Driver.c: 298: }
  4772                           
  4773                           ;PWM_Driver.c: 297: break;
  4774  001FC2  0012               	return	
  4775  001FC4                     l3103:
  4776  001FC4  0101               	movlb	1	; () banked
  4777  001FC6  5101               	movf	D_PWM_SetDuty@which& (0+255),w,b
  4778                           
  4779                           ; Switch size 1, requested type "space"
  4780                           ; Number of cases is 3, Range of values is 0 to 2
  4781                           ; switch strategies available:
  4782                           ; Name         Instructions Cycles
  4783                           ; simple_byte           10     6 (average)
  4784                           ;	Chosen strategy is simple_byte
  4785  001FC8  0A00               	xorlw	0	; case 0
  4786  001FCA  B4D8               	btfsc	status,2,c
  4787  001FCC  D7F2               	goto	l334
  4788  001FCE  0A01               	xorlw	1	; case 1
  4789  001FD0  B4D8               	btfsc	status,2,c
  4790  001FD2  D7F2               	goto	l336
  4791  001FD4  0A03               	xorlw	3	; case 2
  4792  001FD6  A4D8               	btfss	status,2,c
  4793  001FD8  0012               	return	
  4794  001FDA  D7F1               	goto	l337
  4795  001FDC                     __end_of_D_PWM_SetDuty:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           postinc0	equ	0xFEE
  4806                           plusw0	equ	0xFEB
  4807                           fsr0h	equ	0xFEA
  4808                           fsr0l	equ	0xFE9
  4809                           wreg	equ	0xFE8
  4810                           postdec1	equ	0xFE5
  4811                           fsr1l	equ	0xFE1
  4812                           indf2	equ	0xFDF
  4813                           postinc2	equ	0xFDE
  4814                           postdec2	equ	0xFDD
  4815                           plusw2	equ	0xFDB
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _D_PWM_ScaleUp *****************
  4821 ;; Defined at:
  4822 ;;		line 324 in file "Drivers/PWM_Driver.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;		None
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  1    wreg      void 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4836 ;;      Params:         0       0       0       0       0       0       0       0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4839 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4840 ;;Total ram usage:        0 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:   12
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_handle_message
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text25
  4851  002164                     __ptext25:
  4852                           	opt stack 0
  4853  002164                     _D_PWM_ScaleUp:
  4854                           	opt stack 17
  4855                           
  4856                           ;PWM_Driver.c: 325: if (scale > 0) {
  4857                           
  4858                           ; BSR set to: 1
  4859                           ;incstack = 0
  4860  002164  502F               	movf	_scale,w,c
  4861  002166  B4D8               	btfsc	status,2,c
  4862  002168  0012               	return	
  4863                           
  4864                           ;PWM_Driver.c: 326: scale--;
  4865  00216A  062F               	decf	_scale,f,c
  4866  00216C  0012               	return	
  4867  00216E                     __end_of_D_PWM_ScaleUp:
  4868                           	opt stack 0
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           prodh	equ	0xFF4
  4874                           prodl	equ	0xFF3
  4875                           intcon	equ	0xFF2
  4876                           intcon2	equ	0xFF1
  4877                           postinc0	equ	0xFEE
  4878                           plusw0	equ	0xFEB
  4879                           fsr0h	equ	0xFEA
  4880                           fsr0l	equ	0xFE9
  4881                           wreg	equ	0xFE8
  4882                           postdec1	equ	0xFE5
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           plusw2	equ	0xFDB
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function _D_PWM_ScaleDown *****************
  4893 ;; Defined at:
  4894 ;;		line 318 in file "Drivers/PWM_Driver.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4911 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4912 ;;Total ram usage:        0 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:   12
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_handle_message
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text26
  4923  00216E                     __ptext26:
  4924                           	opt stack 0
  4925  00216E                     _D_PWM_ScaleDown:
  4926                           	opt stack 17
  4927                           
  4928                           ;PWM_Driver.c: 319: if (scale < 7) {
  4929                           
  4930                           ;incstack = 0
  4931  00216E  0E07               	movlw	7
  4932  002170  602F               	cpfslt	_scale,c
  4933  002172  0012               	return	
  4934                           
  4935                           ;PWM_Driver.c: 320: scale++;
  4936  002174  2A2F               	incf	_scale,f,c
  4937  002176  0012               	return	
  4938  002178                     __end_of_D_PWM_ScaleDown:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           intcon2	equ	0xFF1
  4948                           postinc0	equ	0xFEE
  4949                           plusw0	equ	0xFEB
  4950                           fsr0h	equ	0xFEA
  4951                           fsr0l	equ	0xFE9
  4952                           wreg	equ	0xFE8
  4953                           postdec1	equ	0xFE5
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           plusw2	equ	0xFDB
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _D_PWM_GetState *****************
  4964 ;; Defined at:
  4965 ;;		line 334 in file "Drivers/PWM_Driver.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      unsigned char 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4979 ;;      Params:         0       0       0       0       0       0       0       0       0
  4980 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4982 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4983 ;;Total ram usage:        0 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:   12
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_handle_message
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text27
  4994  0021B2                     __ptext27:
  4995                           	opt stack 0
  4996  0021B2                     _D_PWM_GetState:
  4997                           	opt stack 17
  4998                           
  4999                           ;PWM_Driver.c: 335: return state;
  5000                           
  5001                           ;incstack = 0
  5002  0021B2  5030               	movf	_state,w,c
  5003  0021B4  0012               	return	
  5004  0021B6                     __end_of_D_PWM_GetState:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           intcon	equ	0xFF2
  5013                           intcon2	equ	0xFF1
  5014                           postinc0	equ	0xFEE
  5015                           plusw0	equ	0xFEB
  5016                           fsr0h	equ	0xFEA
  5017                           fsr0l	equ	0xFE9
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           plusw2	equ	0xFDB
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _D_PWM_GetScale *****************
  5030 ;; Defined at:
  5031 ;;		line 330 in file "Drivers/PWM_Driver.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      unsigned char 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5045 ;;      Params:         0       0       0       0       0       0       0       0       0
  5046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:   12
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_handle_message
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text28
  5060  0021B6                     __ptext28:
  5061                           	opt stack 0
  5062  0021B6                     _D_PWM_GetScale:
  5063                           	opt stack 17
  5064                           
  5065                           ;PWM_Driver.c: 331: return scale;
  5066                           
  5067                           ;incstack = 0
  5068  0021B6  502F               	movf	_scale,w,c
  5069  0021B8  0012               	return	
  5070  0021BA                     __end_of_D_PWM_GetScale:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           intcon2	equ	0xFF1
  5080                           postinc0	equ	0xFEE
  5081                           plusw0	equ	0xFEB
  5082                           fsr0h	equ	0xFEA
  5083                           fsr0l	equ	0xFE9
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           plusw2	equ	0xFDB
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _D_PWM_GetRed *****************
  5096 ;; Defined at:
  5097 ;;		line 306 in file "Drivers/PWM_Driver.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      unsigned char 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5114 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5115 ;;Total ram usage:        0 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:   12
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_handle_message
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text29
  5126  00218E                     __ptext29:
  5127                           	opt stack 0
  5128  00218E                     _D_PWM_GetRed:
  5129                           	opt stack 17
  5130                           
  5131                           ;PWM_Driver.c: 307: return PWM_Red.duty_cnt;
  5132                           
  5133                           ;incstack = 0
  5134  00218E  0100               	movlb	0	; () banked
  5135  002190  517B               	movf	_PWM_Red& (0+255),w,b
  5136  002192  0012               	return	
  5137  002194                     __end_of_D_PWM_GetRed:
  5138                           	opt stack 0
  5139                           tblptru	equ	0xFF8
  5140                           tblptrh	equ	0xFF7
  5141                           tblptrl	equ	0xFF6
  5142                           tablat	equ	0xFF5
  5143                           prodh	equ	0xFF4
  5144                           prodl	equ	0xFF3
  5145                           intcon	equ	0xFF2
  5146                           intcon2	equ	0xFF1
  5147                           postinc0	equ	0xFEE
  5148                           plusw0	equ	0xFEB
  5149                           fsr0h	equ	0xFEA
  5150                           fsr0l	equ	0xFE9
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1l	equ	0xFE1
  5154                           indf2	equ	0xFDF
  5155                           postinc2	equ	0xFDE
  5156                           postdec2	equ	0xFDD
  5157                           plusw2	equ	0xFDB
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _D_PWM_GetGreen *****************
  5163 ;; Defined at:
  5164 ;;		line 310 in file "Drivers/PWM_Driver.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      unsigned char 
  5171 ;; Registers used:
  5172 ;;		wreg, status,2
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5178 ;;      Params:         0       0       0       0       0       0       0       0       0
  5179 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5181 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:   12
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_handle_message
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text30
  5193  002194                     __ptext30:
  5194                           	opt stack 0
  5195  002194                     _D_PWM_GetGreen:
  5196                           	opt stack 17
  5197                           
  5198                           ;PWM_Driver.c: 311: return PWM_Green.duty_cnt;
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;incstack = 0
  5202  002194  0100               	movlb	0	; () banked
  5203  002196  5179               	movf	_PWM_Green& (0+255),w,b
  5204  002198  0012               	return	
  5205  00219A                     __end_of_D_PWM_GetGreen:
  5206                           	opt stack 0
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           intcon2	equ	0xFF1
  5215                           postinc0	equ	0xFEE
  5216                           plusw0	equ	0xFEB
  5217                           fsr0h	equ	0xFEA
  5218                           fsr0l	equ	0xFE9
  5219                           wreg	equ	0xFE8
  5220                           postdec1	equ	0xFE5
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           plusw2	equ	0xFDB
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _D_PWM_GetBlue *****************
  5231 ;; Defined at:
  5232 ;;		line 314 in file "Drivers/PWM_Driver.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;		None
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      unsigned char 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5249 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5250 ;;Total ram usage:        0 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:   12
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_handle_message
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text31
  5261  00219A                     __ptext31:
  5262                           	opt stack 0
  5263  00219A                     _D_PWM_GetBlue:
  5264                           	opt stack 17
  5265                           
  5266                           ;PWM_Driver.c: 315: return PWM_Blue.duty_cnt;
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;incstack = 0
  5270  00219A  0100               	movlb	0	; () banked
  5271  00219C  5177               	movf	_PWM_Blue& (0+255),w,b
  5272  00219E  0012               	return	
  5273  0021A0                     __end_of_D_PWM_GetBlue:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           intcon2	equ	0xFF1
  5283                           postinc0	equ	0xFEE
  5284                           plusw0	equ	0xFEB
  5285                           fsr0h	equ	0xFEA
  5286                           fsr0l	equ	0xFE9
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           plusw2	equ	0xFDB
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _D_PWM_Flash *****************
  5299 ;; Defined at:
  5300 ;;		line 338 in file "Drivers/PWM_Driver.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         0       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5317 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:   12
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_handle_message
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text32
  5329  0021A0                     __ptext32:
  5330                           	opt stack 0
  5331  0021A0                     _D_PWM_Flash:
  5332                           	opt stack 17
  5333                           
  5334                           ;PWM_Driver.c: 339: state = Flash;
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;incstack = 0
  5338  0021A0  0E01               	movlw	1
  5339  0021A2  6E30               	movwf	_state,c
  5340  0021A4  0012               	return		;funcret
  5341  0021A6                     __end_of_D_PWM_Flash:
  5342                           	opt stack 0
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           intcon	equ	0xFF2
  5350                           intcon2	equ	0xFF1
  5351                           postinc0	equ	0xFEE
  5352                           plusw0	equ	0xFEB
  5353                           fsr0h	equ	0xFEA
  5354                           fsr0l	equ	0xFE9
  5355                           wreg	equ	0xFE8
  5356                           postdec1	equ	0xFE5
  5357                           fsr1l	equ	0xFE1
  5358                           indf2	equ	0xFDF
  5359                           postinc2	equ	0xFDE
  5360                           postdec2	equ	0xFDD
  5361                           plusw2	equ	0xFDB
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _D_PWM_Fade *****************
  5367 ;; Defined at:
  5368 ;;		line 346 in file "Drivers/PWM_Driver.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5385 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5386 ;;Total ram usage:        0 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:   12
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_handle_message
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text33
  5397  0021A6                     __ptext33:
  5398                           	opt stack 0
  5399  0021A6                     _D_PWM_Fade:
  5400                           	opt stack 17
  5401                           
  5402                           ;PWM_Driver.c: 347: state = Fade;
  5403                           
  5404                           ;incstack = 0
  5405  0021A6  0E03               	movlw	3
  5406  0021A8  6E30               	movwf	_state,c
  5407  0021AA  0012               	return		;funcret
  5408  0021AC                     __end_of_D_PWM_Fade:
  5409                           	opt stack 0
  5410                           tblptru	equ	0xFF8
  5411                           tblptrh	equ	0xFF7
  5412                           tblptrl	equ	0xFF6
  5413                           tablat	equ	0xFF5
  5414                           prodh	equ	0xFF4
  5415                           prodl	equ	0xFF3
  5416                           intcon	equ	0xFF2
  5417                           intcon2	equ	0xFF1
  5418                           postinc0	equ	0xFEE
  5419                           plusw0	equ	0xFEB
  5420                           fsr0h	equ	0xFEA
  5421                           fsr0l	equ	0xFE9
  5422                           wreg	equ	0xFE8
  5423                           postdec1	equ	0xFE5
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           plusw2	equ	0xFDB
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _D_UART_ReadBlock *****************
  5434 ;; Defined at:
  5435 ;;		line 307 in file "Drivers/UART_Driver.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  cnt             1    wreg     unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  cnt             1    7[BANK1 ] unsigned char 
  5440 ;;  cm             17    8[BANK1 ] struct .
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  6    0[BANK1 ] struct .
  5443 ;; Registers used:
  5444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5450 ;;      Params:         0       0       7       0       0       0       0       0       0
  5451 ;;      Locals:         0       0      18       0       0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5453 ;;      Totals:         0       0      25       0       0       0       0       0       0
  5454 ;;Total ram usage:       25 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:   12
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_main
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text34
  5465  001DA6                     __ptext34:
  5466                           	opt stack 0
  5467  001DA6                     _D_UART_ReadBlock:
  5468                           	opt stack 18
  5469                           
  5470                           ;incstack = 0
  5471                           ;D_UART_ReadBlock@cnt stored from wreg
  5472  001DA6  0101               	movlb	1	; () banked
  5473  001DA8  6F07               	movwf	D_UART_ReadBlock@cnt& (0+255),b
  5474                           
  5475                           ;UART_Driver.c: 308: READ_ComMes cm = readBuffer.comMes[cnt];
  5476  001DAA  0101               	movlb	1	; () banked
  5477  001DAC  5107               	movf	D_UART_ReadBlock@cnt& (0+255),w,b
  5478  001DAE  0D11               	mullw	17
  5479  001DB0  0E8B               	movlw	low (_readBuffer+10)
  5480  001DB2  24F3               	addwf	prodl,w,c
  5481  001DB4  6ED9               	movwf	fsr2l,c
  5482  001DB6  0E00               	movlw	high (_readBuffer+10)
  5483  001DB8  20F4               	addwfc	prodh,w,c
  5484  001DBA  6EDA               	movwf	fsr2h,c
  5485  001DBC  EE11  F008         	lfsr	1,D_UART_ReadBlock@cm
  5486  001DC0  0E10               	movlw	16
  5487  001DC2                     u3221:
  5488  001DC2  CFDB FFE3          	movff	plusw2,plusw1
  5489  001DC6  06E8               	decf	wreg,f,c
  5490  001DC8  E2FC               	bc	u3221
  5491                           
  5492                           ; BSR set to: 1
  5493                           ;UART_Driver.c: 309: readData.sender = readBuffer.sender;
  5494  001DCA  0E85               	movlw	low (_readBuffer+4)
  5495  001DCC  0100               	movlb	0	; () banked
  5496  001DCE  6F71               	movwf	_readData& (0+255),b
  5497  001DD0  0E00               	movlw	high (_readBuffer+4)
  5498  001DD2  0100               	movlb	0	; () banked
  5499  001DD4  6F72               	movwf	(_readData+1)& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;UART_Driver.c: 310: readData.command = cm.command;
  5503  001DD6  0E08               	movlw	low D_UART_ReadBlock@cm
  5504  001DD8  0100               	movlb	0	; () banked
  5505  001DDA  6F73               	movwf	(_readData+2)& (0+255),b
  5506  001DDC  0E01               	movlw	high D_UART_ReadBlock@cm
  5507  001DDE  0100               	movlb	0	; () banked
  5508  001DE0  6F74               	movwf	(_readData+3)& (0+255),b
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;UART_Driver.c: 311: readData.message = cm.message;
  5512  001DE2  0E0E               	movlw	low (D_UART_ReadBlock@cm+6)
  5513  001DE4  0100               	movlb	0	; () banked
  5514  001DE6  6F75               	movwf	(_readData+4)& (0+255),b
  5515  001DE8  0E01               	movlw	high (D_UART_ReadBlock@cm+6)
  5516  001DEA  0100               	movlb	0	; () banked
  5517  001DEC  6F76               	movwf	(_readData+5)& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;UART_Driver.c: 312: return readData;
  5521  001DEE  EE20  F071         	lfsr	2,_readData
  5522  001DF2  EE01  F000         	lfsr	0,?_D_UART_ReadBlock
  5523  001DF6  0E05               	movlw	5
  5524  001DF8                     u3231:
  5525  001DF8  CFDB FFEB          	movff	plusw2,plusw0
  5526  001DFC  06E8               	decf	wreg,f,c
  5527  001DFE  E2FC               	bc	u3231
  5528  001E00  0012               	return	
  5529  001E02                     __end_of_D_UART_ReadBlock:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           intcon	equ	0xFF2
  5538                           intcon2	equ	0xFF1
  5539                           postinc0	equ	0xFEE
  5540                           plusw0	equ	0xFEB
  5541                           fsr0h	equ	0xFEA
  5542                           fsr0l	equ	0xFE9
  5543                           wreg	equ	0xFE8
  5544                           postdec1	equ	0xFE5
  5545                           plusw1	equ	0xFE3
  5546                           fsr1l	equ	0xFE1
  5547                           indf2	equ	0xFDF
  5548                           postinc2	equ	0xFDE
  5549                           postdec2	equ	0xFDD
  5550                           plusw2	equ	0xFDB
  5551                           fsr2h	equ	0xFDA
  5552                           fsr2l	equ	0xFD9
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function _D_UART_Read *****************
  5556 ;; Defined at:
  5557 ;;		line 299 in file "Drivers/UART_Driver.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;		None
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  cm             17    6[BANK1 ] struct .
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  6    0[BANK1 ] struct .
  5564 ;; Registers used:
  5565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5571 ;;      Params:         0       0       6       0       0       0       0       0       0
  5572 ;;      Locals:         0       0      17       0       0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5574 ;;      Totals:         0       0      23       0       0       0       0       0       0
  5575 ;;Total ram usage:       23 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:   12
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text35
  5586  001EAC                     __ptext35:
  5587                           	opt stack 0
  5588  001EAC                     _D_UART_Read:
  5589                           	opt stack 18
  5590                           
  5591                           ;UART_Driver.c: 300: READ_ComMes cm = readBuffer.comMes[0];
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;incstack = 0
  5595  001EAC  EE20  F08B         	lfsr	2,_readBuffer+10
  5596  001EB0  EE11  F006         	lfsr	1,D_UART_Read@cm
  5597  001EB4  0E10               	movlw	16
  5598  001EB6                     u3201:
  5599  001EB6  CFDB FFE3          	movff	plusw2,plusw1
  5600  001EBA  06E8               	decf	wreg,f,c
  5601  001EBC  E2FC               	bc	u3201
  5602                           
  5603                           ;UART_Driver.c: 301: readData.sender = readBuffer.sender;
  5604  001EBE  0E85               	movlw	low (_readBuffer+4)
  5605  001EC0  0100               	movlb	0	; () banked
  5606  001EC2  6F71               	movwf	_readData& (0+255),b
  5607  001EC4  0E00               	movlw	high (_readBuffer+4)
  5608  001EC6  0100               	movlb	0	; () banked
  5609  001EC8  6F72               	movwf	(_readData+1)& (0+255),b
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;UART_Driver.c: 302: readData.command = cm.command;
  5613  001ECA  0E06               	movlw	low D_UART_Read@cm
  5614  001ECC  0100               	movlb	0	; () banked
  5615  001ECE  6F73               	movwf	(_readData+2)& (0+255),b
  5616  001ED0  0E01               	movlw	high D_UART_Read@cm
  5617  001ED2  0100               	movlb	0	; () banked
  5618  001ED4  6F74               	movwf	(_readData+3)& (0+255),b
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;UART_Driver.c: 303: readData.message = cm.message;
  5622  001ED6  0E0C               	movlw	low (D_UART_Read@cm+6)
  5623  001ED8  0100               	movlb	0	; () banked
  5624  001EDA  6F75               	movwf	(_readData+4)& (0+255),b
  5625  001EDC  0E01               	movlw	high (D_UART_Read@cm+6)
  5626  001EDE  0100               	movlb	0	; () banked
  5627  001EE0  6F76               	movwf	(_readData+5)& (0+255),b
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;UART_Driver.c: 304: return readData;
  5631  001EE2  EE20  F071         	lfsr	2,_readData
  5632  001EE6  EE01  F000         	lfsr	0,?_D_UART_Read
  5633  001EEA  0E05               	movlw	5
  5634  001EEC                     u3211:
  5635  001EEC  CFDB FFEB          	movff	plusw2,plusw0
  5636  001EF0  06E8               	decf	wreg,f,c
  5637  001EF2  E2FC               	bc	u3211
  5638  001EF4  0012               	return	
  5639  001EF6                     __end_of_D_UART_Read:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           intcon2	equ	0xFF1
  5649                           postinc0	equ	0xFEE
  5650                           plusw0	equ	0xFEB
  5651                           fsr0h	equ	0xFEA
  5652                           fsr0l	equ	0xFE9
  5653                           wreg	equ	0xFE8
  5654                           postdec1	equ	0xFE5
  5655                           plusw1	equ	0xFE3
  5656                           fsr1l	equ	0xFE1
  5657                           indf2	equ	0xFDF
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           plusw2	equ	0xFDB
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _D_UART_BlockLength *****************
  5666 ;; Defined at:
  5667 ;;		line 315 in file "Drivers/UART_Driver.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;		None
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      unsigned char 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0
  5682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5684 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5685 ;;Total ram usage:        0 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:   12
  5688 ;; This function calls:
  5689 ;;		Nothing
  5690 ;; This function is called by:
  5691 ;;		_main
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text36
  5696  0021AC                     __ptext36:
  5697                           	opt stack 0
  5698  0021AC                     _D_UART_BlockLength:
  5699                           	opt stack 18
  5700                           
  5701                           ;UART_Driver.c: 316: return readBuffer.blockLength;
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;incstack = 0
  5705  0021AC  0100               	movlb	0	; () banked
  5706  0021AE  5184               	movf	(_readBuffer+3)& (0+255),w,b
  5707  0021B0  0012               	return	
  5708  0021B2                     __end_of_D_UART_BlockLength:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           intcon2	equ	0xFF1
  5718                           postinc0	equ	0xFEE
  5719                           plusw0	equ	0xFEB
  5720                           fsr0h	equ	0xFEA
  5721                           fsr0l	equ	0xFE9
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           plusw1	equ	0xFE3
  5725                           fsr1l	equ	0xFE1
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           plusw2	equ	0xFDB
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _LowISR *****************
  5735 ;; Defined at:
  5736 ;;		line 361 in file "Drivers/UART_Driver.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;		None
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5750 ;;      Params:         0       0       0       0       0       0       0       0       0
  5751 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5752 ;;      Temps:          0      17       0       0       0       0       0       0       0
  5753 ;;      Totals:         0      17       0       0       0       0       0       0       0
  5754 ;;Total ram usage:       17 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:   11
  5757 ;; This function calls:
  5758 ;;		_fillDataBuffer
  5759 ;;		_readByte
  5760 ;; This function is called by:
  5761 ;;		Interrupt level 1
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	intcodelo
  5766  000018                     __pintcodelo:
  5767                           	opt stack 0
  5768  000018                     _LowISR:
  5769                           	opt stack 13
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;incstack = 0
  5773  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5774  00001A  CFD8 F0D3          	movff	status,??_LowISR
  5775  00001E  CFE8 F0D4          	movff	wreg,??_LowISR+1
  5776  000022  CFE0 F0D5          	movff	bsr,??_LowISR+2
  5777  000026  CFFA F0D6          	movff	pclath,??_LowISR+3
  5778  00002A  CFFB F0D7          	movff	pclatu,??_LowISR+4
  5779  00002E  CFE9 F0D8          	movff	fsr0l,??_LowISR+5
  5780  000032  CFEA F0D9          	movff	fsr0h,??_LowISR+6
  5781  000036  CFE1 F0DA          	movff	fsr1l,??_LowISR+7
  5782  00003A  CFE2 F0DB          	movff	fsr1h,??_LowISR+8
  5783  00003E  CFD9 F0DC          	movff	fsr2l,??_LowISR+9
  5784  000042  CFDA F0DD          	movff	fsr2h,??_LowISR+10
  5785  000046  CFF3 F0DE          	movff	prodl,??_LowISR+11
  5786  00004A  CFF4 F0DF          	movff	prodh,??_LowISR+12
  5787  00004E  CFF6 F0E0          	movff	tblptrl,??_LowISR+13
  5788  000052  CFF7 F0E1          	movff	tblptrh,??_LowISR+14
  5789  000056  CFF8 F0E2          	movff	tblptru,??_LowISR+15
  5790  00005A  CFF5 F0E3          	movff	tablat,??_LowISR+16
  5791                           
  5792                           ;UART_Driver.c: 362: if (PIR1bits.RC1IF) {
  5793  00005E  AA9E               	btfss	3998,5,c	;volatile
  5794  000060  D005               	goto	i1l197
  5795                           
  5796                           ;UART_Driver.c: 363: fillDataBuffer(readByte());
  5797  000062  EC04  F010         	call	_readByte	;wreg free
  5798  000066  ECC2  F005         	call	_fillDataBuffer
  5799                           
  5800                           ;UART_Driver.c: 364: PIR1bits.RC1IF = 0;
  5801  00006A  9A9E               	bcf	3998,5,c	;volatile
  5802  00006C                     i1l197:
  5803  00006C  C0E3  FFF5         	movff	??_LowISR+16,tablat
  5804  000070  C0E2  FFF8         	movff	??_LowISR+15,tblptru
  5805  000074  C0E1  FFF7         	movff	??_LowISR+14,tblptrh
  5806  000078  C0E0  FFF6         	movff	??_LowISR+13,tblptrl
  5807  00007C  C0DF  FFF4         	movff	??_LowISR+12,prodh
  5808  000080  C0DE  FFF3         	movff	??_LowISR+11,prodl
  5809  000084  C0DD  FFDA         	movff	??_LowISR+10,fsr2h
  5810  000088  C0DC  FFD9         	movff	??_LowISR+9,fsr2l
  5811  00008C  C0DB  FFE2         	movff	??_LowISR+8,fsr1h
  5812  000090  C0DA  FFE1         	movff	??_LowISR+7,fsr1l
  5813  000094  C0D9  FFEA         	movff	??_LowISR+6,fsr0h
  5814  000098  C0D8  FFE9         	movff	??_LowISR+5,fsr0l
  5815  00009C  C0D7  FFFB         	movff	??_LowISR+4,pclatu
  5816  0000A0  C0D6  FFFA         	movff	??_LowISR+3,pclath
  5817  0000A4  C0D5  FFE0         	movff	??_LowISR+2,bsr
  5818  0000A8  C0D4  FFE8         	movff	??_LowISR+1,wreg
  5819  0000AC  C0D3  FFD8         	movff	??_LowISR,status
  5820  0000B0  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5821  0000B2  0010               	retfie	
  5822  0000B4                     __end_of_LowISR:
  5823                           	opt stack 0
  5824                           pclatu	equ	0xFFB
  5825                           pclath	equ	0xFFA
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           intcon2	equ	0xFF1
  5834                           postinc0	equ	0xFEE
  5835                           plusw0	equ	0xFEB
  5836                           fsr0h	equ	0xFEA
  5837                           fsr0l	equ	0xFE9
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           plusw1	equ	0xFE3
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           bsr	equ	0xFE0
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           plusw2	equ	0xFDB
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _readByte *****************
  5853 ;; Defined at:
  5854 ;;		line 90 in file "Drivers/UART_Driver.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  dum             1   26[COMRAM] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      unsigned char 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0
  5869 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5871 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5872 ;;Total ram usage:        1 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    6
  5875 ;; This function calls:
  5876 ;;		i1_D_UART_Enable
  5877 ;; This function is called by:
  5878 ;;		_LowISR
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text38
  5883  002008                     __ptext38:
  5884                           	opt stack 0
  5885  002008                     _readByte:
  5886                           	opt stack 17
  5887                           
  5888                           ;UART_Driver.c: 91: if(RCSTAbits.FERR == 1) {
  5889                           
  5890                           ;incstack = 0
  5891  002008  A4AB               	btfss	4011,2,c	;volatile
  5892  00200A  D004               	goto	i1l113
  5893                           
  5894                           ;UART_Driver.c: 92: uint8_t dum = RCREG;
  5895  00200C  CFAE F01B          	movff	4014,readByte@dum	;volatile
  5896                           
  5897                           ;UART_Driver.c: 93: return 0;
  5898  002010  0E00               	movlw	0
  5899  002012  0012               	return	
  5900  002014                     i1l113:
  5901                           
  5902                           ;UART_Driver.c: 94: }
  5903                           ;UART_Driver.c: 95: if(RCSTAbits.OERR == 1) {
  5904  002014  A2AB               	btfss	4011,1,c	;volatile
  5905  002016  D00B               	goto	i1l3581
  5906                           
  5907                           ;UART_Driver.c: 96: D_UART_Enable(0);
  5908  002018  0E00               	movlw	0
  5909  00201A  EC60  F010         	call	i1_D_UART_Enable
  5910                           
  5911                           ;UART_Driver.c: 97: _delay((unsigned long)((10)*(48000000/4000000.0)));
  5912  00201E  0E28               	movlw	40
  5913  002020                     i1u349_27:
  5914  002020  2EE8               	decfsz	wreg,f,c
  5915  002022  D7FE               	bra	i1u349_27
  5916                           
  5917                           ;UART_Driver.c: 98: D_UART_Enable(1);
  5918  002024  0E01               	movlw	1
  5919  002026  EC60  F010         	call	i1_D_UART_Enable
  5920                           
  5921                           ;UART_Driver.c: 99: return 0;
  5922  00202A  0E00               	movlw	0
  5923  00202C  0012               	return	
  5924  00202E                     i1l3581:
  5925                           
  5926                           ;UART_Driver.c: 100: }
  5927                           ;UART_Driver.c: 101: return RCREG;
  5928  00202E  50AE               	movf	4014,w,c	;volatile
  5929  002030  0012               	return	
  5930  002032                     __end_of_readByte:
  5931                           	opt stack 0
  5932                           pclatu	equ	0xFFB
  5933                           pclath	equ	0xFFA
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           intcon	equ	0xFF2
  5941                           intcon2	equ	0xFF1
  5942                           postinc0	equ	0xFEE
  5943                           plusw0	equ	0xFEB
  5944                           fsr0h	equ	0xFEA
  5945                           fsr0l	equ	0xFE9
  5946                           wreg	equ	0xFE8
  5947                           postdec1	equ	0xFE5
  5948                           plusw1	equ	0xFE3
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           bsr	equ	0xFE0
  5952                           indf2	equ	0xFDF
  5953                           postinc2	equ	0xFDE
  5954                           postdec2	equ	0xFDD
  5955                           plusw2	equ	0xFDB
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _fillDataBuffer *****************
  5961 ;; Defined at:
  5962 ;;		line 107 in file "Drivers/UART_Driver.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  data            1    wreg     unsigned char 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  data            1   18[BANK0 ] unsigned char 
  5967 ;;  i               1   17[BANK0 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0
  5978 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5980 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5981 ;;Total ram usage:        2 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:   10
  5984 ;; This function calls:
  5985 ;;		_acknowledge
  5986 ;; This function is called by:
  5987 ;;		_LowISR
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text39
  5992  000B84                     __ptext39:
  5993                           	opt stack 0
  5994  000B84                     _fillDataBuffer:
  5995                           	opt stack 13
  5996                           
  5997                           ;incstack = 0
  5998                           ;fillDataBuffer@data stored from wreg
  5999  000B84  0100               	movlb	0	; () banked
  6000  000B86  6FD2               	movwf	fillDataBuffer@data& (0+255),b
  6001                           
  6002                           ;UART_Driver.c: 108: switch(readBuffer.state) {
  6003  000B88  D14C               	goto	i1l3701
  6004  000B8A                     i1l3587:
  6005                           
  6006                           ;UART_Driver.c: 110: if(data == 0x26) {
  6007  000B8A  0E26               	movlw	38
  6008  000B8C  0100               	movlb	0	; () banked
  6009  000B8E  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6010  000B90  A4D8               	btfss	status,2,c
  6011  000B92  D01A               	goto	i1l3591
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;UART_Driver.c: 111: readBuffer.typeCnt = 0;
  6015  000B94  0E00               	movlw	0
  6016  000B96  0100               	movlb	0	; () banked
  6017  000B98  6F83               	movwf	(_readBuffer+2)& (0+255),b
  6018                           
  6019                           ;UART_Driver.c: 112: readBuffer.blockLength = 0;
  6020  000B9A  0E00               	movlw	0
  6021  000B9C  0100               	movlb	0	; () banked
  6022  000B9E  6F84               	movwf	(_readBuffer+3)& (0+255),b
  6023                           
  6024                           ;UART_Driver.c: 113: blockLength = 0;
  6025  000BA0  0E00               	movlw	0
  6026  000BA2  6E2D               	movwf	_blockLength,c
  6027                           
  6028                           ;UART_Driver.c: 114: readBuffer.senderCnt = 0;
  6029  000BA4  0E00               	movlw	0
  6030  000BA6  0100               	movlb	0	; () banked
  6031  000BA8  6F8A               	movwf	(_readBuffer+9)& (0+255),b
  6032                           
  6033                           ;UART_Driver.c: 115: bufferCnt = 0;
  6034  000BAA  0E00               	movlw	0
  6035  000BAC  6E2E               	movwf	_bufferCnt,c
  6036                           
  6037                           ;UART_Driver.c: 116: comMes.commandCnt = 0;
  6038  000BAE  0E00               	movlw	0
  6039  000BB0  0100               	movlb	0	; () banked
  6040  000BB2  6F65               	movwf	(_comMes+5)& (0+255),b
  6041                           
  6042                           ;UART_Driver.c: 117: comMes.messageCnt = 0;
  6043  000BB4  0E00               	movlw	0
  6044  000BB6  0100               	movlb	0	; () banked
  6045  000BB8  6F70               	movwf	(_comMes+16)& (0+255),b
  6046                           
  6047                           ;UART_Driver.c: 118: D_UART_ReadFlag = 0;
  6048  000BBA  0E00               	movlw	0
  6049  000BBC  0100               	movlb	0	; () banked
  6050  000BBE  6F7D               	movwf	_D_UART_ReadFlag& (0+255),b
  6051                           
  6052                           ;UART_Driver.c: 119: readBuffer.state = 0x01;
  6053  000BC0  0E01               	movlw	1
  6054  000BC2  0100               	movlb	0	; () banked
  6055  000BC4  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6056                           
  6057                           ;UART_Driver.c: 120: } else {
  6058  000BC6  0012               	return	
  6059  000BC8                     i1l3591:
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;UART_Driver.c: 121: readBuffer.state = 0x00;
  6063  000BC8  0E00               	movlw	0
  6064  000BCA  0100               	movlb	0	; () banked
  6065  000BCC  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;UART_Driver.c: 123: }
  6069                           ;UART_Driver.c: 124: break;
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;UART_Driver.c: 122: return;
  6073  000BCE  0012               	return	
  6074  000BD0                     i1l3595:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;UART_Driver.c: 127: if (data == 0x3A) {
  6078  000BD0  0E3A               	movlw	58
  6079  000BD2  0100               	movlb	0	; () banked
  6080  000BD4  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6081  000BD6  A4D8               	btfss	status,2,c
  6082  000BD8  D00F               	goto	i1l3601
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;UART_Driver.c: 128: readBuffer.state = 0x02;
  6086  000BDA  0E02               	movlw	2
  6087  000BDC  0100               	movlb	0	; () banked
  6088  000BDE  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;UART_Driver.c: 129: readBuffer.type[readBuffer.typeCnt] = '\0';
  6092  000BE0  0100               	movlb	0	; () banked
  6093  000BE2  5183               	movf	(_readBuffer+2)& (0+255),w,b
  6094  000BE4  0D01               	mullw	1
  6095  000BE6  0E81               	movlw	low _readBuffer
  6096  000BE8  24F3               	addwf	prodl,w,c
  6097  000BEA  6ED9               	movwf	fsr2l,c
  6098  000BEC  0E00               	movlw	high _readBuffer
  6099  000BEE  20F4               	addwfc	prodh,w,c
  6100  000BF0  6EDA               	movwf	fsr2h,c
  6101  000BF2  0E00               	movlw	0
  6102  000BF4  6EDF               	movwf	indf2,c
  6103                           
  6104                           ;UART_Driver.c: 130: } else {
  6105  000BF6  0012               	return	
  6106  000BF8                     i1l3601:
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;UART_Driver.c: 131: readBuffer.type[readBuffer.typeCnt] = data;
  6110  000BF8  0100               	movlb	0	; () banked
  6111  000BFA  5183               	movf	(_readBuffer+2)& (0+255),w,b
  6112  000BFC  0D01               	mullw	1
  6113  000BFE  0E81               	movlw	low _readBuffer
  6114  000C00  24F3               	addwf	prodl,w,c
  6115  000C02  6ED9               	movwf	fsr2l,c
  6116  000C04  0E00               	movlw	high _readBuffer
  6117  000C06  20F4               	addwfc	prodh,w,c
  6118  000C08  6EDA               	movwf	fsr2h,c
  6119  000C0A  C0D2  FFDF         	movff	fillDataBuffer@data,indf2
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;UART_Driver.c: 132: readBuffer.typeCnt++;
  6123  000C0E  0100               	movlb	0	; () banked
  6124  000C10  2B83               	incf	(_readBuffer+2)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;UART_Driver.c: 133: if(readBuffer.typeCnt > 10) {
  6128  000C12  0E0A               	movlw	10
  6129  000C14  0100               	movlb	0	; () banked
  6130  000C16  6583               	cpfsgt	(_readBuffer+2)& (0+255),b
  6131  000C18  0012               	return	
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;UART_Driver.c: 134: readBuffer.typeCnt = 0;
  6135  000C1A  0E00               	movlw	0
  6136  000C1C  0100               	movlb	0	; () banked
  6137  000C1E  6F83               	movwf	(_readBuffer+2)& (0+255),b
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;UART_Driver.c: 135: }
  6141                           ;UART_Driver.c: 136: }
  6142                           ;UART_Driver.c: 137: break;
  6143                           
  6144                           ; BSR set to: 0
  6145  000C20  0012               	return	
  6146  000C22                     i1l3609:
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;UART_Driver.c: 140: if (data == 0x3A) {
  6150  000C22  0E3A               	movlw	58
  6151  000C24  0100               	movlb	0	; () banked
  6152  000C26  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6153  000C28  A4D8               	btfss	status,2,c
  6154  000C2A  D00F               	goto	i1l3615
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;UART_Driver.c: 141: readBuffer.state = 0x03;
  6158  000C2C  0E03               	movlw	3
  6159  000C2E  0100               	movlb	0	; () banked
  6160  000C30  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;UART_Driver.c: 142: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6164  000C32  0100               	movlb	0	; () banked
  6165  000C34  518A               	movf	(_readBuffer+9)& (0+255),w,b
  6166  000C36  0D01               	mullw	1
  6167  000C38  0E85               	movlw	low (_readBuffer+4)
  6168  000C3A  24F3               	addwf	prodl,w,c
  6169  000C3C  6ED9               	movwf	fsr2l,c
  6170  000C3E  0E00               	movlw	high (_readBuffer+4)
  6171  000C40  20F4               	addwfc	prodh,w,c
  6172  000C42  6EDA               	movwf	fsr2h,c
  6173  000C44  0E00               	movlw	0
  6174  000C46  6EDF               	movwf	indf2,c
  6175                           
  6176                           ;UART_Driver.c: 143: } else {
  6177  000C48  0012               	return	
  6178  000C4A                     i1l3615:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;UART_Driver.c: 144: readBuffer.sender[readBuffer.senderCnt] = data;
  6182  000C4A  0100               	movlb	0	; () banked
  6183  000C4C  518A               	movf	(_readBuffer+9)& (0+255),w,b
  6184  000C4E  0D01               	mullw	1
  6185  000C50  0E85               	movlw	low (_readBuffer+4)
  6186  000C52  24F3               	addwf	prodl,w,c
  6187  000C54  6ED9               	movwf	fsr2l,c
  6188  000C56  0E00               	movlw	high (_readBuffer+4)
  6189  000C58  20F4               	addwfc	prodh,w,c
  6190  000C5A  6EDA               	movwf	fsr2h,c
  6191  000C5C  C0D2  FFDF         	movff	fillDataBuffer@data,indf2
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;UART_Driver.c: 145: readBuffer.senderCnt++;
  6195  000C60  0100               	movlb	0	; () banked
  6196  000C62  2B8A               	incf	(_readBuffer+9)& (0+255),f,b
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;UART_Driver.c: 146: if(readBuffer.senderCnt > 50) {
  6200  000C64  0E32               	movlw	50
  6201  000C66  0100               	movlb	0	; () banked
  6202  000C68  658A               	cpfsgt	(_readBuffer+9)& (0+255),b
  6203  000C6A  0012               	return	
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;UART_Driver.c: 147: readBuffer.senderCnt = 0;
  6207  000C6C  0E00               	movlw	0
  6208  000C6E  0100               	movlb	0	; () banked
  6209  000C70  6F8A               	movwf	(_readBuffer+9)& (0+255),b
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;UART_Driver.c: 148: }
  6213                           ;UART_Driver.c: 149: }
  6214                           ;UART_Driver.c: 150: break;
  6215                           
  6216                           ; BSR set to: 0
  6217  000C72  0012               	return	
  6218  000C74                     i1l3623:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;UART_Driver.c: 153: if (data == 0x3A) {
  6222  000C74  0E3A               	movlw	58
  6223  000C76  0100               	movlb	0	; () banked
  6224  000C78  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6225  000C7A  A4D8               	btfss	status,2,c
  6226  000C7C  D00F               	goto	i1l3629
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;UART_Driver.c: 154: readBuffer.state = 0x04;
  6230  000C7E  0E04               	movlw	4
  6231  000C80  0100               	movlb	0	; () banked
  6232  000C82  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;UART_Driver.c: 155: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6236  000C84  0100               	movlb	0	; () banked
  6237  000C86  518A               	movf	(_readBuffer+9)& (0+255),w,b
  6238  000C88  0D01               	mullw	1
  6239  000C8A  0E85               	movlw	low (_readBuffer+4)
  6240  000C8C  24F3               	addwf	prodl,w,c
  6241  000C8E  6ED9               	movwf	fsr2l,c
  6242  000C90  0E00               	movlw	high (_readBuffer+4)
  6243  000C92  20F4               	addwfc	prodh,w,c
  6244  000C94  6EDA               	movwf	fsr2h,c
  6245  000C96  0E00               	movlw	0
  6246  000C98  6EDF               	movwf	indf2,c
  6247                           
  6248                           ;UART_Driver.c: 156: } else {
  6249  000C9A  0012               	return	
  6250  000C9C                     i1l3629:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;UART_Driver.c: 157: readBuffer.blockLength = (data - 0x30);
  6254  000C9C  0100               	movlb	0	; () banked
  6255  000C9E  51D2               	movf	fillDataBuffer@data& (0+255),w,b
  6256  000CA0  0FD0               	addlw	208
  6257  000CA2  0100               	movlb	0	; () banked
  6258  000CA4  6F84               	movwf	(_readBuffer+3)& (0+255),b
  6259                           
  6260                           ;UART_Driver.c: 158: blockLength = (data - 0x30);
  6261  000CA6  0100               	movlb	0	; () banked
  6262  000CA8  51D2               	movf	fillDataBuffer@data& (0+255),w,b
  6263  000CAA  0FD0               	addlw	208
  6264  000CAC  6E2D               	movwf	_blockLength,c
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;UART_Driver.c: 159: }
  6268                           ;UART_Driver.c: 160: break;
  6269  000CAE  0012               	return	
  6270  000CB0                     i1l3631:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;UART_Driver.c: 163: if (data == 0x3A) {
  6274  000CB0  0E3A               	movlw	58
  6275  000CB2  0100               	movlb	0	; () banked
  6276  000CB4  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6277  000CB6  A4D8               	btfss	status,2,c
  6278  000CB8  D00F               	goto	i1l3637
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;UART_Driver.c: 164: readBuffer.state = 0x05;
  6282  000CBA  0E05               	movlw	5
  6283  000CBC  0100               	movlb	0	; () banked
  6284  000CBE  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;UART_Driver.c: 165: comMes.command[comMes.commandCnt] = '\0';
  6288  000CC0  0100               	movlb	0	; () banked
  6289  000CC2  5165               	movf	(_comMes+5)& (0+255),w,b
  6290  000CC4  0D01               	mullw	1
  6291  000CC6  0E60               	movlw	low _comMes
  6292  000CC8  24F3               	addwf	prodl,w,c
  6293  000CCA  6ED9               	movwf	fsr2l,c
  6294  000CCC  0E00               	movlw	high _comMes
  6295  000CCE  20F4               	addwfc	prodh,w,c
  6296  000CD0  6EDA               	movwf	fsr2h,c
  6297  000CD2  0E00               	movlw	0
  6298  000CD4  6EDF               	movwf	indf2,c
  6299                           
  6300                           ;UART_Driver.c: 166: } else {
  6301  000CD6  0012               	return	
  6302  000CD8                     i1l3637:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;UART_Driver.c: 167: comMes.command[comMes.commandCnt] = data;
  6306  000CD8  0100               	movlb	0	; () banked
  6307  000CDA  5165               	movf	(_comMes+5)& (0+255),w,b
  6308  000CDC  0D01               	mullw	1
  6309  000CDE  0E60               	movlw	low _comMes
  6310  000CE0  24F3               	addwf	prodl,w,c
  6311  000CE2  6ED9               	movwf	fsr2l,c
  6312  000CE4  0E00               	movlw	high _comMes
  6313  000CE6  20F4               	addwfc	prodh,w,c
  6314  000CE8  6EDA               	movwf	fsr2h,c
  6315  000CEA  C0D2  FFDF         	movff	fillDataBuffer@data,indf2
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;UART_Driver.c: 168: comMes.commandCnt++;
  6319  000CEE  0100               	movlb	0	; () banked
  6320  000CF0  2B65               	incf	(_comMes+5)& (0+255),f,b
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;UART_Driver.c: 169: if(comMes.commandCnt > 50) {
  6324  000CF2  0E32               	movlw	50
  6325  000CF4  0100               	movlb	0	; () banked
  6326  000CF6  6565               	cpfsgt	(_comMes+5)& (0+255),b
  6327  000CF8  0012               	return	
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;UART_Driver.c: 170: comMes.commandCnt = 0;
  6331  000CFA  0E00               	movlw	0
  6332  000CFC  0100               	movlb	0	; () banked
  6333  000CFE  6F65               	movwf	(_comMes+5)& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;UART_Driver.c: 171: }
  6337                           ;UART_Driver.c: 172: }
  6338                           ;UART_Driver.c: 173: break;
  6339                           
  6340                           ; BSR set to: 0
  6341  000D00  0012               	return	
  6342  000D02                     i1l3645:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;UART_Driver.c: 176: if (data == 0x3A) {
  6346  000D02  0E3A               	movlw	58
  6347  000D04  0100               	movlb	0	; () banked
  6348  000D06  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6349  000D08  A4D8               	btfss	status,2,c
  6350  000D0A  D05E               	goto	i1l3679
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;UART_Driver.c: 177: comMes.message[comMes.messageCnt] = '\0';
  6354  000D0C  0100               	movlb	0	; () banked
  6355  000D0E  5170               	movf	(_comMes+16)& (0+255),w,b
  6356  000D10  0D01               	mullw	1
  6357  000D12  0E66               	movlw	low (_comMes+6)
  6358  000D14  24F3               	addwf	prodl,w,c
  6359  000D16  6ED9               	movwf	fsr2l,c
  6360  000D18  0E00               	movlw	high (_comMes+6)
  6361  000D1A  20F4               	addwfc	prodh,w,c
  6362  000D1C  6EDA               	movwf	fsr2h,c
  6363  000D1E  0E00               	movlw	0
  6364  000D20  6EDF               	movwf	indf2,c
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;UART_Driver.c: 178: readBuffer.comMes[bufferCnt] = comMes;
  6368  000D22  EE20  F060         	lfsr	2,_comMes
  6369  000D26  502E               	movf	_bufferCnt,w,c
  6370  000D28  0D11               	mullw	17
  6371  000D2A  0E8B               	movlw	low (_readBuffer+10)
  6372  000D2C  24F3               	addwf	prodl,w,c
  6373  000D2E  6EE1               	movwf	fsr1l,c
  6374  000D30  0E00               	movlw	high (_readBuffer+10)
  6375  000D32  20F4               	addwfc	prodh,w,c
  6376  000D34  6EE2               	movwf	fsr1h,c
  6377  000D36  0E10               	movlw	16
  6378  000D38                     i1u314_21:
  6379  000D38  CFDB FFE3          	movff	plusw2,plusw1
  6380  000D3C  06E8               	decf	wreg,f,c
  6381  000D3E  E2FC               	bc	i1u314_21
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;UART_Driver.c: 179: uint8_t i = 0;
  6385  000D40  0E00               	movlw	0
  6386  000D42  0100               	movlb	0	; () banked
  6387  000D44  6FD1               	movwf	fillDataBuffer@i& (0+255),b
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;UART_Driver.c: 180: for (i=0; i < comMes.commandCnt; i++) {
  6391  000D46  0E00               	movlw	0
  6392  000D48  0100               	movlb	0	; () banked
  6393  000D4A  6FD1               	movwf	fillDataBuffer@i& (0+255),b
  6394  000D4C  D00D               	goto	i1l3659
  6395  000D4E                     i1l3655:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;UART_Driver.c: 181: comMes.command[i] = 0;
  6399  000D4E  0100               	movlb	0	; () banked
  6400  000D50  51D1               	movf	fillDataBuffer@i& (0+255),w,b
  6401  000D52  0D01               	mullw	1
  6402  000D54  0E60               	movlw	low _comMes
  6403  000D56  24F3               	addwf	prodl,w,c
  6404  000D58  6ED9               	movwf	fsr2l,c
  6405  000D5A  0E00               	movlw	high _comMes
  6406  000D5C  20F4               	addwfc	prodh,w,c
  6407  000D5E  6EDA               	movwf	fsr2h,c
  6408  000D60  0E00               	movlw	0
  6409  000D62  6EDF               	movwf	indf2,c
  6410                           
  6411                           ; BSR set to: 0
  6412  000D64  0100               	movlb	0	; () banked
  6413  000D66  2BD1               	incf	fillDataBuffer@i& (0+255),f,b
  6414  000D68                     i1l3659:
  6415                           
  6416                           ; BSR set to: 0
  6417  000D68  0100               	movlb	0	; () banked
  6418  000D6A  5165               	movf	(_comMes+5)& (0+255),w,b
  6419  000D6C  0100               	movlb	0	; () banked
  6420  000D6E  5DD1               	subwf	fillDataBuffer@i& (0+255),w,b
  6421  000D70  A0D8               	btfss	status,0,c
  6422  000D72  D7ED               	goto	i1l3655
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;UART_Driver.c: 182: }
  6426                           ;UART_Driver.c: 183: for (i=0; i < comMes.messageCnt; i++) {
  6427                           
  6428                           ; BSR set to: 0
  6429  000D74  0E00               	movlw	0
  6430  000D76  0100               	movlb	0	; () banked
  6431  000D78  6FD1               	movwf	fillDataBuffer@i& (0+255),b
  6432  000D7A  D00D               	goto	i1l3667
  6433  000D7C                     i1l3663:
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;UART_Driver.c: 184: comMes.message[i] = 0;
  6437  000D7C  0100               	movlb	0	; () banked
  6438  000D7E  51D1               	movf	fillDataBuffer@i& (0+255),w,b
  6439  000D80  0D01               	mullw	1
  6440  000D82  0E66               	movlw	low (_comMes+6)
  6441  000D84  24F3               	addwf	prodl,w,c
  6442  000D86  6ED9               	movwf	fsr2l,c
  6443  000D88  0E00               	movlw	high (_comMes+6)
  6444  000D8A  20F4               	addwfc	prodh,w,c
  6445  000D8C  6EDA               	movwf	fsr2h,c
  6446  000D8E  0E00               	movlw	0
  6447  000D90  6EDF               	movwf	indf2,c
  6448                           
  6449                           ; BSR set to: 0
  6450  000D92  0100               	movlb	0	; () banked
  6451  000D94  2BD1               	incf	fillDataBuffer@i& (0+255),f,b
  6452  000D96                     i1l3667:
  6453                           
  6454                           ; BSR set to: 0
  6455  000D96  0100               	movlb	0	; () banked
  6456  000D98  5170               	movf	(_comMes+16)& (0+255),w,b
  6457  000D9A  0100               	movlb	0	; () banked
  6458  000D9C  5DD1               	subwf	fillDataBuffer@i& (0+255),w,b
  6459  000D9E  A0D8               	btfss	status,0,c
  6460  000DA0  D7ED               	goto	i1l3663
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;UART_Driver.c: 185: }
  6464                           ;UART_Driver.c: 186: comMes.commandCnt = 0;
  6465                           
  6466                           ; BSR set to: 0
  6467  000DA2  0E00               	movlw	0
  6468  000DA4  0100               	movlb	0	; () banked
  6469  000DA6  6F65               	movwf	(_comMes+5)& (0+255),b
  6470                           
  6471                           ;UART_Driver.c: 187: comMes.messageCnt = 0;
  6472  000DA8  0E00               	movlw	0
  6473  000DAA  0100               	movlb	0	; () banked
  6474  000DAC  6F70               	movwf	(_comMes+16)& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;UART_Driver.c: 188: blockLength--;
  6478  000DAE  062D               	decf	_blockLength,f,c
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;UART_Driver.c: 189: bufferCnt++;
  6482  000DB0  2A2E               	incf	_bufferCnt,f,c
  6483                           
  6484                           ;UART_Driver.c: 190: if (blockLength == 0) {
  6485  000DB2  502D               	movf	_blockLength,w,c
  6486  000DB4  A4D8               	btfss	status,2,c
  6487  000DB6  D004               	goto	i1l3677
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;UART_Driver.c: 191: readBuffer.state = 0x06;
  6491  000DB8  0E06               	movlw	6
  6492  000DBA  0100               	movlb	0	; () banked
  6493  000DBC  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6494                           
  6495                           ;UART_Driver.c: 192: } else {
  6496  000DBE  0012               	return	
  6497  000DC0                     i1l3677:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;UART_Driver.c: 193: readBuffer.state = 0x04;
  6501  000DC0  0E04               	movlw	4
  6502  000DC2  0100               	movlb	0	; () banked
  6503  000DC4  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;UART_Driver.c: 194: }
  6507                           ;UART_Driver.c: 195: } else {
  6508  000DC6  0012               	return	
  6509  000DC8                     i1l3679:
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;UART_Driver.c: 196: comMes.message[comMes.messageCnt] = data;
  6513  000DC8  0100               	movlb	0	; () banked
  6514  000DCA  5170               	movf	(_comMes+16)& (0+255),w,b
  6515  000DCC  0D01               	mullw	1
  6516  000DCE  0E66               	movlw	low (_comMes+6)
  6517  000DD0  24F3               	addwf	prodl,w,c
  6518  000DD2  6ED9               	movwf	fsr2l,c
  6519  000DD4  0E00               	movlw	high (_comMes+6)
  6520  000DD6  20F4               	addwfc	prodh,w,c
  6521  000DD8  6EDA               	movwf	fsr2h,c
  6522  000DDA  C0D2  FFDF         	movff	fillDataBuffer@data,indf2
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;UART_Driver.c: 197: comMes.messageCnt++;
  6526  000DDE  0100               	movlb	0	; () banked
  6527  000DE0  2B70               	incf	(_comMes+16)& (0+255),f,b
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;UART_Driver.c: 198: if(comMes.messageCnt > 50) {
  6531  000DE2  0E32               	movlw	50
  6532  000DE4  0100               	movlb	0	; () banked
  6533  000DE6  6570               	cpfsgt	(_comMes+16)& (0+255),b
  6534  000DE8  0012               	return	
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;UART_Driver.c: 199: comMes.messageCnt = 0;
  6538  000DEA  0E00               	movlw	0
  6539  000DEC  0100               	movlb	0	; () banked
  6540  000DEE  6F70               	movwf	(_comMes+16)& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;UART_Driver.c: 200: }
  6544                           ;UART_Driver.c: 201: }
  6545                           ;UART_Driver.c: 202: break;
  6546                           
  6547                           ; BSR set to: 0
  6548  000DF0  0012               	return	
  6549  000DF2                     i1l3687:
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;UART_Driver.c: 205: if (data == 0x24) {
  6553  000DF2  0E24               	movlw	36
  6554  000DF4  0100               	movlb	0	; () banked
  6555  000DF6  19D2               	xorwf	fillDataBuffer@data& (0+255),w,b
  6556  000DF8  A4D8               	btfss	status,2,c
  6557  000DFA  D009               	goto	i1l3695
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;UART_Driver.c: 206: acknowledge();
  6561  000DFC  ECA4  F00D         	call	_acknowledge	;wreg free
  6562                           
  6563                           ;UART_Driver.c: 207: readBuffer.state = 0x00;
  6564  000E00  0E00               	movlw	0
  6565  000E02  0100               	movlb	0	; () banked
  6566  000E04  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;UART_Driver.c: 208: D_UART_ReadFlag = 1;
  6570  000E06  0E01               	movlw	1
  6571  000E08  0100               	movlb	0	; () banked
  6572  000E0A  6F7D               	movwf	_D_UART_ReadFlag& (0+255),b
  6573                           
  6574                           ;UART_Driver.c: 209: } else {
  6575  000E0C  0012               	return	
  6576  000E0E                     i1l3695:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;UART_Driver.c: 210: readBuffer.readId = (data - 0x30);
  6580  000E0E  0100               	movlb	0	; () banked
  6581  000E10  51D2               	movf	fillDataBuffer@data& (0+255),w,b
  6582  000E12  0FD0               	addlw	208
  6583  000E14  0100               	movlb	0	; () banked
  6584  000E16  6FBE               	movwf	(_readBuffer+61)& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;UART_Driver.c: 211: }
  6588                           ;UART_Driver.c: 212: break;
  6589  000E18  0012               	return	
  6590  000E1A                     i1l3697:
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;UART_Driver.c: 215: readBuffer.state = 0x00;
  6594  000E1A  0E00               	movlw	0
  6595  000E1C  0100               	movlb	0	; () banked
  6596  000E1E  6FBF               	movwf	(_readBuffer+62)& (0+255),b
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;UART_Driver.c: 217: }
  6600                           
  6601                           ;UART_Driver.c: 216: break;
  6602  000E20  0012               	return	
  6603  000E22                     i1l3701:
  6604  000E22  0100               	movlb	0	; () banked
  6605  000E24  51BF               	movf	(_readBuffer+62)& (0+255),w,b
  6606                           
  6607                           ; Switch size 1, requested type "space"
  6608                           ; Number of cases is 7, Range of values is 0 to 6
  6609                           ; switch strategies available:
  6610                           ; Name         Instructions Cycles
  6611                           ; simple_byte           22    12 (average)
  6612                           ;	Chosen strategy is simple_byte
  6613  000E26  0A00               	xorlw	0	; case 0
  6614  000E28  B4D8               	btfsc	status,2,c
  6615  000E2A  D6AF               	goto	i1l3587
  6616  000E2C  0A01               	xorlw	1	; case 1
  6617  000E2E  B4D8               	btfsc	status,2,c
  6618  000E30  D6CF               	goto	i1l3595
  6619  000E32  0A03               	xorlw	3	; case 2
  6620  000E34  B4D8               	btfsc	status,2,c
  6621  000E36  D6F5               	goto	i1l3609
  6622  000E38  0A01               	xorlw	1	; case 3
  6623  000E3A  B4D8               	btfsc	status,2,c
  6624  000E3C  D71B               	goto	i1l3623
  6625  000E3E  0A07               	xorlw	7	; case 4
  6626  000E40  B4D8               	btfsc	status,2,c
  6627  000E42  D736               	goto	i1l3631
  6628  000E44  0A01               	xorlw	1	; case 5
  6629  000E46  B4D8               	btfsc	status,2,c
  6630  000E48  D75C               	goto	i1l3645
  6631  000E4A  0A03               	xorlw	3	; case 6
  6632  000E4C  B4D8               	btfsc	status,2,c
  6633  000E4E  D7D1               	goto	i1l3687
  6634  000E50  D7E4               	goto	i1l3697
  6635  000E52                     __end_of_fillDataBuffer:
  6636                           	opt stack 0
  6637                           pclatu	equ	0xFFB
  6638                           pclath	equ	0xFFA
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           intcon	equ	0xFF2
  6646                           intcon2	equ	0xFF1
  6647                           postinc0	equ	0xFEE
  6648                           plusw0	equ	0xFEB
  6649                           fsr0h	equ	0xFEA
  6650                           fsr0l	equ	0xFE9
  6651                           wreg	equ	0xFE8
  6652                           postdec1	equ	0xFE5
  6653                           plusw1	equ	0xFE3
  6654                           fsr1h	equ	0xFE2
  6655                           fsr1l	equ	0xFE1
  6656                           bsr	equ	0xFE0
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           postdec2	equ	0xFDD
  6660                           plusw2	equ	0xFDB
  6661                           fsr2h	equ	0xFDA
  6662                           fsr2l	equ	0xFD9
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function _acknowledge *****************
  6666 ;; Defined at:
  6667 ;;		line 220 in file "Drivers/UART_Driver.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;		None
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;		None
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  1    wreg      void 
  6674 ;; Registers used:
  6675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6681 ;;      Params:         0       0       0       0       0       0       0       0       0
  6682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6684 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6685 ;;Total ram usage:        0 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; Hardware stack levels required when called:    9
  6688 ;; This function calls:
  6689 ;;		i1_printf
  6690 ;; This function is called by:
  6691 ;;		_fillDataBuffer
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           	psect	text40
  6696  001B48                     __ptext40:
  6697                           	opt stack 0
  6698  001B48                     _acknowledge:
  6699                           	opt stack 13
  6700                           
  6701                           ;UART_Driver.c: 221: printf(startCharacter);
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;incstack = 0
  6705  001B48  C040  F0C1         	movff	_startCharacter,i1printf@f
  6706  001B4C  C041  F0C2         	movff	_startCharacter+1,i1printf@f+1
  6707  001B50  0100               	movlb	0	; () banked
  6708  001B52  51C1               	movf	i1printf@f& (0+255),w,b
  6709  001B54  11C2               	iorwf	(i1printf@f+1)& (0+255),w,b
  6710  001B56  A4D8               	btfss	status,2,c
  6711  001B58  0E00               	movlw	low (__mediumconst shr (0+16))
  6712  001B5A  6FC3               	movwf	(i1printf@f+2)& (0+255),b
  6713  001B5C  EC5E  F008         	call	i1_printf	;wreg free
  6714                           
  6715                           ;UART_Driver.c: 223: printf(ackCharacter);
  6716  001B60  C03C  F0C1         	movff	_ackCharacter,i1printf@f
  6717  001B64  C03D  F0C2         	movff	_ackCharacter+1,i1printf@f+1
  6718  001B68  0100               	movlb	0	; () banked
  6719  001B6A  51C1               	movf	i1printf@f& (0+255),w,b
  6720  001B6C  11C2               	iorwf	(i1printf@f+1)& (0+255),w,b
  6721  001B6E  A4D8               	btfss	status,2,c
  6722  001B70  0E00               	movlw	low (__mediumconst shr (0+16))
  6723  001B72  6FC3               	movwf	(i1printf@f+2)& (0+255),b
  6724  001B74  EC5E  F008         	call	i1_printf	;wreg free
  6725                           
  6726                           ;UART_Driver.c: 225: printf("%x",readBuffer.readId);
  6727  001B78  0E50               	movlw	low STR_6
  6728  001B7A  0100               	movlb	0	; () banked
  6729  001B7C  6FC1               	movwf	i1printf@f& (0+255),b
  6730  001B7E  0E08               	movlw	high STR_6
  6731  001B80  0100               	movlb	0	; () banked
  6732  001B82  6FC2               	movwf	(i1printf@f+1)& (0+255),b
  6733  001B84  0100               	movlb	0	; () banked
  6734  001B86  51C1               	movf	i1printf@f& (0+255),w,b
  6735  001B88  11C2               	iorwf	(i1printf@f+1)& (0+255),w,b
  6736  001B8A  A4D8               	btfss	status,2,c
  6737  001B8C  0E00               	movlw	low (__mediumconst shr (0+16))
  6738  001B8E  6FC3               	movwf	(i1printf@f+2)& (0+255),b
  6739  001B90  C0BE  F0C4         	movff	_readBuffer+61,?i1_printf+3
  6740  001B94  0100               	movlb	0	; () banked
  6741  001B96  6BC5               	clrf	(?i1_printf+4)& (0+255),b
  6742  001B98  EC5E  F008         	call	i1_printf	;wreg free
  6743                           
  6744                           ;UART_Driver.c: 227: printf(stopCharacter);
  6745  001B9C  C042  F0C1         	movff	_stopCharacter,i1printf@f
  6746  001BA0  C043  F0C2         	movff	_stopCharacter+1,i1printf@f+1
  6747  001BA4  0100               	movlb	0	; () banked
  6748  001BA6  51C1               	movf	i1printf@f& (0+255),w,b
  6749  001BA8  11C2               	iorwf	(i1printf@f+1)& (0+255),w,b
  6750  001BAA  A4D8               	btfss	status,2,c
  6751  001BAC  0E00               	movlw	low (__mediumconst shr (0+16))
  6752  001BAE  6FC3               	movwf	(i1printf@f+2)& (0+255),b
  6753  001BB0  EC5E  F008         	call	i1_printf	;wreg free
  6754  001BB4  0012               	return		;funcret
  6755  001BB6                     __end_of_acknowledge:
  6756                           	opt stack 0
  6757                           pclatu	equ	0xFFB
  6758                           pclath	equ	0xFFA
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           intcon	equ	0xFF2
  6766                           intcon2	equ	0xFF1
  6767                           postinc0	equ	0xFEE
  6768                           plusw0	equ	0xFEB
  6769                           fsr0h	equ	0xFEA
  6770                           fsr0l	equ	0xFE9
  6771                           wreg	equ	0xFE8
  6772                           postdec1	equ	0xFE5
  6773                           plusw1	equ	0xFE3
  6774                           fsr1h	equ	0xFE2
  6775                           fsr1l	equ	0xFE1
  6776                           bsr	equ	0xFE0
  6777                           indf2	equ	0xFDF
  6778                           postinc2	equ	0xFDE
  6779                           postdec2	equ	0xFDD
  6780                           plusw2	equ	0xFDB
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function i1_printf *****************
  6786 ;; Defined at:
  6787 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  f               3    1[BANK0 ] PTR const unsigned char 
  6790 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  6791 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  6792 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  6793 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  6794 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  printf          4    0        struct .
  6797 ;;  printf          3    0        PTR const unsigned char 
  6798 ;;  printf          2   14[BANK0 ] unsigned int 
  6799 ;;  printf          2   10[BANK0 ] PTR void [1]
  6800 ;;		 -> ?i1_printf(2), ?_printf(2), 
  6801 ;;  printf          2    0        unsigned int 
  6802 ;;  printf          1   16[BANK0 ] char 
  6803 ;;  printf          1   13[BANK0 ] unsigned char 
  6804 ;;  printf          1   12[BANK0 ] char 
  6805 ;;  printf          1    9[BANK0 ] unsigned char 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2    1[BANK0 ] int 
  6808 ;; Registers used:
  6809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6815 ;;      Params:         0       5       0       0       0       0       0       0       0
  6816 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6817 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6818 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6819 ;;Total ram usage:       16 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    8
  6822 ;; This function calls:
  6823 ;;		i1___lwdiv
  6824 ;;		i1___lwmod
  6825 ;;		i1_putch
  6826 ;; This function is called by:
  6827 ;;		_acknowledge
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text41
  6832  0010BC                     __ptext41:
  6833                           	opt stack 0
  6834  0010BC                     i1_printf:
  6835                           	opt stack 13
  6836                           
  6837                           ;doprnt.c: 466: va_list ap;
  6838                           ;doprnt.c: 499: signed char c;
  6839                           ;doprnt.c: 506: signed char prec;
  6840                           ;doprnt.c: 508: unsigned char flag;
  6841                           ;doprnt.c: 523: union {
  6842                           ;doprnt.c: 524: unsigned long vd;
  6843                           ;doprnt.c: 525: double integ;
  6844                           ;doprnt.c: 526: } tmpval;
  6845                           ;doprnt.c: 528: unsigned int val;
  6846                           ;doprnt.c: 529: unsigned len;
  6847                           ;doprnt.c: 530: const char * cp;
  6848                           ;doprnt.c: 533: *ap = __va_start();
  6849                           
  6850                           ;incstack = 0
  6851  0010BC  0EC4               	movlw	low (?i1_printf+3)
  6852  0010BE  0100               	movlb	0	; () banked
  6853  0010C0  6FCA               	movwf	i1printf@ap& (0+255),b
  6854  0010C2  0E00               	movlw	high (?i1_printf+3)
  6855  0010C4  0100               	movlb	0	; () banked
  6856  0010C6  6FCB               	movwf	(i1printf@ap+1)& (0+255),b
  6857                           
  6858                           ;doprnt.c: 536: while(c = *f++) {
  6859  0010C8  D112               	goto	i1l3433
  6860  0010CA                     i1l3353:
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;doprnt.c: 538: if(c != '%')
  6864  0010CA  0E25               	movlw	37
  6865  0010CC  0100               	movlb	0	; () banked
  6866  0010CE  19D0               	xorwf	i1printf@c& (0+255),w,b
  6867  0010D0  B4D8               	btfsc	status,2,c
  6868  0010D2  D005               	goto	i1l3357
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;doprnt.c: 540: {
  6872                           ;doprnt.c: 541: (putch(c) );
  6873  0010D4  0100               	movlb	0	; () banked
  6874  0010D6  51D0               	movf	i1printf@c& (0+255),w,b
  6875  0010D8  ECBC  F010         	call	i1_putch
  6876                           
  6877                           ;doprnt.c: 542: continue;
  6878  0010DC  D108               	goto	i1l3433
  6879  0010DE                     i1l3357:
  6880                           
  6881                           ;doprnt.c: 543: }
  6882                           ;doprnt.c: 548: flag = 0;
  6883  0010DE  0E00               	movlw	0
  6884  0010E0  0100               	movlb	0	; () banked
  6885  0010E2  6FCD               	movwf	i1printf@flag& (0+255),b
  6886                           
  6887                           ;doprnt.c: 635: switch(c = *f++) {
  6888  0010E4  D008               	goto	i1l3365
  6889  0010E6                     i1l3359:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;doprnt.c: 721: flag |= 0x80;
  6893  0010E6  0100               	movlb	0	; () banked
  6894  0010E8  8FCD               	bsf	i1printf@flag& (0+255),7,b
  6895                           
  6896                           ;doprnt.c: 723: break;
  6897  0010EA  D028               	goto	i1l504
  6898  0010EC                     i1l3361:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;doprnt.c: 809: (putch(c) );
  6902  0010EC  0100               	movlb	0	; () banked
  6903  0010EE  51D0               	movf	i1printf@c& (0+255),w,b
  6904  0010F0  ECBC  F010         	call	i1_putch
  6905                           
  6906                           ;doprnt.c: 810: continue;
  6907  0010F4  D0FC               	goto	i1l3433
  6908  0010F6                     i1l3365:
  6909  0010F6  C0C1  F0C6         	movff	i1printf@f,??i1_printf
  6910  0010FA  C0C2  F0C7         	movff	i1printf@f+1,??i1_printf+1
  6911  0010FE  C0C3  F0C8         	movff	i1printf@f+2,??i1_printf+2
  6912  001102  0100               	movlb	0	; () banked
  6913  001104  2BC1               	incf	i1printf@f& (0+255),f,b
  6914  001106  0E00               	movlw	0
  6915  001108  23C2               	addwfc	(i1printf@f+1)& (0+255),f,b
  6916  00110A  23C3               	addwfc	(i1printf@f+2)& (0+255),f,b
  6917  00110C  C0C6  FFF6         	movff	??i1_printf,tblptrl
  6918  001110  C0C7  FFF7         	movff	??i1_printf+1,tblptrh
  6919  001114  C0C8  FFF8         	movff	??i1_printf+2,tblptru
  6920  001118  0008               	tblrd		*
  6921  00111A  CFF5 F0D0          	movff	tablat,i1printf@c
  6922  00111E  0100               	movlb	0	; () banked
  6923  001120  51D0               	movf	i1printf@c& (0+255),w,b
  6924                           
  6925                           ; Switch size 1, requested type "space"
  6926                           ; Number of cases is 4, Range of values is 0 to 120
  6927                           ; switch strategies available:
  6928                           ; Name         Instructions Cycles
  6929                           ; simple_byte           13     7 (average)
  6930                           ;	Chosen strategy is simple_byte
  6931  001122  0A00               	xorlw	0	; case 0
  6932  001124  B4D8               	btfsc	status,2,c
  6933  001126  0012               	return	
  6934  001128  0A64               	xorlw	100	; case 100
  6935  00112A  B4D8               	btfsc	status,2,c
  6936  00112C  D007               	goto	i1l504
  6937  00112E  0A0D               	xorlw	13	; case 105
  6938  001130  B4D8               	btfsc	status,2,c
  6939  001132  D004               	goto	i1l504
  6940  001134  0A11               	xorlw	17	; case 120
  6941  001136  B4D8               	btfsc	status,2,c
  6942  001138  D7D6               	goto	i1l3359
  6943  00113A  D7D8               	goto	i1l3361
  6944  00113C                     i1l504:
  6945                           
  6946                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6947  00113C  0100               	movlb	0	; () banked
  6948  00113E  BFCD               	btfsc	i1printf@flag& (0+255),7,b
  6949  001140  D019               	goto	i1l3377
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1253: {
  6953                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6954  001142  C0CA  FFD9         	movff	i1printf@ap,fsr2l
  6955  001146  C0CB  FFDA         	movff	i1printf@ap+1,fsr2h
  6956  00114A  CFDE F0CE          	movff	postinc2,i1printf@val
  6957  00114E  CFDD F0CF          	movff	postdec2,i1printf@val+1
  6958                           
  6959                           ; BSR set to: 0
  6960  001152  0E02               	movlw	2
  6961  001154  0100               	movlb	0	; () banked
  6962  001156  27CA               	addwf	i1printf@ap& (0+255),f,b
  6963  001158  0E00               	movlw	0
  6964  00115A  23CB               	addwfc	(i1printf@ap+1)& (0+255),f,b
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;doprnt.c: 1261: if((int)val < 0) {
  6968  00115C  0100               	movlb	0	; () banked
  6969  00115E  AFCF               	btfss	(i1printf@val+1)& (0+255),7,b
  6970  001160  D053               	goto	i1l3411
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1262: flag |= 0x03;
  6974  001162  0E03               	movlw	3
  6975  001164  0100               	movlb	0	; () banked
  6976  001166  13CD               	iorwf	i1printf@flag& (0+255),f,b
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;doprnt.c: 1263: val = -val;
  6980  001168  0100               	movlb	0	; () banked
  6981  00116A  6DCE               	negf	i1printf@val& (0+255),b
  6982  00116C  1FCF               	comf	(i1printf@val+1)& (0+255),f,b
  6983  00116E  B0D8               	btfsc	status,0,c
  6984  001170  2BCF               	incf	(i1printf@val+1)& (0+255),f,b
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;doprnt.c: 1264: }
  6988                           ;doprnt.c: 1266: }
  6989  001172  D04A               	goto	i1l3411
  6990  001174                     i1l3377:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;doprnt.c: 1268: else
  6994                           ;doprnt.c: 1273: {
  6995                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6996  001174  C0CA  FFD9         	movff	i1printf@ap,fsr2l
  6997  001178  C0CB  FFDA         	movff	i1printf@ap+1,fsr2h
  6998  00117C  CFDE F0CE          	movff	postinc2,i1printf@val
  6999  001180  CFDD F0CF          	movff	postdec2,i1printf@val+1
  7000                           
  7001                           ; BSR set to: 0
  7002  001184  0E02               	movlw	2
  7003  001186  0100               	movlb	0	; () banked
  7004  001188  27CA               	addwf	i1printf@ap& (0+255),f,b
  7005  00118A  0E00               	movlw	0
  7006  00118C  23CB               	addwfc	(i1printf@ap+1)& (0+255),f,b
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 1287: }
  7010                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7011  00118E  D03C               	goto	i1l3411
  7012  001190                     i1l3381:
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7016  001190  0E01               	movlw	1
  7017  001192  0100               	movlb	0	; () banked
  7018  001194  6FD0               	movwf	i1printf@c& (0+255),b
  7019  001196                     i1l3383:
  7020                           
  7021                           ; BSR set to: 0
  7022  001196  0E05               	movlw	5
  7023  001198  0100               	movlb	0	; () banked
  7024  00119A  19D0               	xorwf	i1printf@c& (0+255),w,b
  7025  00119C  B4D8               	btfsc	status,2,c
  7026  00119E  D03D               	goto	i1l3413
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;doprnt.c: 1306: if(val < dpowers[c])
  7030                           
  7031                           ; BSR set to: 0
  7032                           
  7033                           ; BSR set to: 0
  7034  0011A0  0100               	movlb	0	; () banked
  7035  0011A2  51D0               	movf	i1printf@c& (0+255),w,b
  7036  0011A4  0D02               	mullw	2
  7037  0011A6  0E01               	movlw	low _dpowers
  7038  0011A8  24F3               	addwf	prodl,w,c
  7039  0011AA  6EF6               	movwf	tblptrl,c
  7040  0011AC  0E08               	movlw	high _dpowers
  7041  0011AE  20F4               	addwfc	prodh,w,c
  7042  0011B0  6EF7               	movwf	tblptrh,c
  7043  0011B2                     	if	0	;There are less than 3 active tblptr bytes
  7044  0011B2                     	endif
  7045  0011B2  0009               	tblrd		*+
  7046  0011B4  50F5               	movf	tablat,w,c
  7047  0011B6  0100               	movlb	0	; () banked
  7048  0011B8  5DCE               	subwf	i1printf@val& (0+255),w,b
  7049  0011BA  0009               	tblrd		*+
  7050  0011BC  50F5               	movf	tablat,w,c
  7051  0011BE  0100               	movlb	0	; () banked
  7052  0011C0  59CF               	subwfb	(i1printf@val+1)& (0+255),w,b
  7053  0011C2  A0D8               	btfss	status,0,c
  7054  0011C4  D02A               	goto	i1l3413
  7055                           
  7056                           ; BSR set to: 0
  7057                           
  7058                           ; BSR set to: 0
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;doprnt.c: 1307: break;
  7062  0011C6  0100               	movlb	0	; () banked
  7063  0011C8  2BD0               	incf	i1printf@c& (0+255),f,b
  7064  0011CA  D7E5               	goto	i1l3383
  7065  0011CC                     i1l3395:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7069  0011CC  0E01               	movlw	1
  7070  0011CE  0100               	movlb	0	; () banked
  7071  0011D0  6FD0               	movwf	i1printf@c& (0+255),b
  7072  0011D2                     i1l3397:
  7073                           
  7074                           ; BSR set to: 0
  7075  0011D2  0E04               	movlw	4
  7076  0011D4  0100               	movlb	0	; () banked
  7077  0011D6  19D0               	xorwf	i1printf@c& (0+255),w,b
  7078  0011D8  B4D8               	btfsc	status,2,c
  7079  0011DA  D01F               	goto	i1l3413
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  0011DC  0100               	movlb	0	; () banked
  7088  0011DE  51D0               	movf	i1printf@c& (0+255),w,b
  7089  0011E0  0D02               	mullw	2
  7090  0011E2  0E0B               	movlw	low _hexpowers
  7091  0011E4  24F3               	addwf	prodl,w,c
  7092  0011E6  6EF6               	movwf	tblptrl,c
  7093  0011E8  0E08               	movlw	high _hexpowers
  7094  0011EA  20F4               	addwfc	prodh,w,c
  7095  0011EC  6EF7               	movwf	tblptrh,c
  7096  0011EE                     	if	0	;There are less than 3 active tblptr bytes
  7097  0011EE                     	endif
  7098  0011EE  0009               	tblrd		*+
  7099  0011F0  50F5               	movf	tablat,w,c
  7100  0011F2  0100               	movlb	0	; () banked
  7101  0011F4  5DCE               	subwf	i1printf@val& (0+255),w,b
  7102  0011F6  0009               	tblrd		*+
  7103  0011F8  50F5               	movf	tablat,w,c
  7104  0011FA  0100               	movlb	0	; () banked
  7105  0011FC  59CF               	subwfb	(i1printf@val+1)& (0+255),w,b
  7106  0011FE  A0D8               	btfss	status,0,c
  7107  001200  D00C               	goto	i1l3413
  7108                           
  7109                           ; BSR set to: 0
  7110                           
  7111                           ; BSR set to: 0
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;doprnt.c: 1318: break;
  7115  001202  0100               	movlb	0	; () banked
  7116  001204  2BD0               	incf	i1printf@c& (0+255),f,b
  7117  001206  D7E5               	goto	i1l3397
  7118  001208                     i1l3411:
  7119                           
  7120                           ; BSR set to: 0
  7121  001208  0100               	movlb	0	; () banked
  7122  00120A  51CD               	movf	i1printf@flag& (0+255),w,b
  7123  00120C  0B80               	andlw	128
  7124                           
  7125                           ; Switch size 1, requested type "space"
  7126                           ; Number of cases is 2, Range of values is 0 to 128
  7127                           ; switch strategies available:
  7128                           ; Name         Instructions Cycles
  7129                           ; simple_byte            7     4 (average)
  7130                           ;	Chosen strategy is simple_byte
  7131  00120E  0A00               	xorlw	0	; case 0
  7132  001210  B4D8               	btfsc	status,2,c
  7133  001212  D7BE               	goto	i1l3381
  7134  001214  0A80               	xorlw	128	; case 128
  7135  001216  B4D8               	btfsc	status,2,c
  7136  001218  D7D9               	goto	i1l3395
  7137  00121A                     i1l3413:
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;doprnt.c: 1422: {
  7141                           ;doprnt.c: 1438: if(flag & 0x03)
  7142  00121A  C0CD  F0C6         	movff	i1printf@flag,??i1_printf
  7143  00121E  0E03               	movlw	3
  7144  001220  0100               	movlb	0	; () banked
  7145  001222  17C6               	andwf	??i1_printf& (0+255),f,b
  7146  001224  B4D8               	btfsc	status,2,c
  7147  001226  D003               	goto	i1l3417
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;doprnt.c: 1439: (putch('-') );
  7151  001228  0E2D               	movlw	45
  7152  00122A  ECBC  F010         	call	i1_putch
  7153  00122E                     i1l3417:
  7154                           
  7155                           ;doprnt.c: 1469: }
  7156                           ;doprnt.c: 1472: prec = c;
  7157  00122E  C0D0  F0CC         	movff	i1printf@c,i1printf@prec
  7158                           
  7159                           ;doprnt.c: 1474: while(prec--) {
  7160  001232  D057               	goto	i1l3431
  7161  001234                     i1l3419:
  7162                           
  7163                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7164  001234  0100               	movlb	0	; () banked
  7165  001236  51CC               	movf	i1printf@prec& (0+255),w,b
  7166  001238  0D02               	mullw	2
  7167  00123A  0E01               	movlw	low _dpowers
  7168  00123C  24F3               	addwf	prodl,w,c
  7169  00123E  6EF6               	movwf	tblptrl,c
  7170  001240  0E08               	movlw	high _dpowers
  7171  001242  20F4               	addwfc	prodh,w,c
  7172  001244  6EF7               	movwf	tblptrh,c
  7173  001246                     	if	0	;There are less than 3 active tblptr bytes
  7174  001246                     	endif
  7175  001246  0009               	tblrd		*+
  7176  001248  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7177  00124C  000A               	tblrd		*-
  7178  00124E  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7179  001252  C0CE  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7180  001256  C0CF  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7181  00125A  EC2D  F00F         	call	i1___lwdiv	;wreg free
  7182  00125E  C01A  F021         	movff	?i1___lwdiv,i1___lwmod@dividend
  7183  001262  C01B  F022         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7184  001266  0E00               	movlw	0
  7185  001268  6E24               	movwf	i1___lwmod@divisor+1,c
  7186  00126A  0E0A               	movlw	10
  7187  00126C  6E23               	movwf	i1___lwmod@divisor,c
  7188  00126E  EC7B  F00F         	call	i1___lwmod	;wreg free
  7189  001272  5021               	movf	?i1___lwmod,w,c
  7190  001274  0F30               	addlw	48
  7191  001276  0100               	movlb	0	; () banked
  7192  001278  6FD0               	movwf	i1printf@c& (0+255),b
  7193                           
  7194                           ;doprnt.c: 1491: break;
  7195  00127A  D02F               	goto	i1l3429
  7196  00127C                     i1l3421:
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;doprnt.c: 1499: {
  7200                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7201  00127C  C0CE  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7202  001280  C0CF  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7203  001284  0100               	movlb	0	; () banked
  7204  001286  51CC               	movf	i1printf@prec& (0+255),w,b
  7205  001288  0D02               	mullw	2
  7206  00128A  0E0B               	movlw	low _hexpowers
  7207  00128C  24F3               	addwf	prodl,w,c
  7208  00128E  6EF6               	movwf	tblptrl,c
  7209  001290  0E08               	movlw	high _hexpowers
  7210  001292  20F4               	addwfc	prodh,w,c
  7211  001294  6EF7               	movwf	tblptrh,c
  7212  001296                     	if	0	;There are less than 3 active tblptr bytes
  7213  001296                     	endif
  7214  001296  0009               	tblrd		*+
  7215  001298  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7216  00129C  000A               	tblrd		*-
  7217  00129E  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7218  0012A2  EC2D  F00F         	call	i1___lwdiv	;wreg free
  7219  0012A6  501A               	movf	?i1___lwdiv,w,c
  7220  0012A8  0B0F               	andlw	15
  7221  0012AA  0100               	movlb	0	; () banked
  7222  0012AC  6FC9               	movwf	i1printf@idx& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7226  0012AE  0100               	movlb	0	; () banked
  7227  0012B0  51C9               	movf	i1printf@idx& (0+255),w,b
  7228  0012B2  0D01               	mullw	1
  7229  0012B4  0E13               	movlw	low STR_33
  7230  0012B6  24F3               	addwf	prodl,w,c
  7231  0012B8  6EF6               	movwf	tblptrl,c
  7232  0012BA  0E08               	movlw	high STR_33
  7233  0012BC  20F4               	addwfc	prodh,w,c
  7234  0012BE  6EF7               	movwf	tblptrh,c
  7235  0012C0                     	if	0	;There are less than 3 active tblptr bytes
  7236  0012C0                     	endif
  7237  0012C0  0008               	tblrd		*
  7238  0012C2  CFF5 F0D0          	movff	tablat,i1printf@c
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;doprnt.c: 1523: }
  7242                           
  7243                           ;doprnt.c: 1508: }
  7244                           ;doprnt.c: 1510: break;
  7245  0012C6  D009               	goto	i1l3429
  7246  0012C8                     i1l3427:
  7247  0012C8  0100               	movlb	0	; () banked
  7248  0012CA  51CD               	movf	i1printf@flag& (0+255),w,b
  7249  0012CC  0B80               	andlw	128
  7250                           
  7251                           ; Switch size 1, requested type "space"
  7252                           ; Number of cases is 2, Range of values is 0 to 128
  7253                           ; switch strategies available:
  7254                           ; Name         Instructions Cycles
  7255                           ; simple_byte            7     4 (average)
  7256                           ;	Chosen strategy is simple_byte
  7257  0012CE  0A00               	xorlw	0	; case 0
  7258  0012D0  B4D8               	btfsc	status,2,c
  7259  0012D2  D7B0               	goto	i1l3419
  7260  0012D4  0A80               	xorlw	128	; case 128
  7261  0012D6  B4D8               	btfsc	status,2,c
  7262  0012D8  D7D1               	goto	i1l3421
  7263  0012DA                     i1l3429:
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;doprnt.c: 1524: (putch(c) );
  7267  0012DA  0100               	movlb	0	; () banked
  7268  0012DC  51D0               	movf	i1printf@c& (0+255),w,b
  7269  0012DE  ECBC  F010         	call	i1_putch
  7270  0012E2                     i1l3431:
  7271  0012E2  0100               	movlb	0	; () banked
  7272  0012E4  07CC               	decf	i1printf@prec& (0+255),f,b
  7273  0012E6  0100               	movlb	0	; () banked
  7274  0012E8  29CC               	incf	i1printf@prec& (0+255),w,b
  7275  0012EA  A4D8               	btfss	status,2,c
  7276  0012EC  D7ED               	goto	i1l3427
  7277  0012EE                     i1l3433:
  7278  0012EE  C0C1  F0C6         	movff	i1printf@f,??i1_printf
  7279  0012F2  C0C2  F0C7         	movff	i1printf@f+1,??i1_printf+1
  7280  0012F6  C0C3  F0C8         	movff	i1printf@f+2,??i1_printf+2
  7281  0012FA  0100               	movlb	0	; () banked
  7282  0012FC  2BC1               	incf	i1printf@f& (0+255),f,b
  7283  0012FE  0E00               	movlw	0
  7284  001300  23C2               	addwfc	(i1printf@f+1)& (0+255),f,b
  7285  001302  23C3               	addwfc	(i1printf@f+2)& (0+255),f,b
  7286  001304  C0C6  FFF6         	movff	??i1_printf,tblptrl
  7287  001308  C0C7  FFF7         	movff	??i1_printf+1,tblptrh
  7288  00130C  C0C8  FFF8         	movff	??i1_printf+2,tblptru
  7289  001310  0008               	tblrd		*
  7290  001312  CFF5 F0D0          	movff	tablat,i1printf@c
  7291  001316  0100               	movlb	0	; () banked
  7292  001318  51D0               	movf	i1printf@c& (0+255),w,b
  7293  00131A  B4D8               	btfsc	status,2,c
  7294  00131C  0012               	return	
  7295  00131E  D6D5               	goto	i1l3353
  7296  001320                     __end_ofi1_printf:
  7297                           	opt stack 0
  7298                           pclatu	equ	0xFFB
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           intcon2	equ	0xFF1
  7308                           postinc0	equ	0xFEE
  7309                           plusw0	equ	0xFEB
  7310                           fsr0h	equ	0xFEA
  7311                           fsr0l	equ	0xFE9
  7312                           wreg	equ	0xFE8
  7313                           postdec1	equ	0xFE5
  7314                           plusw1	equ	0xFE3
  7315                           fsr1h	equ	0xFE2
  7316                           fsr1l	equ	0xFE1
  7317                           bsr	equ	0xFE0
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           plusw2	equ	0xFDB
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function i1_putch *****************
  7327 ;; Defined at:
  7328 ;;		line 353 in file "Drivers/UART_Driver.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  data            1    wreg     unsigned char 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  data            1   27[COMRAM] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0
  7343 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7345 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7346 ;;Total ram usage:        1 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    7
  7349 ;; This function calls:
  7350 ;;		i1_writeByte
  7351 ;; This function is called by:
  7352 ;;		i1_printf
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text42
  7357  002178                     __ptext42:
  7358                           	opt stack 0
  7359  002178                     i1_putch:
  7360                           	opt stack 13
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;incstack = 0
  7364                           ;i1putch@data stored from wreg
  7365  002178  6E1C               	movwf	i1putch@data,c
  7366                           
  7367                           ;UART_Driver.c: 354: writeByte(data);
  7368  00217A  501C               	movf	i1putch@data,w,c
  7369  00217C  EC96  F010         	call	i1_writeByte
  7370  002180  0012               	return		;funcret
  7371  002182                     __end_ofi1_putch:
  7372                           	opt stack 0
  7373                           pclatu	equ	0xFFB
  7374                           pclath	equ	0xFFA
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           intcon	equ	0xFF2
  7382                           intcon2	equ	0xFF1
  7383                           postinc0	equ	0xFEE
  7384                           plusw0	equ	0xFEB
  7385                           fsr0h	equ	0xFEA
  7386                           fsr0l	equ	0xFE9
  7387                           wreg	equ	0xFE8
  7388                           postdec1	equ	0xFE5
  7389                           plusw1	equ	0xFE3
  7390                           fsr1h	equ	0xFE2
  7391                           fsr1l	equ	0xFE1
  7392                           bsr	equ	0xFE0
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           plusw2	equ	0xFDB
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function i1_writeByte *****************
  7402 ;; Defined at:
  7403 ;;		line 84 in file "Drivers/UART_Driver.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  data            1    wreg     unsigned char 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  data            1   26[COMRAM] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      void 
  7410 ;; Registers used:
  7411 ;;		wreg, status,2, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7417 ;;      Params:         0       0       0       0       0       0       0       0       0
  7418 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7420 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    6
  7424 ;; This function calls:
  7425 ;;		i1_D_UART_Enable
  7426 ;; This function is called by:
  7427 ;;		i1_putch
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text43
  7432  00212C                     __ptext43:
  7433                           	opt stack 0
  7434  00212C                     i1_writeByte:
  7435                           	opt stack 13
  7436                           
  7437                           ;incstack = 0
  7438                           ;i1writeByte@data stored from wreg
  7439  00212C  6E1B               	movwf	i1writeByte@data,c
  7440                           
  7441                           ;UART_Driver.c: 85: D_UART_Enable(1);
  7442  00212E  0E01               	movlw	1
  7443  002130  EC60  F010         	call	i1_D_UART_Enable
  7444  002134                     i1l107:
  7445  002134  A2AC               	btfss	4012,1,c	;volatile
  7446  002136  D7FE               	goto	i1l107
  7447                           
  7448                           ;UART_Driver.c: 87: TXREG = data;
  7449  002138  C01B  FFAD         	movff	i1writeByte@data,4013	;volatile
  7450  00213C  0012               	return		;funcret
  7451  00213E                     __end_ofi1_writeByte:
  7452                           	opt stack 0
  7453                           pclatu	equ	0xFFB
  7454                           pclath	equ	0xFFA
  7455                           tblptru	equ	0xFF8
  7456                           tblptrh	equ	0xFF7
  7457                           tblptrl	equ	0xFF6
  7458                           tablat	equ	0xFF5
  7459                           prodh	equ	0xFF4
  7460                           prodl	equ	0xFF3
  7461                           intcon	equ	0xFF2
  7462                           intcon2	equ	0xFF1
  7463                           postinc0	equ	0xFEE
  7464                           plusw0	equ	0xFEB
  7465                           fsr0h	equ	0xFEA
  7466                           fsr0l	equ	0xFE9
  7467                           wreg	equ	0xFE8
  7468                           postdec1	equ	0xFE5
  7469                           plusw1	equ	0xFE3
  7470                           fsr1h	equ	0xFE2
  7471                           fsr1l	equ	0xFE1
  7472                           bsr	equ	0xFE0
  7473                           indf2	equ	0xFDF
  7474                           postinc2	equ	0xFDE
  7475                           postdec2	equ	0xFDD
  7476                           plusw2	equ	0xFDB
  7477                           fsr2h	equ	0xFDA
  7478                           fsr2l	equ	0xFD9
  7479                           status	equ	0xFD8
  7480                           
  7481 ;; *************** function i1_D_UART_Enable *****************
  7482 ;; Defined at:
  7483 ;;		line 319 in file "Drivers/UART_Driver.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  enable          1    wreg     unsigned char 
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;  enable          1   25[COMRAM] unsigned char 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      void 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7497 ;;      Params:         0       0       0       0       0       0       0       0       0
  7498 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7500 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7501 ;;Total ram usage:        1 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    5
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_readByte
  7508 ;;		i1_writeByte
  7509 ;; This function uses a non-reentrant model
  7510 ;;
  7511                           
  7512                           	psect	text44
  7513  0020C0                     __ptext44:
  7514                           	opt stack 0
  7515  0020C0                     i1_D_UART_Enable:
  7516                           	opt stack 17
  7517                           
  7518                           ;incstack = 0
  7519                           ;i1D_UART_Enable@enable stored from wreg
  7520  0020C0  6E1A               	movwf	i1D_UART_Enable@enable,c
  7521                           
  7522                           ;UART_Driver.c: 320: if(enable) {
  7523  0020C2  501A               	movf	i1D_UART_Enable@enable,w,c
  7524  0020C4  B4D8               	btfsc	status,2,c
  7525  0020C6  D006               	goto	i1l185
  7526                           
  7527                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  7528  0020C8  9C94               	bcf	3988,6,c	;volatile
  7529                           
  7530                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  7531  0020CA  8E94               	bsf	3988,7,c	;volatile
  7532                           
  7533                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  7534  0020CC  8AAC               	bsf	4012,5,c	;volatile
  7535                           
  7536                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  7537  0020CE  88AB               	bsf	4011,4,c	;volatile
  7538                           
  7539                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  7540  0020D0  8EAB               	bsf	4011,7,c	;volatile
  7541                           
  7542                           ;UART_Driver.c: 326: } else {
  7543  0020D2  0012               	return	
  7544  0020D4                     i1l185:
  7545                           
  7546                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  7547  0020D4  9C94               	bcf	3988,6,c	;volatile
  7548                           
  7549                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  7550  0020D6  9E94               	bcf	3988,7,c	;volatile
  7551                           
  7552                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  7553  0020D8  9AAC               	bcf	4012,5,c	;volatile
  7554                           
  7555                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  7556  0020DA  98AB               	bcf	4011,4,c	;volatile
  7557                           
  7558                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  7559  0020DC  9EAB               	bcf	4011,7,c	;volatile
  7560  0020DE  0012               	return	
  7561  0020E0                     __end_ofi1_D_UART_Enable:
  7562                           	opt stack 0
  7563                           pclatu	equ	0xFFB
  7564                           pclath	equ	0xFFA
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           postinc0	equ	0xFEE
  7574                           plusw0	equ	0xFEB
  7575                           fsr0h	equ	0xFEA
  7576                           fsr0l	equ	0xFE9
  7577                           wreg	equ	0xFE8
  7578                           postdec1	equ	0xFE5
  7579                           plusw1	equ	0xFE3
  7580                           fsr1h	equ	0xFE2
  7581                           fsr1l	equ	0xFE1
  7582                           bsr	equ	0xFE0
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           plusw2	equ	0xFDB
  7587                           fsr2h	equ	0xFDA
  7588                           fsr2l	equ	0xFD9
  7589                           status	equ	0xFD8
  7590                           
  7591 ;; *************** function i1___lwmod *****************
  7592 ;; Defined at:
  7593 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;  dividend        2   32[COMRAM] unsigned int 
  7596 ;;  divisor         2   34[COMRAM] unsigned int 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  __lwmod         1    0[BANK0 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  2   32[COMRAM] unsigned int 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7608 ;;      Params:         4       0       0       0       0       0       0       0       0
  7609 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7611 ;;      Totals:         4       1       0       0       0       0       0       0       0
  7612 ;;Total ram usage:        5 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    5
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		i1_printf
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text45
  7623  001EF6                     __ptext45:
  7624                           	opt stack 0
  7625  001EF6                     i1___lwmod:
  7626                           	opt stack 15
  7627                           
  7628                           ;incstack = 0
  7629  001EF6  5023               	movf	i1___lwmod@divisor,w,c
  7630  001EF8  1024               	iorwf	i1___lwmod@divisor+1,w,c
  7631  001EFA  B4D8               	btfsc	status,2,c
  7632  001EFC  D01B               	goto	i1l942
  7633  001EFE  0E01               	movlw	1
  7634  001F00  0100               	movlb	0	; () banked
  7635  001F02  6FC0               	movwf	i1___lwmod@counter& (0+255),b
  7636  001F04  D005               	goto	i1l3173
  7637  001F06                     i1l3171:
  7638                           
  7639                           ; BSR set to: 0
  7640  001F06  90D8               	bcf	status,0,c
  7641  001F08  3623               	rlcf	i1___lwmod@divisor,f,c
  7642  001F0A  3624               	rlcf	i1___lwmod@divisor+1,f,c
  7643  001F0C  0100               	movlb	0	; () banked
  7644  001F0E  2BC0               	incf	i1___lwmod@counter& (0+255),f,b
  7645  001F10                     i1l3173:
  7646                           
  7647                           ; BSR set to: 0
  7648  001F10  AE24               	btfss	i1___lwmod@divisor+1,7,c
  7649  001F12  D7F9               	goto	i1l3171
  7650  001F14                     i1l3175:
  7651                           
  7652                           ; BSR set to: 0
  7653  001F14  5023               	movf	i1___lwmod@divisor,w,c
  7654  001F16  5C21               	subwf	i1___lwmod@dividend,w,c
  7655  001F18  5024               	movf	i1___lwmod@divisor+1,w,c
  7656  001F1A  5822               	subwfb	i1___lwmod@dividend+1,w,c
  7657  001F1C  A0D8               	btfss	status,0,c
  7658  001F1E  D004               	goto	i1l3179
  7659                           
  7660                           ; BSR set to: 0
  7661  001F20  5023               	movf	i1___lwmod@divisor,w,c
  7662  001F22  5E21               	subwf	i1___lwmod@dividend,f,c
  7663  001F24  5024               	movf	i1___lwmod@divisor+1,w,c
  7664  001F26  5A22               	subwfb	i1___lwmod@dividend+1,f,c
  7665  001F28                     i1l3179:
  7666                           
  7667                           ; BSR set to: 0
  7668  001F28  90D8               	bcf	status,0,c
  7669  001F2A  3224               	rrcf	i1___lwmod@divisor+1,f,c
  7670  001F2C  3223               	rrcf	i1___lwmod@divisor,f,c
  7671                           
  7672                           ; BSR set to: 0
  7673  001F2E  0100               	movlb	0	; () banked
  7674  001F30  2FC0               	decfsz	i1___lwmod@counter& (0+255),f,b
  7675  001F32  D7F0               	goto	i1l3175
  7676  001F34                     i1l942:
  7677  001F34  C021  F021         	movff	i1___lwmod@dividend,?i1___lwmod
  7678  001F38  C022  F022         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  7679  001F3C  0012               	return		;funcret
  7680  001F3E                     __end_ofi1___lwmod:
  7681                           	opt stack 0
  7682                           pclatu	equ	0xFFB
  7683                           pclath	equ	0xFFA
  7684                           tblptru	equ	0xFF8
  7685                           tblptrh	equ	0xFF7
  7686                           tblptrl	equ	0xFF6
  7687                           tablat	equ	0xFF5
  7688                           prodh	equ	0xFF4
  7689                           prodl	equ	0xFF3
  7690                           intcon	equ	0xFF2
  7691                           intcon2	equ	0xFF1
  7692                           postinc0	equ	0xFEE
  7693                           plusw0	equ	0xFEB
  7694                           fsr0h	equ	0xFEA
  7695                           fsr0l	equ	0xFE9
  7696                           wreg	equ	0xFE8
  7697                           postdec1	equ	0xFE5
  7698                           plusw1	equ	0xFE3
  7699                           fsr1h	equ	0xFE2
  7700                           fsr1l	equ	0xFE1
  7701                           bsr	equ	0xFE0
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           plusw2	equ	0xFDB
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function i1___lwdiv *****************
  7711 ;; Defined at:
  7712 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;  dividend        2   25[COMRAM] unsigned int 
  7715 ;;  divisor         2   27[COMRAM] unsigned int 
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  __lwdiv         2   30[COMRAM] unsigned int 
  7718 ;;  __lwdiv         1   29[COMRAM] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  2   25[COMRAM] unsigned int 
  7721 ;; Registers used:
  7722 ;;		wreg, status,2, status,0
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7728 ;;      Params:         4       0       0       0       0       0       0       0       0
  7729 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7731 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7732 ;;Total ram usage:        7 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    5
  7735 ;; This function calls:
  7736 ;;		Nothing
  7737 ;; This function is called by:
  7738 ;;		i1_printf
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text46
  7743  001E5A                     __ptext46:
  7744                           	opt stack 0
  7745  001E5A                     i1___lwdiv:
  7746                           	opt stack 15
  7747                           
  7748                           ;incstack = 0
  7749  001E5A  0E00               	movlw	0
  7750  001E5C  6E20               	movwf	i1___lwdiv@quotient+1,c
  7751  001E5E  0E00               	movlw	0
  7752  001E60  6E1F               	movwf	i1___lwdiv@quotient,c
  7753  001E62  501C               	movf	i1___lwdiv@divisor,w,c
  7754  001E64  101D               	iorwf	i1___lwdiv@divisor+1,w,c
  7755  001E66  B4D8               	btfsc	status,2,c
  7756  001E68  D01C               	goto	i1l932
  7757  001E6A  0E01               	movlw	1
  7758  001E6C  6E1E               	movwf	i1___lwdiv@counter,c
  7759  001E6E  D004               	goto	i1l3153
  7760  001E70                     i1l3151:
  7761  001E70  90D8               	bcf	status,0,c
  7762  001E72  361C               	rlcf	i1___lwdiv@divisor,f,c
  7763  001E74  361D               	rlcf	i1___lwdiv@divisor+1,f,c
  7764  001E76  2A1E               	incf	i1___lwdiv@counter,f,c
  7765  001E78                     i1l3153:
  7766  001E78  AE1D               	btfss	i1___lwdiv@divisor+1,7,c
  7767  001E7A  D7FA               	goto	i1l3151
  7768  001E7C                     i1l3155:
  7769  001E7C  90D8               	bcf	status,0,c
  7770  001E7E  361F               	rlcf	i1___lwdiv@quotient,f,c
  7771  001E80  3620               	rlcf	i1___lwdiv@quotient+1,f,c
  7772  001E82  501C               	movf	i1___lwdiv@divisor,w,c
  7773  001E84  5C1A               	subwf	i1___lwdiv@dividend,w,c
  7774  001E86  501D               	movf	i1___lwdiv@divisor+1,w,c
  7775  001E88  581B               	subwfb	i1___lwdiv@dividend+1,w,c
  7776  001E8A  A0D8               	btfss	status,0,c
  7777  001E8C  D005               	goto	i1l3163
  7778  001E8E  501C               	movf	i1___lwdiv@divisor,w,c
  7779  001E90  5E1A               	subwf	i1___lwdiv@dividend,f,c
  7780  001E92  501D               	movf	i1___lwdiv@divisor+1,w,c
  7781  001E94  5A1B               	subwfb	i1___lwdiv@dividend+1,f,c
  7782  001E96  801F               	bsf	i1___lwdiv@quotient,0,c
  7783  001E98                     i1l3163:
  7784  001E98  90D8               	bcf	status,0,c
  7785  001E9A  321D               	rrcf	i1___lwdiv@divisor+1,f,c
  7786  001E9C  321C               	rrcf	i1___lwdiv@divisor,f,c
  7787  001E9E  2E1E               	decfsz	i1___lwdiv@counter,f,c
  7788  001EA0  D7ED               	goto	i1l3155
  7789  001EA2                     i1l932:
  7790  001EA2  C01F  F01A         	movff	i1___lwdiv@quotient,?i1___lwdiv
  7791  001EA6  C020  F01B         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  7792  001EAA  0012               	return		;funcret
  7793  001EAC                     __end_ofi1___lwdiv:
  7794                           	opt stack 0
  7795                           pclatu	equ	0xFFB
  7796                           pclath	equ	0xFFA
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           plusw0	equ	0xFEB
  7807                           fsr0h	equ	0xFEA
  7808                           fsr0l	equ	0xFE9
  7809                           wreg	equ	0xFE8
  7810                           postdec1	equ	0xFE5
  7811                           plusw1	equ	0xFE3
  7812                           fsr1h	equ	0xFE2
  7813                           fsr1l	equ	0xFE1
  7814                           bsr	equ	0xFE0
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function _HighISR *****************
  7824 ;; Defined at:
  7825 ;;		line 357 in file "Drivers/PWM_Driver.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      void 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7839 ;;      Params:         0       0       0       0       0       0       0       0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7841 ;;      Temps:         14       0       0       0       0       0       0       0       0
  7842 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7843 ;;Total ram usage:       14 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    4
  7846 ;; This function calls:
  7847 ;;		_handleState
  7848 ;; This function is called by:
  7849 ;;		Interrupt level 2
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	intcode
  7854  000008                     __pintcode:
  7855                           	opt stack 0
  7856  000008                     _HighISR:
  7857                           	opt stack 13
  7858                           
  7859                           ;incstack = 0
  7860  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7861  00000A  EDA8  F00C         	call	int_func,f	;refresh shadow registers
  7862                           pclatu	equ	0xFFB
  7863                           pclath	equ	0xFFA
  7864                           tblptru	equ	0xFF8
  7865                           tblptrh	equ	0xFF7
  7866                           tblptrl	equ	0xFF6
  7867                           tablat	equ	0xFF5
  7868                           prodh	equ	0xFF4
  7869                           prodl	equ	0xFF3
  7870                           intcon	equ	0xFF2
  7871                           intcon2	equ	0xFF1
  7872                           postinc0	equ	0xFEE
  7873                           plusw0	equ	0xFEB
  7874                           fsr0h	equ	0xFEA
  7875                           fsr0l	equ	0xFE9
  7876                           wreg	equ	0xFE8
  7877                           postdec1	equ	0xFE5
  7878                           plusw1	equ	0xFE3
  7879                           fsr1h	equ	0xFE2
  7880                           fsr1l	equ	0xFE1
  7881                           bsr	equ	0xFE0
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           plusw2	equ	0xFDB
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890                           	psect	intcode_body
  7891  001950                     __pintcode_body:
  7892                           	opt stack 13
  7893  001950                     int_func:
  7894                           	opt stack 13
  7895  001950  0006               	pop		; remove dummy address from shadow register refresh
  7896  001952  CFFA F00C          	movff	pclath,??_HighISR
  7897  001956  CFFB F00D          	movff	pclatu,??_HighISR+1
  7898  00195A  CFE9 F00E          	movff	fsr0l,??_HighISR+2
  7899  00195E  CFEA F00F          	movff	fsr0h,??_HighISR+3
  7900  001962  CFE1 F010          	movff	fsr1l,??_HighISR+4
  7901  001966  CFE2 F011          	movff	fsr1h,??_HighISR+5
  7902  00196A  CFD9 F012          	movff	fsr2l,??_HighISR+6
  7903  00196E  CFDA F013          	movff	fsr2h,??_HighISR+7
  7904  001972  CFF3 F014          	movff	prodl,??_HighISR+8
  7905  001976  CFF4 F015          	movff	prodh,??_HighISR+9
  7906  00197A  CFF6 F016          	movff	tblptrl,??_HighISR+10
  7907  00197E  CFF7 F017          	movff	tblptrh,??_HighISR+11
  7908  001982  CFF8 F018          	movff	tblptru,??_HighISR+12
  7909  001986  CFF5 F019          	movff	tablat,??_HighISR+13
  7910                           
  7911                           ;PWM_Driver.c: 358: if (INTCONbits.TMR0IF) {
  7912  00198A  A4F2               	btfss	intcon,2,c	;volatile
  7913  00198C  D007               	goto	i2l380
  7914                           
  7915                           ;PWM_Driver.c: 359: TMR0L = 0;
  7916  00198E  0E00               	movlw	0
  7917  001990  6ED6               	movwf	4054,c	;volatile
  7918                           
  7919                           ;PWM_Driver.c: 360: TMR0H = 0;
  7920  001992  0E00               	movlw	0
  7921  001994  6ED7               	movwf	4055,c	;volatile
  7922                           
  7923                           ;PWM_Driver.c: 361: INTCONbits.TMR0IF = 0;
  7924  001996  94F2               	bcf	intcon,2,c	;volatile
  7925                           
  7926                           ;PWM_Driver.c: 362: handleState();
  7927  001998  ECDB  F00D         	call	_handleState	;wreg free
  7928  00199C                     i2l380:
  7929  00199C  C019  FFF5         	movff	??_HighISR+13,tablat
  7930  0019A0  C018  FFF8         	movff	??_HighISR+12,tblptru
  7931  0019A4  C017  FFF7         	movff	??_HighISR+11,tblptrh
  7932  0019A8  C016  FFF6         	movff	??_HighISR+10,tblptrl
  7933  0019AC  C015  FFF4         	movff	??_HighISR+9,prodh
  7934  0019B0  C014  FFF3         	movff	??_HighISR+8,prodl
  7935  0019B4  C013  FFDA         	movff	??_HighISR+7,fsr2h
  7936  0019B8  C012  FFD9         	movff	??_HighISR+6,fsr2l
  7937  0019BC  C011  FFE2         	movff	??_HighISR+5,fsr1h
  7938  0019C0  C010  FFE1         	movff	??_HighISR+4,fsr1l
  7939  0019C4  C00F  FFEA         	movff	??_HighISR+3,fsr0h
  7940  0019C8  C00E  FFE9         	movff	??_HighISR+2,fsr0l
  7941  0019CC  C00D  FFFB         	movff	??_HighISR+1,pclatu
  7942  0019D0  C00C  FFFA         	movff	??_HighISR,pclath
  7943  0019D4  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7944  0019D6  0011               	retfie		f
  7945  0019D8                     __end_of_HighISR:
  7946                           	opt stack 0
  7947                           pclatu	equ	0xFFB
  7948                           pclath	equ	0xFFA
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           prodh	equ	0xFF4
  7954                           prodl	equ	0xFF3
  7955                           intcon	equ	0xFF2
  7956                           intcon2	equ	0xFF1
  7957                           postinc0	equ	0xFEE
  7958                           plusw0	equ	0xFEB
  7959                           fsr0h	equ	0xFEA
  7960                           fsr0l	equ	0xFE9
  7961                           wreg	equ	0xFE8
  7962                           postdec1	equ	0xFE5
  7963                           plusw1	equ	0xFE3
  7964                           fsr1h	equ	0xFE2
  7965                           fsr1l	equ	0xFE1
  7966                           bsr	equ	0xFE0
  7967                           indf2	equ	0xFDF
  7968                           postinc2	equ	0xFDE
  7969                           postdec2	equ	0xFDD
  7970                           plusw2	equ	0xFDB
  7971                           fsr2h	equ	0xFDA
  7972                           fsr2l	equ	0xFD9
  7973                           status	equ	0xFD8
  7974                           
  7975 ;; *************** function _handleState *****************
  7976 ;; Defined at:
  7977 ;;		line 212 in file "Drivers/PWM_Driver.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;		None
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;		None
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      void 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0
  7992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7994 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7995 ;;Total ram usage:        0 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    3
  7998 ;; This function calls:
  7999 ;;		_fade
  8000 ;;		_flash
  8001 ;;		_pwmColors
  8002 ;;		_smooth
  8003 ;;		_strobe
  8004 ;; This function is called by:
  8005 ;;		_HighISR
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text48
  8010  001BB6                     __ptext48:
  8011                           	opt stack 0
  8012  001BB6                     _handleState:
  8013                           	opt stack 13
  8014                           
  8015                           ;PWM_Driver.c: 213: static uint8_t cnt;
  8016                           ;PWM_Driver.c: 215: switch(state) {
  8017                           
  8018                           ;incstack = 0
  8019  001BB6  D024               	goto	i2l2933
  8020  001BB8                     i2l2913:
  8021                           
  8022                           ;PWM_Driver.c: 217: pwmColors(scale);
  8023  001BB8  502F               	movf	_scale,w,c
  8024  001BBA  ECEC  F00C         	call	_pwmColors
  8025                           
  8026                           ;PWM_Driver.c: 218: break;
  8027  001BBE  D030               	goto	i2l2935
  8028  001BC0                     i2l2915:
  8029                           
  8030                           ;PWM_Driver.c: 221: if (cnt == 0) {
  8031  001BC0  5037               	movf	handleState@cnt,w,c
  8032  001BC2  B4D8               	btfsc	status,2,c
  8033                           
  8034                           ;PWM_Driver.c: 222: flash();
  8035  001BC4  ECB8  F00B         	call	_flash	;wreg free
  8036                           
  8037                           ;PWM_Driver.c: 223: }
  8038                           ;PWM_Driver.c: 224: pwmColors(0);
  8039  001BC8  0E00               	movlw	0
  8040  001BCA  ECEC  F00C         	call	_pwmColors
  8041                           
  8042                           ;PWM_Driver.c: 225: break;
  8043  001BCE  D028               	goto	i2l2935
  8044  001BD0                     i2l2919:
  8045                           
  8046                           ;PWM_Driver.c: 228: if (cnt == 0) {
  8047  001BD0  5037               	movf	handleState@cnt,w,c
  8048  001BD2  B4D8               	btfsc	status,2,c
  8049                           
  8050                           ;PWM_Driver.c: 229: strobe();
  8051  001BD4  ECBC  F00F         	call	_strobe	;wreg free
  8052                           
  8053                           ;PWM_Driver.c: 230: }
  8054                           ;PWM_Driver.c: 231: pwmColors(0);
  8055  001BD8  0E00               	movlw	0
  8056  001BDA  ECEC  F00C         	call	_pwmColors
  8057                           
  8058                           ;PWM_Driver.c: 232: break;
  8059  001BDE  D020               	goto	i2l2935
  8060  001BE0                     i2l2923:
  8061                           
  8062                           ;PWM_Driver.c: 235: if (cnt == 0) {
  8063  001BE0  5037               	movf	handleState@cnt,w,c
  8064  001BE2  B4D8               	btfsc	status,2,c
  8065                           
  8066                           ;PWM_Driver.c: 236: fade();
  8067  001BE4  EC2A  F00D         	call	_fade	;wreg free
  8068                           
  8069                           ;PWM_Driver.c: 237: }
  8070                           ;PWM_Driver.c: 238: pwmColors(0);
  8071  001BE8  0E00               	movlw	0
  8072  001BEA  ECEC  F00C         	call	_pwmColors
  8073                           
  8074                           ;PWM_Driver.c: 239: break;
  8075  001BEE  D018               	goto	i2l2935
  8076  001BF0                     i2l2927:
  8077                           
  8078                           ;PWM_Driver.c: 242: if (cnt == 0) {
  8079  001BF0  5037               	movf	handleState@cnt,w,c
  8080  001BF2  B4D8               	btfsc	status,2,c
  8081                           
  8082                           ;PWM_Driver.c: 243: smooth();
  8083  001BF4  EC8D  F00A         	call	_smooth	;wreg free
  8084                           
  8085                           ;PWM_Driver.c: 244: }
  8086                           ;PWM_Driver.c: 245: pwmColors(0);
  8087  001BF8  0E00               	movlw	0
  8088  001BFA  ECEC  F00C         	call	_pwmColors
  8089                           
  8090                           ;PWM_Driver.c: 250: }
  8091                           
  8092                           ;PWM_Driver.c: 249: break;
  8093                           
  8094                           ;PWM_Driver.c: 248: default:
  8095                           
  8096                           ;PWM_Driver.c: 246: break;
  8097  001BFE  D010               	goto	i2l2935
  8098  001C00                     i2l2933:
  8099  001C00  5030               	movf	_state,w,c
  8100                           
  8101                           ; Switch size 1, requested type "space"
  8102                           ; Number of cases is 5, Range of values is 0 to 4
  8103                           ; switch strategies available:
  8104                           ; Name         Instructions Cycles
  8105                           ; simple_byte           16     9 (average)
  8106                           ;	Chosen strategy is simple_byte
  8107  001C02  0A00               	xorlw	0	; case 0
  8108  001C04  B4D8               	btfsc	status,2,c
  8109  001C06  D7D8               	goto	i2l2913
  8110  001C08  0A01               	xorlw	1	; case 1
  8111  001C0A  B4D8               	btfsc	status,2,c
  8112  001C0C  D7D9               	goto	i2l2915
  8113  001C0E  0A03               	xorlw	3	; case 2
  8114  001C10  B4D8               	btfsc	status,2,c
  8115  001C12  D7DE               	goto	i2l2919
  8116  001C14  0A01               	xorlw	1	; case 3
  8117  001C16  B4D8               	btfsc	status,2,c
  8118  001C18  D7E3               	goto	i2l2923
  8119  001C1A  0A07               	xorlw	7	; case 4
  8120  001C1C  B4D8               	btfsc	status,2,c
  8121  001C1E  D7E8               	goto	i2l2927
  8122  001C20                     i2l2935:
  8123                           
  8124                           ;PWM_Driver.c: 251: cnt++;
  8125  001C20  2A37               	incf	handleState@cnt,f,c
  8126  001C22  0012               	return		;funcret
  8127  001C24                     __end_of_handleState:
  8128                           	opt stack 0
  8129                           pclatu	equ	0xFFB
  8130                           pclath	equ	0xFFA
  8131                           tblptru	equ	0xFF8
  8132                           tblptrh	equ	0xFF7
  8133                           tblptrl	equ	0xFF6
  8134                           tablat	equ	0xFF5
  8135                           prodh	equ	0xFF4
  8136                           prodl	equ	0xFF3
  8137                           intcon	equ	0xFF2
  8138                           intcon2	equ	0xFF1
  8139                           postinc0	equ	0xFEE
  8140                           plusw0	equ	0xFEB
  8141                           fsr0h	equ	0xFEA
  8142                           fsr0l	equ	0xFE9
  8143                           wreg	equ	0xFE8
  8144                           postdec1	equ	0xFE5
  8145                           plusw1	equ	0xFE3
  8146                           fsr1h	equ	0xFE2
  8147                           fsr1l	equ	0xFE1
  8148                           bsr	equ	0xFE0
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           plusw2	equ	0xFDB
  8153                           fsr2h	equ	0xFDA
  8154                           fsr2l	equ	0xFD9
  8155                           status	equ	0xFD8
  8156                           
  8157 ;; *************** function _strobe *****************
  8158 ;; Defined at:
  8159 ;;		line 103 in file "Drivers/PWM_Driver.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;		None
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2, status,0, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0
  8174 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8175 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8176 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8177 ;;Total ram usage:        0 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    2
  8180 ;; This function calls:
  8181 ;;		i2_setRGB
  8182 ;; This function is called by:
  8183 ;;		_handleState
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           	psect	text49
  8188  001F78                     __ptext49:
  8189                           	opt stack 0
  8190  001F78                     _strobe:
  8191                           	opt stack 13
  8192                           
  8193                           ;PWM_Driver.c: 104: static uint8_t cnt;
  8194                           ;PWM_Driver.c: 105: static bool up;
  8195                           ;PWM_Driver.c: 107: if (cnt > 0xF7) {
  8196                           
  8197                           ;incstack = 0
  8198  001F78  0EF7               	movlw	247
  8199  001F7A  643A               	cpfsgt	strobe@cnt,c
  8200  001F7C  D002               	goto	i2l2565
  8201                           
  8202                           ;PWM_Driver.c: 108: up = 0;
  8203  001F7E  0E00               	movlw	0
  8204  001F80  6E3B               	movwf	strobe@up,c
  8205  001F82                     i2l2565:
  8206                           
  8207                           ;PWM_Driver.c: 109: }
  8208                           ;PWM_Driver.c: 110: if (cnt < 8) {
  8209  001F82  0E08               	movlw	8
  8210  001F84  603A               	cpfslt	strobe@cnt,c
  8211  001F86  D002               	goto	i2l260
  8212                           
  8213                           ;PWM_Driver.c: 111: up = 1;
  8214  001F88  0E01               	movlw	1
  8215  001F8A  6E3B               	movwf	strobe@up,c
  8216  001F8C                     i2l260:
  8217                           
  8218                           ;PWM_Driver.c: 112: }
  8219                           ;PWM_Driver.c: 114: if (up) {
  8220  001F8C  503B               	movf	strobe@up,w,c
  8221  001F8E  B4D8               	btfsc	status,2,c
  8222  001F90  D003               	goto	i2l2571
  8223                           
  8224                           ;PWM_Driver.c: 115: cnt+=(scale+1);
  8225  001F92  282F               	incf	_scale,w,c
  8226  001F94  263A               	addwf	strobe@cnt,f,c
  8227                           
  8228                           ;PWM_Driver.c: 116: } else {
  8229  001F96  D002               	goto	i2l2573
  8230  001F98                     i2l2571:
  8231                           
  8232                           ;PWM_Driver.c: 117: cnt-=(scale+1);
  8233  001F98  282F               	incf	_scale,w,c
  8234  001F9A  5E3A               	subwf	strobe@cnt,f,c
  8235  001F9C                     i2l2573:
  8236                           
  8237                           ;PWM_Driver.c: 118: }
  8238                           ;PWM_Driver.c: 120: setRGB(cnt, cnt, cnt);
  8239  001F9C  C03A  F003         	movff	strobe@cnt,i2setRGB@g
  8240  001FA0  C03A  F004         	movff	strobe@cnt,i2setRGB@b
  8241  001FA4  503A               	movf	strobe@cnt,w,c
  8242  001FA6  EC4F  F010         	call	i2_setRGB
  8243  001FAA  0012               	return		;funcret
  8244  001FAC                     __end_of_strobe:
  8245                           	opt stack 0
  8246                           pclatu	equ	0xFFB
  8247                           pclath	equ	0xFFA
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           intcon	equ	0xFF2
  8255                           intcon2	equ	0xFF1
  8256                           postinc0	equ	0xFEE
  8257                           plusw0	equ	0xFEB
  8258                           fsr0h	equ	0xFEA
  8259                           fsr0l	equ	0xFE9
  8260                           wreg	equ	0xFE8
  8261                           postdec1	equ	0xFE5
  8262                           plusw1	equ	0xFE3
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           bsr	equ	0xFE0
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           plusw2	equ	0xFDB
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function _smooth *****************
  8275 ;; Defined at:
  8276 ;;		line 173 in file "Drivers/PWM_Driver.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;		None
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;		None
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      void 
  8283 ;; Registers used:
  8284 ;;		wreg, status,2, status,0, cstack
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0
  8291 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8292 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8293 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8294 ;;Total ram usage:        6 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    2
  8297 ;; This function calls:
  8298 ;;		i2_setRGB
  8299 ;; This function is called by:
  8300 ;;		_handleState
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text50
  8305  00151A                     __ptext50:
  8306                           	opt stack 0
  8307  00151A                     _smooth:
  8308                           	opt stack 13
  8309                           
  8310                           ;PWM_Driver.c: 174: static uint8_t count;
  8311                           ;PWM_Driver.c: 175: static uint8_t color;
  8312                           ;PWM_Driver.c: 177: if (count >= (0xFF >> scale)) {
  8313                           
  8314                           ;incstack = 0
  8315  00151A  C02F  F006         	movff	_scale,??_smooth
  8316  00151E  0EFF               	movlw	255
  8317  001520  6E07               	movwf	(??_smooth+1)& (0+255),c
  8318  001522  0E00               	movlw	0
  8319  001524  6E08               	movwf	(??_smooth+2)& (0+255),c
  8320  001526  2A06               	incf	??_smooth,f,c
  8321  001528  D003               	goto	i2u194_44
  8322  00152A                     i2u194_45:
  8323  00152A  3408               	rlcf	??_smooth+2,w,c
  8324  00152C  3208               	rrcf	??_smooth+2,f,c
  8325  00152E  3207               	rrcf	??_smooth+1,f,c
  8326  001530                     i2u194_44:
  8327  001530  2E06               	decfsz	??_smooth,f,c
  8328  001532  D7FB               	goto	i2u194_45
  8329  001534  5039               	movf	smooth@count,w,c
  8330  001536  6E09               	movwf	(??_smooth+3)& (0+255),c
  8331  001538  6A0A               	clrf	(??_smooth+4)& (0+255),c
  8332  00153A  5007               	movf	??_smooth+1,w,c
  8333  00153C  5C09               	subwf	??_smooth+3,w,c
  8334  00153E  500A               	movf	??_smooth+4,w,c
  8335  001540  0A80               	xorlw	128
  8336  001542  6E0B               	movwf	(??_smooth+5)& (0+255),c
  8337  001544  5008               	movf	??_smooth+2,w,c
  8338  001546  0A80               	xorlw	128
  8339  001548  580B               	subwfb	(??_smooth+5)& (0+255),w,c
  8340  00154A  A0D8               	btfss	status,0,c
  8341  00154C  D002               	goto	i2l297
  8342                           
  8343                           ;PWM_Driver.c: 178: count = 0;
  8344  00154E  0E00               	movlw	0
  8345  001550  6E39               	movwf	smooth@count,c
  8346  001552                     i2l297:
  8347                           
  8348                           ;PWM_Driver.c: 179: }
  8349                           ;PWM_Driver.c: 180: if (count == 0) {
  8350  001552  5039               	movf	smooth@count,w,c
  8351  001554  B4D8               	btfsc	status,2,c
  8352  001556  D038               	goto	i2l2649
  8353  001558  D04A               	goto	i2l2651
  8354  00155A                     i2l2623:
  8355                           
  8356                           ;PWM_Driver.c: 183: setRGB(255, 0, 0);
  8357  00155A  0E00               	movlw	0
  8358  00155C  6E03               	movwf	i2setRGB@g,c
  8359  00155E  0E00               	movlw	0
  8360  001560  6E04               	movwf	i2setRGB@b,c
  8361  001562  0EFF               	movlw	255
  8362  001564  EC4F  F010         	call	i2_setRGB
  8363                           
  8364                           ;PWM_Driver.c: 184: color = 1;
  8365  001568  0E01               	movlw	1
  8366  00156A  D02C               	goto	L10
  8367  00156C                     i2l2627:
  8368                           
  8369                           ;PWM_Driver.c: 187: setRGB(255, 255, 0);
  8370  00156C  0EFF               	movlw	255
  8371  00156E  6E03               	movwf	i2setRGB@g,c
  8372  001570  0E00               	movlw	0
  8373  001572  6E04               	movwf	i2setRGB@b,c
  8374  001574  0EFF               	movlw	255
  8375  001576  EC4F  F010         	call	i2_setRGB
  8376                           
  8377                           ;PWM_Driver.c: 188: color = 2;
  8378  00157A  0E02               	movlw	2
  8379  00157C  D023               	goto	L10
  8380  00157E                     i2l2631:
  8381                           
  8382                           ;PWM_Driver.c: 191: setRGB(0, 255, 0);
  8383  00157E  0EFF               	movlw	255
  8384  001580  6E03               	movwf	i2setRGB@g,c
  8385  001582  0E00               	movlw	0
  8386  001584  6E04               	movwf	i2setRGB@b,c
  8387  001586  0E00               	movlw	0
  8388  001588  EC4F  F010         	call	i2_setRGB
  8389                           
  8390                           ;PWM_Driver.c: 192: color = 3;
  8391  00158C  0E03               	movlw	3
  8392  00158E  D01A               	goto	L10
  8393  001590                     i2l2635:
  8394                           
  8395                           ;PWM_Driver.c: 195: setRGB(0, 255, 255);
  8396  001590  0EFF               	movlw	255
  8397  001592  6E03               	movwf	i2setRGB@g,c
  8398  001594  0EFF               	movlw	255
  8399  001596  6E04               	movwf	i2setRGB@b,c
  8400  001598  0E00               	movlw	0
  8401  00159A  EC4F  F010         	call	i2_setRGB
  8402                           
  8403                           ;PWM_Driver.c: 196: color = 4;
  8404  00159E  0E04               	movlw	4
  8405  0015A0  D011               	goto	L10
  8406  0015A2                     i2l2639:
  8407                           
  8408                           ;PWM_Driver.c: 199: setRGB(0, 0, 255);
  8409  0015A2  0E00               	movlw	0
  8410  0015A4  6E03               	movwf	i2setRGB@g,c
  8411  0015A6  0EFF               	movlw	255
  8412  0015A8  6E04               	movwf	i2setRGB@b,c
  8413  0015AA  0E00               	movlw	0
  8414  0015AC  EC4F  F010         	call	i2_setRGB
  8415                           
  8416                           ;PWM_Driver.c: 200: color = 5;
  8417  0015B0  0E05               	movlw	5
  8418  0015B2  D008               	goto	L10
  8419  0015B4                     i2l2643:
  8420                           
  8421                           ;PWM_Driver.c: 203: setRGB(255, 0, 255);
  8422  0015B4  0E00               	movlw	0
  8423  0015B6  6E03               	movwf	i2setRGB@g,c
  8424  0015B8  0EFF               	movlw	255
  8425  0015BA  6E04               	movwf	i2setRGB@b,c
  8426  0015BC  0EFF               	movlw	255
  8427  0015BE  EC4F  F010         	call	i2_setRGB
  8428                           
  8429                           ;PWM_Driver.c: 204: color = 0;
  8430  0015C2  0E00               	movlw	0
  8431  0015C4                     L10:
  8432  0015C4  6E38               	movwf	smooth@color,c
  8433                           
  8434                           ;PWM_Driver.c: 206: }
  8435                           
  8436                           ;PWM_Driver.c: 205: break;
  8437  0015C6  D013               	goto	i2l2651
  8438  0015C8                     i2l2649:
  8439  0015C8  5038               	movf	smooth@color,w,c
  8440                           
  8441                           ; Switch size 1, requested type "space"
  8442                           ; Number of cases is 6, Range of values is 0 to 5
  8443                           ; switch strategies available:
  8444                           ; Name         Instructions Cycles
  8445                           ; simple_byte           19    10 (average)
  8446                           ;	Chosen strategy is simple_byte
  8447  0015CA  0A00               	xorlw	0	; case 0
  8448  0015CC  B4D8               	btfsc	status,2,c
  8449  0015CE  D7C5               	goto	i2l2623
  8450  0015D0  0A01               	xorlw	1	; case 1
  8451  0015D2  B4D8               	btfsc	status,2,c
  8452  0015D4  D7CB               	goto	i2l2627
  8453  0015D6  0A03               	xorlw	3	; case 2
  8454  0015D8  B4D8               	btfsc	status,2,c
  8455  0015DA  D7D1               	goto	i2l2631
  8456  0015DC  0A01               	xorlw	1	; case 3
  8457  0015DE  B4D8               	btfsc	status,2,c
  8458  0015E0  D7D7               	goto	i2l2635
  8459  0015E2  0A07               	xorlw	7	; case 4
  8460  0015E4  B4D8               	btfsc	status,2,c
  8461  0015E6  D7DD               	goto	i2l2639
  8462  0015E8  0A01               	xorlw	1	; case 5
  8463  0015EA  B4D8               	btfsc	status,2,c
  8464  0015EC  D7E3               	goto	i2l2643
  8465  0015EE                     i2l2651:
  8466                           
  8467                           ;PWM_Driver.c: 207: }
  8468                           ;PWM_Driver.c: 209: count++;
  8469  0015EE  2A39               	incf	smooth@count,f,c
  8470  0015F0  0012               	return		;funcret
  8471  0015F2                     __end_of_smooth:
  8472                           	opt stack 0
  8473                           pclatu	equ	0xFFB
  8474                           pclath	equ	0xFFA
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           postinc0	equ	0xFEE
  8484                           plusw0	equ	0xFEB
  8485                           fsr0h	equ	0xFEA
  8486                           fsr0l	equ	0xFE9
  8487                           wreg	equ	0xFE8
  8488                           postdec1	equ	0xFE5
  8489                           plusw1	equ	0xFE3
  8490                           fsr1h	equ	0xFE2
  8491                           fsr1l	equ	0xFE1
  8492                           bsr	equ	0xFE0
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           plusw2	equ	0xFDB
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _pwmColors *****************
  8502 ;; Defined at:
  8503 ;;		line 46 in file "Drivers/PWM_Driver.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  birghtness      1    wreg     unsigned char 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  birghtness      1    2[COMRAM] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0
  8518 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8519 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8520 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8521 ;;Total ram usage:        3 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_handleState
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text51
  8531  0019D8                     __ptext51:
  8532                           	opt stack 0
  8533  0019D8                     _pwmColors:
  8534                           	opt stack 15
  8535                           
  8536                           ;incstack = 0
  8537                           ;pwmColors@birghtness stored from wreg
  8538  0019D8  6E03               	movwf	pwmColors@birghtness,c
  8539                           
  8540                           ;PWM_Driver.c: 48: if (PWM_Red.duty_cnt >= (PWM_Red.duty_val >> birghtness)) {
  8541  0019DA  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8542  0019DE  C07C  F002         	movff	_PWM_Red+1,??_pwmColors+1
  8543  0019E2  2A01               	incf	??_pwmColors,f,c
  8544  0019E4  D002               	goto	i2u173_44
  8545  0019E6                     i2u173_45:
  8546  0019E6  90D8               	bcf	status,0,c
  8547  0019E8  3202               	rrcf	??_pwmColors+1,f,c
  8548  0019EA                     i2u173_44:
  8549  0019EA  2E01               	decfsz	??_pwmColors,f,c
  8550  0019EC  D7FC               	goto	i2u173_45
  8551  0019EE  5002               	movf	??_pwmColors+1,w,c
  8552  0019F0  0100               	movlb	0	; () banked
  8553  0019F2  5D7B               	subwf	_PWM_Red& (0+255),w,b
  8554  0019F4  A0D8               	btfss	status,0,c
  8555  0019F6  D002               	goto	i2l231
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;PWM_Driver.c: 49: PORTBbits.RB2 = 0;
  8559  0019F8  9481               	bcf	3969,2,c	;volatile
  8560                           
  8561                           ;PWM_Driver.c: 50: } else {
  8562  0019FA  D001               	goto	i2l2523
  8563  0019FC                     i2l231:
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;PWM_Driver.c: 51: PORTBbits.RB2 = 1;
  8567  0019FC  8481               	bsf	3969,2,c	;volatile
  8568  0019FE                     i2l2523:
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;PWM_Driver.c: 52: }
  8572                           ;PWM_Driver.c: 54: if (PWM_Green.duty_cnt >= (PWM_Green.duty_val >> birghtness)) {
  8573  0019FE  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8574  001A02  C07A  F002         	movff	_PWM_Green+1,??_pwmColors+1
  8575  001A06  2A01               	incf	??_pwmColors,f,c
  8576  001A08  D002               	goto	i2u175_44
  8577  001A0A                     i2u175_45:
  8578  001A0A  90D8               	bcf	status,0,c
  8579  001A0C  3202               	rrcf	??_pwmColors+1,f,c
  8580  001A0E                     i2u175_44:
  8581  001A0E  2E01               	decfsz	??_pwmColors,f,c
  8582  001A10  D7FC               	goto	i2u175_45
  8583  001A12  5002               	movf	??_pwmColors+1,w,c
  8584  001A14  0100               	movlb	0	; () banked
  8585  001A16  5D79               	subwf	_PWM_Green& (0+255),w,b
  8586  001A18  A0D8               	btfss	status,0,c
  8587  001A1A  D002               	goto	i2l233
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;PWM_Driver.c: 55: PORTBbits.RB3 = 0;
  8591  001A1C  9681               	bcf	3969,3,c	;volatile
  8592                           
  8593                           ;PWM_Driver.c: 56: } else {
  8594  001A1E  D001               	goto	i2l2527
  8595  001A20                     i2l233:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;PWM_Driver.c: 57: PORTBbits.RB3 = 1;
  8599  001A20  8681               	bsf	3969,3,c	;volatile
  8600  001A22                     i2l2527:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;PWM_Driver.c: 58: }
  8604                           ;PWM_Driver.c: 60: if (PWM_Blue.duty_cnt >= (PWM_Blue.duty_val >> birghtness)) {
  8605  001A22  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8606  001A26  C078  F002         	movff	_PWM_Blue+1,??_pwmColors+1
  8607  001A2A  2A01               	incf	??_pwmColors,f,c
  8608  001A2C  D002               	goto	i2u177_44
  8609  001A2E                     i2u177_45:
  8610  001A2E  90D8               	bcf	status,0,c
  8611  001A30  3202               	rrcf	??_pwmColors+1,f,c
  8612  001A32                     i2u177_44:
  8613  001A32  2E01               	decfsz	??_pwmColors,f,c
  8614  001A34  D7FC               	goto	i2u177_45
  8615  001A36  5002               	movf	??_pwmColors+1,w,c
  8616  001A38  0100               	movlb	0	; () banked
  8617  001A3A  5D77               	subwf	_PWM_Blue& (0+255),w,b
  8618  001A3C  A0D8               	btfss	status,0,c
  8619  001A3E  D002               	goto	i2l235
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;PWM_Driver.c: 61: PORTBbits.RB1 = 0;
  8623  001A40  9281               	bcf	3969,1,c	;volatile
  8624                           
  8625                           ;PWM_Driver.c: 62: } else {
  8626  001A42  D001               	goto	i2l2531
  8627  001A44                     i2l235:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;PWM_Driver.c: 63: PORTBbits.RB1 = 1;
  8631  001A44  8281               	bsf	3969,1,c	;volatile
  8632  001A46                     i2l2531:
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;PWM_Driver.c: 64: }
  8636                           ;PWM_Driver.c: 67: PWM_Red.duty_cnt++;
  8637  001A46  0100               	movlb	0	; () banked
  8638  001A48  2B7B               	incf	_PWM_Red& (0+255),f,b
  8639                           
  8640                           ;PWM_Driver.c: 68: PWM_Green.duty_cnt++;
  8641  001A4A  0100               	movlb	0	; () banked
  8642  001A4C  2B79               	incf	_PWM_Green& (0+255),f,b
  8643                           
  8644                           ;PWM_Driver.c: 69: PWM_Blue.duty_cnt++;
  8645  001A4E  0100               	movlb	0	; () banked
  8646  001A50  2B77               	incf	_PWM_Blue& (0+255),f,b
  8647                           
  8648                           ; BSR set to: 0
  8649  001A52  0012               	return		;funcret
  8650  001A54                     __end_of_pwmColors:
  8651                           	opt stack 0
  8652                           pclatu	equ	0xFFB
  8653                           pclath	equ	0xFFA
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           intcon2	equ	0xFF1
  8662                           postinc0	equ	0xFEE
  8663                           plusw0	equ	0xFEB
  8664                           fsr0h	equ	0xFEA
  8665                           fsr0l	equ	0xFE9
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           plusw1	equ	0xFE3
  8669                           fsr1h	equ	0xFE2
  8670                           fsr1l	equ	0xFE1
  8671                           bsr	equ	0xFE0
  8672                           indf2	equ	0xFDF
  8673                           postinc2	equ	0xFDE
  8674                           postdec2	equ	0xFDD
  8675                           plusw2	equ	0xFDB
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _flash *****************
  8681 ;; Defined at:
  8682 ;;		line 72 in file "Drivers/PWM_Driver.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;		None
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;		None
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  1    wreg      void 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8696 ;;      Params:         0       0       0       0       0       0       0       0       0
  8697 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8698 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8699 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8700 ;;Total ram usage:        6 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    2
  8703 ;; This function calls:
  8704 ;;		i2_setRGB
  8705 ;; This function is called by:
  8706 ;;		_handleState
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text52
  8711  001770                     __ptext52:
  8712                           	opt stack 0
  8713  001770                     _flash:
  8714                           	opt stack 13
  8715                           
  8716                           ;PWM_Driver.c: 73: static uint8_t count;
  8717                           ;PWM_Driver.c: 74: static uint8_t color;
  8718                           ;PWM_Driver.c: 76: if (count >= (0xFF >> scale)) {
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;incstack = 0
  8722  001770  C02F  F006         	movff	_scale,??_flash
  8723  001774  0EFF               	movlw	255
  8724  001776  6E07               	movwf	(??_flash+1)& (0+255),c
  8725  001778  0E00               	movlw	0
  8726  00177A  6E08               	movwf	(??_flash+2)& (0+255),c
  8727  00177C  2A06               	incf	??_flash,f,c
  8728  00177E  D003               	goto	i2u179_44
  8729  001780                     i2u179_45:
  8730  001780  3408               	rlcf	??_flash+2,w,c
  8731  001782  3208               	rrcf	??_flash+2,f,c
  8732  001784  3207               	rrcf	??_flash+1,f,c
  8733  001786                     i2u179_44:
  8734  001786  2E06               	decfsz	??_flash,f,c
  8735  001788  D7FB               	goto	i2u179_45
  8736  00178A  5036               	movf	flash@count,w,c
  8737  00178C  6E09               	movwf	(??_flash+3)& (0+255),c
  8738  00178E  6A0A               	clrf	(??_flash+4)& (0+255),c
  8739  001790  5007               	movf	??_flash+1,w,c
  8740  001792  5C09               	subwf	??_flash+3,w,c
  8741  001794  500A               	movf	??_flash+4,w,c
  8742  001796  0A80               	xorlw	128
  8743  001798  6E0B               	movwf	(??_flash+5)& (0+255),c
  8744  00179A  5008               	movf	??_flash+2,w,c
  8745  00179C  0A80               	xorlw	128
  8746  00179E  580B               	subwfb	(??_flash+5)& (0+255),w,c
  8747  0017A0  A0D8               	btfss	status,0,c
  8748  0017A2  D002               	goto	i2l244
  8749                           
  8750                           ;PWM_Driver.c: 77: count = 0;
  8751  0017A4  0E00               	movlw	0
  8752  0017A6  6E36               	movwf	flash@count,c
  8753  0017A8                     i2l244:
  8754                           
  8755                           ;PWM_Driver.c: 78: }
  8756                           ;PWM_Driver.c: 79: if (count == 0) {
  8757  0017A8  5036               	movf	flash@count,w,c
  8758  0017AA  B4D8               	btfsc	status,2,c
  8759  0017AC  D026               	goto	i2l2557
  8760  0017AE  D032               	goto	i2l2559
  8761  0017B0                     i2l2539:
  8762                           
  8763                           ;PWM_Driver.c: 82: setRGB(255, 0, 0);
  8764  0017B0  0E00               	movlw	0
  8765  0017B2  6E03               	movwf	i2setRGB@g,c
  8766  0017B4  0E00               	movlw	0
  8767  0017B6  6E04               	movwf	i2setRGB@b,c
  8768  0017B8  0EFF               	movlw	255
  8769  0017BA  EC4F  F010         	call	i2_setRGB
  8770                           
  8771                           ;PWM_Driver.c: 83: color = 1;
  8772  0017BE  0E01               	movlw	1
  8773  0017C0  D01A               	goto	L13
  8774  0017C2                     i2l2543:
  8775                           
  8776                           ;PWM_Driver.c: 86: setRGB(0, 255, 0);
  8777  0017C2  0EFF               	movlw	255
  8778  0017C4  6E03               	movwf	i2setRGB@g,c
  8779  0017C6  0E00               	movlw	0
  8780  0017C8  6E04               	movwf	i2setRGB@b,c
  8781  0017CA  0E00               	movlw	0
  8782  0017CC  EC4F  F010         	call	i2_setRGB
  8783                           
  8784                           ;PWM_Driver.c: 87: color = 2;
  8785  0017D0  0E02               	movlw	2
  8786  0017D2  D011               	goto	L13
  8787  0017D4                     i2l2547:
  8788                           
  8789                           ;PWM_Driver.c: 90: setRGB(0, 0, 255);
  8790  0017D4  0E00               	movlw	0
  8791  0017D6  6E03               	movwf	i2setRGB@g,c
  8792  0017D8  0EFF               	movlw	255
  8793  0017DA  6E04               	movwf	i2setRGB@b,c
  8794  0017DC  0E00               	movlw	0
  8795  0017DE  EC4F  F010         	call	i2_setRGB
  8796                           
  8797                           ;PWM_Driver.c: 91: color = 3;
  8798  0017E2  0E03               	movlw	3
  8799  0017E4  D008               	goto	L13
  8800  0017E6                     i2l2551:
  8801                           
  8802                           ;PWM_Driver.c: 94: setRGB(255, 255, 255);
  8803  0017E6  0EFF               	movlw	255
  8804  0017E8  6E03               	movwf	i2setRGB@g,c
  8805  0017EA  0EFF               	movlw	255
  8806  0017EC  6E04               	movwf	i2setRGB@b,c
  8807  0017EE  0EFF               	movlw	255
  8808  0017F0  EC4F  F010         	call	i2_setRGB
  8809                           
  8810                           ;PWM_Driver.c: 95: color = 0;
  8811  0017F4  0E00               	movlw	0
  8812  0017F6                     L13:
  8813  0017F6  6E35               	movwf	flash@color,c
  8814                           
  8815                           ;PWM_Driver.c: 97: }
  8816                           
  8817                           ;PWM_Driver.c: 96: break;
  8818  0017F8  D00D               	goto	i2l2559
  8819  0017FA                     i2l2557:
  8820  0017FA  5035               	movf	flash@color,w,c
  8821                           
  8822                           ; Switch size 1, requested type "space"
  8823                           ; Number of cases is 4, Range of values is 0 to 3
  8824                           ; switch strategies available:
  8825                           ; Name         Instructions Cycles
  8826                           ; simple_byte           13     7 (average)
  8827                           ;	Chosen strategy is simple_byte
  8828  0017FC  0A00               	xorlw	0	; case 0
  8829  0017FE  B4D8               	btfsc	status,2,c
  8830  001800  D7D7               	goto	i2l2539
  8831  001802  0A01               	xorlw	1	; case 1
  8832  001804  B4D8               	btfsc	status,2,c
  8833  001806  D7DD               	goto	i2l2543
  8834  001808  0A03               	xorlw	3	; case 2
  8835  00180A  B4D8               	btfsc	status,2,c
  8836  00180C  D7E3               	goto	i2l2547
  8837  00180E  0A01               	xorlw	1	; case 3
  8838  001810  B4D8               	btfsc	status,2,c
  8839  001812  D7E9               	goto	i2l2551
  8840  001814                     i2l2559:
  8841                           
  8842                           ;PWM_Driver.c: 98: }
  8843                           ;PWM_Driver.c: 100: count++;
  8844  001814  2A36               	incf	flash@count,f,c
  8845  001816  0012               	return		;funcret
  8846  001818                     __end_of_flash:
  8847                           	opt stack 0
  8848                           pclatu	equ	0xFFB
  8849                           pclath	equ	0xFFA
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodh	equ	0xFF4
  8855                           prodl	equ	0xFF3
  8856                           intcon	equ	0xFF2
  8857                           intcon2	equ	0xFF1
  8858                           postinc0	equ	0xFEE
  8859                           plusw0	equ	0xFEB
  8860                           fsr0h	equ	0xFEA
  8861                           fsr0l	equ	0xFE9
  8862                           wreg	equ	0xFE8
  8863                           postdec1	equ	0xFE5
  8864                           plusw1	equ	0xFE3
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           bsr	equ	0xFE0
  8868                           indf2	equ	0xFDF
  8869                           postinc2	equ	0xFDE
  8870                           postdec2	equ	0xFDD
  8871                           plusw2	equ	0xFDB
  8872                           fsr2h	equ	0xFDA
  8873                           fsr2l	equ	0xFD9
  8874                           status	equ	0xFD8
  8875                           
  8876 ;; *************** function _fade *****************
  8877 ;; Defined at:
  8878 ;;		line 123 in file "Drivers/PWM_Driver.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;		None
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;		None
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0, cstack
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8892 ;;      Params:         0       0       0       0       0       0       0       0       0
  8893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8895 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8896 ;;Total ram usage:        0 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    2
  8899 ;; This function calls:
  8900 ;;		i2_setRGB
  8901 ;; This function is called by:
  8902 ;;		_handleState
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           	psect	text53
  8907  001A54                     __ptext53:
  8908                           	opt stack 0
  8909  001A54                     _fade:
  8910                           	opt stack 13
  8911                           
  8912                           ;PWM_Driver.c: 124: static uint8_t r_cnt = 0x00;
  8913                           ;PWM_Driver.c: 125: static uint8_t g_cnt = 0x80;
  8914                           ;PWM_Driver.c: 126: static uint8_t b_cnt = 0xFF;
  8915                           ;PWM_Driver.c: 127: static bool r_up;
  8916                           ;PWM_Driver.c: 128: static bool g_up;
  8917                           ;PWM_Driver.c: 129: static bool b_up;
  8918                           ;PWM_Driver.c: 131: if (r_cnt > 0xF7) {
  8919                           
  8920                           ;incstack = 0
  8921  001A54  0EF7               	movlw	247
  8922  001A56  6433               	cpfsgt	fade@r_cnt,c
  8923  001A58  D002               	goto	i2l2579
  8924                           
  8925                           ;PWM_Driver.c: 132: r_up = 0;
  8926  001A5A  0E00               	movlw	0
  8927  001A5C  6E34               	movwf	fade@r_up,c
  8928  001A5E                     i2l2579:
  8929                           
  8930                           ;PWM_Driver.c: 133: }
  8931                           ;PWM_Driver.c: 134: if (r_cnt < 8) {
  8932  001A5E  0E08               	movlw	8
  8933  001A60  6033               	cpfslt	fade@r_cnt,c
  8934  001A62  D002               	goto	i2l2583
  8935                           
  8936                           ;PWM_Driver.c: 135: r_up = 1;
  8937  001A64  0E01               	movlw	1
  8938  001A66  6E34               	movwf	fade@r_up,c
  8939  001A68                     i2l2583:
  8940                           
  8941                           ;PWM_Driver.c: 136: }
  8942                           ;PWM_Driver.c: 138: if (g_cnt > 0xF7) {
  8943  001A68  0EF7               	movlw	247
  8944  001A6A  6445               	cpfsgt	fade@g_cnt,c
  8945  001A6C  D002               	goto	i2l2587
  8946                           
  8947                           ;PWM_Driver.c: 139: g_up = 0;
  8948  001A6E  0E00               	movlw	0
  8949  001A70  6E32               	movwf	fade@g_up,c
  8950  001A72                     i2l2587:
  8951                           
  8952                           ;PWM_Driver.c: 140: }
  8953                           ;PWM_Driver.c: 141: if (g_cnt < 8) {
  8954  001A72  0E08               	movlw	8
  8955  001A74  6045               	cpfslt	fade@g_cnt,c
  8956  001A76  D002               	goto	i2l2591
  8957                           
  8958                           ;PWM_Driver.c: 142: g_up = 1;
  8959  001A78  0E01               	movlw	1
  8960  001A7A  6E32               	movwf	fade@g_up,c
  8961  001A7C                     i2l2591:
  8962                           
  8963                           ;PWM_Driver.c: 143: }
  8964                           ;PWM_Driver.c: 145: if (b_cnt > 0xF7) {
  8965  001A7C  0EF7               	movlw	247
  8966  001A7E  6444               	cpfsgt	fade@b_cnt,c
  8967  001A80  D002               	goto	i2l2595
  8968                           
  8969                           ;PWM_Driver.c: 146: b_up = 0;
  8970  001A82  0E00               	movlw	0
  8971  001A84  6E31               	movwf	fade@b_up,c
  8972  001A86                     i2l2595:
  8973                           
  8974                           ;PWM_Driver.c: 147: }
  8975                           ;PWM_Driver.c: 148: if (b_cnt < 8) {
  8976  001A86  0E08               	movlw	8
  8977  001A88  6044               	cpfslt	fade@b_cnt,c
  8978  001A8A  D002               	goto	i2l283
  8979                           
  8980                           ;PWM_Driver.c: 149: b_up = 1;
  8981  001A8C  0E01               	movlw	1
  8982  001A8E  6E31               	movwf	fade@b_up,c
  8983  001A90                     i2l283:
  8984                           
  8985                           ;PWM_Driver.c: 150: }
  8986                           ;PWM_Driver.c: 152: if (r_up) {
  8987  001A90  5034               	movf	fade@r_up,w,c
  8988  001A92  B4D8               	btfsc	status,2,c
  8989  001A94  D003               	goto	i2l2601
  8990                           
  8991                           ;PWM_Driver.c: 153: r_cnt+=(scale+1);
  8992  001A96  282F               	incf	_scale,w,c
  8993  001A98  2633               	addwf	fade@r_cnt,f,c
  8994                           
  8995                           ;PWM_Driver.c: 154: } else {
  8996  001A9A  D002               	goto	i2l2603
  8997  001A9C                     i2l2601:
  8998                           
  8999                           ;PWM_Driver.c: 155: r_cnt-=(scale+1);
  9000  001A9C  282F               	incf	_scale,w,c
  9001  001A9E  5E33               	subwf	fade@r_cnt,f,c
  9002  001AA0                     i2l2603:
  9003                           
  9004                           ;PWM_Driver.c: 156: }
  9005                           ;PWM_Driver.c: 158: if (g_up) {
  9006  001AA0  5032               	movf	fade@g_up,w,c
  9007  001AA2  B4D8               	btfsc	status,2,c
  9008  001AA4  D003               	goto	i2l2607
  9009                           
  9010                           ;PWM_Driver.c: 159: g_cnt+=(scale+1);
  9011  001AA6  282F               	incf	_scale,w,c
  9012  001AA8  2645               	addwf	fade@g_cnt,f,c
  9013                           
  9014                           ;PWM_Driver.c: 160: } else {
  9015  001AAA  D002               	goto	i2l2609
  9016  001AAC                     i2l2607:
  9017                           
  9018                           ;PWM_Driver.c: 161: g_cnt-=(scale+1);
  9019  001AAC  282F               	incf	_scale,w,c
  9020  001AAE  5E45               	subwf	fade@g_cnt,f,c
  9021  001AB0                     i2l2609:
  9022                           
  9023                           ;PWM_Driver.c: 162: }
  9024                           ;PWM_Driver.c: 164: if (b_up) {
  9025  001AB0  5031               	movf	fade@b_up,w,c
  9026  001AB2  B4D8               	btfsc	status,2,c
  9027  001AB4  D003               	goto	i2l2613
  9028                           
  9029                           ;PWM_Driver.c: 165: b_cnt+=(scale+1);
  9030  001AB6  282F               	incf	_scale,w,c
  9031  001AB8  2644               	addwf	fade@b_cnt,f,c
  9032                           
  9033                           ;PWM_Driver.c: 166: } else {
  9034  001ABA  D002               	goto	i2l2615
  9035  001ABC                     i2l2613:
  9036                           
  9037                           ;PWM_Driver.c: 167: b_cnt-=(scale+1);
  9038  001ABC  282F               	incf	_scale,w,c
  9039  001ABE  5E44               	subwf	fade@b_cnt,f,c
  9040  001AC0                     i2l2615:
  9041                           
  9042                           ;PWM_Driver.c: 168: }
  9043                           ;PWM_Driver.c: 170: setRGB(r_cnt, g_cnt, b_cnt);
  9044  001AC0  C045  F003         	movff	fade@g_cnt,i2setRGB@g
  9045  001AC4  C044  F004         	movff	fade@b_cnt,i2setRGB@b
  9046  001AC8  5033               	movf	fade@r_cnt,w,c
  9047  001ACA  EC4F  F010         	call	i2_setRGB
  9048  001ACE  0012               	return		;funcret
  9049  001AD0                     __end_of_fade:
  9050                           	opt stack 0
  9051                           pclatu	equ	0xFFB
  9052                           pclath	equ	0xFFA
  9053                           tblptru	equ	0xFF8
  9054                           tblptrh	equ	0xFF7
  9055                           tblptrl	equ	0xFF6
  9056                           tablat	equ	0xFF5
  9057                           prodh	equ	0xFF4
  9058                           prodl	equ	0xFF3
  9059                           intcon	equ	0xFF2
  9060                           intcon2	equ	0xFF1
  9061                           postinc0	equ	0xFEE
  9062                           plusw0	equ	0xFEB
  9063                           fsr0h	equ	0xFEA
  9064                           fsr0l	equ	0xFE9
  9065                           wreg	equ	0xFE8
  9066                           postdec1	equ	0xFE5
  9067                           plusw1	equ	0xFE3
  9068                           fsr1h	equ	0xFE2
  9069                           fsr1l	equ	0xFE1
  9070                           bsr	equ	0xFE0
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           plusw2	equ	0xFDB
  9075                           fsr2h	equ	0xFDA
  9076                           fsr2l	equ	0xFD9
  9077                           status	equ	0xFD8
  9078                           
  9079 ;; *************** function i2_setRGB *****************
  9080 ;; Defined at:
  9081 ;;		line 40 in file "Drivers/PWM_Driver.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;  r               1    wreg     unsigned char 
  9084 ;;  g               1    2[COMRAM] unsigned char 
  9085 ;;  b               1    3[COMRAM] unsigned char 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  r               1    4[COMRAM] unsigned char 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9097 ;;      Params:         2       0       0       0       0       0       0       0       0
  9098 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9100 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9101 ;;Total ram usage:        3 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:    1
  9104 ;; This function calls:
  9105 ;;		i2_D_PWM_SetDuty
  9106 ;; This function is called by:
  9107 ;;		_flash
  9108 ;;		_strobe
  9109 ;;		_fade
  9110 ;;		_smooth
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	text54
  9115  00209E                     __ptext54:
  9116                           	opt stack 0
  9117  00209E                     i2_setRGB:
  9118                           	opt stack 13
  9119                           
  9120                           ;incstack = 0
  9121                           ;i2setRGB@r stored from wreg
  9122  00209E  6E05               	movwf	i2setRGB@r,c
  9123                           
  9124                           ;PWM_Driver.c: 41: D_PWM_SetDuty(0, r);
  9125  0020A0  C005  F001         	movff	i2setRGB@r,i2D_PWM_SetDuty@duty
  9126  0020A4  0E00               	movlw	0
  9127  0020A6  ECEE  F00F         	call	i2_D_PWM_SetDuty
  9128                           
  9129                           ;PWM_Driver.c: 42: D_PWM_SetDuty(1, g);
  9130  0020AA  C003  F001         	movff	i2setRGB@g,i2D_PWM_SetDuty@duty
  9131  0020AE  0E01               	movlw	1
  9132  0020B0  ECEE  F00F         	call	i2_D_PWM_SetDuty
  9133                           
  9134                           ;PWM_Driver.c: 43: D_PWM_SetDuty(2, b);
  9135  0020B4  C004  F001         	movff	i2setRGB@b,i2D_PWM_SetDuty@duty
  9136  0020B8  0E02               	movlw	2
  9137  0020BA  ECEE  F00F         	call	i2_D_PWM_SetDuty
  9138  0020BE  0012               	return		;funcret
  9139  0020C0                     __end_ofi2_setRGB:
  9140                           	opt stack 0
  9141                           pclatu	equ	0xFFB
  9142                           pclath	equ	0xFFA
  9143                           tblptru	equ	0xFF8
  9144                           tblptrh	equ	0xFF7
  9145                           tblptrl	equ	0xFF6
  9146                           tablat	equ	0xFF5
  9147                           prodh	equ	0xFF4
  9148                           prodl	equ	0xFF3
  9149                           intcon	equ	0xFF2
  9150                           intcon2	equ	0xFF1
  9151                           postinc0	equ	0xFEE
  9152                           plusw0	equ	0xFEB
  9153                           fsr0h	equ	0xFEA
  9154                           fsr0l	equ	0xFE9
  9155                           wreg	equ	0xFE8
  9156                           postdec1	equ	0xFE5
  9157                           plusw1	equ	0xFE3
  9158                           fsr1h	equ	0xFE2
  9159                           fsr1l	equ	0xFE1
  9160                           bsr	equ	0xFE0
  9161                           indf2	equ	0xFDF
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           plusw2	equ	0xFDB
  9165                           fsr2h	equ	0xFDA
  9166                           fsr2l	equ	0xFD9
  9167                           status	equ	0xFD8
  9168                           
  9169 ;; *************** function i2_D_PWM_SetDuty *****************
  9170 ;; Defined at:
  9171 ;;		line 285 in file "Drivers/PWM_Driver.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;  which           1    wreg     unsigned char 
  9174 ;;  duty            1    0[COMRAM] unsigned char 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  which           1    1[COMRAM] unsigned char 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      void 
  9179 ;; Registers used:
  9180 ;;		wreg, status,2, status,0
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9186 ;;      Params:         1       0       0       0       0       0       0       0       0
  9187 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9189 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9190 ;;Total ram usage:        2 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; This function calls:
  9193 ;;		Nothing
  9194 ;; This function is called by:
  9195 ;;		i2_setRGB
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text55
  9200  001FDC                     __ptext55:
  9201                           	opt stack 0
  9202  001FDC                     i2_D_PWM_SetDuty:
  9203                           	opt stack 13
  9204                           
  9205                           ;incstack = 0
  9206                           ;i2D_PWM_SetDuty@which stored from wreg
  9207  001FDC  6E02               	movwf	i2D_PWM_SetDuty@which,c
  9208                           
  9209                           ;PWM_Driver.c: 286: switch(which) {
  9210  001FDE  D009               	goto	i2l2187
  9211  001FE0                     i2l334:
  9212                           
  9213                           ;PWM_Driver.c: 288: PWM_Red.duty_val = duty;
  9214  001FE0  C001  F07C         	movff	i2D_PWM_SetDuty@duty,_PWM_Red+1
  9215                           
  9216                           ;PWM_Driver.c: 289: break;
  9217  001FE4  0012               	return	
  9218  001FE6                     i2l336:
  9219                           
  9220                           ;PWM_Driver.c: 292: PWM_Green.duty_val = duty;
  9221  001FE6  C001  F07A         	movff	i2D_PWM_SetDuty@duty,_PWM_Green+1
  9222                           
  9223                           ;PWM_Driver.c: 293: break;
  9224  001FEA  0012               	return	
  9225  001FEC                     i2l337:
  9226                           
  9227                           ;PWM_Driver.c: 296: PWM_Blue.duty_val = duty;
  9228  001FEC  C001  F078         	movff	i2D_PWM_SetDuty@duty,_PWM_Blue+1
  9229                           
  9230                           ;PWM_Driver.c: 298: }
  9231                           
  9232                           ;PWM_Driver.c: 297: break;
  9233  001FF0  0012               	return	
  9234  001FF2                     i2l2187:
  9235  001FF2  5002               	movf	i2D_PWM_SetDuty@which,w,c
  9236                           
  9237                           ; Switch size 1, requested type "space"
  9238                           ; Number of cases is 3, Range of values is 0 to 2
  9239                           ; switch strategies available:
  9240                           ; Name         Instructions Cycles
  9241                           ; simple_byte           10     6 (average)
  9242                           ;	Chosen strategy is simple_byte
  9243  001FF4  0A00               	xorlw	0	; case 0
  9244  001FF6  B4D8               	btfsc	status,2,c
  9245  001FF8  D7F3               	goto	i2l334
  9246  001FFA  0A01               	xorlw	1	; case 1
  9247  001FFC  B4D8               	btfsc	status,2,c
  9248  001FFE  D7F3               	goto	i2l336
  9249  002000  0A03               	xorlw	3	; case 2
  9250  002002  A4D8               	btfss	status,2,c
  9251  002004  0012               	return	
  9252  002006  D7F2               	goto	i2l337
  9253  002008                     __end_ofi2_D_PWM_SetDuty:
  9254                           	opt stack 0
  9255                           pclatu	equ	0xFFB
  9256                           pclath	equ	0xFFA
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           prodh	equ	0xFF4
  9262                           prodl	equ	0xFF3
  9263                           intcon	equ	0xFF2
  9264                           intcon2	equ	0xFF1
  9265                           postinc0	equ	0xFEE
  9266                           plusw0	equ	0xFEB
  9267                           fsr0h	equ	0xFEA
  9268                           fsr0l	equ	0xFE9
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           plusw1	equ	0xFE3
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           bsr	equ	0xFE0
  9275                           indf2	equ	0xFDF
  9276                           postinc2	equ	0xFDE
  9277                           postdec2	equ	0xFDD
  9278                           plusw2	equ	0xFDB
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           pclatu	equ	0xFFB
  9283                           pclath	equ	0xFFA
  9284                           tblptru	equ	0xFF8
  9285                           tblptrh	equ	0xFF7
  9286                           tblptrl	equ	0xFF6
  9287                           tablat	equ	0xFF5
  9288                           prodh	equ	0xFF4
  9289                           prodl	equ	0xFF3
  9290                           intcon	equ	0xFF2
  9291                           intcon2	equ	0xFF1
  9292                           postinc0	equ	0xFEE
  9293                           plusw0	equ	0xFEB
  9294                           fsr0h	equ	0xFEA
  9295                           fsr0l	equ	0xFE9
  9296                           wreg	equ	0xFE8
  9297                           postdec1	equ	0xFE5
  9298                           plusw1	equ	0xFE3
  9299                           fsr1h	equ	0xFE2
  9300                           fsr1l	equ	0xFE1
  9301                           bsr	equ	0xFE0
  9302                           indf2	equ	0xFDF
  9303                           postinc2	equ	0xFDE
  9304                           postdec2	equ	0xFDD
  9305                           plusw2	equ	0xFDB
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310                           	psect	rparam
  9311  0000                     pclatu	equ	0xFFB
  9312                           pclath	equ	0xFFA
  9313                           tblptru	equ	0xFF8
  9314                           tblptrh	equ	0xFF7
  9315                           tblptrl	equ	0xFF6
  9316                           tablat	equ	0xFF5
  9317                           prodh	equ	0xFF4
  9318                           prodl	equ	0xFF3
  9319                           intcon	equ	0xFF2
  9320                           intcon2	equ	0xFF1
  9321                           postinc0	equ	0xFEE
  9322                           plusw0	equ	0xFEB
  9323                           fsr0h	equ	0xFEA
  9324                           fsr0l	equ	0xFE9
  9325                           wreg	equ	0xFE8
  9326                           postdec1	equ	0xFE5
  9327                           plusw1	equ	0xFE3
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           bsr	equ	0xFE0
  9331                           indf2	equ	0xFDF
  9332                           postinc2	equ	0xFDE
  9333                           postdec2	equ	0xFDD
  9334                           plusw2	equ	0xFDB
  9335                           fsr2h	equ	0xFDA
  9336                           fsr2l	equ	0xFD9
  9337                           status	equ	0xFD8
  9338                           
  9339                           	psect	temp
  9340  000046                     btemp:
  9341                           	opt stack 0
  9342  000046                     	ds	1
  9343  0000                     int$flags	set	btemp
  9344                           pclatu	equ	0xFFB
  9345                           pclath	equ	0xFFA
  9346                           tblptru	equ	0xFF8
  9347                           tblptrh	equ	0xFF7
  9348                           tblptrl	equ	0xFF6
  9349                           tablat	equ	0xFF5
  9350                           prodh	equ	0xFF4
  9351                           prodl	equ	0xFF3
  9352                           intcon	equ	0xFF2
  9353                           intcon2	equ	0xFF1
  9354                           postinc0	equ	0xFEE
  9355                           plusw0	equ	0xFEB
  9356                           fsr0h	equ	0xFEA
  9357                           fsr0l	equ	0xFE9
  9358                           wreg	equ	0xFE8
  9359                           postdec1	equ	0xFE5
  9360                           plusw1	equ	0xFE3
  9361                           fsr1h	equ	0xFE2
  9362                           fsr1l	equ	0xFE1
  9363                           bsr	equ	0xFE0
  9364                           indf2	equ	0xFDF
  9365                           postinc2	equ	0xFDE
  9366                           postdec2	equ	0xFDD
  9367                           plusw2	equ	0xFDB
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    18
    Data        12
    BSS         119
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      69
    BANK0           160     36     137
    BANK1           256     42      42
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_ReadBlock.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    ?_D_UART_ReadBlock.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    ?_D_UART_ReadBlock.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK0[63]), 

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK0[63]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_25(CODE[4]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_14(CODE[5]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(BANK0[2]), ?_printf(BANK1[2]), 

    strToInt@str	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    msg.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    msg.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    msg.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK0[63]), 

    read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK0[63]), 

    sp__D_UART_GetDeviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    S280$message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.message(COMRAM[10]), D_UART_ReadBlock@cm(BANK1[17]), cm.message(COMRAM[10]), D_UART_Read@cm(BANK1[17]), 

    S280$command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK1[17]), D_UART_Read@cm(BANK1[17]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.command(COMRAM[5]), D_UART_ReadBlock@cm(BANK1[17]), cm.command(COMRAM[5]), D_UART_Read@cm(BANK1[17]), 

    S280$sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK0[63]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer.sender(BANK0[5]), readBuffer(BANK0[63]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    blockCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _readByte->i1_D_UART_Enable
    i1_printf->i1___lwmod
    i1_putch->i1_writeByte
    i1_writeByte->i1_D_UART_Enable
    i1___lwmod->i1___lwdiv

Critical Paths under _HighISR in COMRAM

    _handleState->_flash
    _handleState->_smooth
    _strobe->i2_setRGB
    _smooth->i2_setRGB
    _flash->i2_setRGB
    _fade->i2_setRGB
    i2_setRGB->i2_D_PWM_SetDuty

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwmod

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handle_message
    _initialize->_D_UART_Write
    _D_UART_Write->_printf
    _D_UART_Init->___aldiv
    _D_PWM_Init->_D_TIMER0_Init
    _D_TIMER0_Init->_D_TIMER0_Enable
    _D_PWM_Enable->_D_TIMER0_Enable
    _handle_message->_D_UART_WriteInt
    _D_UART_WriteInt->_printf
    _printf->___lwmod
    _putch->_writeByte
    _writeByte->_D_UART_Enable
    ___lwmod->___lwdiv
    _D_PWM_SetRGB->_setRGB
    _setRGB->_D_PWM_SetDuty

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   17374
                                             40 BANK1      2     2      0
                       _D_PWM_SetRGB
                 _D_UART_BlockLength
                        _D_UART_Read
                   _D_UART_ReadBlock
                     _handle_message
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    4928
                        _D_PORT_Init
                       _D_PWM_Enable
                         _D_PWM_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    3600
                                             28 BANK1      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Init                                          9     4      5    1142
                                             14 BANK1      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     753
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Init                                           0     0      0      93
                    _D_TIMER0_Enable
                      _D_TIMER0_Init
 ---------------------------------------------------------------------------------
 (3) _D_TIMER0_Init                                        1     1      0      62
                                              1 BANK1      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Enable                                         1     1      0      62
                                              1 BANK1      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (4) _D_TIMER0_Enable                                      1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_message                                       7     1      6    9778
                                             33 BANK1      7     1      6
                         _D_PWM_Fade
                        _D_PWM_Flash
                      _D_PWM_GetBlue
                     _D_PWM_GetGreen
                       _D_PWM_GetRed
                     _D_PWM_GetScale
                     _D_PWM_GetState
                    _D_PWM_ScaleDown
                      _D_PWM_ScaleUp
                       _D_PWM_SetRGB
                       _D_PWM_Smooth
                       _D_PWM_Strobe
                        _D_UART_Read (ARG)
                   _D_UART_ReadBlock (ARG)
                    _D_UART_WriteInt
                           _strToInt
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    2135
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strToInt                                             5     3      2     410
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    4216
                                             28 BANK1      5     1      4
                      _D_PWM_GetBlue (ARG)
                     _D_PWM_GetGreen (ARG)
                       _D_PWM_GetRed (ARG)
                     _D_PWM_GetScale (ARG)
                     _D_PWM_GetState (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              25    20      5    3384
                                             12 BANK1     16    11      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                              2 BANK1      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            1     1      0      62
                                              1 BANK1      1     1      0
                      _D_UART_Enable
 ---------------------------------------------------------------------------------
 (6) _D_UART_Enable                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Strobe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Smooth                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetRGB                                         3     1      2    2319
                                              5 BANK1      3     1      2
                             _setRGB
 ---------------------------------------------------------------------------------
 (3) _setRGB                                               3     1      2    1610
                                              2 BANK1      3     1      2
                      _D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (4) _D_PWM_SetDuty                                        2     1      1     355
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleUp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetScale                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetRed                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetGreen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetBlue                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Flash                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Fade                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_UART_ReadBlock                                    25    18      7     108
                                              0 BANK1     25    18      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                         23    17      6      77
                                              0 BANK1     23    17      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_BlockLength                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowISR                                              17    17      0    2479
                                             19 BANK0     17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (8) _readByte                                             1     1      0      34
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       2     2      0    2445
                                             17 BANK0      2     2      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (9) _acknowledge                                          0     0      0    1872
                           i1_printf
 ---------------------------------------------------------------------------------
 (10) i1_printf                                           25    20      5    1872
                                              1 BANK0     16    11      5
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (11) i1_putch                                             1     1      0      93
                                             27 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (12) i1_writeByte                                         1     1      0      62
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (9) i1_D_UART_Enable                                      1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           5     1      4     302
                                             32 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           7     3      4     381
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _HighISR                                            14    14      0    3490
                                             11 COMRAM    14    14      0
                        _handleState
 ---------------------------------------------------------------------------------
 (15) _handleState                                         0     0      0    3490
                               _fade
                              _flash
                          _pwmColors
                             _smooth
                             _strobe
 ---------------------------------------------------------------------------------
 (16) _strobe                                              0     0      0     856
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _smooth                                              6     6      0     856
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _pwmColors                                           3     3      0      66
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (16) _flash                                               6     6      0     856
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _fade                                                0     0      0     856
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (17) i2_setRGB                                            3     1      2     856
                                              2 COMRAM     3     1      2
                    i2_D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (18) i2_D_PWM_SetDuty                                     2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PWM_SetRGB
     _setRGB
       _D_PWM_SetDuty
   _D_UART_BlockLength
   _D_UART_Read
   _D_UART_ReadBlock
   _handle_message
     _D_PWM_Fade
     _D_PWM_Flash
     _D_PWM_GetBlue
     _D_PWM_GetGreen
     _D_PWM_GetRed
     _D_PWM_GetScale
     _D_PWM_GetState
     _D_PWM_ScaleDown
     _D_PWM_ScaleUp
     _D_PWM_SetRGB
       _setRGB
         _D_PWM_SetDuty
     _D_PWM_Smooth
     _D_PWM_Strobe
     _D_UART_Read (ARG)
     _D_UART_ReadBlock (ARG)
     _D_UART_WriteInt (ARG)
       _D_PWM_GetBlue (ARG)
       _D_PWM_GetGreen (ARG)
       _D_PWM_GetRed (ARG)
       _D_PWM_GetScale (ARG)
       _D_PWM_GetState (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _strToInt (ARG)
     _strcmp (ARG)
   _initialize
     _D_PORT_Init
     _D_PWM_Enable
       _D_TIMER0_Enable
     _D_PWM_Init
       _D_TIMER0_Enable
       _D_TIMER0_Init
         _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_Init
       _D_UART_Enable
       ___aldiv
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1___lwmod
           i1___lwdiv (ARG)
         i1_putch
           i1_writeByte
             i1_D_UART_Enable
   _readByte
     i1_D_UART_Enable

 _HighISR (ROOT)
   _handleState
     _fade
       i2_setRGB
         i2_D_PWM_SetDuty
     _flash
       i2_setRGB
         i2_D_PWM_SetDuty
     _pwmColors
     _smooth
       i2_setRGB
         i2_D_PWM_SetDuty
     _strobe
       i2_setRGB
         i2_D_PWM_SetDuty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2A      2A       7       16.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      89       5       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      20        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 16 19:30:47 2017

                          _b 007E                            _g 007F                            _r 0080  
                         l50 2094                           l46 1864                           l39 182A  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
      __end_of_D_PWM_GetBlue 21A0                 _ackCharacter 003C                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l107 2122                          l334 1FB2                          l336 1FB8  
                        l504 0ED2                          l337 1FBE                          l185 204C  
                        l932 1B3E                          l942 1CE0                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000        __end_of_D_PWM_ScaleUp 216E        __end_of_D_PWM_SetDuty 1FDC  
                        prod 000FF3                          wreg 000FE8       __end_of_D_PWM_GetGreen 219A  
     __end_of_D_PWM_GetScale 21BA       __end_of_D_PWM_GetState 21B6     __size_of_D_TIMER0_Enable 0022  
    __end_ofi2_D_PWM_SetDuty 2008          __end_ofi1_writeByte 213E                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l3103 1FC4                         l3111 1AEE  
                       l3113 1AFA                         l3201 185A                         l3123 1B30  
                       l3115 1B00                         l3131 1C9C                         l3133 1CA8  
                       l3301 107E                         l3205 186C                         l3135 1CAE  
                       l3231 0E82                         l3223 0E60                         l3303 108A  
                       l3207 18A2                         l3321 1362                         l3139 1CD2  
                       l3251 0F26                         l3235 0E8C                         l3227 0E74  
                       l3331 13A6                         l3315 1344                         l3253 0F2C  
                       l3229 0E7C                         l3247 0F0A                         l3191 1832  
                       l3327 1390                         l3343 140C                         l3265 0F62  
                       l3281 0F9E                         l3193 183A                         l3329 13A0  
                       l3291 1016                         l3267 0F68                         l3283 0FB0  
                       l3195 1842                         l3347 1428                         l3339 13FA  
                       l3541 1E4A                         l3197 184A                         l3287 0FC4  
                       l3535 1E04                         l3199 1852                         l3289 0FCA  
                       l3297 1064                         l3553 1D80                         l3537 1E10  
                       l3801 0A2C                         l3299 1076                         l3547 1D5C  
                       l3821 0AF4                         l3559 1D92                         l3807 0A56  
                       l3827 0B3C                         l3771 093A                         l3763 08F4  
                       l3755 08AE                         l3843 18CE                         l3861 1942  
                       l3853 190C                         l3783 09AE                         l3857 191C  
                       l3795 0A02                         l3789 09D8                         STR_1 0863  
                       STR_2 0861                         STR_3 083D                         STR_4 0839  
                       STR_5 0835                         STR_6 0850                         STR_7 0865  
                       STR_8 0865                         STR_9 0865                         u3201 1EB6  
                       u3211 1EEC                         u3221 1DC2                         u3231 1DF8  
                       u3401 18FE                         u3421 1932                         u3447 16BA  
                       u3457 0A9E                         u3467 0AC6                         u3477 0AEE  
                       u3487 150E                         _fade 1A54                         _baud 002C  
                       _main 18B8                         _read 0025                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0046                         prodh 000FF4                         prodl 000FF3  
                       start 00B4                D_UART_Read@cm 0106                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 2182              __end_of_HighISR 19D8                __CFG_MCLRE$ON 000000  
                ?_D_PWM_Fade 0001                 ___param_bank 000000        D_TIMER0_Enable@enable 0100  
                ?_D_PWM_Init 0001               _startCharacter 0040                __CFG_PLLDIV$4 000000  
                      ?_fade 0001              __end_of___aldiv 143A                        ?_main 0001  
                      STR_10 0865                        STR_11 084D                        STR_20 085F  
                      STR_12 0859                        STR_13 0857                        STR_21 0844  
                      STR_30 0829                        STR_22 084A                        STR_14 0824  
                      STR_15 085B                        STR_23 0841                        STR_31 082D  
                      STR_32 082D                        STR_16 0855                        STR_24 0847  
                      STR_17 0833                        STR_25 0831                        STR_33 0813  
                      STR_26 085B                        STR_18 085D                        STR_27 0855  
                      STR_19 0853                        STR_28 0833                        STR_29 0829  
            __end_of___lwdiv 1B48                        i1l113 2014                        i1l107 2134  
                      i1l504 113C                        i1l185 20D4              __end_of___lwmod 1CEA  
                      i1l197 006C                        i2l231 19FC                        i2l233 1A20  
                      i2l235 1A44                        i2l244 17A8                        i2l260 1F8C  
                      i2l334 1FE0                        i2l336 1FE6                        i2l337 1FEC  
                      i2l283 1A90                        i2l380 199C                        i1l932 1EA2  
                      i1l942 1F34                        i2l297 1552                        _RCREG 000FAE  
                      _TMR0H 000FD7                        _TMR0L 000FD6         __size_of_acknowledge 006E  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              ?_D_PWM_GetGreen 0001  
            ?_D_PWM_GetScale 0001               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000      __end_of_D_PWM_ScaleDown 2178  
             __CFG_EBTR3$OFF 000000              ?_D_PWM_GetState 0001                __CFG_WRTB$OFF 000000  
         i1___lwmod@dividend 0021                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        _flash 1770              __end_of_dpowers 080B  
                      _scale 002F                        _state 0030                        _putch 214C  
                      main@i 0128              i1writeByte@data 001B                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 010E                 ?_D_UART_Read 0100  
                      plusw0 000FEB                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8                 ?_D_PORT_Init 0001             __end_ofi2_setRGB 20C0  
         __size_ofi1___lwdiv 0052           __size_ofi1___lwmod 0048                _stopCharacter 0042  
           __end_ofi1_printf 1320                   i1printf@ap 00CA              __initialization 1CEA  
           _D_UART_Init$1748 0113                 __end_of_fade 1AD0                 ?_D_PWM_Flash 0001  
               __end_of_main 1950     __size_ofi1_D_UART_Enable 0020                       ??_fade 0006  
                     ??_main 0128                  i1_writeByte 212C                __activetblptr 000002  
           _D_UART_ReadBlock 1DA6              __CFG_CCP2MX$OFF 000000         __size_of_handleState 006E  
           ?i2_D_PWM_SetDuty 0001                       ?_flash 0001                       _ADCON1 000FC1  
        __size_of_D_PWM_Fade 0006          __size_of_D_PWM_Init 003A                       ?_putch 0001  
                     i1l3151 1E70                       i1l3153 1E78                       i1l3163 1E98  
                     i1l3155 1E7C                       i1l3171 1F06                       i1l3411 1208  
                     i1l3173 1F10                       i1l3421 127C                       i1l3413 121A  
                     i1l3175 1F14                       i1l3431 12E2                       i1l3417 122E  
                     i1l3361 10EC                       i1l3353 10CA                       i1l3433 12EE  
                     i1l3601 0BF8                       i1l3179 1F28                       i1l3419 1234  
                     i1l3427 12C8                       i1l3429 12DA                       i1l3381 1190  
                     i1l3365 10F6                       i1l3357 10DE                       i1l3701 0E22  
                     i1l3383 1196                       i1l3359 10E6                       i1l3631 0CB0  
                     i1l3623 0C74                       i1l3615 0C4A                       i1l3377 1174  
                     i1l3609 0C22                       i1l3395 11CC                       i1l3397 11D2  
                     i1l3645 0D02                       i1l3637 0CD8                       i1l3629 0C9C  
                     i1l3581 202E                       i1l3663 0D7C                       i1l3655 0D4E  
                     i1l3591 0BC8                       i1l3667 0D96                       i1l3659 0D68  
                     i1l3595 0BD0                       i1l3587 0B8A                       i1l3677 0DC0  
                     i1l3695 0E0E                       i1l3687 0DF2                       i1l3679 0DC8  
                     i2l2601 1A9C                       i1l3697 0E1A                       i2l2187 1FF2  
                     i2l2603 1AA0                       i2l2531 1A46                       i2l2523 19FE  
                     i2l2613 1ABC                       i2l2615 1AC0                       i2l2607 1AAC  
                     i2l2551 17E6                       i2l2543 17C2                       i2l2527 1A22  
                     i2l2631 157E                       i2l2623 155A                       i2l2609 1AB0  
                     i2l2547 17D4                       i2l2539 17B0                       i2l2643 15B4  
                     i2l2635 1590                       i2l2627 156C                       i2l2651 15EE  
                     i2l2571 1F98                       i2l2557 17FA                       i2l2573 1F9C  
                     i2l2565 1F82                       i2l2591 1A7C                       i2l2583 1A68  
                     i2l2559 1814                       i2l2639 15A2                       i2l2649 15C8  
                     i2l2913 1BB8                       i2l2595 1A86                       i2l2587 1A72  
                     i2l2579 1A5E                       i2l2923 1BE0                       i2l2915 1BC0  
                     i2l2933 1C00                       i2l2927 1BF0                       i2l2919 1BD0  
                     i2l2935 1C20                    ??i1_putch 001C                    ??_HighISR 000C  
          ??_D_TIMER0_Enable 0100                  readByte@dum 001B                       _LowISR 0018  
             __CFG_XINST$OFF 000000                    ??___aldiv 0108                       _comMes 0060  
                  ??___lwdiv 0104                    ??___lwmod 010B             __end_of_readByte 2032  
                     _setRGB 2058                       clear_0 1D28                       clear_1 1D34  
                     _printf 0E52   __end_of_D_UART_BlockLength 21B2                       _smooth 151A  
   __size_of_D_UART_WriteInt 00E0                       _strcmp 1E02                       _strobe 1F78  
          __end_ofi1___lwdiv 1EAC                 __pdataCOMRAM 003C            __end_ofi1___lwmod 1F3E  
      D_UART_Init@interrupts 0112                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 011C  
           ?_D_PWM_ScaleDown 0001              D_UART_Init@baud 0110              D_UART_Init@name 010E  
           __end_of_strToInt 1DA6                   __accesstop 0060      __end_of__initialization 1D3A  
            __CFG_PBADEN$OFF 000000                ___rparam_used 000001       __size_of_D_TIMER0_Init 00A0  
              D_PWM_SetRGB@b 0106                D_PWM_SetRGB@g 0105                D_PWM_SetRGB@r 0107  
                i1printf@idx 00C9                  i1printf@val 00CE               __pcstackCOMRAM 0001  
               __pidataBANK0 21BA                ?_D_PWM_GetRed 0001                ?_D_PWM_Enable 0001  
              __end_of_flash 1818                  i1putch@data 001C                ?_D_PWM_SetRGB 0105  
              __end_of_putch 215A             _messageCharacter 00E7            D_PWM_SetDuty@duty 0100  
              ?_D_PWM_Smooth 0001                ?_D_PWM_Strobe 0001       __size_of_D_UART_Enable 0026  
          ??i1_D_UART_Enable 001A               ??_D_UART_Write 0120                    ?i2_setRGB 0003  
                  ?i1_printf 00C1                      ??_flash 0006                      ??_putch 0102  
                 __pbssBANK0 0060         __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 004A  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Fade 0100  
            fillDataBuffer@i 00D1                 ??_D_PWM_Init 0102               ??_D_PWM_GetRed 0100  
             ??_D_PWM_Enable 0101               ??_D_PWM_SetRGB 0107                   _deviceName 00E4  
                    ?_setRGB 0102         __size_of_D_PWM_Flash 0006               ??_D_PWM_Smooth 0100  
             ??_D_PWM_Strobe 0100             ??_D_PWM_GetGreen 0100             ??_D_PWM_GetScale 0100  
                    ?_printf 010C                      ?_smooth 0001             ??_D_PWM_GetState 0100  
                    ?_strcmp 0100                      ?_strobe 0001                _D_TIMER0_Flag 002B  
         __size_of_pwmColors 007C                _D_TIMER0_Init 1818                   ??i2_setRGB 0005  
                 ??i1_printf 00C6      __size_of_fillDataBuffer 02CE          D_UART_Enable@enable 0100  
    __size_of_handle_message 031C            ??_D_UART_WriteInt 0120               _blockCharacter 003E  
         __end_of_D_PWM_Fade 21AC                      _PWM_Red 007B           __end_of_D_PWM_Init 1F78  
            __CFG_VREGEN$OFF 000000                      i1_putch 2178                      _HighISR 0008  
                  ?_readByte 0001       __size_of_D_PWM_GetBlue 0006           __size_of_writeByte 0014  
              _D_UART_Enable 2032     __end_of_D_UART_ReadBlock 1E02                      __Hparam 0000  
     __size_of_D_PWM_ScaleUp 000A                      __Lparam 0000              __size_of_LowISR 009C  
     __size_of_D_PWM_SetDuty 0030                   _readBuffer 0081                strToInt@shift 0103  
                    ___aldiv 1320                      ___lwdiv 1AD0                      ___lwmod 1C88  
                  ?_strToInt 0100                 __psmallconst 0800            handle_message@msg 0121  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0025                      __pcinit 1CEA  
            __size_of_setRGB 0024                      __ramtop 0800                   _initialize 1C24  
                    __ptext0 18B8                      __ptext1 1C24                      __ptext2 15F2  
                    __ptext3 16C6                      __ptext4 1320                      __ptext5 1F3E  
                    __ptext6 1818                      __ptext7 213E                      __ptext8 207C  
                    __ptext9 20E0              __size_of_printf 026A               ?_D_TIMER0_Init 0001  
                  _T0CONbits 000FD5              __size_of_smooth 00D8                 ?i1_writeByte 0001  
            __size_of_strcmp 0058              __size_of_strobe 0034            __end_of_hexpowers 0813  
                    _dpowers 0801            i1___lwdiv@divisor 001C            i1___lwdiv@counter 001E  
            _D_TIMER0_Enable 207C             ___aldiv@dividend 0100               __pintcode_body 1950  
       end_of_initialization 1D3A                   ??_readByte 001B                      setRGB@b 0103  
                    setRGB@g 0102                      setRGB@r 0104                __Lmediumconst 0000  
                    int_func 1950               ?_D_UART_Enable 0001            __end_of_pwmColors 1A54  
       __end_of_D_UART_Write 16C6                    _RCSTAbits 000FAB                      printf@c 011B  
                    printf@f 010C             ___aldiv@quotient 010A                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                 ??_strToInt 0102                      strcmp@r 0105                _D_PWM_GetBlue 219A  
                  _PORTBbits 000F81                ??_handleState 000C            __end_of_writeByte 212C  
                 flash@color 0035                   flash@count 0036                _D_PWM_ScaleUp 2164  
                  _TRISBbits 000F93                _D_PWM_SetDuty 1FAC                    _TRISCbits 000F94  
        __end_of_acknowledge 1BB6                    _PWM_Green 0079                    i1___lwdiv 1E5A  
                  i1___lwmod 1EF6         __end_of_D_PWM_GetRed 2194         __end_of_D_PWM_Enable 214C  
         _D_UART_BlockLength 21AC         __end_of_D_PWM_SetRGB 2118         __end_of_D_PWM_Smooth 218E  
      D_TIMER0_Init@prescale 0101         __end_of_D_PWM_Strobe 2188                    _TXSTAbits 000FAC  
   __size_ofi2_D_PWM_SetDuty 002C                   main@length 0129                 i1printf@flag 00CD  
        ?_D_UART_BlockLength 0001                 i1printf@prec 00CC               __end_of_LowISR 00B4  
            i1_D_UART_Enable 20C0      __end_of_D_TIMER0_Enable 209E              ??_D_TIMER0_Init 0101  
                _BAUDCONbits 000FB8               ?_D_PWM_GetBlue 0001                __pidataCOMRAM 215A  
                ?_initialize 0001            i1___lwmod@divisor 0023                    i2setRGB@b 0004  
                  i2setRGB@g 0003                    i2setRGB@r 0005               __end_of_setRGB 207C  
          i1___lwmod@counter 00C0               __end_of_printf 10BC               ?_D_PWM_ScaleUp 0001  
       ??_D_UART_BlockLength 0100               __end_of_smooth 15F2               __end_of_strcmp 1E5A  
             __end_of_strobe 1FAC               ?_D_PWM_SetDuty 0100          start_initialization 1CEA  
             _fillDataBuffer 0B84                    i1printf@c 00D0                    i1printf@f 00C1  
             _handle_message 0868           D_PWM_SetDuty@which 0101                   ?i1___lwdiv 001A  
                 ?i1___lwmod 0021            __size_ofi2_setRGB 0022          __end_of_handleState 1C24  
          __size_ofi1_printf 0264              _D_UART_ReadFlag 007D              ??_D_UART_Enable 0100  
   __size_of_D_PWM_ScaleDown 000A                  smooth@color 0038                  smooth@count 0039  
                   ??_LowISR 00D3                  strToInt@val 0104                  strToInt@tmp 0102  
                strToInt@str 0100                  __pdataBANK0 00E7             __CFG_LPT1OSC$OFF 000000  
                   ??_setRGB 0104              _D_UART_WriteInt 143A                  _acknowledge 1B48  
           D_UART_Write@data 011E                     ??_printf 0111                     ??_smooth 0006  
                   ??_strcmp 0104                     ??_strobe 0006       __end_of_fillDataBuffer 0E52  
     __end_of_handle_message 0B84                  __pbssCOMRAM 0025               handleState@cnt 0037  
       __size_ofi1_writeByte 0012                __pcstackBANK0 00C0                __pcstackBANK1 0100  
              ??_D_UART_Init 0113                ??_D_UART_Read 0106                     ?i1_putch 0001  
                   ?_HighISR 0001        __size_of_D_UART_Write 00D4                ??_D_PORT_Init 0100  
        __size_of_initialize 0064      __end_ofi1_D_UART_Enable 20E0                    __pnvBANK0 00E4  
          __size_of_readByte 002A            ?_D_UART_ReadBlock 0100             ___lwdiv@dividend 0100  
              ??_D_PWM_Flash 0100                    __pintcode 0008                     ?___aldiv 0100  
         ??_D_UART_ReadBlock 0107            ??i2_D_PWM_SetDuty 0002              ??_D_PWM_GetBlue 0100  
                   ?___lwdiv 0100                     ?___lwmod 0107                  _blockLength 002D  
                  fade@b_cnt 0044                    fade@g_cnt 0045                  __pintcodelo 0018  
           ?_D_TIMER0_Enable 0001                    _bufferCnt 002E           fillDataBuffer@data 00D2  
                  fade@r_cnt 0033              ??_D_PWM_ScaleUp 0100            __size_of_strToInt 005E  
            ??_D_PWM_SetDuty 0101              ?_fillDataBuffer 0001                  __smallconst 0800  
                _handleState 1BB6        __size_of_D_PWM_GetRed 0006        __size_of_D_PWM_Enable 000E  
            ?_handle_message 0121        __size_of_D_PWM_SetRGB 001A                 _D_UART_Write 15F2  
                  _hexpowers 080B        __size_of_D_PWM_Smooth 0006             ___lwdiv@quotient 0105  
                ??i1___lwdiv 001E                  ??i1___lwmod 0025        __size_of_D_PWM_Strobe 0006  
             __size_of_flash 00A8               __size_of_putch 000E              ___aldiv@divisor 0104  
            ___aldiv@counter 0108                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
                   i1u314_21 0D38                     i1u349_27 2020          __end_of_D_UART_Init 1770  
        __end_of_D_UART_Read 1EF6                     i2u173_44 19EA                     i2u173_45 19E6  
                   i2u175_44 1A0E                     i2u175_45 1A0A                     _PIR1bits 000F9E  
                   i2u177_44 1A32                     i2u177_45 1A2E                     i2u194_44 1530  
                   i2u194_45 152A      __end_of_D_UART_WriteInt 151A                     i2u179_44 1786  
                   i2u179_45 1780                     _RCONbits 000FD0             __CFG_WDTPS$32768 000000  
     D_UART_WriteInt@command 011C            ??_D_PWM_ScaleDown 0100                    _pwmColors 19D8  
        __end_of_D_PORT_Init 20FE                 _D_PWM_GetRed 218E                 _D_PWM_Enable 213E  
         D_PWM_Enable@enable 0101                 _D_PWM_SetRGB 20FE                     _PWM_Blue 0077  
               _D_PWM_Smooth 2188          __end_of_D_PWM_Flash 21A6                 _D_PWM_Strobe 2182  
                 printf@flag 0118                   printf@prec 0117                     i2_setRGB 209E  
                   i1_printf 10BC                    _writeByte 2118      __size_of_D_PWM_GetGreen 0006  
                _INTCON2bits 000FF1      __size_of_D_PWM_GetScale 0004                    copy_data0 1D16  
    __size_of_D_PWM_GetState 0004             __size_ofi1_putch 000A             __size_of_HighISR 19D0  
           ?i1_D_UART_Enable 0001                     __Hrparam 0000                     __Lrparam 0000  
                 ?_pwmColors 0001             __size_of___aldiv 011A             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 0121        i1D_UART_Enable@enable 001A  
            ___lwdiv@divisor 0102              ___lwdiv@counter 0104                     __ptext10 0868  
                   __ptext11 1E02                     __ptext20 2182                     __ptext12 1D48  
                   __ptext21 2188                     __ptext13 143A                     __ptext30 2194  
                   __ptext22 20FE                     __ptext14 0E52                     __ptext31 219A  
                   __ptext23 2058                     __ptext15 214C                     __ptext40 1B48  
                   __ptext32 21A0                     __ptext24 1FAC                     __ptext16 2118  
                   __ptext41 10BC                     __ptext33 21A6                     __ptext25 2164  
                   __ptext17 2032                     __ptext50 151A                     __ptext42 2178  
                   __ptext34 1DA6                     __ptext26 216E                     __ptext18 1C88  
                   __ptext51 19D8                     __ptext43 212C                     __ptext35 1EAC  
                   __ptext27 21B2                     __ptext19 1AD0                     __ptext52 1770  
                   __ptext44 20C0                     __ptext36 21AC                     __ptext28 21B6  
                   __ptext53 1A54                     __ptext45 1EF6                     __ptext29 218E  
                   __ptext54 209E                     __ptext46 1E5A                     __ptext38 2008  
                   __ptext55 1FDC                     __ptext39 0B84                     __ptext48 1BB6  
                   __ptext49 1F78                   ?_writeByte 0001                     fade@b_up 0031  
                   fade@g_up 0032          D_UART_ReadBlock@cnt 0107                     fade@r_up 0034  
         i1___lwdiv@dividend 001A                  _D_UART_Init 16C6                  _D_UART_Read 1EAC  
                   _readData 0071                     _readByte 2008                __size_of_fade 007C  
              __size_of_main 0098                  _D_PORT_Init 20E0           __end_of_initialize 1C88  
           ?_D_UART_WriteInt 011C                  _D_PWM_Flash 21A0                     int$flags 0046  
                   _strToInt 1D48                    printf@idx 0114                    printf@val 0119  
               ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000        __end_of_D_TIMER0_Init 18B8  
         i1___lwdiv@quotient 001F                    putch@data 0102                   _INTCONbits 000FF2  
__size_of_D_UART_BlockLength 0006                     intlevel1 0000                     intlevel2 0000  
            i2_D_PWM_SetDuty 1FDC             ___lwmod@dividend 0107           D_UART_ReadBlock@cm 0108  
      __end_of_D_UART_Enable 2058                    strobe@cnt 003A                   _D_PWM_Fade 21A6  
                 _D_PWM_Init 1F3E                  ??_pwmColors 0001                     printf@ap 0115  
           ??_fillDataBuffer 0025          D_UART_Write@command 011C             ??_handle_message 0127  
              ??i1_writeByte 001B                 ?_handleState 0001                     strcmp@s1 0100  
                   strcmp@s2 0102              ___lwmod@divisor 0109    __size_of_D_UART_ReadBlock 005C  
                   strobe@up 003B                writeByte@data 0101              ___lwmod@counter 010B  
               ___aldiv@sign 0109          D_UART_WriteInt@data 011E         i2D_PWM_SetDuty@which 0002  
                ??_writeByte 0101               _D_PWM_GetGreen 2194               _D_PWM_GetScale 21B6  
             _D_PWM_GetState 21B2           __CFG_FOSC$HSPLL_HS 000000          pwmColors@birghtness 0003  
            _D_PWM_ScaleDown 216E          i2D_PWM_SetDuty@duty 0001  

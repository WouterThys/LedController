

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 16 21:52:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.40
    79                           ; Generated 01/12/2016 GMT
    80                           ; 
    81                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F2550 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  00219C                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _ackCharacter
   118  00219C  35                 	db	low STR_5
   119  00219D  08                 	db	high STR_5
   120                           
   121                           ;initializer for _blockCharacter
   122  00219E  39                 	db	low STR_4
   123  00219F  08                 	db	high STR_4
   124                           
   125                           ;initializer for _startCharacter
   126  0021A0  63                 	db	low STR_1
   127  0021A1  08                 	db	high STR_1
   128                           
   129                           ;initializer for _stopCharacter
   130  0021A2  61                 	db	low STR_2
   131  0021A3  08                 	db	high STR_2
   132                           
   133                           ;initializer for fade@b_cnt
   134  0021A4  FF                 	db	255
   135                           
   136                           ;initializer for fade@g_cnt
   137  0021A5  80                 	db	128
   138                           
   139                           	psect	idataBANK0
   140  0021FC                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _messageCharacter
   144  0021FC  3D                 	db	low STR_3
   145  0021FD  08                 	db	high STR_3
   146                           
   147                           	psect	smallconst
   148  000800                     __psmallconst:
   149                           	opt stack 0
   150  000800  00                 	db	0
   151  000801                     _dpowers:
   152                           	opt stack 0
   153  000801  0001               	dw	1
   154  000803  000A               	dw	10
   155  000805  0064               	dw	100
   156  000807  03E8               	dw	1000
   157  000809  2710               	dw	10000
   158  00080B                     __end_of_dpowers:
   159                           	opt stack 0
   160  00080B                     _hexpowers:
   161                           	opt stack 0
   162  00080B  0001               	dw	1
   163  00080D  0010               	dw	16
   164  00080F  0100               	dw	256
   165  000811  1000               	dw	4096
   166  000813                     __end_of_hexpowers:
   167                           	opt stack 0
   168  000813                     STR_33:
   169  000813  30                 	db	48	;'0'
   170  000814  31                 	db	49	;'1'
   171  000815  32                 	db	50	;'2'
   172  000816  33                 	db	51	;'3'
   173  000817  34                 	db	52	;'4'
   174  000818  35                 	db	53	;'5'
   175  000819  36                 	db	54	;'6'
   176  00081A  37                 	db	55	;'7'
   177  00081B  38                 	db	56	;'8'
   178  00081C  39                 	db	57	;'9'
   179  00081D  61                 	db	97	;'a'
   180  00081E  62                 	db	98	;'b'
   181  00081F  63                 	db	99	;'c'
   182  000820  64                 	db	100	;'d'
   183  000821  65                 	db	101	;'e'
   184  000822  66                 	db	102	;'f'
   185  000823  00                 	db	0
   186  000824                     STR_14:
   187  000824  69                 	db	105	;'i'
   188  000825  6E                 	db	110	;'n'
   189  000826  69                 	db	105	;'i'
   190  000827  74                 	db	116	;'t'
   191  000828  00                 	db	0
   192  000829                     STR_29:
   193  000829  53                 	db	83	;'S'
   194  00082A  43                 	db	67	;'C'
   195  00082B  41                 	db	65	;'A'
   196  00082C  00                 	db	0
   197  00082D                     STR_31:
   198  00082D  53                 	db	83	;'S'
   199  00082E  54                 	db	84	;'T'
   200  00082F  41                 	db	65	;'A'
   201  000830  00                 	db	0
   202  000831                     STR_25:
   203  000831  52                 	db	82	;'R'
   204  000832  47                 	db	71	;'G'
   205  000833  42                 	db	66	;'B'
   206  000834  00                 	db	0
   207  000835                     STR_5:
   208  000835  5B                 	db	91	;'['
   209  000836  41                 	db	65	;'A'
   210  000837  5D                 	db	93	;']'
   211  000838  00                 	db	0
   212  000839                     STR_4:
   213  000839  5B                 	db	91	;'['
   214  00083A  42                 	db	66	;'B'
   215  00083B  5D                 	db	93	;']'
   216  00083C  00                 	db	0
   217  00083D                     STR_3:
   218  00083D  5B                 	db	91	;'['
   219  00083E  4D                 	db	77	;'M'
   220  00083F  5D                 	db	93	;']'
   221  000840  00                 	db	0
   222  000841                     STR_23:
   223  000841  46                 	db	70	;'F'
   224  000842  41                 	db	65	;'A'
   225  000843  00                 	db	0
   226  000844                     STR_21:
   227  000844  46                 	db	70	;'F'
   228  000845  4C                 	db	76	;'L'
   229  000846  00                 	db	0
   230  000847                     STR_24:
   231  000847  53                 	db	83	;'S'
   232  000848  4D                 	db	77	;'M'
   233  000849  00                 	db	0
   234  00084A                     STR_22:
   235  00084A  53                 	db	83	;'S'
   236  00084B  54                 	db	84	;'T'
   237  00084C  00                 	db	0
   238  00084D                     STR_11:
   239  00084D  25                 	db	37
   240  00084E  64                 	db	100	;'d'
   241  00084F  00                 	db	0
   242  000850                     STR_6:
   243  000850  25                 	db	37
   244  000851  78                 	db	120	;'x'
   245  000852  00                 	db	0
   246  000853                     STR_19:
   247  000853  44                 	db	68	;'D'
   248  000854  00                 	db	0
   249  000855                     STR_16:
   250  000855  47                 	db	71	;'G'
   251  000856  00                 	db	0
   252  000857                     STR_13:
   253  000857  49                 	db	73	;'I'
   254  000858  00                 	db	0
   255  000859                     STR_12:
   256  000859  50                 	db	80	;'P'
   257  00085A  00                 	db	0
   258  00085B                     STR_15:
   259  00085B  52                 	db	82	;'R'
   260  00085C  00                 	db	0
   261  00085D                     STR_18:
   262  00085D  53                 	db	83	;'S'
   263  00085E  00                 	db	0
   264  00085F                     STR_20:
   265  00085F  55                 	db	85	;'U'
   266  000860  00                 	db	0
   267  000861                     STR_2:
   268  000861  24                 	db	36
   269  000862  00                 	db	0
   270  000863                     STR_1:
   271  000863  26                 	db	38
   272  000864  00                 	db	0
   273  000865                     STR_7:
   274  000865  3A                 	db	58	;':'
   275  000866  00                 	db	0
   276  0000                     
   277                           ; #config settings
   278  000867  00                 	db	0	; dummy byte at the end
   279  0000                     
   280                           	psect	nvBANK0
   281  0000D2                     __pnvBANK0:
   282                           	opt stack 0
   283  0000D2                     _deviceName:
   284                           	opt stack 0
   285  0000D2                     	ds	3
   286  0000                     _ADCON1	set	4033
   287  0000                     _BAUDCONbits	set	4024
   288  0000                     _INTCON2bits	set	4081
   289  0000                     _INTCONbits	set	4082
   290  0000                     _IPR1bits	set	3999
   291  0000                     _PIE1bits	set	3997
   292  0000                     _PIR1bits	set	3998
   293  0000                     _PORTA	set	3968
   294  0000                     _PORTB	set	3969
   295  0000                     _PORTBbits	set	3969
   296  0000                     _PORTC	set	3970
   297  0000                     _RCONbits	set	4048
   298  0000                     _RCREG	set	4014
   299  0000                     _RCSTAbits	set	4011
   300  0000                     _SPBRG	set	4015
   301  0000                     _T0CONbits	set	4053
   302  0000                     _TMR0H	set	4055
   303  0000                     _TMR0L	set	4054
   304  0000                     _TRISA	set	3986
   305  0000                     _TRISB	set	3987
   306  0000                     _TRISBbits	set	3987
   307  0000                     _TRISC	set	3988
   308  0000                     _TRISCbits	set	3988
   309  0000                     _TXREG	set	4013
   310  0000                     _TXSTAbits	set	4012
   311                           
   312                           	psect	cinit
   313  001C7A                     __pcinit:
   314                           	opt stack 0
   315  001C7A                     start_initialization:
   316                           	opt stack 0
   317  001C7A                     __initialization:
   318                           	opt stack 0
   319                           
   320                           ; Initialize objects allocated to BANK0 (2 bytes)
   321                           ; load TBLPTR registers with __pidataBANK0
   322  001C7A  0EFC               	movlw	low __pidataBANK0
   323  001C7C  6EF6               	movwf	tblptrl,c
   324  001C7E  0E21               	movlw	high __pidataBANK0
   325  001C80  6EF7               	movwf	tblptrh,c
   326  001C82  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   327  001C84  6EF8               	movwf	tblptru,c
   328  001C86  0009               	tblrd		*+	;fetch initializer
   329  001C88  CFF5 F0D5          	movff	tablat,__pdataBANK0
   330  001C8C  0009               	tblrd		*+	;fetch initializer
   331  001C8E  CFF5 F0D6          	movff	tablat,__pdataBANK0+1
   332                           
   333                           ; Initialize objects allocated to COMRAM (10 bytes)
   334                           ; load TBLPTR registers with __pidataCOMRAM
   335  001C92  0E9C               	movlw	low __pidataCOMRAM
   336  001C94  6EF6               	movwf	tblptrl,c
   337  001C96  0E21               	movlw	high __pidataCOMRAM
   338  001C98  6EF7               	movwf	tblptrh,c
   339  001C9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   340  001C9C  6EF8               	movwf	tblptru,c
   341  001C9E  EE00  F03C         	lfsr	0,__pdataCOMRAM
   342  001CA2  EE10 F00A          	lfsr	1,10
   343  001CA6                     copy_data0:
   344  001CA6  0009               	tblrd		*+
   345  001CA8  CFF5 FFEE          	movff	tablat,postinc0
   346  001CAC  50E5               	movf	postdec1,w,c
   347  001CAE  50E1               	movf	fsr1l,w,c
   348  001CB0  E1FA               	bnz	copy_data0
   349                           
   350                           ; Clear objects allocated to BANK1 (63 bytes)
   351  001CB2  EE01  F000         	lfsr	0,__pbssBANK1
   352  001CB6  0E3F               	movlw	63
   353  001CB8                     clear_0:
   354  001CB8  6AEE               	clrf	postinc0,c
   355  001CBA  06E8               	decf	wreg,f,c
   356  001CBC  E1FD               	bnz	clear_0
   357                           
   358                           ; Clear objects allocated to BANK0 (35 bytes)
   359  001CBE  EE00  F0AF         	lfsr	0,__pbssBANK0
   360  001CC2  0E23               	movlw	35
   361  001CC4                     clear_1:
   362  001CC4  6AEE               	clrf	postinc0,c
   363  001CC6  06E8               	decf	wreg,f,c
   364  001CC8  E1FD               	bnz	clear_1
   365                           
   366                           ; Clear objects allocated to COMRAM (24 bytes)
   367  001CCA  EE00  F024         	lfsr	0,__pbssCOMRAM
   368  001CCE  0E18               	movlw	24
   369  001CD0                     clear_2:
   370  001CD0  6AEE               	clrf	postinc0,c
   371  001CD2  06E8               	decf	wreg,f,c
   372  001CD4  E1FD               	bnz	clear_2
   373  001CD6                     end_of_initialization:
   374                           	opt stack 0
   375  001CD6                     __end_of__initialization:
   376                           	opt stack 0
   377  001CD6  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   378  001CD8  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   379  001CDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  001CDC  6EF8               	movwf	tblptru,c
   381  001CDE  0100               	movlb	0
   382  001CE0  EF4A  F00C         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssCOMRAM
   393  000024                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000024                     _read:
   396                           	opt stack 0
   397  000024                     	ds	6
   398  00002A                     _D_TIMER0_Flag:
   399                           	opt stack 0
   400  00002A                     	ds	1
   401  00002B                     _baud:
   402                           	opt stack 0
   403  00002B                     	ds	1
   404  00002C                     _blockLength:
   405                           	opt stack 0
   406  00002C                     	ds	1
   407  00002D                     _bufferCnt:
   408                           	opt stack 0
   409  00002D                     	ds	1
   410  00002E                     _scale:
   411                           	opt stack 0
   412  00002E                     	ds	1
   413  00002F                     _state:
   414                           	opt stack 0
   415  00002F                     	ds	1
   416  000030                     fade@b_up:
   417                           	opt stack 0
   418  000030                     	ds	1
   419  000031                     fade@g_up:
   420                           	opt stack 0
   421  000031                     	ds	1
   422  000032                     fade@r_cnt:
   423                           	opt stack 0
   424  000032                     	ds	1
   425  000033                     fade@r_up:
   426                           	opt stack 0
   427  000033                     	ds	1
   428  000034                     flash@color:
   429                           	opt stack 0
   430  000034                     	ds	1
   431  000035                     flash@count:
   432                           	opt stack 0
   433  000035                     	ds	1
   434  000036                     handleState@cnt:
   435                           	opt stack 0
   436  000036                     	ds	1
   437  000037                     smooth@color:
   438                           	opt stack 0
   439  000037                     	ds	1
   440  000038                     smooth@count:
   441                           	opt stack 0
   442  000038                     	ds	1
   443  000039                     strobe2@cnt:
   444                           	opt stack 0
   445  000039                     	ds	1
   446  00003A                     	ds	1
   447  00003B                     strobe2@on_cnt:
   448                           	opt stack 0
   449  00003B                     	ds	1
   450                           tblptru	equ	0xFF8
   451                           tblptrh	equ	0xFF7
   452                           tblptrl	equ	0xFF6
   453                           tablat	equ	0xFF5
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           postdec1	equ	0xFE5
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	dataCOMRAM
   460  00003C                     __pdataCOMRAM:
   461                           	opt stack 0
   462  00003C                     _ackCharacter:
   463                           	opt stack 0
   464  00003C                     	ds	2
   465  00003E                     _blockCharacter:
   466                           	opt stack 0
   467  00003E                     	ds	2
   468  000040                     _startCharacter:
   469                           	opt stack 0
   470  000040                     	ds	2
   471  000042                     _stopCharacter:
   472                           	opt stack 0
   473  000042                     	ds	2
   474  000044                     fade@b_cnt:
   475                           	opt stack 0
   476  000044                     	ds	1
   477  000045                     fade@g_cnt:
   478                           	opt stack 0
   479  000045                     	ds	1
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           postdec1	equ	0xFE5
   487                           fsr1l	equ	0xFE1
   488                           
   489                           	psect	bssBANK0
   490  0000AF                     __pbssBANK0:
   491                           	opt stack 0
   492  0000AF                     _comMes:
   493                           	opt stack 0
   494  0000AF                     	ds	17
   495  0000C0                     _readData:
   496                           	opt stack 0
   497  0000C0                     	ds	6
   498  0000C6                     _PWM_Blue:
   499                           	opt stack 0
   500  0000C6                     	ds	2
   501  0000C8                     _PWM_Green:
   502                           	opt stack 0
   503  0000C8                     	ds	2
   504  0000CA                     _PWM_Red:
   505                           	opt stack 0
   506  0000CA                     	ds	2
   507  0000CC                     _D_UART_ReadFlag:
   508                           	opt stack 0
   509  0000CC                     	ds	1
   510  0000CD                     _b:
   511                           	opt stack 0
   512  0000CD                     	ds	1
   513  0000CE                     _g:
   514                           	opt stack 0
   515  0000CE                     	ds	1
   516  0000CF                     _r:
   517                           	opt stack 0
   518  0000CF                     	ds	1
   519  0000D0                     strobe@cnt:
   520                           	opt stack 0
   521  0000D0                     	ds	1
   522  0000D1                     strobe@up:
   523                           	opt stack 0
   524  0000D1                     	ds	1
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	dataBANK0
   535  0000D5                     __pdataBANK0:
   536                           	opt stack 0
   537  0000D5                     _messageCharacter:
   538                           	opt stack 0
   539  0000D5                     	ds	2
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	bssBANK1
   550  000100                     __pbssBANK1:
   551                           	opt stack 0
   552  000100                     _readBuffer:
   553                           	opt stack 0
   554  000100                     	ds	63
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	cstackBANK0
   565  000060                     __pcstackBANK0:
   566                           	opt stack 0
   567  000060                     ?i1___lwmod:
   568                           	opt stack 0
   569  000060                     i1___lwmod@dividend:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x0
   573  000060                     	ds	2
   574  000062                     i1___lwmod@divisor:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x2
   578  000062                     	ds	2
   579  000064                     ?i1_printf:
   580                           	opt stack 0
   581  000064                     i1printf@f:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x4
   585  000064                     	ds	5
   586  000069                     ??i1_printf:
   587                           
   588                           ; 1 bytes @ 0x9
   589  000069                     	ds	3
   590  00006C                     i1printf@idx:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0xC
   594  00006C                     	ds	1
   595  00006D                     i1printf@ap:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0xD
   599  00006D                     	ds	2
   600  00006F                     i1printf@prec:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0xF
   604  00006F                     	ds	1
   605  000070                     i1printf@flag:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x10
   609  000070                     	ds	1
   610  000071                     i1printf@val:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x11
   614  000071                     	ds	2
   615  000073                     i1printf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x13
   619  000073                     	ds	1
   620  000074                     ??_LowISR:
   621                           
   622                           ; 1 bytes @ 0x14
   623  000074                     	ds	17
   624  000085                     ?_strcmp:
   625                           	opt stack 0
   626  000085                     ?___lwdiv:
   627                           	opt stack 0
   628  000085                     ?___aldiv:
   629                           	opt stack 0
   630  000085                     ?_D_UART_Read:
   631                           	opt stack 0
   632  000085                     ?_D_UART_ReadBlock:
   633                           	opt stack 0
   634  000085                     D_TIMER0_Enable@enable:
   635                           	opt stack 0
   636  000085                     D_UART_Enable@enable:
   637                           	opt stack 0
   638  000085                     D_PWM_SetDuty@duty:
   639                           	opt stack 0
   640  000085                     strToInt@str:
   641                           	opt stack 0
   642  000085                     ___lwdiv@dividend:
   643                           	opt stack 0
   644  000085                     strcmp@s1:
   645                           	opt stack 0
   646  000085                     ___aldiv@dividend:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x25
   650  000085                     	ds	1
   651  000086                     D_TIMER0_Init@prescale:
   652                           	opt stack 0
   653  000086                     writeByte@data:
   654                           	opt stack 0
   655  000086                     D_PWM_Enable@enable:
   656                           	opt stack 0
   657  000086                     D_PWM_SetDuty@which:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x26
   661  000086                     	ds	1
   662  000087                     putch@data:
   663                           	opt stack 0
   664  000087                     setRGB@g:
   665                           	opt stack 0
   666  000087                     strToInt@tmp:
   667                           	opt stack 0
   668  000087                     ___lwdiv@divisor:
   669                           	opt stack 0
   670  000087                     strcmp@s2:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x27
   674  000087                     	ds	1
   675  000088                     setRGB@b:
   676                           	opt stack 0
   677  000088                     strToInt@shift:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x28
   681  000088                     	ds	1
   682  000089                     ??_strcmp:
   683  000089                     setRGB@r:
   684                           	opt stack 0
   685  000089                     strToInt@val:
   686                           	opt stack 0
   687  000089                     ___lwdiv@quotient:
   688                           	opt stack 0
   689  000089                     ___aldiv@divisor:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x29
   693  000089                     	ds	1
   694  00008A                     D_PWM_SetRGB@g:
   695                           	opt stack 0
   696  00008A                     strcmp@r:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x2A
   700  00008A                     	ds	1
   701  00008B                     D_PWM_SetRGB@b:
   702                           	opt stack 0
   703  00008B                     ___lwdiv@counter:
   704                           	opt stack 0
   705  00008B                     D_UART_Read@cm:
   706                           	opt stack 0
   707                           
   708                           ; 17 bytes @ 0x2B
   709  00008B                     	ds	1
   710  00008C                     ?___lwmod:
   711                           	opt stack 0
   712  00008C                     D_UART_ReadBlock@cnt:
   713                           	opt stack 0
   714  00008C                     D_PWM_SetRGB@r:
   715                           	opt stack 0
   716  00008C                     ___lwmod@dividend:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2C
   720  00008C                     	ds	1
   721  00008D                     ___aldiv@counter:
   722                           	opt stack 0
   723  00008D                     D_UART_ReadBlock@cm:
   724                           	opt stack 0
   725                           
   726                           ; 17 bytes @ 0x2D
   727  00008D                     	ds	1
   728  00008E                     ___aldiv@sign:
   729                           	opt stack 0
   730  00008E                     ___lwmod@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x2E
   734  00008E                     	ds	1
   735  00008F                     ___aldiv@quotient:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x2F
   739  00008F                     	ds	1
   740  000090                     ___lwmod@counter:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x30
   744  000090                     	ds	1
   745  000091                     ?_printf:
   746                           	opt stack 0
   747  000091                     printf@f:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x31
   751  000091                     	ds	2
   752  000093                     D_UART_Init@name:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x33
   756  000093                     	ds	2
   757  000095                     D_UART_Init@baud:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x35
   761  000095                     	ds	1
   762  000096                     ??_printf:
   763                           
   764                           ; 1 bytes @ 0x36
   765  000096                     	ds	1
   766  000097                     D_UART_Init@interrupts:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x37
   770  000097                     	ds	1
   771  000098                     _D_UART_Init$1755:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0x38
   775  000098                     	ds	1
   776  000099                     printf@idx:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x39
   780  000099                     	ds	1
   781  00009A                     printf@ap:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x3A
   785  00009A                     	ds	2
   786  00009C                     printf@prec:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x3C
   790  00009C                     	ds	1
   791  00009D                     printf@flag:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x3D
   795  00009D                     	ds	1
   796  00009E                     printf@val:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x3E
   800  00009E                     	ds	2
   801  0000A0                     printf@c:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x40
   805  0000A0                     	ds	1
   806  0000A1                     D_UART_Write@command:
   807                           	opt stack 0
   808  0000A1                     D_UART_WriteInt@command:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x41
   812  0000A1                     	ds	2
   813  0000A3                     D_UART_Write@data:
   814                           	opt stack 0
   815  0000A3                     D_UART_WriteInt@data:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x43
   819  0000A3                     	ds	2
   820  0000A5                     ??_D_UART_Write:
   821  0000A5                     ??_D_UART_WriteInt:
   822                           
   823                           ; 1 bytes @ 0x45
   824  0000A5                     	ds	1
   825  0000A6                     handle_message@msg:
   826                           	opt stack 0
   827                           
   828                           ; 6 bytes @ 0x46
   829  0000A6                     	ds	6
   830  0000AC                     ??_handle_message:
   831                           
   832                           ; 1 bytes @ 0x4C
   833  0000AC                     	ds	1
   834  0000AD                     main@i:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x4D
   838  0000AD                     	ds	1
   839  0000AE                     main@length:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x4E
   843  0000AE                     	ds	1
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	cstackCOMRAM
   854  000001                     __pcstackCOMRAM:
   855                           	opt stack 0
   856  000001                     ??_pwmColors:
   857  000001                     i2D_PWM_SetDuty@duty:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x0
   861  000001                     	ds	1
   862  000002                     i2D_PWM_SetDuty@which:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x1
   866  000002                     	ds	1
   867  000003                     pwmColors@birghtness:
   868                           	opt stack 0
   869  000003                     i2setRGB@g:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x2
   873  000003                     	ds	1
   874  000004                     i2setRGB@b:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x3
   878  000004                     	ds	1
   879  000005                     i2setRGB@r:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x4
   883  000005                     	ds	1
   884  000006                     ??_flash:
   885  000006                     ??_strobe2:
   886  000006                     ??_smooth:
   887                           
   888                           ; 1 bytes @ 0x5
   889  000006                     	ds	6
   890  00000C                     ??_HighISR:
   891                           
   892                           ; 1 bytes @ 0xB
   893  00000C                     	ds	14
   894  00001A                     ?i1___lwdiv:
   895                           	opt stack 0
   896  00001A                     i1D_UART_Enable@enable:
   897                           	opt stack 0
   898  00001A                     i1___lwdiv@dividend:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x19
   902  00001A                     	ds	1
   903  00001B                     readByte@dum:
   904                           	opt stack 0
   905  00001B                     i1writeByte@data:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1A
   909  00001B                     	ds	1
   910  00001C                     i1putch@data:
   911                           	opt stack 0
   912  00001C                     i1___lwdiv@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x1B
   916  00001C                     	ds	2
   917  00001E                     i1___lwdiv@counter:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x1D
   921  00001E                     	ds	1
   922  00001F                     i1___lwdiv@quotient:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x1E
   926  00001F                     	ds	2
   927  000021                     i1___lwmod@counter:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x20
   931  000021                     	ds	1
   932  000022                     fillDataBuffer@i:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x21
   936  000022                     	ds	1
   937  000023                     fillDataBuffer@data:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x22
   941  000023                     	ds	1
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951 ;;
   952 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   953 ;;
   954 ;; *************** function _main *****************
   955 ;; Defined at:
   956 ;;		line 65 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               1   77[BANK0 ] unsigned char 
   961 ;;  length          1   78[BANK0 ] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   971 ;;      Params:         0       0       0       0       0       0       0       0       0
   972 ;;      Locals:         0       2       0       0       0       0       0       0       0
   973 ;;      Temps:          0       0       0       0       0       0       0       0       0
   974 ;;      Totals:         0       2       0       0       0       0       0       0       0
   975 ;;Total ram usage:        2 bytes
   976 ;; Hardware stack levels required when called:   18
   977 ;; This function calls:
   978 ;;		_D_PWM_SetRGB
   979 ;;		_D_UART_BlockLength
   980 ;;		_D_UART_Read
   981 ;;		_D_UART_ReadBlock
   982 ;;		_handle_message
   983 ;;		_initialize
   984 ;; This function is called by:
   985 ;;		Startup code after reset
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text0
   990  001894                     __ptext0:
   991                           	opt stack 0
   992  001894                     _main:
   993                           	opt stack 13
   994                           
   995                           ;main.c: 67: initialize();
   996                           
   997                           ;incstack = 0
   998  001894  EC72  F00E         	call	_initialize	;wreg free
   999                           
  1000                           ;main.c: 69: D_PWM_SetRGB(0xff, 0xff, 0xff);
  1001  001898  0EFF               	movlw	255
  1002  00189A  0100               	movlb	0	; () banked
  1003  00189C  6F8A               	movwf	D_PWM_SetRGB@g& (0+255),b
  1004  00189E  0EFF               	movlw	255
  1005  0018A0  0100               	movlb	0	; () banked
  1006  0018A2  6F8B               	movwf	D_PWM_SetRGB@b& (0+255),b
  1007  0018A4  0EFF               	movlw	255
  1008  0018A6  ECA0  F010         	call	_D_PWM_SetRGB
  1009  0018AA                     l3102:
  1010                           
  1011                           ;main.c: 73: if (D_UART_ReadFlag) {
  1012  0018AA  0100               	movlb	0	; () banked
  1013  0018AC  51CC               	movf	_D_UART_ReadFlag& (0+255),w,b
  1014  0018AE  B4D8               	btfsc	status,2,c
  1015  0018B0  D7FC               	goto	l3102
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;main.c: 74: D_UART_ReadFlag = 0;
  1019  0018B2  0E00               	movlw	0
  1020  0018B4  0100               	movlb	0	; () banked
  1021  0018B6  6FCC               	movwf	_D_UART_ReadFlag& (0+255),b
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;main.c: 75: uint8_t length = D_UART_BlockLength();
  1025  0018B8  ECF7  F010         	call	_D_UART_BlockLength	;wreg free
  1026  0018BC  0100               	movlb	0	; () banked
  1027  0018BE  6FAE               	movwf	main@length& (0+255),b
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;main.c: 76: if (length == 1) {
  1031  0018C0  0100               	movlb	0	; () banked
  1032  0018C2  05AE               	decf	main@length& (0+255),w,b
  1033  0018C4  A4D8               	btfss	status,2,c
  1034  0018C6  D010               	goto	l3112
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;main.c: 77: handle_message(D_UART_Read());
  1038  0018C8  ECB5  F00F         	call	_D_UART_Read	;wreg free
  1039  0018CC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1040  0018D0  CFEA FFDA          	movff	fsr0h,fsr2h
  1041  0018D4  EE00  F0A6         	lfsr	0,handle_message@msg
  1042  0018D8  0E05               	movlw	5
  1043  0018DA                     u2551:
  1044  0018DA  CFDB FFEB          	movff	plusw2,plusw0
  1045  0018DE  06E8               	decf	wreg,f,c
  1046  0018E0  E2FC               	bc	u2551
  1047  0018E2  EC34  F004         	call	_handle_message	;wreg free
  1048                           
  1049                           ;main.c: 78: } else if (length > 1) {
  1050  0018E6  D7E1               	goto	l3102
  1051  0018E8                     l3112:
  1052  0018E8  0E01               	movlw	1
  1053  0018EA  0100               	movlb	0	; () banked
  1054  0018EC  65AE               	cpfsgt	main@length& (0+255),b
  1055  0018EE  D7DD               	goto	l3102
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main.c: 79: uint8_t i;
  1059                           ;main.c: 80: for (i=0; i < length; i++) {
  1060  0018F0  0E00               	movlw	0
  1061  0018F2  0100               	movlb	0	; () banked
  1062  0018F4  6FAD               	movwf	main@i& (0+255),b
  1063  0018F6  D013               	goto	l3120
  1064  0018F8                     l3116:
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;main.c: 81: handle_message(D_UART_ReadBlock(i));
  1068  0018F8  0100               	movlb	0	; () banked
  1069  0018FA  51AD               	movf	main@i& (0+255),w,b
  1070  0018FC  EC04  F00F         	call	_D_UART_ReadBlock
  1071  001900  CFE9 FFD9          	movff	fsr0l,fsr2l
  1072  001904  CFEA FFDA          	movff	fsr0h,fsr2h
  1073  001908  EE00  F0A6         	lfsr	0,handle_message@msg
  1074  00190C  0E05               	movlw	5
  1075  00190E                     u2571:
  1076  00190E  CFDB FFEB          	movff	plusw2,plusw0
  1077  001912  06E8               	decf	wreg,f,c
  1078  001914  E2FC               	bc	u2571
  1079  001916  EC34  F004         	call	_handle_message	;wreg free
  1080  00191A  0100               	movlb	0	; () banked
  1081  00191C  2BAD               	incf	main@i& (0+255),f,b
  1082  00191E                     l3120:
  1083                           
  1084                           ; BSR set to: 0
  1085  00191E  0100               	movlb	0	; () banked
  1086  001920  51AE               	movf	main@length& (0+255),w,b
  1087  001922  0100               	movlb	0	; () banked
  1088  001924  5DAD               	subwf	main@i& (0+255),w,b
  1089  001926  B0D8               	btfsc	status,0,c
  1090  001928  D7C0               	goto	l3102
  1091  00192A  D7E6               	goto	l3116
  1092  00192C                     __end_of_main:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           plusw0	equ	0xFEB
  1100                           fsr0h	equ	0xFEA
  1101                           fsr0l	equ	0xFE9
  1102                           wreg	equ	0xFE8
  1103                           postdec1	equ	0xFE5
  1104                           fsr1l	equ	0xFE1
  1105                           plusw2	equ	0xFDB
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8
  1109                           
  1110 ;; *************** function _initialize *****************
  1111 ;; Defined at:
  1112 ;;		line 46 in file "main.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1126 ;;      Params:         0       0       0       0       0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:   17
  1133 ;; This function calls:
  1134 ;;		_D_PORT_Init
  1135 ;;		_D_PWM_Enable
  1136 ;;		_D_PWM_Init
  1137 ;;		_D_UART_Enable
  1138 ;;		_D_UART_Init
  1139 ;;		_D_UART_Write
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text1
  1146  001CE4                     __ptext1:
  1147                           	opt stack 0
  1148  001CE4                     _initialize:
  1149                           	opt stack 13
  1150                           
  1151                           ;main.c: 47: D_PORT_Init();
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;incstack = 0
  1155  001CE4  EC91  F010         	call	_D_PORT_Init	;wreg free
  1156                           
  1157                           ;main.c: 50: D_UART_Init("P", 19200, 1);
  1158  001CE8  0E59               	movlw	low STR_12
  1159  001CEA  0100               	movlb	0	; () banked
  1160  001CEC  6F93               	movwf	D_UART_Init@name& (0+255),b
  1161  001CEE  0E08               	movlw	high STR_12
  1162  001CF0  0100               	movlb	0	; () banked
  1163  001CF2  6F94               	movwf	(D_UART_Init@name+1)& (0+255),b
  1164  001CF4  0E4B               	movlw	75
  1165  001CF6  0100               	movlb	0	; () banked
  1166  001CF8  6F96               	movwf	(D_UART_Init@baud+1)& (0+255),b
  1167  001CFA  0E00               	movlw	0
  1168  001CFC  6F95               	movwf	D_UART_Init@baud& (0+255),b
  1169  001CFE  0E01               	movlw	1
  1170  001D00  0100               	movlb	0	; () banked
  1171  001D02  6F97               	movwf	D_UART_Init@interrupts& (0+255),b
  1172  001D04  EC51  F00B         	call	_D_UART_Init	;wreg free
  1173                           
  1174                           ;main.c: 51: D_UART_Enable(1);
  1175  001D08  0E01               	movlw	1
  1176  001D0A  EC3A  F010         	call	_D_UART_Enable
  1177                           
  1178                           ;main.c: 54: D_PWM_Init();
  1179  001D0E  ECDA  F00F         	call	_D_PWM_Init	;wreg free
  1180                           
  1181                           ;main.c: 55: D_PWM_Enable(1);
  1182  001D12  0E01               	movlw	1
  1183  001D14  ECC0  F010         	call	_D_PWM_Enable
  1184                           
  1185                           ;main.c: 58: r = 128;
  1186  001D18  0E80               	movlw	128
  1187  001D1A  0100               	movlb	0	; () banked
  1188  001D1C  6FCF               	movwf	_r& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 59: g = 128;
  1192  001D1E  0E80               	movlw	128
  1193  001D20  0100               	movlb	0	; () banked
  1194  001D22  6FCE               	movwf	_g& (0+255),b
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 60: b = 128;
  1198  001D24  0E80               	movlw	128
  1199  001D26  0100               	movlb	0	; () banked
  1200  001D28  6FCD               	movwf	_b& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;main.c: 62: D_UART_Write("I", "init");
  1204  001D2A  0E57               	movlw	low STR_13
  1205  001D2C  0100               	movlb	0	; () banked
  1206  001D2E  6FA1               	movwf	D_UART_Write@command& (0+255),b
  1207  001D30  0E08               	movlw	high STR_13
  1208  001D32  0100               	movlb	0	; () banked
  1209  001D34  6FA2               	movwf	(D_UART_Write@command+1)& (0+255),b
  1210  001D36  0E24               	movlw	low STR_14
  1211  001D38  0100               	movlb	0	; () banked
  1212  001D3A  6FA3               	movwf	D_UART_Write@data& (0+255),b
  1213  001D3C  0E08               	movlw	high STR_14
  1214  001D3E  0100               	movlb	0	; () banked
  1215  001D40  6FA4               	movwf	(D_UART_Write@data+1)& (0+255),b
  1216  001D42  ECE7  F00A         	call	_D_UART_Write	;wreg free
  1217  001D46  0012               	return		;funcret
  1218  001D48                     __end_of_initialize:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           plusw0	equ	0xFEB
  1226                           fsr0h	equ	0xFEA
  1227                           fsr0l	equ	0xFE9
  1228                           wreg	equ	0xFE8
  1229                           postdec1	equ	0xFE5
  1230                           fsr1l	equ	0xFE1
  1231                           plusw2	equ	0xFDB
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _D_UART_Write *****************
  1237 ;; Defined at:
  1238 ;;		line 271 in file "Drivers/UART_Driver.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  command         2   65[BANK0 ] PTR const unsigned char 
  1241 ;;		 -> STR_13(2), 
  1242 ;;  data            2   67[BANK0 ] PTR const unsigned char 
  1243 ;;		 -> STR_14(5), 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1255 ;;      Params:         0       4       0       0       0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1257 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1258 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1259 ;;Total ram usage:        5 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:   16
  1262 ;; This function calls:
  1263 ;;		_printf
  1264 ;; This function is called by:
  1265 ;;		_initialize
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text2
  1270  0015CE                     __ptext2:
  1271                           	opt stack 0
  1272  0015CE                     _D_UART_Write:
  1273                           	opt stack 13
  1274                           
  1275                           ;UART_Driver.c: 272: printf(startCharacter);
  1276                           
  1277                           ;incstack = 0
  1278  0015CE  C040  F091         	movff	_startCharacter,printf@f
  1279  0015D2  C041  F092         	movff	_startCharacter+1,printf@f+1
  1280  0015D6  0100               	movlb	0	; () banked
  1281  0015D8  5191               	movf	printf@f& (0+255),w,b
  1282  0015DA  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1283  0015DC  A4D8               	btfss	status,2,c
  1284  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
  1285  0015E0  6F93               	movwf	(printf@f+2)& (0+255),b
  1286  0015E2  EC15  F007         	call	_printf	;wreg free
  1287                           
  1288                           ;UART_Driver.c: 274: printf(messageCharacter);
  1289  0015E6  C0D5  F091         	movff	_messageCharacter,printf@f
  1290  0015EA  C0D6  F092         	movff	_messageCharacter+1,printf@f+1
  1291  0015EE  0100               	movlb	0	; () banked
  1292  0015F0  5191               	movf	printf@f& (0+255),w,b
  1293  0015F2  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1294  0015F4  A4D8               	btfss	status,2,c
  1295  0015F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1296  0015F8  6F93               	movwf	(printf@f+2)& (0+255),b
  1297  0015FA  EC15  F007         	call	_printf	;wreg free
  1298                           
  1299                           ;UART_Driver.c: 275: printf(deviceName);
  1300  0015FE  C0D2  F091         	movff	_deviceName,printf@f
  1301  001602  C0D3  F092         	movff	_deviceName+1,printf@f+1
  1302  001606  C0D4  F093         	movff	_deviceName+2,printf@f+2
  1303  00160A  EC15  F007         	call	_printf	;wreg free
  1304                           
  1305                           ;UART_Driver.c: 277: printf(":");printf(command);
  1306  00160E  0E65               	movlw	low STR_7
  1307  001610  0100               	movlb	0	; () banked
  1308  001612  6F91               	movwf	printf@f& (0+255),b
  1309  001614  0E08               	movlw	high STR_7
  1310  001616  0100               	movlb	0	; () banked
  1311  001618  6F92               	movwf	(printf@f+1)& (0+255),b
  1312  00161A  0100               	movlb	0	; () banked
  1313  00161C  5191               	movf	printf@f& (0+255),w,b
  1314  00161E  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1315  001620  A4D8               	btfss	status,2,c
  1316  001622  0E00               	movlw	low (__mediumconst shr (0+16))
  1317  001624  6F93               	movwf	(printf@f+2)& (0+255),b
  1318  001626  EC15  F007         	call	_printf	;wreg free
  1319  00162A  C0A1  F091         	movff	D_UART_Write@command,printf@f
  1320  00162E  C0A2  F092         	movff	D_UART_Write@command+1,printf@f+1
  1321  001632  0100               	movlb	0	; () banked
  1322  001634  5191               	movf	printf@f& (0+255),w,b
  1323  001636  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1324  001638  A4D8               	btfss	status,2,c
  1325  00163A  0E00               	movlw	low (__mediumconst shr (0+16))
  1326  00163C  6F93               	movwf	(printf@f+2)& (0+255),b
  1327  00163E  EC15  F007         	call	_printf	;wreg free
  1328                           
  1329                           ;UART_Driver.c: 279: printf(":");printf(data);
  1330  001642  0E65               	movlw	low STR_7
  1331  001644  0100               	movlb	0	; () banked
  1332  001646  6F91               	movwf	printf@f& (0+255),b
  1333  001648  0E08               	movlw	high STR_7
  1334  00164A  0100               	movlb	0	; () banked
  1335  00164C  6F92               	movwf	(printf@f+1)& (0+255),b
  1336  00164E  0100               	movlb	0	; () banked
  1337  001650  5191               	movf	printf@f& (0+255),w,b
  1338  001652  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1339  001654  A4D8               	btfss	status,2,c
  1340  001656  0E00               	movlw	low (__mediumconst shr (0+16))
  1341  001658  6F93               	movwf	(printf@f+2)& (0+255),b
  1342  00165A  EC15  F007         	call	_printf	;wreg free
  1343  00165E  C0A3  F091         	movff	D_UART_Write@data,printf@f
  1344  001662  C0A4  F092         	movff	D_UART_Write@data+1,printf@f+1
  1345  001666  0100               	movlb	0	; () banked
  1346  001668  5191               	movf	printf@f& (0+255),w,b
  1347  00166A  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1348  00166C  A4D8               	btfss	status,2,c
  1349  00166E  0E00               	movlw	low (__mediumconst shr (0+16))
  1350  001670  6F93               	movwf	(printf@f+2)& (0+255),b
  1351  001672  EC15  F007         	call	_printf	;wreg free
  1352                           
  1353                           ;UART_Driver.c: 281: printf(stopCharacter);
  1354  001676  C042  F091         	movff	_stopCharacter,printf@f
  1355  00167A  C043  F092         	movff	_stopCharacter+1,printf@f+1
  1356  00167E  0100               	movlb	0	; () banked
  1357  001680  5191               	movf	printf@f& (0+255),w,b
  1358  001682  1192               	iorwf	(printf@f+1)& (0+255),w,b
  1359  001684  A4D8               	btfss	status,2,c
  1360  001686  0E00               	movlw	low (__mediumconst shr (0+16))
  1361  001688  6F93               	movwf	(printf@f+2)& (0+255),b
  1362  00168A  EC15  F007         	call	_printf	;wreg free
  1363                           
  1364                           ;UART_Driver.c: 282: _delay((unsigned long)((1)*(48000000/4000.0)));
  1365  00168E  0E10               	movlw	16
  1366  001690  0100               	movlb	0	; () banked
  1367  001692  6FA5               	movwf	??_D_UART_Write& (0+255),b
  1368  001694  0E94               	movlw	148
  1369  001696                     u2977:
  1370  001696  2EE8               	decfsz	wreg,f,c
  1371  001698  D7FE               	bra	u2977
  1372  00169A  2FA5               	decfsz	??_D_UART_Write& (0+255),f,b
  1373  00169C  D7FC               	bra	u2977
  1374  00169E  F000               	nop	
  1375  0016A0  0012               	return		;funcret
  1376  0016A2                     __end_of_D_UART_Write:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           plusw0	equ	0xFEB
  1384                           fsr0h	equ	0xFEA
  1385                           fsr0l	equ	0xFE9
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           plusw2	equ	0xFDB
  1390                           fsr2h	equ	0xFDA
  1391                           fsr2l	equ	0xFD9
  1392                           status	equ	0xFD8
  1393                           
  1394 ;; *************** function _D_UART_Init *****************
  1395 ;; Defined at:
  1396 ;;		line 233 in file "Drivers/UART_Driver.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  name            2   51[BANK0 ] PTR const unsigned char 
  1399 ;;		 -> STR_12(2), 
  1400 ;;  baud            2   53[BANK0 ] unsigned int 
  1401 ;;  interrupts      1   55[BANK0 ] unsigned char 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1413 ;;      Params:         0       5       0       0       0       0       0       0       0
  1414 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1416 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1417 ;;Total ram usage:        9 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:   13
  1420 ;; This function calls:
  1421 ;;		_D_UART_Enable
  1422 ;;		___aldiv
  1423 ;; This function is called by:
  1424 ;;		_initialize
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text3
  1429  0016A2                     __ptext3:
  1430                           	opt stack 0
  1431  0016A2                     _D_UART_Init:
  1432                           	opt stack 16
  1433                           
  1434                           ;UART_Driver.c: 235: TRISCbits.TRISC6 = 0;
  1435                           
  1436                           ;incstack = 0
  1437  0016A2  9C94               	bcf	3988,6,c	;volatile
  1438                           
  1439                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 1;
  1440  0016A4  8E94               	bsf	3988,7,c	;volatile
  1441                           
  1442                           ;UART_Driver.c: 239: deviceName = name;
  1443  0016A6  C093  F0D2         	movff	D_UART_Init@name,_deviceName
  1444  0016AA  C094  F0D3         	movff	D_UART_Init@name+1,_deviceName+1
  1445  0016AE  0100               	movlb	0	; () banked
  1446  0016B0  51D2               	movf	_deviceName& (0+255),w,b
  1447  0016B2  11D3               	iorwf	(_deviceName+1)& (0+255),w,b
  1448  0016B4  A4D8               	btfss	status,2,c
  1449  0016B6  0E00               	movlw	low (__mediumconst shr (0+16))
  1450  0016B8  6FD4               	movwf	(_deviceName+2)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;UART_Driver.c: 240: D_UART_ReadFlag = 0;
  1454  0016BA  0E00               	movlw	0
  1455  0016BC  0100               	movlb	0	; () banked
  1456  0016BE  6FCC               	movwf	_D_UART_ReadFlag& (0+255),b
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;UART_Driver.c: 243: D_UART_Enable(0);
  1460  0016C0  0E00               	movlw	0
  1461  0016C2  EC3A  F010         	call	_D_UART_Enable
  1462                           
  1463                           ;UART_Driver.c: 246: TXSTAbits.TX9 = 0;
  1464  0016C6  9CAC               	bcf	4012,6,c	;volatile
  1465                           
  1466                           ;UART_Driver.c: 247: TXSTAbits.SYNC = 0;
  1467  0016C8  98AC               	bcf	4012,4,c	;volatile
  1468                           
  1469                           ;UART_Driver.c: 248: TXSTAbits.BRGH = 0;
  1470  0016CA  94AC               	bcf	4012,2,c	;volatile
  1471                           
  1472                           ;UART_Driver.c: 251: RCSTAbits.RX9 = 0;
  1473  0016CC  9CAB               	bcf	4011,6,c	;volatile
  1474                           
  1475                           ;UART_Driver.c: 254: BAUDCONbits.RXDTP = 0;
  1476  0016CE  9AB8               	bcf	4024,5,c	;volatile
  1477                           
  1478                           ;UART_Driver.c: 255: BAUDCONbits.TXCKP = 0;
  1479  0016D0  98B8               	bcf	4024,4,c	;volatile
  1480                           
  1481                           ;UART_Driver.c: 256: BAUDCONbits.BRG16 = 0;
  1482  0016D2  96B8               	bcf	4024,3,c	;volatile
  1483                           
  1484                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1485  0016D4  C095  F089         	movff	D_UART_Init@baud,___aldiv@divisor
  1486  0016D8  C096  F08A         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1487  0016DC  0100               	movlb	0	; () banked
  1488  0016DE  6B8B               	clrf	(___aldiv@divisor+2)& (0+255),b
  1489  0016E0  6B8C               	clrf	(___aldiv@divisor+3)& (0+255),b
  1490  0016E2  0E00               	movlw	0
  1491  0016E4  0100               	movlb	0	; () banked
  1492  0016E6  6F85               	movwf	___aldiv@dividend& (0+255),b
  1493  0016E8  0E6C               	movlw	108
  1494  0016EA  6F86               	movwf	(___aldiv@dividend+1)& (0+255),b
  1495  0016EC  0EDC               	movlw	220
  1496  0016EE  6F87               	movwf	(___aldiv@dividend+2)& (0+255),b
  1497  0016F0  0E02               	movlw	2
  1498  0016F2  6F88               	movwf	(___aldiv@dividend+3)& (0+255),b
  1499  0016F4  EC7E  F009         	call	___aldiv	;wreg free
  1500  0016F8  C085  F098         	movff	?___aldiv,_D_UART_Init$1755
  1501  0016FC  C086  F099         	movff	?___aldiv+1,_D_UART_Init$1755+1
  1502  001700  C087  F09A         	movff	?___aldiv+2,_D_UART_Init$1755+2
  1503  001704  C088  F09B         	movff	?___aldiv+3,_D_UART_Init$1755+3
  1504                           
  1505                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1506  001708  C098  F085         	movff	_D_UART_Init$1755,___aldiv@dividend
  1507  00170C  C099  F086         	movff	_D_UART_Init$1755+1,___aldiv@dividend+1
  1508  001710  C09A  F087         	movff	_D_UART_Init$1755+2,___aldiv@dividend+2
  1509  001714  C09B  F088         	movff	_D_UART_Init$1755+3,___aldiv@dividend+3
  1510  001718  0E40               	movlw	64
  1511  00171A  0100               	movlb	0	; () banked
  1512  00171C  6F89               	movwf	___aldiv@divisor& (0+255),b
  1513  00171E  0E00               	movlw	0
  1514  001720  6F8A               	movwf	(___aldiv@divisor+1)& (0+255),b
  1515  001722  0E00               	movlw	0
  1516  001724  6F8B               	movwf	(___aldiv@divisor+2)& (0+255),b
  1517  001726  0E00               	movlw	0
  1518  001728  6F8C               	movwf	(___aldiv@divisor+3)& (0+255),b
  1519  00172A  EC7E  F009         	call	___aldiv	;wreg free
  1520  00172E  0100               	movlb	0	; () banked
  1521  001730  0585               	decf	?___aldiv& (0+255),w,b
  1522  001732  6EAF               	movwf	4015,c	;volatile
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;UART_Driver.c: 261: if (interrupts) {
  1526  001734  0100               	movlb	0	; () banked
  1527  001736  5197               	movf	D_UART_Init@interrupts& (0+255),w,b
  1528  001738  0100               	movlb	0	; () banked
  1529  00173A  B4D8               	btfsc	status,2,c
  1530  00173C  0012               	return	
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;UART_Driver.c: 262: RCONbits.IPEN = 1;
  1534  00173E  8ED0               	bsf	4048,7,c	;volatile
  1535                           
  1536                           ;UART_Driver.c: 263: INTCONbits.GIEH = 1;
  1537  001740  8EF2               	bsf	intcon,7,c	;volatile
  1538                           
  1539                           ;UART_Driver.c: 264: INTCONbits.GIEL = 1;
  1540  001742  8CF2               	bsf	intcon,6,c	;volatile
  1541                           
  1542                           ;UART_Driver.c: 265: PIR1bits.RCIF = 0;
  1543  001744  9A9E               	bcf	3998,5,c	;volatile
  1544                           
  1545                           ;UART_Driver.c: 266: IPR1bits.RCIP = 0;
  1546  001746  9A9F               	bcf	3999,5,c	;volatile
  1547                           
  1548                           ;UART_Driver.c: 267: PIE1bits.RCIE = 1;
  1549  001748  8A9D               	bsf	3997,5,c	;volatile
  1550  00174A  0012               	return	
  1551  00174C                     __end_of_D_UART_Init:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           plusw0	equ	0xFEB
  1560                           fsr0h	equ	0xFEA
  1561                           fsr0l	equ	0xFE9
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           plusw2	equ	0xFDB
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function ___aldiv *****************
  1571 ;; Defined at:
  1572 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/aldiv.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  dividend        4   37[BANK0 ] long 
  1575 ;;  divisor         4   41[BANK0 ] long 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  quotient        4   47[BANK0 ] long 
  1578 ;;  sign            1   46[BANK0 ] unsigned char 
  1579 ;;  counter         1   45[BANK0 ] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  4   37[BANK0 ] long 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1589 ;;      Params:         0       8       0       0       0       0       0       0       0
  1590 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1592 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1593 ;;Total ram usage:       14 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:   12
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		_D_UART_Init
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text4
  1604  0012FC                     __ptext4:
  1605                           	opt stack 0
  1606  0012FC                     ___aldiv:
  1607                           	opt stack 16
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;incstack = 0
  1611  0012FC  0E00               	movlw	0
  1612  0012FE  0100               	movlb	0	; () banked
  1613  001300  6F8E               	movwf	___aldiv@sign& (0+255),b
  1614                           
  1615                           ; BSR set to: 0
  1616  001302  0100               	movlb	0	; () banked
  1617  001304  AF8C               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1618  001306  D00C               	goto	l2388
  1619                           
  1620                           ; BSR set to: 0
  1621  001308  0100               	movlb	0	; () banked
  1622  00130A  1F8C               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1623  00130C  1F8B               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1624  00130E  1F8A               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1625  001310  6D89               	negf	___aldiv@divisor& (0+255),b
  1626  001312  0E00               	movlw	0
  1627  001314  238A               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1628  001316  238B               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1629  001318  238C               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632  00131A  0E01               	movlw	1
  1633  00131C  0100               	movlb	0	; () banked
  1634  00131E  6F8E               	movwf	___aldiv@sign& (0+255),b
  1635  001320                     l2388:
  1636                           
  1637                           ; BSR set to: 0
  1638  001320  0100               	movlb	0	; () banked
  1639  001322  AF88               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1640  001324  D00C               	goto	l2394
  1641                           
  1642                           ; BSR set to: 0
  1643  001326  0100               	movlb	0	; () banked
  1644  001328  1F88               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1645  00132A  1F87               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1646  00132C  1F86               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1647  00132E  6D85               	negf	___aldiv@dividend& (0+255),b
  1648  001330  0E00               	movlw	0
  1649  001332  2386               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1650  001334  2387               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1651  001336  2388               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1652                           
  1653                           ; BSR set to: 0
  1654  001338  0E01               	movlw	1
  1655  00133A  0100               	movlb	0	; () banked
  1656  00133C  1B8E               	xorwf	___aldiv@sign& (0+255),f,b
  1657  00133E                     l2394:
  1658                           
  1659                           ; BSR set to: 0
  1660  00133E  0E00               	movlw	0
  1661  001340  0100               	movlb	0	; () banked
  1662  001342  6F8F               	movwf	___aldiv@quotient& (0+255),b
  1663  001344  0E00               	movlw	0
  1664  001346  6F90               	movwf	(___aldiv@quotient+1)& (0+255),b
  1665  001348  0E00               	movlw	0
  1666  00134A  6F91               	movwf	(___aldiv@quotient+2)& (0+255),b
  1667  00134C  0E00               	movlw	0
  1668  00134E  6F92               	movwf	(___aldiv@quotient+3)& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671  001350  0100               	movlb	0	; () banked
  1672  001352  5189               	movf	___aldiv@divisor& (0+255),w,b
  1673  001354  0100               	movlb	0	; () banked
  1674  001356  118A               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1675  001358  0100               	movlb	0	; () banked
  1676  00135A  118B               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1677  00135C  0100               	movlb	0	; () banked
  1678  00135E  118C               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1679  001360  B4D8               	btfsc	status,2,c
  1680  001362  D042               	goto	l2416
  1681                           
  1682                           ; BSR set to: 0
  1683  001364  0E01               	movlw	1
  1684  001366  0100               	movlb	0	; () banked
  1685  001368  6F8D               	movwf	___aldiv@counter& (0+255),b
  1686  00136A  D008               	goto	l2402
  1687  00136C                     l2400:
  1688                           
  1689                           ; BSR set to: 0
  1690  00136C  0100               	movlb	0	; () banked
  1691  00136E  90D8               	bcf	status,0,c
  1692  001370  3789               	rlcf	___aldiv@divisor& (0+255),f,b
  1693  001372  378A               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1694  001374  378B               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1695  001376  378C               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1696  001378  0100               	movlb	0	; () banked
  1697  00137A  2B8D               	incf	___aldiv@counter& (0+255),f,b
  1698  00137C                     l2402:
  1699                           
  1700                           ; BSR set to: 0
  1701  00137C  0100               	movlb	0	; () banked
  1702  00137E  AF8C               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1703  001380  D7F5               	goto	l2400
  1704  001382                     l2404:
  1705                           
  1706                           ; BSR set to: 0
  1707  001382  0100               	movlb	0	; () banked
  1708  001384  90D8               	bcf	status,0,c
  1709  001386  378F               	rlcf	___aldiv@quotient& (0+255),f,b
  1710  001388  3790               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1711  00138A  3791               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1712  00138C  3792               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1713                           
  1714                           ; BSR set to: 0
  1715  00138E  0100               	movlb	0	; () banked
  1716  001390  5189               	movf	___aldiv@divisor& (0+255),w,b
  1717  001392  0100               	movlb	0	; () banked
  1718  001394  5D85               	subwf	___aldiv@dividend& (0+255),w,b
  1719  001396  0100               	movlb	0	; () banked
  1720  001398  518A               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1721  00139A  0100               	movlb	0	; () banked
  1722  00139C  5986               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1723  00139E  0100               	movlb	0	; () banked
  1724  0013A0  518B               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1725  0013A2  0100               	movlb	0	; () banked
  1726  0013A4  5987               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1727  0013A6  0100               	movlb	0	; () banked
  1728  0013A8  518C               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1729  0013AA  0100               	movlb	0	; () banked
  1730  0013AC  5988               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1731  0013AE  A0D8               	btfss	status,0,c
  1732  0013B0  D012               	goto	l2412
  1733                           
  1734                           ; BSR set to: 0
  1735  0013B2  0100               	movlb	0	; () banked
  1736  0013B4  5189               	movf	___aldiv@divisor& (0+255),w,b
  1737  0013B6  0100               	movlb	0	; () banked
  1738  0013B8  5F85               	subwf	___aldiv@dividend& (0+255),f,b
  1739  0013BA  0100               	movlb	0	; () banked
  1740  0013BC  518A               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1741  0013BE  0100               	movlb	0	; () banked
  1742  0013C0  5B86               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1743  0013C2  0100               	movlb	0	; () banked
  1744  0013C4  518B               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1745  0013C6  0100               	movlb	0	; () banked
  1746  0013C8  5B87               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1747  0013CA  0100               	movlb	0	; () banked
  1748  0013CC  518C               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1749  0013CE  0100               	movlb	0	; () banked
  1750  0013D0  5B88               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1751                           
  1752                           ; BSR set to: 0
  1753  0013D2  0100               	movlb	0	; () banked
  1754  0013D4  818F               	bsf	___aldiv@quotient& (0+255),0,b
  1755  0013D6                     l2412:
  1756                           
  1757                           ; BSR set to: 0
  1758  0013D6  0100               	movlb	0	; () banked
  1759  0013D8  90D8               	bcf	status,0,c
  1760  0013DA  338C               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1761  0013DC  338B               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1762  0013DE  338A               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1763  0013E0  3389               	rrcf	___aldiv@divisor& (0+255),f,b
  1764                           
  1765                           ; BSR set to: 0
  1766  0013E2  0100               	movlb	0	; () banked
  1767  0013E4  2F8D               	decfsz	___aldiv@counter& (0+255),f,b
  1768  0013E6  D7CD               	goto	l2404
  1769  0013E8                     l2416:
  1770                           
  1771                           ; BSR set to: 0
  1772  0013E8  0100               	movlb	0	; () banked
  1773  0013EA  518E               	movf	___aldiv@sign& (0+255),w,b
  1774  0013EC  0100               	movlb	0	; () banked
  1775  0013EE  B4D8               	btfsc	status,2,c
  1776  0013F0  D009               	goto	l2420
  1777                           
  1778                           ; BSR set to: 0
  1779  0013F2  0100               	movlb	0	; () banked
  1780  0013F4  1F92               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1781  0013F6  1F91               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1782  0013F8  1F90               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1783  0013FA  6D8F               	negf	___aldiv@quotient& (0+255),b
  1784  0013FC  0E00               	movlw	0
  1785  0013FE  2390               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1786  001400  2391               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1787  001402  2392               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1788  001404                     l2420:
  1789                           
  1790                           ; BSR set to: 0
  1791  001404  C08F  F085         	movff	___aldiv@quotient,?___aldiv
  1792  001408  C090  F086         	movff	___aldiv@quotient+1,?___aldiv+1
  1793  00140C  C091  F087         	movff	___aldiv@quotient+2,?___aldiv+2
  1794  001410  C092  F088         	movff	___aldiv@quotient+3,?___aldiv+3
  1795  001414  0012               	return	
  1796  001416                     __end_of___aldiv:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           postinc0	equ	0xFEE
  1804                           plusw0	equ	0xFEB
  1805                           fsr0h	equ	0xFEA
  1806                           fsr0l	equ	0xFE9
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1l	equ	0xFE1
  1810                           plusw2	equ	0xFDB
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _D_PWM_Init *****************
  1816 ;; Defined at:
  1817 ;;		line 279 in file "Drivers/PWM_Driver.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:   14
  1838 ;; This function calls:
  1839 ;;		_D_TIMER0_Enable
  1840 ;;		_D_TIMER0_Init
  1841 ;; This function is called by:
  1842 ;;		_initialize
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text5
  1847  001FB4                     __ptext5:
  1848                           	opt stack 0
  1849  001FB4                     _D_PWM_Init:
  1850                           	opt stack 15
  1851                           
  1852                           ;PWM_Driver.c: 281: PWM_Red.duty_cnt = 0;
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;incstack = 0
  1856  001FB4  0E00               	movlw	0
  1857  001FB6  0100               	movlb	0	; () banked
  1858  001FB8  6FCA               	movwf	_PWM_Red& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;PWM_Driver.c: 282: PWM_Red.duty_val = 0xFF;
  1862  001FBA  0100               	movlb	0	; () banked
  1863  001FBC  69CB               	setf	(_PWM_Red+1)& (0+255),b
  1864                           
  1865                           ;PWM_Driver.c: 284: PWM_Green.duty_cnt = 0;
  1866  001FBE  0E00               	movlw	0
  1867  001FC0  0100               	movlb	0	; () banked
  1868  001FC2  6FC8               	movwf	_PWM_Green& (0+255),b
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;PWM_Driver.c: 285: PWM_Green.duty_val = 0xFF;
  1872  001FC4  0100               	movlb	0	; () banked
  1873  001FC6  69C9               	setf	(_PWM_Green+1)& (0+255),b
  1874                           
  1875                           ;PWM_Driver.c: 287: PWM_Blue.duty_cnt = 0;
  1876  001FC8  0E00               	movlw	0
  1877  001FCA  0100               	movlb	0	; () banked
  1878  001FCC  6FC6               	movwf	_PWM_Blue& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;PWM_Driver.c: 288: PWM_Blue.duty_val = 0xFF;
  1882  001FCE  0100               	movlb	0	; () banked
  1883  001FD0  69C7               	setf	(_PWM_Blue+1)& (0+255),b
  1884                           
  1885                           ;PWM_Driver.c: 290: scale = 0;
  1886  001FD2  0E00               	movlw	0
  1887  001FD4  6E2E               	movwf	_scale,c
  1888                           
  1889                           ;PWM_Driver.c: 291: state = Color;
  1890  001FD6  0E00               	movlw	0
  1891  001FD8  6E2F               	movwf	_state,c
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;PWM_Driver.c: 294: D_TIMER0_Init(0);
  1895  001FDA  0E00               	movlw	0
  1896  001FDC  ECFA  F00B         	call	_D_TIMER0_Init
  1897                           
  1898                           ;PWM_Driver.c: 295: D_TIMER0_Enable(0);
  1899  001FE0  0E00               	movlw	0
  1900  001FE2  EC5F  F010         	call	_D_TIMER0_Enable
  1901                           
  1902                           ;PWM_Driver.c: 298: TRISBbits.TRISB0 = 0;
  1903  001FE6  9093               	bcf	3987,0,c	;volatile
  1904                           
  1905                           ;PWM_Driver.c: 299: TRISBbits.TRISB1 = 0;
  1906  001FE8  9293               	bcf	3987,1,c	;volatile
  1907                           
  1908                           ;PWM_Driver.c: 300: TRISBbits.TRISB2 = 0;
  1909  001FEA  9493               	bcf	3987,2,c	;volatile
  1910  001FEC  0012               	return		;funcret
  1911  001FEE                     __end_of_D_PWM_Init:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           intcon	equ	0xFF2
  1918                           postinc0	equ	0xFEE
  1919                           plusw0	equ	0xFEB
  1920                           fsr0h	equ	0xFEA
  1921                           fsr0l	equ	0xFE9
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           fsr1l	equ	0xFE1
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _D_TIMER0_Init *****************
  1931 ;; Defined at:
  1932 ;;		line 30 in file "Drivers/TIMER0_Driver.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  prescale        1    wreg     unsigned char 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  prescale        1   38[BANK0 ] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0
  1947 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1949 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1950 ;;Total ram usage:        1 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:   13
  1953 ;; This function calls:
  1954 ;;		_D_TIMER0_Enable
  1955 ;; This function is called by:
  1956 ;;		_D_PWM_Init
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text6
  1961  0017F4                     __ptext6:
  1962                           	opt stack 0
  1963  0017F4                     _D_TIMER0_Init:
  1964                           	opt stack 15
  1965                           
  1966                           ;incstack = 0
  1967                           ;D_TIMER0_Init@prescale stored from wreg
  1968  0017F4  0100               	movlb	0	; () banked
  1969  0017F6  6F86               	movwf	D_TIMER0_Init@prescale& (0+255),b
  1970                           
  1971                           ;TIMER0_Driver.c: 31: D_TIMER0_Enable(0);
  1972  0017F8  0E00               	movlw	0
  1973  0017FA  EC5F  F010         	call	_D_TIMER0_Enable
  1974                           
  1975                           ;TIMER0_Driver.c: 34: T0CONbits.T08BIT = 1;
  1976  0017FE  8CD5               	bsf	4053,6,c	;volatile
  1977                           
  1978                           ;TIMER0_Driver.c: 35: T0CONbits.T0CS = 0;
  1979  001800  9AD5               	bcf	4053,5,c	;volatile
  1980                           
  1981                           ;TIMER0_Driver.c: 36: T0CONbits.PSA = 1;
  1982  001802  86D5               	bsf	4053,3,c	;volatile
  1983                           
  1984                           ;TIMER0_Driver.c: 37: switch(prescale) {
  1985  001804  D021               	goto	l2278
  1986  001806                     l39:
  1987                           
  1988                           ; BSR set to: 0
  1989  001806  90D5               	bcf	4053,0,c	;volatile
  1990  001808  92D5               	bcf	4053,1,c	;volatile
  1991  00180A  94D5               	bcf	4053,2,c	;volatile
  1992  00180C  D038               	goto	l2280
  1993  00180E                     l2264:
  1994                           
  1995                           ; BSR set to: 0
  1996  00180E  50D5               	movf	4053,w,c	;volatile
  1997  001810  0BF8               	andlw	-8
  1998  001812  0901               	iorlw	1
  1999  001814  D013               	goto	L5
  2000  001816                     l2266:
  2001                           
  2002                           ; BSR set to: 0
  2003  001816  50D5               	movf	4053,w,c	;volatile
  2004  001818  0BF8               	andlw	-8
  2005  00181A  0902               	iorlw	2
  2006  00181C  D00F               	goto	L5
  2007  00181E                     l2268:
  2008                           
  2009                           ; BSR set to: 0
  2010  00181E  50D5               	movf	4053,w,c	;volatile
  2011  001820  0BF8               	andlw	-8
  2012  001822  0903               	iorlw	3
  2013  001824  D00B               	goto	L5
  2014  001826                     l2270:
  2015                           
  2016                           ; BSR set to: 0
  2017  001826  50D5               	movf	4053,w,c	;volatile
  2018  001828  0BF8               	andlw	-8
  2019  00182A  0904               	iorlw	4
  2020  00182C  D007               	goto	L5
  2021  00182E                     l2272:
  2022                           
  2023                           ; BSR set to: 0
  2024  00182E  50D5               	movf	4053,w,c	;volatile
  2025  001830  0BF8               	andlw	-8
  2026  001832  0905               	iorlw	5
  2027  001834  D003               	goto	L5
  2028  001836                     l2274:
  2029                           
  2030                           ; BSR set to: 0
  2031  001836  50D5               	movf	4053,w,c	;volatile
  2032  001838  0BF8               	andlw	-8
  2033  00183A  0906               	iorlw	6
  2034  00183C                     L5:
  2035  00183C  6ED5               	movwf	4053,c	;volatile
  2036  00183E  D01F               	goto	l2280
  2037  001840                     l46:
  2038                           
  2039                           ; BSR set to: 0
  2040  001840  80D5               	bsf	4053,0,c	;volatile
  2041  001842  82D5               	bsf	4053,1,c	;volatile
  2042  001844  84D5               	bsf	4053,2,c	;volatile
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;TIMER0_Driver.c: 48: }
  2046  001846  D01B               	goto	l2280
  2047  001848                     l2278:
  2048  001848  0100               	movlb	0	; () banked
  2049  00184A  5186               	movf	D_TIMER0_Init@prescale& (0+255),w,b
  2050                           
  2051                           ; Switch size 1, requested type "space"
  2052                           ; Number of cases is 8, Range of values is 0 to 128
  2053                           ; switch strategies available:
  2054                           ; Name         Instructions Cycles
  2055                           ; simple_byte           25    13 (average)
  2056                           ;	Chosen strategy is simple_byte
  2057  00184C  0A00               	xorlw	0	; case 0
  2058  00184E  B4D8               	btfsc	status,2,c
  2059  001850  D7F7               	goto	l46
  2060  001852  0A02               	xorlw	2	; case 2
  2061  001854  B4D8               	btfsc	status,2,c
  2062  001856  D7D7               	goto	l39
  2063  001858  0A06               	xorlw	6	; case 4
  2064  00185A  B4D8               	btfsc	status,2,c
  2065  00185C  D7D8               	goto	l2264
  2066  00185E  0A0C               	xorlw	12	; case 8
  2067  001860  B4D8               	btfsc	status,2,c
  2068  001862  D7D9               	goto	l2266
  2069  001864  0A18               	xorlw	24	; case 16
  2070  001866  B4D8               	btfsc	status,2,c
  2071  001868  D7DA               	goto	l2268
  2072  00186A  0A30               	xorlw	48	; case 32
  2073  00186C  B4D8               	btfsc	status,2,c
  2074  00186E  D7DB               	goto	l2270
  2075  001870  0A60               	xorlw	96	; case 64
  2076  001872  B4D8               	btfsc	status,2,c
  2077  001874  D7DC               	goto	l2272
  2078  001876  0AC0               	xorlw	192	; case 128
  2079  001878  B4D8               	btfsc	status,2,c
  2080  00187A  D7DD               	goto	l2274
  2081  00187C  D7C4               	goto	l39
  2082  00187E                     l2280:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;TIMER0_Driver.c: 49: TMR0L = 0;
  2086  00187E  0E00               	movlw	0
  2087  001880  6ED6               	movwf	4054,c	;volatile
  2088                           
  2089                           ;TIMER0_Driver.c: 50: TMR0H = 0;
  2090  001882  0E00               	movlw	0
  2091  001884  6ED7               	movwf	4055,c	;volatile
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;TIMER0_Driver.c: 53: RCONbits.IPEN = 1;
  2095  001886  8ED0               	bsf	4048,7,c	;volatile
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;TIMER0_Driver.c: 54: INTCONbits.GIEH = 1;
  2099  001888  8EF2               	bsf	intcon,7,c	;volatile
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;TIMER0_Driver.c: 55: INTCONbits.GIEL = 1;
  2103  00188A  8CF2               	bsf	intcon,6,c	;volatile
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;TIMER0_Driver.c: 56: INTCONbits.TMR0IE = 0;
  2107  00188C  9AF2               	bcf	intcon,5,c	;volatile
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;TIMER0_Driver.c: 57: INTCONbits.TMR0IF = 0;
  2111  00188E  94F2               	bcf	intcon,2,c	;volatile
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;TIMER0_Driver.c: 58: INTCON2bits.TMR0IP = 1;
  2115  001890  84F1               	bsf	intcon2,2,c	;volatile
  2116                           
  2117                           ; BSR set to: 0
  2118  001892  0012               	return		;funcret
  2119  001894                     __end_of_D_TIMER0_Init:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           intcon	equ	0xFF2
  2126                           intcon2	equ	0xFF1
  2127                           postinc0	equ	0xFEE
  2128                           plusw0	equ	0xFEB
  2129                           fsr0h	equ	0xFEA
  2130                           fsr0l	equ	0xFE9
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           plusw2	equ	0xFDB
  2135                           fsr2h	equ	0xFDA
  2136                           fsr2l	equ	0xFD9
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _D_PWM_Enable *****************
  2140 ;; Defined at:
  2141 ;;		line 303 in file "Drivers/PWM_Driver.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  enable          1    wreg     unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  enable          1   38[BANK0 ] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0
  2156 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2158 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2159 ;;Total ram usage:        1 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:   13
  2162 ;; This function calls:
  2163 ;;		_D_TIMER0_Enable
  2164 ;; This function is called by:
  2165 ;;		_initialize
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  002180                     __ptext7:
  2171                           	opt stack 0
  2172  002180                     _D_PWM_Enable:
  2173                           	opt stack 16
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;incstack = 0
  2177                           ;D_PWM_Enable@enable stored from wreg
  2178  002180  0100               	movlb	0	; () banked
  2179  002182  6F86               	movwf	D_PWM_Enable@enable& (0+255),b
  2180                           
  2181                           ;PWM_Driver.c: 304: D_TIMER0_Enable(enable);
  2182  002184  0100               	movlb	0	; () banked
  2183  002186  5186               	movf	D_PWM_Enable@enable& (0+255),w,b
  2184  002188  EC5F  F010         	call	_D_TIMER0_Enable
  2185  00218C  0012               	return		;funcret
  2186  00218E                     __end_of_D_PWM_Enable:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           intcon	equ	0xFF2
  2193                           intcon2	equ	0xFF1
  2194                           postinc0	equ	0xFEE
  2195                           plusw0	equ	0xFEB
  2196                           fsr0h	equ	0xFEA
  2197                           fsr0l	equ	0xFE9
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1l	equ	0xFE1
  2201                           plusw2	equ	0xFDB
  2202                           fsr2h	equ	0xFDA
  2203                           fsr2l	equ	0xFD9
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _D_TIMER0_Enable *****************
  2207 ;; Defined at:
  2208 ;;		line 61 in file "Drivers/TIMER0_Driver.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  enable          1    wreg     unsigned char 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  enable          1   37[BANK0 ] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, status,2
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0
  2223 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2225 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2226 ;;Total ram usage:        1 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:   12
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_D_TIMER0_Init
  2233 ;;		_D_PWM_Init
  2234 ;;		_D_PWM_Enable
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text8
  2239  0020BE                     __ptext8:
  2240                           	opt stack 0
  2241  0020BE                     _D_TIMER0_Enable:
  2242                           	opt stack 15
  2243                           
  2244                           ;incstack = 0
  2245                           ;D_TIMER0_Enable@enable stored from wreg
  2246  0020BE  0100               	movlb	0	; () banked
  2247  0020C0  6F85               	movwf	D_TIMER0_Enable@enable& (0+255),b
  2248                           
  2249                           ;TIMER0_Driver.c: 62: if (enable) {
  2250  0020C2  0100               	movlb	0	; () banked
  2251  0020C4  5185               	movf	D_TIMER0_Enable@enable& (0+255),w,b
  2252  0020C6  0100               	movlb	0	; () banked
  2253  0020C8  B4D8               	btfsc	status,2,c
  2254  0020CA  D005               	goto	l50
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;TIMER0_Driver.c: 63: T0CONbits.TMR0ON = 1;
  2258  0020CC  8ED5               	bsf	4053,7,c	;volatile
  2259                           
  2260                           ;TIMER0_Driver.c: 64: INTCONbits.TMR0IE = 1;
  2261  0020CE  8AF2               	bsf	intcon,5,c	;volatile
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;TIMER0_Driver.c: 65: D_TIMER0_Flag = 0;
  2265  0020D0  0E00               	movlw	0
  2266  0020D2  6E2A               	movwf	_D_TIMER0_Flag,c
  2267                           
  2268                           ;TIMER0_Driver.c: 66: } else {
  2269  0020D4  0012               	return	
  2270  0020D6                     l50:
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;TIMER0_Driver.c: 67: T0CONbits.TMR0ON = 0;
  2274  0020D6  9ED5               	bcf	4053,7,c	;volatile
  2275                           
  2276                           ;TIMER0_Driver.c: 68: INTCONbits.TMR0IE = 0;
  2277  0020D8  9AF2               	bcf	intcon,5,c	;volatile
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;TIMER0_Driver.c: 69: D_TIMER0_Flag = 0;
  2281  0020DA  0E00               	movlw	0
  2282  0020DC  6E2A               	movwf	_D_TIMER0_Flag,c
  2283  0020DE  0012               	return	
  2284  0020E0                     __end_of_D_TIMER0_Enable:
  2285                           	opt stack 0
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           intcon	equ	0xFF2
  2291                           intcon2	equ	0xFF1
  2292                           postinc0	equ	0xFEE
  2293                           plusw0	equ	0xFEB
  2294                           fsr0h	equ	0xFEA
  2295                           fsr0l	equ	0xFE9
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1l	equ	0xFE1
  2299                           plusw2	equ	0xFDB
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _D_PORT_Init *****************
  2305 ;; Defined at:
  2306 ;;		line 31 in file "Drivers/PORT_Driver.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2323 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2324 ;;Total ram usage:        0 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:   12
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_initialize
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text9
  2335  002122                     __ptext9:
  2336                           	opt stack 0
  2337  002122                     _D_PORT_Init:
  2338                           	opt stack 17
  2339                           
  2340                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;incstack = 0
  2344  002122  0E00               	movlw	0
  2345  002124  6E92               	movwf	3986,c	;volatile
  2346  002126  0E00               	movlw	0
  2347  002128  6E80               	movwf	3968,c	;volatile
  2348                           
  2349                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  2350  00212A  0E00               	movlw	0
  2351  00212C  6E93               	movwf	3987,c	;volatile
  2352  00212E  0E00               	movlw	0
  2353  002130  6E81               	movwf	3969,c	;volatile
  2354                           
  2355                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  2356  002132  0E00               	movlw	0
  2357  002134  6E94               	movwf	3988,c	;volatile
  2358  002136  0E00               	movlw	0
  2359  002138  6E82               	movwf	3970,c	;volatile
  2360                           
  2361                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  2362  00213A  0E0F               	movlw	15
  2363  00213C  6EC1               	movwf	4033,c	;volatile
  2364  00213E  0012               	return		;funcret
  2365  002140                     __end_of_D_PORT_Init:
  2366                           	opt stack 0
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           plusw0	equ	0xFEB
  2375                           fsr0h	equ	0xFEA
  2376                           fsr0l	equ	0xFE9
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1l	equ	0xFE1
  2380                           plusw2	equ	0xFDB
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _handle_message *****************
  2386 ;; Defined at:
  2387 ;;		line 90 in file "main.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  msg             6   70[BANK0 ] struct .
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2401 ;;      Params:         0       6       0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2403 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2404 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2405 ;;Total ram usage:        7 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:   17
  2408 ;; This function calls:
  2409 ;;		_D_PWM_Fade
  2410 ;;		_D_PWM_Flash
  2411 ;;		_D_PWM_GetBlue
  2412 ;;		_D_PWM_GetGreen
  2413 ;;		_D_PWM_GetRed
  2414 ;;		_D_PWM_GetScale
  2415 ;;		_D_PWM_GetState
  2416 ;;		_D_PWM_ScaleDown
  2417 ;;		_D_PWM_ScaleUp
  2418 ;;		_D_PWM_SetRGB
  2419 ;;		_D_PWM_Smooth
  2420 ;;		_D_PWM_Strobe
  2421 ;;		_D_UART_WriteInt
  2422 ;;		_strToInt
  2423 ;;		_strcmp
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text10
  2430  000868                     __ptext10:
  2431                           	opt stack 0
  2432  000868                     _handle_message:
  2433                           	opt stack 13
  2434                           
  2435                           ;main.c: 91: if (strcmp(msg.command, "R") == 0) {
  2436                           
  2437                           ;incstack = 0
  2438  000868  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2439  00086C  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2440  000870  0E5B               	movlw	low STR_15
  2441  000872  0100               	movlb	0	; () banked
  2442  000874  6F87               	movwf	strcmp@s2& (0+255),b
  2443  000876  0E08               	movlw	high STR_15
  2444  000878  0100               	movlb	0	; () banked
  2445  00087A  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2446  00087C  EC60  F00F         	call	_strcmp	;wreg free
  2447  000880  0100               	movlb	0	; () banked
  2448  000882  5185               	movf	?_strcmp& (0+255),w,b
  2449  000884  0100               	movlb	0	; () banked
  2450  000886  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2451  000888  A4D8               	btfss	status,2,c
  2452  00088A  D011               	goto	l2992
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;main.c: 92: r = strToInt(msg.message);
  2456  00088C  C0AA  F085         	movff	handle_message@msg+4,strToInt@str
  2457  000890  C0AB  F086         	movff	handle_message@msg+5,strToInt@str+1
  2458  000894  ECD5  F00E         	call	_strToInt	;wreg free
  2459  000898  0100               	movlb	0	; () banked
  2460  00089A  6FCF               	movwf	_r& (0+255),b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;main.c: 93: D_PWM_SetRGB(r, g, b);
  2464  00089C  C0CE  F08A         	movff	_g,D_PWM_SetRGB@g
  2465  0008A0  C0CD  F08B         	movff	_b,D_PWM_SetRGB@b
  2466  0008A4  0100               	movlb	0	; () banked
  2467  0008A6  51CF               	movf	_r& (0+255),w,b
  2468  0008A8  ECA0  F010         	call	_D_PWM_SetRGB
  2469                           
  2470                           ;main.c: 94: return;
  2471  0008AC  0012               	return	
  2472  0008AE                     l2992:
  2473                           
  2474                           ;main.c: 95: }
  2475                           ;main.c: 97: if (strcmp(msg.command, "G") == 0) {
  2476  0008AE  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2477  0008B2  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2478  0008B6  0E55               	movlw	low STR_16
  2479  0008B8  0100               	movlb	0	; () banked
  2480  0008BA  6F87               	movwf	strcmp@s2& (0+255),b
  2481  0008BC  0E08               	movlw	high STR_16
  2482  0008BE  0100               	movlb	0	; () banked
  2483  0008C0  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2484  0008C2  EC60  F00F         	call	_strcmp	;wreg free
  2485  0008C6  0100               	movlb	0	; () banked
  2486  0008C8  5185               	movf	?_strcmp& (0+255),w,b
  2487  0008CA  0100               	movlb	0	; () banked
  2488  0008CC  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2489  0008CE  A4D8               	btfss	status,2,c
  2490  0008D0  D011               	goto	l3000
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;main.c: 98: g = strToInt(msg.message);
  2494  0008D2  C0AA  F085         	movff	handle_message@msg+4,strToInt@str
  2495  0008D6  C0AB  F086         	movff	handle_message@msg+5,strToInt@str+1
  2496  0008DA  ECD5  F00E         	call	_strToInt	;wreg free
  2497  0008DE  0100               	movlb	0	; () banked
  2498  0008E0  6FCE               	movwf	_g& (0+255),b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 99: D_PWM_SetRGB(r, g, b);
  2502  0008E2  C0CE  F08A         	movff	_g,D_PWM_SetRGB@g
  2503  0008E6  C0CD  F08B         	movff	_b,D_PWM_SetRGB@b
  2504  0008EA  0100               	movlb	0	; () banked
  2505  0008EC  51CF               	movf	_r& (0+255),w,b
  2506  0008EE  ECA0  F010         	call	_D_PWM_SetRGB
  2507                           
  2508                           ;main.c: 100: return;
  2509  0008F2  0012               	return	
  2510  0008F4                     l3000:
  2511                           
  2512                           ;main.c: 101: }
  2513                           ;main.c: 103: if (strcmp(msg.command, "B") == 0) {
  2514  0008F4  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2515  0008F8  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2516  0008FC  0E33               	movlw	low (STR_25+2)
  2517  0008FE  0100               	movlb	0	; () banked
  2518  000900  6F87               	movwf	strcmp@s2& (0+255),b
  2519  000902  0E08               	movlw	high (STR_25+2)
  2520  000904  0100               	movlb	0	; () banked
  2521  000906  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2522  000908  EC60  F00F         	call	_strcmp	;wreg free
  2523  00090C  0100               	movlb	0	; () banked
  2524  00090E  5185               	movf	?_strcmp& (0+255),w,b
  2525  000910  0100               	movlb	0	; () banked
  2526  000912  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2527  000914  A4D8               	btfss	status,2,c
  2528  000916  D011               	goto	l3008
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 104: b = strToInt(msg.message);
  2532  000918  C0AA  F085         	movff	handle_message@msg+4,strToInt@str
  2533  00091C  C0AB  F086         	movff	handle_message@msg+5,strToInt@str+1
  2534  000920  ECD5  F00E         	call	_strToInt	;wreg free
  2535  000924  0100               	movlb	0	; () banked
  2536  000926  6FCD               	movwf	_b& (0+255),b
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 105: D_PWM_SetRGB(r, g, b);
  2540  000928  C0CE  F08A         	movff	_g,D_PWM_SetRGB@g
  2541  00092C  C0CD  F08B         	movff	_b,D_PWM_SetRGB@b
  2542  000930  0100               	movlb	0	; () banked
  2543  000932  51CF               	movf	_r& (0+255),w,b
  2544  000934  ECA0  F010         	call	_D_PWM_SetRGB
  2545                           
  2546                           ;main.c: 106: return;
  2547  000938  0012               	return	
  2548  00093A                     l3008:
  2549                           
  2550                           ;main.c: 107: }
  2551                           ;main.c: 109: if (strcmp(msg.command, "S") == 0) {
  2552  00093A  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2553  00093E  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2554  000942  0E5D               	movlw	low STR_18
  2555  000944  0100               	movlb	0	; () banked
  2556  000946  6F87               	movwf	strcmp@s2& (0+255),b
  2557  000948  0E08               	movlw	high STR_18
  2558  00094A  0100               	movlb	0	; () banked
  2559  00094C  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2560  00094E  EC60  F00F         	call	_strcmp	;wreg free
  2561  000952  0100               	movlb	0	; () banked
  2562  000954  5185               	movf	?_strcmp& (0+255),w,b
  2563  000956  0100               	movlb	0	; () banked
  2564  000958  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2565  00095A  A4D8               	btfss	status,2,c
  2566  00095C  D028               	goto	l3020
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 110: if (strcmp(msg.message, "D") == 0) {
  2570  00095E  C0AA  F085         	movff	handle_message@msg+4,strcmp@s1
  2571  000962  C0AB  F086         	movff	handle_message@msg+5,strcmp@s1+1
  2572  000966  0E53               	movlw	low STR_19
  2573  000968  0100               	movlb	0	; () banked
  2574  00096A  6F87               	movwf	strcmp@s2& (0+255),b
  2575  00096C  0E08               	movlw	high STR_19
  2576  00096E  0100               	movlb	0	; () banked
  2577  000970  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2578  000972  EC60  F00F         	call	_strcmp	;wreg free
  2579  000976  0100               	movlb	0	; () banked
  2580  000978  5185               	movf	?_strcmp& (0+255),w,b
  2581  00097A  0100               	movlb	0	; () banked
  2582  00097C  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2583  00097E  B4D8               	btfsc	status,2,c
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 111: D_PWM_ScaleDown();
  2587  000980  ECD8  F010         	call	_D_PWM_ScaleDown	;wreg free
  2588                           
  2589                           ;main.c: 112: }
  2590                           ;main.c: 113: if (strcmp(msg.message, "U") == 0) {
  2591  000984  C0AA  F085         	movff	handle_message@msg+4,strcmp@s1
  2592  000988  C0AB  F086         	movff	handle_message@msg+5,strcmp@s1+1
  2593  00098C  0E5F               	movlw	low STR_20
  2594  00098E  0100               	movlb	0	; () banked
  2595  000990  6F87               	movwf	strcmp@s2& (0+255),b
  2596  000992  0E08               	movlw	high STR_20
  2597  000994  0100               	movlb	0	; () banked
  2598  000996  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2599  000998  EC60  F00F         	call	_strcmp	;wreg free
  2600  00099C  0100               	movlb	0	; () banked
  2601  00099E  5185               	movf	?_strcmp& (0+255),w,b
  2602  0009A0  0100               	movlb	0	; () banked
  2603  0009A2  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2604  0009A4  A4D8               	btfss	status,2,c
  2605  0009A6  0012               	return	
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 114: D_PWM_ScaleUp();
  2609  0009A8  ECD3  F010         	call	_D_PWM_ScaleUp	;wreg free
  2610                           
  2611                           ;main.c: 115: }
  2612                           ;main.c: 116: return;
  2613  0009AC  0012               	return	
  2614  0009AE                     l3020:
  2615                           
  2616                           ;main.c: 117: }
  2617                           ;main.c: 119: if (strcmp(msg.command, "FL") == 0) {
  2618  0009AE  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2619  0009B2  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2620  0009B6  0E44               	movlw	low STR_21
  2621  0009B8  0100               	movlb	0	; () banked
  2622  0009BA  6F87               	movwf	strcmp@s2& (0+255),b
  2623  0009BC  0E08               	movlw	high STR_21
  2624  0009BE  0100               	movlb	0	; () banked
  2625  0009C0  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2626  0009C2  EC60  F00F         	call	_strcmp	;wreg free
  2627  0009C6  0100               	movlb	0	; () banked
  2628  0009C8  5185               	movf	?_strcmp& (0+255),w,b
  2629  0009CA  0100               	movlb	0	; () banked
  2630  0009CC  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2631  0009CE  A4D8               	btfss	status,2,c
  2632  0009D0  D003               	goto	l3026
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 120: D_PWM_Flash();
  2636  0009D2  ECF1  F010         	call	_D_PWM_Flash	;wreg free
  2637                           
  2638                           ;main.c: 121: return;
  2639  0009D6  0012               	return	
  2640  0009D8                     l3026:
  2641                           
  2642                           ;main.c: 122: }
  2643                           ;main.c: 124: if (strcmp(msg.command, "ST") == 0) {
  2644  0009D8  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2645  0009DC  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2646  0009E0  0E4A               	movlw	low STR_22
  2647  0009E2  0100               	movlb	0	; () banked
  2648  0009E4  6F87               	movwf	strcmp@s2& (0+255),b
  2649  0009E6  0E08               	movlw	high STR_22
  2650  0009E8  0100               	movlb	0	; () banked
  2651  0009EA  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2652  0009EC  EC60  F00F         	call	_strcmp	;wreg free
  2653  0009F0  0100               	movlb	0	; () banked
  2654  0009F2  5185               	movf	?_strcmp& (0+255),w,b
  2655  0009F4  0100               	movlb	0	; () banked
  2656  0009F6  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2657  0009F8  A4D8               	btfss	status,2,c
  2658  0009FA  D003               	goto	l3032
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 125: D_PWM_Strobe();
  2662  0009FC  ECE2  F010         	call	_D_PWM_Strobe	;wreg free
  2663                           
  2664                           ;main.c: 126: return;
  2665  000A00  0012               	return	
  2666  000A02                     l3032:
  2667                           
  2668                           ;main.c: 127: }
  2669                           ;main.c: 129: if (strcmp(msg.command, "FA") == 0) {
  2670  000A02  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2671  000A06  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2672  000A0A  0E41               	movlw	low STR_23
  2673  000A0C  0100               	movlb	0	; () banked
  2674  000A0E  6F87               	movwf	strcmp@s2& (0+255),b
  2675  000A10  0E08               	movlw	high STR_23
  2676  000A12  0100               	movlb	0	; () banked
  2677  000A14  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2678  000A16  EC60  F00F         	call	_strcmp	;wreg free
  2679  000A1A  0100               	movlb	0	; () banked
  2680  000A1C  5185               	movf	?_strcmp& (0+255),w,b
  2681  000A1E  0100               	movlb	0	; () banked
  2682  000A20  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2683  000A22  A4D8               	btfss	status,2,c
  2684  000A24  D003               	goto	l3038
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 130: D_PWM_Fade();
  2688  000A26  ECF4  F010         	call	_D_PWM_Fade	;wreg free
  2689                           
  2690                           ;main.c: 131: return;
  2691  000A2A  0012               	return	
  2692  000A2C                     l3038:
  2693                           
  2694                           ;main.c: 132: }
  2695                           ;main.c: 134: if (strcmp(msg.command, "SM") == 0) {
  2696  000A2C  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2697  000A30  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2698  000A34  0E47               	movlw	low STR_24
  2699  000A36  0100               	movlb	0	; () banked
  2700  000A38  6F87               	movwf	strcmp@s2& (0+255),b
  2701  000A3A  0E08               	movlw	high STR_24
  2702  000A3C  0100               	movlb	0	; () banked
  2703  000A3E  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2704  000A40  EC60  F00F         	call	_strcmp	;wreg free
  2705  000A44  0100               	movlb	0	; () banked
  2706  000A46  5185               	movf	?_strcmp& (0+255),w,b
  2707  000A48  0100               	movlb	0	; () banked
  2708  000A4A  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2709  000A4C  A4D8               	btfss	status,2,c
  2710  000A4E  D003               	goto	l3044
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 135: D_PWM_Smooth();
  2714  000A50  ECE5  F010         	call	_D_PWM_Smooth	;wreg free
  2715                           
  2716                           ;main.c: 136: return;
  2717  000A54  0012               	return	
  2718  000A56                     l3044:
  2719                           
  2720                           ;main.c: 137: }
  2721                           ;main.c: 139: if(strcmp(msg.command, "RGB") == 0) {
  2722  000A56  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2723  000A5A  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2724  000A5E  0E31               	movlw	low STR_25
  2725  000A60  0100               	movlb	0	; () banked
  2726  000A62  6F87               	movwf	strcmp@s2& (0+255),b
  2727  000A64  0E08               	movlw	high STR_25
  2728  000A66  0100               	movlb	0	; () banked
  2729  000A68  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2730  000A6A  EC60  F00F         	call	_strcmp	;wreg free
  2731  000A6E  0100               	movlb	0	; () banked
  2732  000A70  5185               	movf	?_strcmp& (0+255),w,b
  2733  000A72  0100               	movlb	0	; () banked
  2734  000A74  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2735  000A76  A4D8               	btfss	status,2,c
  2736  000A78  D03D               	goto	l3058
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 140: D_UART_WriteInt("R", D_PWM_GetRed());
  2740  000A7A  0E5B               	movlw	low STR_15
  2741  000A7C  0100               	movlb	0	; () banked
  2742  000A7E  6FA1               	movwf	D_UART_WriteInt@command& (0+255),b
  2743  000A80  0E08               	movlw	high STR_15
  2744  000A82  0100               	movlb	0	; () banked
  2745  000A84  6FA2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2746  000A86  ECE8  F010         	call	_D_PWM_GetRed	;wreg free
  2747  000A8A  0100               	movlb	0	; () banked
  2748  000A8C  6FAC               	movwf	??_handle_message& (0+255),b
  2749  000A8E  0100               	movlb	0	; () banked
  2750  000A90  51AC               	movf	??_handle_message& (0+255),w,b
  2751  000A92  0100               	movlb	0	; () banked
  2752  000A94  6FA3               	movwf	D_UART_WriteInt@data& (0+255),b
  2753  000A96  6BA4               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2754  000A98  EC0B  F00A         	call	_D_UART_WriteInt	;wreg free
  2755                           
  2756                           ;main.c: 141: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2757  000A9C  0E28               	movlw	40
  2758  000A9E                     u2987:
  2759  000A9E  2EE8               	decfsz	wreg,f,c
  2760  000AA0  D7FE               	bra	u2987
  2761                           
  2762                           ;main.c: 142: D_UART_WriteInt("G", D_PWM_GetGreen());
  2763  000AA2  0E55               	movlw	low STR_16
  2764  000AA4  0100               	movlb	0	; () banked
  2765  000AA6  6FA1               	movwf	D_UART_WriteInt@command& (0+255),b
  2766  000AA8  0E08               	movlw	high STR_16
  2767  000AAA  0100               	movlb	0	; () banked
  2768  000AAC  6FA2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2769  000AAE  ECEB  F010         	call	_D_PWM_GetGreen	;wreg free
  2770  000AB2  0100               	movlb	0	; () banked
  2771  000AB4  6FAC               	movwf	??_handle_message& (0+255),b
  2772  000AB6  0100               	movlb	0	; () banked
  2773  000AB8  51AC               	movf	??_handle_message& (0+255),w,b
  2774  000ABA  0100               	movlb	0	; () banked
  2775  000ABC  6FA3               	movwf	D_UART_WriteInt@data& (0+255),b
  2776  000ABE  6BA4               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2777  000AC0  EC0B  F00A         	call	_D_UART_WriteInt	;wreg free
  2778                           
  2779                           ;main.c: 143: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2780  000AC4  0E28               	movlw	40
  2781  000AC6                     u2997:
  2782  000AC6  2EE8               	decfsz	wreg,f,c
  2783  000AC8  D7FE               	bra	u2997
  2784                           
  2785                           ;main.c: 144: D_UART_WriteInt("B", D_PWM_GetBlue());
  2786  000ACA  0E33               	movlw	low (STR_25+2)
  2787  000ACC  0100               	movlb	0	; () banked
  2788  000ACE  6FA1               	movwf	D_UART_WriteInt@command& (0+255),b
  2789  000AD0  0E08               	movlw	high (STR_25+2)
  2790  000AD2  0100               	movlb	0	; () banked
  2791  000AD4  6FA2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2792  000AD6  ECEE  F010         	call	_D_PWM_GetBlue	;wreg free
  2793  000ADA  0100               	movlb	0	; () banked
  2794  000ADC  6FAC               	movwf	??_handle_message& (0+255),b
  2795  000ADE  0100               	movlb	0	; () banked
  2796  000AE0  51AC               	movf	??_handle_message& (0+255),w,b
  2797  000AE2  0100               	movlb	0	; () banked
  2798  000AE4  6FA3               	movwf	D_UART_WriteInt@data& (0+255),b
  2799  000AE6  6BA4               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2800  000AE8  EC0B  F00A         	call	_D_UART_WriteInt	;wreg free
  2801                           
  2802                           ;main.c: 145: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2803  000AEC  0E28               	movlw	40
  2804  000AEE                     u3007:
  2805  000AEE  2EE8               	decfsz	wreg,f,c
  2806  000AF0  D7FE               	bra	u3007
  2807                           
  2808                           ;main.c: 146: return;
  2809  000AF2  0012               	return	
  2810  000AF4                     l3058:
  2811                           
  2812                           ;main.c: 147: }
  2813                           ;main.c: 149: if(strcmp(msg.command, "SCA") == 0) {
  2814  000AF4  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2815  000AF8  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2816  000AFC  0E29               	movlw	low STR_29
  2817  000AFE  0100               	movlb	0	; () banked
  2818  000B00  6F87               	movwf	strcmp@s2& (0+255),b
  2819  000B02  0E08               	movlw	high STR_29
  2820  000B04  0100               	movlb	0	; () banked
  2821  000B06  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2822  000B08  EC60  F00F         	call	_strcmp	;wreg free
  2823  000B0C  0100               	movlb	0	; () banked
  2824  000B0E  5185               	movf	?_strcmp& (0+255),w,b
  2825  000B10  0100               	movlb	0	; () banked
  2826  000B12  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2827  000B14  A4D8               	btfss	status,2,c
  2828  000B16  D012               	goto	l3064
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 150: D_UART_WriteInt("SCA", D_PWM_GetScale());
  2832  000B18  0E29               	movlw	low STR_29
  2833  000B1A  0100               	movlb	0	; () banked
  2834  000B1C  6FA1               	movwf	D_UART_WriteInt@command& (0+255),b
  2835  000B1E  0E08               	movlw	high STR_29
  2836  000B20  0100               	movlb	0	; () banked
  2837  000B22  6FA2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2838  000B24  ECFC  F010         	call	_D_PWM_GetScale	;wreg free
  2839  000B28  0100               	movlb	0	; () banked
  2840  000B2A  6FAC               	movwf	??_handle_message& (0+255),b
  2841  000B2C  0100               	movlb	0	; () banked
  2842  000B2E  51AC               	movf	??_handle_message& (0+255),w,b
  2843  000B30  0100               	movlb	0	; () banked
  2844  000B32  6FA3               	movwf	D_UART_WriteInt@data& (0+255),b
  2845  000B34  6BA4               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2846  000B36  EC0B  F00A         	call	_D_UART_WriteInt	;wreg free
  2847                           
  2848                           ;main.c: 151: return;
  2849  000B3A  0012               	return	
  2850  000B3C                     l3064:
  2851                           
  2852                           ;main.c: 152: }
  2853                           ;main.c: 154: if(strcmp(msg.command, "STA") == 0) {
  2854  000B3C  C0A8  F085         	movff	handle_message@msg+2,strcmp@s1
  2855  000B40  C0A9  F086         	movff	handle_message@msg+3,strcmp@s1+1
  2856  000B44  0E2D               	movlw	low STR_31
  2857  000B46  0100               	movlb	0	; () banked
  2858  000B48  6F87               	movwf	strcmp@s2& (0+255),b
  2859  000B4A  0E08               	movlw	high STR_31
  2860  000B4C  0100               	movlb	0	; () banked
  2861  000B4E  6F88               	movwf	(strcmp@s2+1)& (0+255),b
  2862  000B50  EC60  F00F         	call	_strcmp	;wreg free
  2863  000B54  0100               	movlb	0	; () banked
  2864  000B56  5185               	movf	?_strcmp& (0+255),w,b
  2865  000B58  0100               	movlb	0	; () banked
  2866  000B5A  1186               	iorwf	(?_strcmp+1)& (0+255),w,b
  2867  000B5C  A4D8               	btfss	status,2,c
  2868  000B5E  0012               	return	
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 155: D_UART_WriteInt("STA", D_PWM_GetState());
  2872  000B60  0E2D               	movlw	low STR_31
  2873  000B62  0100               	movlb	0	; () banked
  2874  000B64  6FA1               	movwf	D_UART_WriteInt@command& (0+255),b
  2875  000B66  0E08               	movlw	high STR_31
  2876  000B68  0100               	movlb	0	; () banked
  2877  000B6A  6FA2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2878  000B6C  ECFA  F010         	call	_D_PWM_GetState	;wreg free
  2879  000B70  0100               	movlb	0	; () banked
  2880  000B72  6FAC               	movwf	??_handle_message& (0+255),b
  2881  000B74  0100               	movlb	0	; () banked
  2882  000B76  51AC               	movf	??_handle_message& (0+255),w,b
  2883  000B78  0100               	movlb	0	; () banked
  2884  000B7A  6FA3               	movwf	D_UART_WriteInt@data& (0+255),b
  2885  000B7C  6BA4               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2886  000B7E  EC0B  F00A         	call	_D_UART_WriteInt	;wreg free
  2887                           
  2888                           ;main.c: 156: return;
  2889  000B82  0012               	return	
  2890  000B84                     __end_of_handle_message:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           intcon	equ	0xFF2
  2897                           intcon2	equ	0xFF1
  2898                           postinc0	equ	0xFEE
  2899                           plusw0	equ	0xFEB
  2900                           fsr0h	equ	0xFEA
  2901                           fsr0l	equ	0xFE9
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           plusw2	equ	0xFDB
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _strcmp *****************
  2911 ;; Defined at:
  2912 ;;		line 33 in file "/opt/microchip/xc8/v1.40/sources/common/strcmp.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  s1              2   37[BANK0 ] PTR const unsigned char 
  2915 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  2916 ;;  s2              2   39[BANK0 ] PTR const unsigned char 
  2917 ;;		 -> STR_31(4), STR_29(4), STR_25(4), STR_24(3), 
  2918 ;;		 -> STR_23(3), STR_22(3), STR_21(3), STR_20(2), 
  2919 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2920 ;;		 -> STR_15(2), 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  r               1   42[BANK0 ] char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  2   37[BANK0 ] int 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2932 ;;      Params:         0       4       0       0       0       0       0       0       0
  2933 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2934 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2935 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2936 ;;Total ram usage:        6 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:   12
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_handle_message
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text11
  2947  001EC0                     __ptext11:
  2948                           	opt stack 0
  2949  001EC0                     _strcmp:
  2950                           	opt stack 17
  2951                           
  2952                           ;incstack = 0
  2953  001EC0  D006               	goto	l2748
  2954  001EC2                     l2746:
  2955  001EC2  0100               	movlb	0	; () banked
  2956  001EC4  4B85               	infsnz	strcmp@s1& (0+255),f,b
  2957  001EC6  2B86               	incf	(strcmp@s1+1)& (0+255),f,b
  2958  001EC8  0100               	movlb	0	; () banked
  2959  001ECA  4B87               	infsnz	strcmp@s2& (0+255),f,b
  2960  001ECC  2B88               	incf	(strcmp@s2+1)& (0+255),f,b
  2961  001ECE                     l2748:
  2962  001ECE  C085  FFD9         	movff	strcmp@s1,fsr2l
  2963  001ED2  C086  FFDA         	movff	strcmp@s1+1,fsr2h
  2964  001ED6  50DF               	movf	indf2,w,c
  2965  001ED8  0100               	movlb	0	; () banked
  2966  001EDA  6F89               	movwf	??_strcmp& (0+255),b
  2967  001EDC  C087  FFF6         	movff	strcmp@s2,tblptrl
  2968  001EE0  C088  FFF7         	movff	strcmp@s2+1,tblptrh
  2969  001EE4                     	if	0	;tblptru may be non-zero
  2970  001EE4                     	endif
  2971  001EE4                     	if	0	;tblptru may be non-zero
  2972  001EE4                     	endif
  2973  001EE4  0008               	tblrd		*
  2974  001EE6  50F5               	movf	tablat,w,c
  2975  001EE8  0800               	sublw	0
  2976  001EEA  0100               	movlb	0	; () banked
  2977  001EEC  2589               	addwf	??_strcmp& (0+255),w,b
  2978  001EEE  0100               	movlb	0	; () banked
  2979  001EF0  6F8A               	movwf	strcmp@r& (0+255),b
  2980  001EF2  0100               	movlb	0	; () banked
  2981  001EF4  518A               	movf	strcmp@r& (0+255),w,b
  2982  001EF6  A4D8               	btfss	status,2,c
  2983  001EF8  D007               	goto	l2752
  2984                           
  2985                           ; BSR set to: 0
  2986  001EFA  C085  FFD9         	movff	strcmp@s1,fsr2l
  2987  001EFE  C086  FFDA         	movff	strcmp@s1+1,fsr2h
  2988  001F02  50DF               	movf	indf2,w,c
  2989  001F04  A4D8               	btfss	status,2,c
  2990  001F06  D7DD               	goto	l2746
  2991  001F08                     l2752:
  2992                           
  2993                           ; BSR set to: 0
  2994  001F08  0100               	movlb	0	; () banked
  2995  001F0A  518A               	movf	strcmp@r& (0+255),w,b
  2996  001F0C  0100               	movlb	0	; () banked
  2997  001F0E  6F85               	movwf	?_strcmp& (0+255),b
  2998  001F10  6B86               	clrf	(?_strcmp+1)& (0+255),b
  2999  001F12  BF85               	btfsc	?_strcmp& (0+255),7,b
  3000  001F14  0786               	decf	(?_strcmp+1)& (0+255),f,b
  3001  001F16  0012               	return	
  3002  001F18                     __end_of_strcmp:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           intcon	equ	0xFF2
  3009                           intcon2	equ	0xFF1
  3010                           postinc0	equ	0xFEE
  3011                           plusw0	equ	0xFEB
  3012                           fsr0h	equ	0xFEA
  3013                           fsr0l	equ	0xFE9
  3014                           wreg	equ	0xFE8
  3015                           postdec1	equ	0xFE5
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           plusw2	equ	0xFDB
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function _strToInt *****************
  3024 ;; Defined at:
  3025 ;;		line 160 in file "main.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  str             2   37[BANK0 ] PTR const unsigned char 
  3028 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  val             1   41[BANK0 ] unsigned char 
  3031 ;;  shift           1   40[BANK0 ] unsigned char 
  3032 ;;  tmp             1   39[BANK0 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       2       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3045 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:   12
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_handle_message
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text12
  3057  001DAA                     __ptext12:
  3058                           	opt stack 0
  3059  001DAA                     _strToInt:
  3060                           	opt stack 17
  3061                           
  3062                           ;main.c: 161: uint8_t val = 0;
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  001DAA  0E00               	movlw	0
  3067  001DAC  0100               	movlb	0	; () banked
  3068  001DAE  6F89               	movwf	strToInt@val& (0+255),b
  3069                           
  3070                           ;main.c: 162: uint8_t tmp = 0;
  3071  001DB0  0E00               	movlw	0
  3072  001DB2  0100               	movlb	0	; () banked
  3073  001DB4  6F87               	movwf	strToInt@tmp& (0+255),b
  3074                           
  3075                           ;main.c: 163: uint8_t shift = 0;
  3076  001DB6  0E00               	movlw	0
  3077  001DB8  0100               	movlb	0	; () banked
  3078  001DBA  6F88               	movwf	strToInt@shift& (0+255),b
  3079                           
  3080                           ;main.c: 164: while(*str != '\0') {
  3081  001DBC  D01B               	goto	l2770
  3082  001DBE                     l2758:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 165: tmp = *str - 0x30;
  3086  001DBE  C085  FFD9         	movff	strToInt@str,fsr2l
  3087  001DC2  C086  FFDA         	movff	strToInt@str+1,fsr2h
  3088  001DC6  50DF               	movf	indf2,w,c
  3089  001DC8  0FD0               	addlw	208
  3090  001DCA  0100               	movlb	0	; () banked
  3091  001DCC  6F87               	movwf	strToInt@tmp& (0+255),b
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;main.c: 166: if (shift != 0) {
  3095  001DCE  0100               	movlb	0	; () banked
  3096  001DD0  5188               	movf	strToInt@shift& (0+255),w,b
  3097  001DD2  0100               	movlb	0	; () banked
  3098  001DD4  B4D8               	btfsc	status,2,c
  3099  001DD6  D005               	goto	l2764
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;main.c: 167: val *= 10;
  3103  001DD8  0E0A               	movlw	10
  3104  001DDA  0100               	movlb	0	; () banked
  3105  001DDC  0389               	mulwf	strToInt@val& (0+255),b
  3106  001DDE  50F3               	movf	prodl,w,c
  3107  001DE0  6F89               	movwf	strToInt@val& (0+255),b
  3108  001DE2                     l2764:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 168: }
  3112                           ;main.c: 169: val += tmp;
  3113  001DE2  0100               	movlb	0	; () banked
  3114  001DE4  5187               	movf	strToInt@tmp& (0+255),w,b
  3115  001DE6  0100               	movlb	0	; () banked
  3116  001DE8  2789               	addwf	strToInt@val& (0+255),f,b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 170: shift++;
  3120  001DEA  0100               	movlb	0	; () banked
  3121  001DEC  2B88               	incf	strToInt@shift& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 171: str++;
  3125  001DEE  0100               	movlb	0	; () banked
  3126  001DF0  4B85               	infsnz	strToInt@str& (0+255),f,b
  3127  001DF2  2B86               	incf	(strToInt@str+1)& (0+255),f,b
  3128  001DF4                     l2770:
  3129                           
  3130                           ; BSR set to: 0
  3131  001DF4  C085  FFD9         	movff	strToInt@str,fsr2l
  3132  001DF8  C086  FFDA         	movff	strToInt@str+1,fsr2h
  3133  001DFC  50DF               	movf	indf2,w,c
  3134  001DFE  A4D8               	btfss	status,2,c
  3135  001E00  D7DE               	goto	l2758
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 172: }
  3139                           ;main.c: 173: return val;
  3140                           
  3141                           ; BSR set to: 0
  3142  001E02  0100               	movlb	0	; () banked
  3143  001E04  5189               	movf	strToInt@val& (0+255),w,b
  3144  001E06  0012               	return	
  3145  001E08                     __end_of_strToInt:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           intcon2	equ	0xFF1
  3154                           postinc0	equ	0xFEE
  3155                           plusw0	equ	0xFEB
  3156                           fsr0h	equ	0xFEA
  3157                           fsr0l	equ	0xFE9
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           plusw2	equ	0xFDB
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _D_UART_WriteInt *****************
  3168 ;; Defined at:
  3169 ;;		line 285 in file "Drivers/UART_Driver.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  command         2   65[BANK0 ] PTR const unsigned char 
  3172 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3173 ;;		 -> STR_26(2), 
  3174 ;;  data            2   67[BANK0 ] int 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3186 ;;      Params:         0       4       0       0       0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3188 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3189 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3190 ;;Total ram usage:        5 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:   16
  3193 ;; This function calls:
  3194 ;;		_printf
  3195 ;; This function is called by:
  3196 ;;		_handle_message
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text13
  3201  001416                     __ptext13:
  3202                           	opt stack 0
  3203  001416                     _D_UART_WriteInt:
  3204                           	opt stack 13
  3205                           
  3206                           ;UART_Driver.c: 286: printf(startCharacter);
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;incstack = 0
  3210  001416  C040  F091         	movff	_startCharacter,printf@f
  3211  00141A  C041  F092         	movff	_startCharacter+1,printf@f+1
  3212  00141E  0100               	movlb	0	; () banked
  3213  001420  5191               	movf	printf@f& (0+255),w,b
  3214  001422  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3215  001424  A4D8               	btfss	status,2,c
  3216  001426  0E00               	movlw	low (__mediumconst shr (0+16))
  3217  001428  6F93               	movwf	(printf@f+2)& (0+255),b
  3218  00142A  EC15  F007         	call	_printf	;wreg free
  3219                           
  3220                           ;UART_Driver.c: 288: printf(messageCharacter);
  3221  00142E  C0D5  F091         	movff	_messageCharacter,printf@f
  3222  001432  C0D6  F092         	movff	_messageCharacter+1,printf@f+1
  3223  001436  0100               	movlb	0	; () banked
  3224  001438  5191               	movf	printf@f& (0+255),w,b
  3225  00143A  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3226  00143C  A4D8               	btfss	status,2,c
  3227  00143E  0E00               	movlw	low (__mediumconst shr (0+16))
  3228  001440  6F93               	movwf	(printf@f+2)& (0+255),b
  3229  001442  EC15  F007         	call	_printf	;wreg free
  3230                           
  3231                           ;UART_Driver.c: 289: printf(deviceName);
  3232  001446  C0D2  F091         	movff	_deviceName,printf@f
  3233  00144A  C0D3  F092         	movff	_deviceName+1,printf@f+1
  3234  00144E  C0D4  F093         	movff	_deviceName+2,printf@f+2
  3235  001452  EC15  F007         	call	_printf	;wreg free
  3236                           
  3237                           ;UART_Driver.c: 291: printf(":");printf(command);
  3238  001456  0E65               	movlw	low STR_7
  3239  001458  0100               	movlb	0	; () banked
  3240  00145A  6F91               	movwf	printf@f& (0+255),b
  3241  00145C  0E08               	movlw	high STR_7
  3242  00145E  0100               	movlb	0	; () banked
  3243  001460  6F92               	movwf	(printf@f+1)& (0+255),b
  3244  001462  0100               	movlb	0	; () banked
  3245  001464  5191               	movf	printf@f& (0+255),w,b
  3246  001466  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3247  001468  A4D8               	btfss	status,2,c
  3248  00146A  0E00               	movlw	low (__mediumconst shr (0+16))
  3249  00146C  6F93               	movwf	(printf@f+2)& (0+255),b
  3250  00146E  EC15  F007         	call	_printf	;wreg free
  3251  001472  C0A1  F091         	movff	D_UART_WriteInt@command,printf@f
  3252  001476  C0A2  F092         	movff	D_UART_WriteInt@command+1,printf@f+1
  3253  00147A  0100               	movlb	0	; () banked
  3254  00147C  5191               	movf	printf@f& (0+255),w,b
  3255  00147E  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3256  001480  A4D8               	btfss	status,2,c
  3257  001482  0E00               	movlw	low (__mediumconst shr (0+16))
  3258  001484  6F93               	movwf	(printf@f+2)& (0+255),b
  3259  001486  EC15  F007         	call	_printf	;wreg free
  3260                           
  3261                           ;UART_Driver.c: 293: printf(":");printf("%d",data);
  3262  00148A  0E65               	movlw	low STR_7
  3263  00148C  0100               	movlb	0	; () banked
  3264  00148E  6F91               	movwf	printf@f& (0+255),b
  3265  001490  0E08               	movlw	high STR_7
  3266  001492  0100               	movlb	0	; () banked
  3267  001494  6F92               	movwf	(printf@f+1)& (0+255),b
  3268  001496  0100               	movlb	0	; () banked
  3269  001498  5191               	movf	printf@f& (0+255),w,b
  3270  00149A  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3271  00149C  A4D8               	btfss	status,2,c
  3272  00149E  0E00               	movlw	low (__mediumconst shr (0+16))
  3273  0014A0  6F93               	movwf	(printf@f+2)& (0+255),b
  3274  0014A2  EC15  F007         	call	_printf	;wreg free
  3275  0014A6  0E4D               	movlw	low STR_11
  3276  0014A8  0100               	movlb	0	; () banked
  3277  0014AA  6F91               	movwf	printf@f& (0+255),b
  3278  0014AC  0E08               	movlw	high STR_11
  3279  0014AE  0100               	movlb	0	; () banked
  3280  0014B0  6F92               	movwf	(printf@f+1)& (0+255),b
  3281  0014B2  0100               	movlb	0	; () banked
  3282  0014B4  5191               	movf	printf@f& (0+255),w,b
  3283  0014B6  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3284  0014B8  A4D8               	btfss	status,2,c
  3285  0014BA  0E00               	movlw	low (__mediumconst shr (0+16))
  3286  0014BC  6F93               	movwf	(printf@f+2)& (0+255),b
  3287  0014BE  C0A3  F094         	movff	D_UART_WriteInt@data,?_printf+3
  3288  0014C2  C0A4  F095         	movff	D_UART_WriteInt@data+1,?_printf+4
  3289  0014C6  EC15  F007         	call	_printf	;wreg free
  3290                           
  3291                           ;UART_Driver.c: 295: printf(stopCharacter);
  3292  0014CA  C042  F091         	movff	_stopCharacter,printf@f
  3293  0014CE  C043  F092         	movff	_stopCharacter+1,printf@f+1
  3294  0014D2  0100               	movlb	0	; () banked
  3295  0014D4  5191               	movf	printf@f& (0+255),w,b
  3296  0014D6  1192               	iorwf	(printf@f+1)& (0+255),w,b
  3297  0014D8  A4D8               	btfss	status,2,c
  3298  0014DA  0E00               	movlw	low (__mediumconst shr (0+16))
  3299  0014DC  6F93               	movwf	(printf@f+2)& (0+255),b
  3300  0014DE  EC15  F007         	call	_printf	;wreg free
  3301                           
  3302                           ;UART_Driver.c: 296: _delay((unsigned long)((1)*(48000000/4000.0)));
  3303  0014E2  0E10               	movlw	16
  3304  0014E4  0100               	movlb	0	; () banked
  3305  0014E6  6FA5               	movwf	??_D_UART_WriteInt& (0+255),b
  3306  0014E8  0E94               	movlw	148
  3307  0014EA                     u3017:
  3308  0014EA  2EE8               	decfsz	wreg,f,c
  3309  0014EC  D7FE               	bra	u3017
  3310  0014EE  2FA5               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  3311  0014F0  D7FC               	bra	u3017
  3312  0014F2  F000               	nop	
  3313  0014F4  0012               	return		;funcret
  3314  0014F6                     __end_of_D_UART_WriteInt:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           postinc0	equ	0xFEE
  3324                           plusw0	equ	0xFEB
  3325                           fsr0h	equ	0xFEA
  3326                           fsr0l	equ	0xFE9
  3327                           wreg	equ	0xFE8
  3328                           postdec1	equ	0xFE5
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           plusw2	equ	0xFDB
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _printf *****************
  3337 ;; Defined at:
  3338 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  f               3   49[BANK0 ] PTR const unsigned char 
  3341 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3342 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  3343 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  3344 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  3345 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  idx             1   57[BANK0 ] unsigned char 
  3348 ;;  tmpval          4    0        struct .
  3349 ;;  cp              3    0        PTR const unsigned char 
  3350 ;;  val             2   62[BANK0 ] unsigned int 
  3351 ;;  ap              2   58[BANK0 ] PTR void [1]
  3352 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3353 ;;  len             2    0        unsigned int 
  3354 ;;  c               1   64[BANK0 ] char 
  3355 ;;  flag            1   61[BANK0 ] unsigned char 
  3356 ;;  prec            1   60[BANK0 ] char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  2   49[BANK0 ] int 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3366 ;;      Params:         0       5       0       0       0       0       0       0       0
  3367 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3368 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3369 ;;      Totals:         0      16       0       0       0       0       0       0       0
  3370 ;;Total ram usage:       16 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:   15
  3373 ;; This function calls:
  3374 ;;		___lwdiv
  3375 ;;		___lwmod
  3376 ;;		_putch
  3377 ;; This function is called by:
  3378 ;;		_D_UART_Write
  3379 ;;		_D_UART_WriteInt
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text14
  3384  000E2A                     __ptext14:
  3385                           	opt stack 0
  3386  000E2A                     _printf:
  3387                           	opt stack 13
  3388                           
  3389                           ;doprnt.c: 466: va_list ap;
  3390                           ;doprnt.c: 499: signed char c;
  3391                           ;doprnt.c: 506: signed char prec;
  3392                           ;doprnt.c: 508: unsigned char flag;
  3393                           ;doprnt.c: 523: union {
  3394                           ;doprnt.c: 524: unsigned long vd;
  3395                           ;doprnt.c: 525: double integ;
  3396                           ;doprnt.c: 526: } tmpval;
  3397                           ;doprnt.c: 528: unsigned int val;
  3398                           ;doprnt.c: 529: unsigned len;
  3399                           ;doprnt.c: 530: const char * cp;
  3400                           ;doprnt.c: 533: *ap = __va_start();
  3401                           
  3402                           ;incstack = 0
  3403  000E2A  0E94               	movlw	low (?_printf+3)
  3404  000E2C  0100               	movlb	0	; () banked
  3405  000E2E  6F9A               	movwf	printf@ap& (0+255),b
  3406  000E30  0E00               	movlw	high (?_printf+3)
  3407  000E32  0100               	movlb	0	; () banked
  3408  000E34  6F9B               	movwf	(printf@ap+1)& (0+255),b
  3409                           
  3410                           ;doprnt.c: 536: while(c = *f++) {
  3411  000E36  D115               	goto	l2376
  3412  000E38                     l2296:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 538: if(c != '%')
  3416  000E38  0E25               	movlw	37
  3417  000E3A  0100               	movlb	0	; () banked
  3418  000E3C  19A0               	xorwf	printf@c& (0+255),w,b
  3419  000E3E  B4D8               	btfsc	status,2,c
  3420  000E40  D005               	goto	l2300
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;doprnt.c: 540: {
  3424                           ;doprnt.c: 541: (putch(c) );
  3425  000E42  0100               	movlb	0	; () banked
  3426  000E44  51A0               	movf	printf@c& (0+255),w,b
  3427  000E46  ECC7  F010         	call	_putch
  3428                           
  3429                           ;doprnt.c: 542: continue;
  3430  000E4A  D10B               	goto	l2376
  3431  000E4C                     l2300:
  3432                           
  3433                           ;doprnt.c: 543: }
  3434                           ;doprnt.c: 548: flag = 0;
  3435  000E4C  0E00               	movlw	0
  3436  000E4E  0100               	movlb	0	; () banked
  3437  000E50  6F9D               	movwf	printf@flag& (0+255),b
  3438                           
  3439                           ;doprnt.c: 635: switch(c = *f++) {
  3440  000E52  D008               	goto	l2308
  3441  000E54                     l2302:
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;doprnt.c: 721: flag |= 0x80;
  3445  000E54  0100               	movlb	0	; () banked
  3446  000E56  8F9D               	bsf	printf@flag& (0+255),7,b
  3447                           
  3448                           ;doprnt.c: 723: break;
  3449  000E58  D028               	goto	l517
  3450  000E5A                     l2304:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;doprnt.c: 809: (putch(c) );
  3454  000E5A  0100               	movlb	0	; () banked
  3455  000E5C  51A0               	movf	printf@c& (0+255),w,b
  3456  000E5E  ECC7  F010         	call	_putch
  3457                           
  3458                           ;doprnt.c: 810: continue;
  3459  000E62  D0FF               	goto	l2376
  3460  000E64                     l2308:
  3461  000E64  C091  F096         	movff	printf@f,??_printf
  3462  000E68  C092  F097         	movff	printf@f+1,??_printf+1
  3463  000E6C  C093  F098         	movff	printf@f+2,??_printf+2
  3464  000E70  0100               	movlb	0	; () banked
  3465  000E72  2B91               	incf	printf@f& (0+255),f,b
  3466  000E74  0E00               	movlw	0
  3467  000E76  2392               	addwfc	(printf@f+1)& (0+255),f,b
  3468  000E78  2393               	addwfc	(printf@f+2)& (0+255),f,b
  3469  000E7A  C096  FFF6         	movff	??_printf,tblptrl
  3470  000E7E  C097  FFF7         	movff	??_printf+1,tblptrh
  3471  000E82  C098  FFF8         	movff	??_printf+2,tblptru
  3472  000E86  0008               	tblrd		*
  3473  000E88  CFF5 F0A0          	movff	tablat,printf@c
  3474  000E8C  0100               	movlb	0	; () banked
  3475  000E8E  51A0               	movf	printf@c& (0+255),w,b
  3476                           
  3477                           ; Switch size 1, requested type "space"
  3478                           ; Number of cases is 4, Range of values is 0 to 120
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte           13     7 (average)
  3482                           ;	Chosen strategy is simple_byte
  3483  000E90  0A00               	xorlw	0	; case 0
  3484  000E92  B4D8               	btfsc	status,2,c
  3485  000E94  0012               	return	
  3486  000E96  0A64               	xorlw	100	; case 100
  3487  000E98  B4D8               	btfsc	status,2,c
  3488  000E9A  D007               	goto	l517
  3489  000E9C  0A0D               	xorlw	13	; case 105
  3490  000E9E  B4D8               	btfsc	status,2,c
  3491  000EA0  D004               	goto	l517
  3492  000EA2  0A11               	xorlw	17	; case 120
  3493  000EA4  B4D8               	btfsc	status,2,c
  3494  000EA6  D7D6               	goto	l2302
  3495  000EA8  D7D8               	goto	l2304
  3496  000EAA                     l517:
  3497                           
  3498                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3499  000EAA  0100               	movlb	0	; () banked
  3500  000EAC  BF9D               	btfsc	printf@flag& (0+255),7,b
  3501  000EAE  D019               	goto	l2320
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;doprnt.c: 1253: {
  3505                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3506  000EB0  C09A  FFD9         	movff	printf@ap,fsr2l
  3507  000EB4  C09B  FFDA         	movff	printf@ap+1,fsr2h
  3508  000EB8  CFDE F09E          	movff	postinc2,printf@val
  3509  000EBC  CFDD F09F          	movff	postdec2,printf@val+1
  3510                           
  3511                           ; BSR set to: 0
  3512  000EC0  0E02               	movlw	2
  3513  000EC2  0100               	movlb	0	; () banked
  3514  000EC4  279A               	addwf	printf@ap& (0+255),f,b
  3515  000EC6  0E00               	movlw	0
  3516  000EC8  239B               	addwfc	(printf@ap+1)& (0+255),f,b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1261: if((int)val < 0) {
  3520  000ECA  0100               	movlb	0	; () banked
  3521  000ECC  AF9F               	btfss	(printf@val+1)& (0+255),7,b
  3522  000ECE  D053               	goto	l2354
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1262: flag |= 0x03;
  3526  000ED0  0E03               	movlw	3
  3527  000ED2  0100               	movlb	0	; () banked
  3528  000ED4  139D               	iorwf	printf@flag& (0+255),f,b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;doprnt.c: 1263: val = -val;
  3532  000ED6  0100               	movlb	0	; () banked
  3533  000ED8  6D9E               	negf	printf@val& (0+255),b
  3534  000EDA  1F9F               	comf	(printf@val+1)& (0+255),f,b
  3535  000EDC  B0D8               	btfsc	status,0,c
  3536  000EDE  2B9F               	incf	(printf@val+1)& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;doprnt.c: 1264: }
  3540                           ;doprnt.c: 1266: }
  3541  000EE0  D04A               	goto	l2354
  3542  000EE2                     l2320:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;doprnt.c: 1268: else
  3546                           ;doprnt.c: 1273: {
  3547                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3548  000EE2  C09A  FFD9         	movff	printf@ap,fsr2l
  3549  000EE6  C09B  FFDA         	movff	printf@ap+1,fsr2h
  3550  000EEA  CFDE F09E          	movff	postinc2,printf@val
  3551  000EEE  CFDD F09F          	movff	postdec2,printf@val+1
  3552                           
  3553                           ; BSR set to: 0
  3554  000EF2  0E02               	movlw	2
  3555  000EF4  0100               	movlb	0	; () banked
  3556  000EF6  279A               	addwf	printf@ap& (0+255),f,b
  3557  000EF8  0E00               	movlw	0
  3558  000EFA  239B               	addwfc	(printf@ap+1)& (0+255),f,b
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;doprnt.c: 1287: }
  3562                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3563  000EFC  D03C               	goto	l2354
  3564  000EFE                     l2324:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3568  000EFE  0E01               	movlw	1
  3569  000F00  0100               	movlb	0	; () banked
  3570  000F02  6FA0               	movwf	printf@c& (0+255),b
  3571  000F04                     l2326:
  3572                           
  3573                           ; BSR set to: 0
  3574  000F04  0E05               	movlw	5
  3575  000F06  0100               	movlb	0	; () banked
  3576  000F08  19A0               	xorwf	printf@c& (0+255),w,b
  3577  000F0A  B4D8               	btfsc	status,2,c
  3578  000F0C  D03D               	goto	l2356
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1306: if(val < dpowers[c])
  3582                           
  3583                           ; BSR set to: 0
  3584                           
  3585                           ; BSR set to: 0
  3586  000F0E  0100               	movlb	0	; () banked
  3587  000F10  51A0               	movf	printf@c& (0+255),w,b
  3588  000F12  0D02               	mullw	2
  3589  000F14  0E01               	movlw	low _dpowers
  3590  000F16  24F3               	addwf	prodl,w,c
  3591  000F18  6EF6               	movwf	tblptrl,c
  3592  000F1A  0E08               	movlw	high _dpowers
  3593  000F1C  20F4               	addwfc	prodh,w,c
  3594  000F1E  6EF7               	movwf	tblptrh,c
  3595  000F20                     	if	0	;There are less than 3 active tblptr bytes
  3596  000F20                     	endif
  3597  000F20  0009               	tblrd		*+
  3598  000F22  50F5               	movf	tablat,w,c
  3599  000F24  0100               	movlb	0	; () banked
  3600  000F26  5D9E               	subwf	printf@val& (0+255),w,b
  3601  000F28  0009               	tblrd		*+
  3602  000F2A  50F5               	movf	tablat,w,c
  3603  000F2C  0100               	movlb	0	; () banked
  3604  000F2E  599F               	subwfb	(printf@val+1)& (0+255),w,b
  3605  000F30  A0D8               	btfss	status,0,c
  3606  000F32  D02A               	goto	l2356
  3607                           
  3608                           ; BSR set to: 0
  3609                           
  3610                           ; BSR set to: 0
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 1307: break;
  3614  000F34  0100               	movlb	0	; () banked
  3615  000F36  2BA0               	incf	printf@c& (0+255),f,b
  3616  000F38  D7E5               	goto	l2326
  3617  000F3A                     l2338:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3621  000F3A  0E01               	movlw	1
  3622  000F3C  0100               	movlb	0	; () banked
  3623  000F3E  6FA0               	movwf	printf@c& (0+255),b
  3624  000F40                     l2340:
  3625                           
  3626                           ; BSR set to: 0
  3627  000F40  0E04               	movlw	4
  3628  000F42  0100               	movlb	0	; () banked
  3629  000F44  19A0               	xorwf	printf@c& (0+255),w,b
  3630  000F46  B4D8               	btfsc	status,2,c
  3631  000F48  D01F               	goto	l2356
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3635                           
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  000F4A  0100               	movlb	0	; () banked
  3640  000F4C  51A0               	movf	printf@c& (0+255),w,b
  3641  000F4E  0D02               	mullw	2
  3642  000F50  0E0B               	movlw	low _hexpowers
  3643  000F52  24F3               	addwf	prodl,w,c
  3644  000F54  6EF6               	movwf	tblptrl,c
  3645  000F56  0E08               	movlw	high _hexpowers
  3646  000F58  20F4               	addwfc	prodh,w,c
  3647  000F5A  6EF7               	movwf	tblptrh,c
  3648  000F5C                     	if	0	;There are less than 3 active tblptr bytes
  3649  000F5C                     	endif
  3650  000F5C  0009               	tblrd		*+
  3651  000F5E  50F5               	movf	tablat,w,c
  3652  000F60  0100               	movlb	0	; () banked
  3653  000F62  5D9E               	subwf	printf@val& (0+255),w,b
  3654  000F64  0009               	tblrd		*+
  3655  000F66  50F5               	movf	tablat,w,c
  3656  000F68  0100               	movlb	0	; () banked
  3657  000F6A  599F               	subwfb	(printf@val+1)& (0+255),w,b
  3658  000F6C  A0D8               	btfss	status,0,c
  3659  000F6E  D00C               	goto	l2356
  3660                           
  3661                           ; BSR set to: 0
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 1318: break;
  3667  000F70  0100               	movlb	0	; () banked
  3668  000F72  2BA0               	incf	printf@c& (0+255),f,b
  3669  000F74  D7E5               	goto	l2340
  3670  000F76                     l2354:
  3671                           
  3672                           ; BSR set to: 0
  3673  000F76  0100               	movlb	0	; () banked
  3674  000F78  519D               	movf	printf@flag& (0+255),w,b
  3675  000F7A  0B80               	andlw	128
  3676                           
  3677                           ; Switch size 1, requested type "space"
  3678                           ; Number of cases is 2, Range of values is 0 to 128
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte            7     4 (average)
  3682                           ;	Chosen strategy is simple_byte
  3683  000F7C  0A00               	xorlw	0	; case 0
  3684  000F7E  B4D8               	btfsc	status,2,c
  3685  000F80  D7BE               	goto	l2324
  3686  000F82  0A80               	xorlw	128	; case 128
  3687  000F84  B4D8               	btfsc	status,2,c
  3688  000F86  D7D9               	goto	l2338
  3689  000F88                     l2356:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 1422: {
  3693                           ;doprnt.c: 1438: if(flag & 0x03)
  3694  000F88  C09D  F096         	movff	printf@flag,??_printf
  3695  000F8C  0E03               	movlw	3
  3696  000F8E  0100               	movlb	0	; () banked
  3697  000F90  1796               	andwf	??_printf& (0+255),f,b
  3698  000F92  B4D8               	btfsc	status,2,c
  3699  000F94  D003               	goto	l2360
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 1439: (putch('-') );
  3703  000F96  0E2D               	movlw	45
  3704  000F98  ECC7  F010         	call	_putch
  3705  000F9C                     l2360:
  3706                           
  3707                           ;doprnt.c: 1469: }
  3708                           ;doprnt.c: 1472: prec = c;
  3709  000F9C  C0A0  F09C         	movff	printf@c,printf@prec
  3710                           
  3711                           ;doprnt.c: 1474: while(prec--) {
  3712  000FA0  D05A               	goto	l2374
  3713  000FA2                     l2362:
  3714                           
  3715                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3716  000FA2  0100               	movlb	0	; () banked
  3717  000FA4  519C               	movf	printf@prec& (0+255),w,b
  3718  000FA6  0D02               	mullw	2
  3719  000FA8  0E01               	movlw	low _dpowers
  3720  000FAA  24F3               	addwf	prodl,w,c
  3721  000FAC  6EF6               	movwf	tblptrl,c
  3722  000FAE  0E08               	movlw	high _dpowers
  3723  000FB0  20F4               	addwfc	prodh,w,c
  3724  000FB2  6EF7               	movwf	tblptrh,c
  3725  000FB4                     	if	0	;There are less than 3 active tblptr bytes
  3726  000FB4                     	endif
  3727  000FB4  0009               	tblrd		*+
  3728  000FB6  CFF5 F087          	movff	tablat,___lwdiv@divisor
  3729  000FBA  000A               	tblrd		*-
  3730  000FBC  CFF5 F088          	movff	tablat,___lwdiv@divisor+1
  3731  000FC0  C09E  F085         	movff	printf@val,___lwdiv@dividend
  3732  000FC4  C09F  F086         	movff	printf@val+1,___lwdiv@dividend+1
  3733  000FC8  EC93  F00D         	call	___lwdiv	;wreg free
  3734  000FCC  C085  F08C         	movff	?___lwdiv,___lwmod@dividend
  3735  000FD0  C086  F08D         	movff	?___lwdiv+1,___lwmod@dividend+1
  3736  000FD4  0E00               	movlw	0
  3737  000FD6  0100               	movlb	0	; () banked
  3738  000FD8  6F8F               	movwf	(___lwmod@divisor+1)& (0+255),b
  3739  000FDA  0E0A               	movlw	10
  3740  000FDC  6F8E               	movwf	___lwmod@divisor& (0+255),b
  3741  000FDE  ECA4  F00E         	call	___lwmod	;wreg free
  3742  000FE2  0100               	movlb	0	; () banked
  3743  000FE4  518C               	movf	?___lwmod& (0+255),w,b
  3744  000FE6  0F30               	addlw	48
  3745  000FE8  0100               	movlb	0	; () banked
  3746  000FEA  6FA0               	movwf	printf@c& (0+255),b
  3747                           
  3748                           ;doprnt.c: 1491: break;
  3749  000FEC  D030               	goto	l2372
  3750  000FEE                     l2364:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;doprnt.c: 1499: {
  3754                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3755  000FEE  C09E  F085         	movff	printf@val,___lwdiv@dividend
  3756  000FF2  C09F  F086         	movff	printf@val+1,___lwdiv@dividend+1
  3757  000FF6  0100               	movlb	0	; () banked
  3758  000FF8  519C               	movf	printf@prec& (0+255),w,b
  3759  000FFA  0D02               	mullw	2
  3760  000FFC  0E0B               	movlw	low _hexpowers
  3761  000FFE  24F3               	addwf	prodl,w,c
  3762  001000  6EF6               	movwf	tblptrl,c
  3763  001002  0E08               	movlw	high _hexpowers
  3764  001004  20F4               	addwfc	prodh,w,c
  3765  001006  6EF7               	movwf	tblptrh,c
  3766  001008                     	if	0	;There are less than 3 active tblptr bytes
  3767  001008                     	endif
  3768  001008  0009               	tblrd		*+
  3769  00100A  CFF5 F087          	movff	tablat,___lwdiv@divisor
  3770  00100E  000A               	tblrd		*-
  3771  001010  CFF5 F088          	movff	tablat,___lwdiv@divisor+1
  3772  001014  EC93  F00D         	call	___lwdiv	;wreg free
  3773  001018  0100               	movlb	0	; () banked
  3774  00101A  5185               	movf	?___lwdiv& (0+255),w,b
  3775  00101C  0B0F               	andlw	15
  3776  00101E  0100               	movlb	0	; () banked
  3777  001020  6F99               	movwf	printf@idx& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3781  001022  0100               	movlb	0	; () banked
  3782  001024  5199               	movf	printf@idx& (0+255),w,b
  3783  001026  0D01               	mullw	1
  3784  001028  0E13               	movlw	low STR_33
  3785  00102A  24F3               	addwf	prodl,w,c
  3786  00102C  6EF6               	movwf	tblptrl,c
  3787  00102E  0E08               	movlw	high STR_33
  3788  001030  20F4               	addwfc	prodh,w,c
  3789  001032  6EF7               	movwf	tblptrh,c
  3790  001034                     	if	0	;There are less than 3 active tblptr bytes
  3791  001034                     	endif
  3792  001034  0008               	tblrd		*
  3793  001036  CFF5 F0A0          	movff	tablat,printf@c
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1523: }
  3797                           
  3798                           ;doprnt.c: 1508: }
  3799                           ;doprnt.c: 1510: break;
  3800  00103A  D009               	goto	l2372
  3801  00103C                     l2370:
  3802  00103C  0100               	movlb	0	; () banked
  3803  00103E  519D               	movf	printf@flag& (0+255),w,b
  3804  001040  0B80               	andlw	128
  3805                           
  3806                           ; Switch size 1, requested type "space"
  3807                           ; Number of cases is 2, Range of values is 0 to 128
  3808                           ; switch strategies available:
  3809                           ; Name         Instructions Cycles
  3810                           ; simple_byte            7     4 (average)
  3811                           ;	Chosen strategy is simple_byte
  3812  001042  0A00               	xorlw	0	; case 0
  3813  001044  B4D8               	btfsc	status,2,c
  3814  001046  D7AD               	goto	l2362
  3815  001048  0A80               	xorlw	128	; case 128
  3816  00104A  B4D8               	btfsc	status,2,c
  3817  00104C  D7D0               	goto	l2364
  3818  00104E                     l2372:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1524: (putch(c) );
  3822  00104E  0100               	movlb	0	; () banked
  3823  001050  51A0               	movf	printf@c& (0+255),w,b
  3824  001052  ECC7  F010         	call	_putch
  3825  001056                     l2374:
  3826  001056  0100               	movlb	0	; () banked
  3827  001058  079C               	decf	printf@prec& (0+255),f,b
  3828  00105A  0100               	movlb	0	; () banked
  3829  00105C  299C               	incf	printf@prec& (0+255),w,b
  3830  00105E  A4D8               	btfss	status,2,c
  3831  001060  D7ED               	goto	l2370
  3832  001062                     l2376:
  3833  001062  C091  F096         	movff	printf@f,??_printf
  3834  001066  C092  F097         	movff	printf@f+1,??_printf+1
  3835  00106A  C093  F098         	movff	printf@f+2,??_printf+2
  3836  00106E  0100               	movlb	0	; () banked
  3837  001070  2B91               	incf	printf@f& (0+255),f,b
  3838  001072  0E00               	movlw	0
  3839  001074  2392               	addwfc	(printf@f+1)& (0+255),f,b
  3840  001076  2393               	addwfc	(printf@f+2)& (0+255),f,b
  3841  001078  C096  FFF6         	movff	??_printf,tblptrl
  3842  00107C  C097  FFF7         	movff	??_printf+1,tblptrh
  3843  001080  C098  FFF8         	movff	??_printf+2,tblptru
  3844  001084  0008               	tblrd		*
  3845  001086  CFF5 F0A0          	movff	tablat,printf@c
  3846  00108A  0100               	movlb	0	; () banked
  3847  00108C  51A0               	movf	printf@c& (0+255),w,b
  3848  00108E  B4D8               	btfsc	status,2,c
  3849  001090  0012               	return	
  3850  001092  D6D2               	goto	l2296
  3851  001094                     __end_of_printf:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           intcon2	equ	0xFF1
  3861                           postinc0	equ	0xFEE
  3862                           plusw0	equ	0xFEB
  3863                           fsr0h	equ	0xFEA
  3864                           fsr0l	equ	0xFE9
  3865                           wreg	equ	0xFE8
  3866                           postdec1	equ	0xFE5
  3867                           fsr1l	equ	0xFE1
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           plusw2	equ	0xFDB
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _putch *****************
  3877 ;; Defined at:
  3878 ;;		line 353 in file "Drivers/UART_Driver.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  data            1    wreg     unsigned char 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  data            1   39[BANK0 ] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0
  3893 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3895 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3896 ;;Total ram usage:        1 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:   14
  3899 ;; This function calls:
  3900 ;;		_writeByte
  3901 ;; This function is called by:
  3902 ;;		_printf
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text15
  3907  00218E                     __ptext15:
  3908                           	opt stack 0
  3909  00218E                     _putch:
  3910                           	opt stack 13
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914                           ;putch@data stored from wreg
  3915  00218E  0100               	movlb	0	; () banked
  3916  002190  6F87               	movwf	putch@data& (0+255),b
  3917                           
  3918                           ;UART_Driver.c: 354: writeByte(data);
  3919  002192  0100               	movlb	0	; () banked
  3920  002194  5187               	movf	putch@data& (0+255),w,b
  3921  002196  ECAD  F010         	call	_writeByte
  3922  00219A  0012               	return		;funcret
  3923  00219C                     __end_of_putch:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           postinc0	equ	0xFEE
  3934                           plusw0	equ	0xFEB
  3935                           fsr0h	equ	0xFEA
  3936                           fsr0l	equ	0xFE9
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           fsr1l	equ	0xFE1
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           plusw2	equ	0xFDB
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _writeByte *****************
  3949 ;; Defined at:
  3950 ;;		line 84 in file "Drivers/UART_Driver.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  data            1    wreg     unsigned char 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  data            1   38[BANK0 ] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0
  3965 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3967 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3968 ;;Total ram usage:        1 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:   13
  3971 ;; This function calls:
  3972 ;;		_D_UART_Enable
  3973 ;; This function is called by:
  3974 ;;		_putch
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text16
  3979  00215A                     __ptext16:
  3980                           	opt stack 0
  3981  00215A                     _writeByte:
  3982                           	opt stack 13
  3983                           
  3984                           ;incstack = 0
  3985                           ;writeByte@data stored from wreg
  3986  00215A  0100               	movlb	0	; () banked
  3987  00215C  6F86               	movwf	writeByte@data& (0+255),b
  3988                           
  3989                           ;UART_Driver.c: 85: D_UART_Enable(1);
  3990  00215E  0E01               	movlw	1
  3991  002160  EC3A  F010         	call	_D_UART_Enable
  3992  002164                     l107:
  3993  002164  A2AC               	btfss	4012,1,c	;volatile
  3994  002166  D7FE               	goto	l107
  3995                           
  3996                           ;UART_Driver.c: 87: TXREG = data;
  3997  002168  C086  FFAD         	movff	writeByte@data,4013	;volatile
  3998  00216C  0012               	return		;funcret
  3999  00216E                     __end_of_writeByte:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           intcon2	equ	0xFF1
  4009                           postinc0	equ	0xFEE
  4010                           plusw0	equ	0xFEB
  4011                           fsr0h	equ	0xFEA
  4012                           fsr0l	equ	0xFE9
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1l	equ	0xFE1
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           plusw2	equ	0xFDB
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _D_UART_Enable *****************
  4025 ;; Defined at:
  4026 ;;		line 319 in file "Drivers/UART_Driver.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  enable          1    wreg     unsigned char 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  enable          1   37[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0
  4041 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4043 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4044 ;;Total ram usage:        1 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:   12
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_writeByte
  4051 ;;		_D_UART_Init
  4052 ;;		_initialize
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text17
  4057  002074                     __ptext17:
  4058                           	opt stack 0
  4059  002074                     _D_UART_Enable:
  4060                           	opt stack 13
  4061                           
  4062                           ;incstack = 0
  4063                           ;D_UART_Enable@enable stored from wreg
  4064  002074  0100               	movlb	0	; () banked
  4065  002076  6F85               	movwf	D_UART_Enable@enable& (0+255),b
  4066                           
  4067                           ;UART_Driver.c: 320: if(enable) {
  4068  002078  0100               	movlb	0	; () banked
  4069  00207A  5185               	movf	D_UART_Enable@enable& (0+255),w,b
  4070  00207C  0100               	movlb	0	; () banked
  4071  00207E  B4D8               	btfsc	status,2,c
  4072  002080  D006               	goto	l185
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  4076  002082  9C94               	bcf	3988,6,c	;volatile
  4077                           
  4078                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  4079  002084  8E94               	bsf	3988,7,c	;volatile
  4080                           
  4081                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  4082  002086  8AAC               	bsf	4012,5,c	;volatile
  4083                           
  4084                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  4085  002088  88AB               	bsf	4011,4,c	;volatile
  4086                           
  4087                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  4088  00208A  8EAB               	bsf	4011,7,c	;volatile
  4089                           
  4090                           ;UART_Driver.c: 326: } else {
  4091  00208C  0012               	return	
  4092  00208E                     l185:
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  4096  00208E  9C94               	bcf	3988,6,c	;volatile
  4097                           
  4098                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  4099  002090  9E94               	bcf	3988,7,c	;volatile
  4100                           
  4101                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  4102  002092  9AAC               	bcf	4012,5,c	;volatile
  4103                           
  4104                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  4105  002094  98AB               	bcf	4011,4,c	;volatile
  4106                           
  4107                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  4108  002096  9EAB               	bcf	4011,7,c	;volatile
  4109  002098  0012               	return	
  4110  00209A                     __end_of_D_UART_Enable:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon2	equ	0xFF1
  4120                           postinc0	equ	0xFEE
  4121                           plusw0	equ	0xFEB
  4122                           fsr0h	equ	0xFEA
  4123                           fsr0l	equ	0xFE9
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           plusw2	equ	0xFDB
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function ___lwmod *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  dividend        2   44[BANK0 ] unsigned int 
  4140 ;;  divisor         2   46[BANK0 ] unsigned int 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  counter         1   48[BANK0 ] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  2   44[BANK0 ] unsigned int 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4152 ;;      Params:         0       4       0       0       0       0       0       0       0
  4153 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4155 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        5 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:   12
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_printf
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text18
  4167  001D48                     __ptext18:
  4168                           	opt stack 0
  4169  001D48                     ___lwmod:
  4170                           	opt stack 15
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;incstack = 0
  4174  001D48  0100               	movlb	0	; () banked
  4175  001D4A  518E               	movf	___lwmod@divisor& (0+255),w,b
  4176  001D4C  0100               	movlb	0	; () banked
  4177  001D4E  118F               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4178  001D50  B4D8               	btfsc	status,2,c
  4179  001D52  D026               	goto	l955
  4180                           
  4181                           ; BSR set to: 0
  4182  001D54  0E01               	movlw	1
  4183  001D56  0100               	movlb	0	; () banked
  4184  001D58  6F90               	movwf	___lwmod@counter& (0+255),b
  4185  001D5A  D006               	goto	l2200
  4186  001D5C                     l2198:
  4187                           
  4188                           ; BSR set to: 0
  4189  001D5C  0100               	movlb	0	; () banked
  4190  001D5E  90D8               	bcf	status,0,c
  4191  001D60  378E               	rlcf	___lwmod@divisor& (0+255),f,b
  4192  001D62  378F               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4193  001D64  0100               	movlb	0	; () banked
  4194  001D66  2B90               	incf	___lwmod@counter& (0+255),f,b
  4195  001D68                     l2200:
  4196                           
  4197                           ; BSR set to: 0
  4198  001D68  0100               	movlb	0	; () banked
  4199  001D6A  AF8F               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4200  001D6C  D7F7               	goto	l2198
  4201  001D6E                     l2202:
  4202                           
  4203                           ; BSR set to: 0
  4204  001D6E  0100               	movlb	0	; () banked
  4205  001D70  518E               	movf	___lwmod@divisor& (0+255),w,b
  4206  001D72  0100               	movlb	0	; () banked
  4207  001D74  5D8C               	subwf	___lwmod@dividend& (0+255),w,b
  4208  001D76  0100               	movlb	0	; () banked
  4209  001D78  518F               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4210  001D7A  0100               	movlb	0	; () banked
  4211  001D7C  598D               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4212  001D7E  A0D8               	btfss	status,0,c
  4213  001D80  D008               	goto	l2206
  4214                           
  4215                           ; BSR set to: 0
  4216  001D82  0100               	movlb	0	; () banked
  4217  001D84  518E               	movf	___lwmod@divisor& (0+255),w,b
  4218  001D86  0100               	movlb	0	; () banked
  4219  001D88  5F8C               	subwf	___lwmod@dividend& (0+255),f,b
  4220  001D8A  0100               	movlb	0	; () banked
  4221  001D8C  518F               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4222  001D8E  0100               	movlb	0	; () banked
  4223  001D90  5B8D               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4224  001D92                     l2206:
  4225                           
  4226                           ; BSR set to: 0
  4227  001D92  0100               	movlb	0	; () banked
  4228  001D94  90D8               	bcf	status,0,c
  4229  001D96  338F               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4230  001D98  338E               	rrcf	___lwmod@divisor& (0+255),f,b
  4231                           
  4232                           ; BSR set to: 0
  4233  001D9A  0100               	movlb	0	; () banked
  4234  001D9C  2F90               	decfsz	___lwmod@counter& (0+255),f,b
  4235  001D9E  D7E7               	goto	l2202
  4236  001DA0                     l955:
  4237                           
  4238                           ; BSR set to: 0
  4239  001DA0  C08C  F08C         	movff	___lwmod@dividend,?___lwmod
  4240  001DA4  C08D  F08D         	movff	___lwmod@dividend+1,?___lwmod+1
  4241                           
  4242                           ; BSR set to: 0
  4243  001DA8  0012               	return		;funcret
  4244  001DAA                     __end_of___lwmod:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           intcon2	equ	0xFF1
  4254                           postinc0	equ	0xFEE
  4255                           plusw0	equ	0xFEB
  4256                           fsr0h	equ	0xFEA
  4257                           fsr0l	equ	0xFE9
  4258                           wreg	equ	0xFE8
  4259                           postdec1	equ	0xFE5
  4260                           fsr1l	equ	0xFE1
  4261                           indf2	equ	0xFDF
  4262                           postinc2	equ	0xFDE
  4263                           postdec2	equ	0xFDD
  4264                           plusw2	equ	0xFDB
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function ___lwdiv *****************
  4270 ;; Defined at:
  4271 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  dividend        2   37[BANK0 ] unsigned int 
  4274 ;;  divisor         2   39[BANK0 ] unsigned int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  quotient        2   41[BANK0 ] unsigned int 
  4277 ;;  counter         1   43[BANK0 ] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  2   37[BANK0 ] unsigned int 
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4287 ;;      Params:         0       4       0       0       0       0       0       0       0
  4288 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4290 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4291 ;;Total ram usage:        7 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:   12
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_printf
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text19
  4302  001B26                     __ptext19:
  4303                           	opt stack 0
  4304  001B26                     ___lwdiv:
  4305                           	opt stack 15
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;incstack = 0
  4309  001B26  0E00               	movlw	0
  4310  001B28  0100               	movlb	0	; () banked
  4311  001B2A  6F8A               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4312  001B2C  0E00               	movlw	0
  4313  001B2E  6F89               	movwf	___lwdiv@quotient& (0+255),b
  4314                           
  4315                           ; BSR set to: 0
  4316  001B30  0100               	movlb	0	; () banked
  4317  001B32  5187               	movf	___lwdiv@divisor& (0+255),w,b
  4318  001B34  0100               	movlb	0	; () banked
  4319  001B36  1188               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4320  001B38  B4D8               	btfsc	status,2,c
  4321  001B3A  D02C               	goto	l945
  4322                           
  4323                           ; BSR set to: 0
  4324  001B3C  0E01               	movlw	1
  4325  001B3E  0100               	movlb	0	; () banked
  4326  001B40  6F8B               	movwf	___lwdiv@counter& (0+255),b
  4327  001B42  D006               	goto	l2180
  4328  001B44                     l2178:
  4329                           
  4330                           ; BSR set to: 0
  4331  001B44  0100               	movlb	0	; () banked
  4332  001B46  90D8               	bcf	status,0,c
  4333  001B48  3787               	rlcf	___lwdiv@divisor& (0+255),f,b
  4334  001B4A  3788               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4335  001B4C  0100               	movlb	0	; () banked
  4336  001B4E  2B8B               	incf	___lwdiv@counter& (0+255),f,b
  4337  001B50                     l2180:
  4338                           
  4339                           ; BSR set to: 0
  4340  001B50  0100               	movlb	0	; () banked
  4341  001B52  AF88               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4342  001B54  D7F7               	goto	l2178
  4343  001B56                     l2182:
  4344                           
  4345                           ; BSR set to: 0
  4346  001B56  0100               	movlb	0	; () banked
  4347  001B58  90D8               	bcf	status,0,c
  4348  001B5A  3789               	rlcf	___lwdiv@quotient& (0+255),f,b
  4349  001B5C  378A               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4350                           
  4351                           ; BSR set to: 0
  4352  001B5E  0100               	movlb	0	; () banked
  4353  001B60  5187               	movf	___lwdiv@divisor& (0+255),w,b
  4354  001B62  0100               	movlb	0	; () banked
  4355  001B64  5D85               	subwf	___lwdiv@dividend& (0+255),w,b
  4356  001B66  0100               	movlb	0	; () banked
  4357  001B68  5188               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4358  001B6A  0100               	movlb	0	; () banked
  4359  001B6C  5986               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4360  001B6E  A0D8               	btfss	status,0,c
  4361  001B70  D00A               	goto	l2190
  4362                           
  4363                           ; BSR set to: 0
  4364  001B72  0100               	movlb	0	; () banked
  4365  001B74  5187               	movf	___lwdiv@divisor& (0+255),w,b
  4366  001B76  0100               	movlb	0	; () banked
  4367  001B78  5F85               	subwf	___lwdiv@dividend& (0+255),f,b
  4368  001B7A  0100               	movlb	0	; () banked
  4369  001B7C  5188               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4370  001B7E  0100               	movlb	0	; () banked
  4371  001B80  5B86               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4372                           
  4373                           ; BSR set to: 0
  4374  001B82  0100               	movlb	0	; () banked
  4375  001B84  8189               	bsf	___lwdiv@quotient& (0+255),0,b
  4376  001B86                     l2190:
  4377                           
  4378                           ; BSR set to: 0
  4379  001B86  0100               	movlb	0	; () banked
  4380  001B88  90D8               	bcf	status,0,c
  4381  001B8A  3388               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4382  001B8C  3387               	rrcf	___lwdiv@divisor& (0+255),f,b
  4383                           
  4384                           ; BSR set to: 0
  4385  001B8E  0100               	movlb	0	; () banked
  4386  001B90  2F8B               	decfsz	___lwdiv@counter& (0+255),f,b
  4387  001B92  D7E1               	goto	l2182
  4388  001B94                     l945:
  4389                           
  4390                           ; BSR set to: 0
  4391  001B94  C089  F085         	movff	___lwdiv@quotient,?___lwdiv
  4392  001B98  C08A  F086         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4393                           
  4394                           ; BSR set to: 0
  4395  001B9C  0012               	return		;funcret
  4396  001B9E                     __end_of___lwdiv:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           postinc0	equ	0xFEE
  4407                           plusw0	equ	0xFEB
  4408                           fsr0h	equ	0xFEA
  4409                           fsr0l	equ	0xFE9
  4410                           wreg	equ	0xFE8
  4411                           postdec1	equ	0xFE5
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           plusw2	equ	0xFDB
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _D_PWM_Strobe *****************
  4422 ;; Defined at:
  4423 ;;		line 364 in file "Drivers/PWM_Driver.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4440 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4441 ;;Total ram usage:        0 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:   12
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		_handle_message
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text20
  4452  0021C4                     __ptext20:
  4453                           	opt stack 0
  4454  0021C4                     _D_PWM_Strobe:
  4455                           	opt stack 17
  4456                           
  4457                           ;PWM_Driver.c: 365: state = Strobe;
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;incstack = 0
  4461  0021C4  0E02               	movlw	2
  4462  0021C6  6E2F               	movwf	_state,c
  4463  0021C8  0012               	return		;funcret
  4464  0021CA                     __end_of_D_PWM_Strobe:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           intcon2	equ	0xFF1
  4474                           postinc0	equ	0xFEE
  4475                           plusw0	equ	0xFEB
  4476                           fsr0h	equ	0xFEA
  4477                           fsr0l	equ	0xFE9
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           plusw2	equ	0xFDB
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _D_PWM_Smooth *****************
  4490 ;; Defined at:
  4491 ;;		line 372 in file "Drivers/PWM_Driver.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4509 ;;Total ram usage:        0 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:   12
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_handle_message
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text21
  4520  0021CA                     __ptext21:
  4521                           	opt stack 0
  4522  0021CA                     _D_PWM_Smooth:
  4523                           	opt stack 17
  4524                           
  4525                           ;PWM_Driver.c: 373: state = Smooth;
  4526                           
  4527                           ;incstack = 0
  4528  0021CA  0E04               	movlw	4
  4529  0021CC  6E2F               	movwf	_state,c
  4530  0021CE  0012               	return		;funcret
  4531  0021D0                     __end_of_D_PWM_Smooth:
  4532                           	opt stack 0
  4533                           tblptru	equ	0xFF8
  4534                           tblptrh	equ	0xFF7
  4535                           tblptrl	equ	0xFF6
  4536                           tablat	equ	0xFF5
  4537                           prodh	equ	0xFF4
  4538                           prodl	equ	0xFF3
  4539                           intcon	equ	0xFF2
  4540                           intcon2	equ	0xFF1
  4541                           postinc0	equ	0xFEE
  4542                           plusw0	equ	0xFEB
  4543                           fsr0h	equ	0xFEA
  4544                           fsr0l	equ	0xFE9
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1l	equ	0xFE1
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           plusw2	equ	0xFDB
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _D_PWM_SetRGB *****************
  4557 ;; Defined at:
  4558 ;;		line 323 in file "Drivers/PWM_Driver.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  r               1    wreg     unsigned char 
  4561 ;;  g               1   42[BANK0 ] unsigned char 
  4562 ;;  b               1   43[BANK0 ] unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  r               1   44[BANK0 ] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4574 ;;      Params:         0       2       0       0       0       0       0       0       0
  4575 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4577 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4578 ;;Total ram usage:        3 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:   14
  4581 ;; This function calls:
  4582 ;;		_setRGB
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;;		_handle_message
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text22
  4590  002140                     __ptext22:
  4591                           	opt stack 0
  4592  002140                     _D_PWM_SetRGB:
  4593                           	opt stack 15
  4594                           
  4595                           ;incstack = 0
  4596                           ;D_PWM_SetRGB@r stored from wreg
  4597  002140  0100               	movlb	0	; () banked
  4598  002142  6F8C               	movwf	D_PWM_SetRGB@r& (0+255),b
  4599                           
  4600                           ;PWM_Driver.c: 324: setRGB(r, g, b);
  4601  002144  C08A  F087         	movff	D_PWM_SetRGB@g,setRGB@g
  4602  002148  C08B  F088         	movff	D_PWM_SetRGB@b,setRGB@b
  4603  00214C  0100               	movlb	0	; () banked
  4604  00214E  518C               	movf	D_PWM_SetRGB@r& (0+255),w,b
  4605  002150  EC4D  F010         	call	_setRGB
  4606                           
  4607                           ;PWM_Driver.c: 325: state = Color;
  4608  002154  0E00               	movlw	0
  4609  002156  6E2F               	movwf	_state,c
  4610  002158  0012               	return		;funcret
  4611  00215A                     __end_of_D_PWM_SetRGB:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon2	equ	0xFF1
  4621                           postinc0	equ	0xFEE
  4622                           plusw0	equ	0xFEB
  4623                           fsr0h	equ	0xFEA
  4624                           fsr0l	equ	0xFE9
  4625                           wreg	equ	0xFE8
  4626                           postdec1	equ	0xFE5
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _setRGB *****************
  4637 ;; Defined at:
  4638 ;;		line 42 in file "Drivers/PWM_Driver.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  r               1    wreg     unsigned char 
  4641 ;;  g               1   39[BANK0 ] unsigned char 
  4642 ;;  b               1   40[BANK0 ] unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  r               1   41[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4654 ;;      Params:         0       2       0       0       0       0       0       0       0
  4655 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4657 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4658 ;;Total ram usage:        3 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:   13
  4661 ;; This function calls:
  4662 ;;		_D_PWM_SetDuty
  4663 ;; This function is called by:
  4664 ;;		_D_PWM_SetRGB
  4665 ;;		_strobe
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text23
  4670  00209A                     __ptext23:
  4671                           	opt stack 0
  4672  00209A                     _setRGB:
  4673                           	opt stack 15
  4674                           
  4675                           ;incstack = 0
  4676                           ;setRGB@r stored from wreg
  4677  00209A  0100               	movlb	0	; () banked
  4678  00209C  6F89               	movwf	setRGB@r& (0+255),b
  4679                           
  4680                           ;PWM_Driver.c: 43: D_PWM_SetDuty(0, r);
  4681  00209E  C089  F085         	movff	setRGB@r,D_PWM_SetDuty@duty
  4682  0020A2  0E00               	movlw	0
  4683  0020A4  ECF7  F00F         	call	_D_PWM_SetDuty
  4684                           
  4685                           ;PWM_Driver.c: 44: D_PWM_SetDuty(1, g);
  4686  0020A8  C087  F085         	movff	setRGB@g,D_PWM_SetDuty@duty
  4687  0020AC  0E01               	movlw	1
  4688  0020AE  ECF7  F00F         	call	_D_PWM_SetDuty
  4689                           
  4690                           ;PWM_Driver.c: 45: D_PWM_SetDuty(2, b);
  4691  0020B2  C088  F085         	movff	setRGB@b,D_PWM_SetDuty@duty
  4692  0020B6  0E02               	movlw	2
  4693  0020B8  ECF7  F00F         	call	_D_PWM_SetDuty
  4694  0020BC  0012               	return		;funcret
  4695  0020BE                     __end_of_setRGB:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           intcon	equ	0xFF2
  4704                           intcon2	equ	0xFF1
  4705                           postinc0	equ	0xFEE
  4706                           plusw0	equ	0xFEB
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _D_PWM_SetDuty *****************
  4721 ;; Defined at:
  4722 ;;		line 307 in file "Drivers/PWM_Driver.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  which           1    wreg     unsigned char 
  4725 ;;  duty            1   37[BANK0 ] unsigned char 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  which           1   38[BANK0 ] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4737 ;;      Params:         0       1       0       0       0       0       0       0       0
  4738 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4740 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4741 ;;Total ram usage:        2 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:   12
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_setRGB
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text24
  4752  001FEE                     __ptext24:
  4753                           	opt stack 0
  4754  001FEE                     _D_PWM_SetDuty:
  4755                           	opt stack 15
  4756                           
  4757                           ;incstack = 0
  4758                           ;D_PWM_SetDuty@which stored from wreg
  4759  001FEE  0100               	movlb	0	; () banked
  4760  001FF0  6F86               	movwf	D_PWM_SetDuty@which& (0+255),b
  4761                           
  4762                           ;PWM_Driver.c: 308: switch(which) {
  4763  001FF2  D009               	goto	l2170
  4764  001FF4                     l347:
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;PWM_Driver.c: 310: PWM_Red.duty_val = duty;
  4768  001FF4  C085  F0CB         	movff	D_PWM_SetDuty@duty,_PWM_Red+1
  4769                           
  4770                           ;PWM_Driver.c: 311: break;
  4771  001FF8  0012               	return	
  4772  001FFA                     l349:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;PWM_Driver.c: 314: PWM_Green.duty_val = duty;
  4776  001FFA  C085  F0C9         	movff	D_PWM_SetDuty@duty,_PWM_Green+1
  4777                           
  4778                           ;PWM_Driver.c: 315: break;
  4779  001FFE  0012               	return	
  4780  002000                     l350:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;PWM_Driver.c: 318: PWM_Blue.duty_val = duty;
  4784  002000  C085  F0C7         	movff	D_PWM_SetDuty@duty,_PWM_Blue+1
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;PWM_Driver.c: 320: }
  4788                           
  4789                           ;PWM_Driver.c: 319: break;
  4790  002004  0012               	return	
  4791  002006                     l2170:
  4792  002006  0100               	movlb	0	; () banked
  4793  002008  5186               	movf	D_PWM_SetDuty@which& (0+255),w,b
  4794                           
  4795                           ; Switch size 1, requested type "space"
  4796                           ; Number of cases is 3, Range of values is 0 to 2
  4797                           ; switch strategies available:
  4798                           ; Name         Instructions Cycles
  4799                           ; simple_byte           10     6 (average)
  4800                           ;	Chosen strategy is simple_byte
  4801  00200A  0A00               	xorlw	0	; case 0
  4802  00200C  B4D8               	btfsc	status,2,c
  4803  00200E  D7F2               	goto	l347
  4804  002010  0A01               	xorlw	1	; case 1
  4805  002012  B4D8               	btfsc	status,2,c
  4806  002014  D7F2               	goto	l349
  4807  002016  0A03               	xorlw	3	; case 2
  4808  002018  A4D8               	btfss	status,2,c
  4809  00201A  0012               	return	
  4810  00201C  D7F1               	goto	l350
  4811  00201E                     __end_of_D_PWM_SetDuty:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           plusw0	equ	0xFEB
  4823                           fsr0h	equ	0xFEA
  4824                           fsr0l	equ	0xFE9
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           plusw2	equ	0xFDB
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _D_PWM_ScaleUp *****************
  4837 ;; Defined at:
  4838 ;;		line 346 in file "Drivers/PWM_Driver.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:   12
  4859 ;; This function calls:
  4860 ;;		Nothing
  4861 ;; This function is called by:
  4862 ;;		_handle_message
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text25
  4867  0021A6                     __ptext25:
  4868                           	opt stack 0
  4869  0021A6                     _D_PWM_ScaleUp:
  4870                           	opt stack 17
  4871                           
  4872                           ;PWM_Driver.c: 347: if (scale > 0) {
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  0021A6  502E               	movf	_scale,w,c
  4877  0021A8  B4D8               	btfsc	status,2,c
  4878  0021AA  0012               	return	
  4879                           
  4880                           ;PWM_Driver.c: 348: scale--;
  4881  0021AC  062E               	decf	_scale,f,c
  4882  0021AE  0012               	return	
  4883  0021B0                     __end_of_D_PWM_ScaleUp:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           plusw0	equ	0xFEB
  4895                           fsr0h	equ	0xFEA
  4896                           fsr0l	equ	0xFE9
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           plusw2	equ	0xFDB
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _D_PWM_ScaleDown *****************
  4909 ;; Defined at:
  4910 ;;		line 340 in file "Drivers/PWM_Driver.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:   12
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_handle_message
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text26
  4939  0021B0                     __ptext26:
  4940                           	opt stack 0
  4941  0021B0                     _D_PWM_ScaleDown:
  4942                           	opt stack 17
  4943                           
  4944                           ;PWM_Driver.c: 341: if (scale < 7) {
  4945                           
  4946                           ;incstack = 0
  4947  0021B0  0E07               	movlw	7
  4948  0021B2  602E               	cpfslt	_scale,c
  4949  0021B4  0012               	return	
  4950                           
  4951                           ;PWM_Driver.c: 342: scale++;
  4952  0021B6  2A2E               	incf	_scale,f,c
  4953  0021B8  0012               	return	
  4954  0021BA                     __end_of_D_PWM_ScaleDown:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           intcon2	equ	0xFF1
  4964                           postinc0	equ	0xFEE
  4965                           plusw0	equ	0xFEB
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           plusw2	equ	0xFDB
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _D_PWM_GetState *****************
  4980 ;; Defined at:
  4981 ;;		line 356 in file "Drivers/PWM_Driver.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      unsigned char 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4995 ;;      Params:         0       0       0       0       0       0       0       0       0
  4996 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4998 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4999 ;;Total ram usage:        0 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:   12
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_handle_message
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text27
  5010  0021F4                     __ptext27:
  5011                           	opt stack 0
  5012  0021F4                     _D_PWM_GetState:
  5013                           	opt stack 17
  5014                           
  5015                           ;PWM_Driver.c: 357: return state;
  5016                           
  5017                           ;incstack = 0
  5018  0021F4  502F               	movf	_state,w,c
  5019  0021F6  0012               	return	
  5020  0021F8                     __end_of_D_PWM_GetState:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           intcon2	equ	0xFF1
  5030                           postinc0	equ	0xFEE
  5031                           plusw0	equ	0xFEB
  5032                           fsr0h	equ	0xFEA
  5033                           fsr0l	equ	0xFE9
  5034                           wreg	equ	0xFE8
  5035                           postdec1	equ	0xFE5
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           plusw2	equ	0xFDB
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function _D_PWM_GetScale *****************
  5046 ;; Defined at:
  5047 ;;		line 352 in file "Drivers/PWM_Driver.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:   12
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_handle_message
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text28
  5076  0021F8                     __ptext28:
  5077                           	opt stack 0
  5078  0021F8                     _D_PWM_GetScale:
  5079                           	opt stack 17
  5080                           
  5081                           ;PWM_Driver.c: 353: return scale;
  5082                           
  5083                           ;incstack = 0
  5084  0021F8  502E               	movf	_scale,w,c
  5085  0021FA  0012               	return	
  5086  0021FC                     __end_of_D_PWM_GetScale:
  5087                           	opt stack 0
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           intcon	equ	0xFF2
  5095                           intcon2	equ	0xFF1
  5096                           postinc0	equ	0xFEE
  5097                           plusw0	equ	0xFEB
  5098                           fsr0h	equ	0xFEA
  5099                           fsr0l	equ	0xFE9
  5100                           wreg	equ	0xFE8
  5101                           postdec1	equ	0xFE5
  5102                           fsr1l	equ	0xFE1
  5103                           indf2	equ	0xFDF
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           plusw2	equ	0xFDB
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111 ;; *************** function _D_PWM_GetRed *****************
  5112 ;; Defined at:
  5113 ;;		line 328 in file "Drivers/PWM_Driver.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;		None
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      unsigned char 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5127 ;;      Params:         0       0       0       0       0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5130 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5131 ;;Total ram usage:        0 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:   12
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_handle_message
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text29
  5142  0021D0                     __ptext29:
  5143                           	opt stack 0
  5144  0021D0                     _D_PWM_GetRed:
  5145                           	opt stack 17
  5146                           
  5147                           ;PWM_Driver.c: 329: return PWM_Red.duty_cnt;
  5148                           
  5149                           ;incstack = 0
  5150  0021D0  0100               	movlb	0	; () banked
  5151  0021D2  51CA               	movf	_PWM_Red& (0+255),w,b
  5152  0021D4  0012               	return	
  5153  0021D6                     __end_of_D_PWM_GetRed:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           postinc0	equ	0xFEE
  5164                           plusw0	equ	0xFEB
  5165                           fsr0h	equ	0xFEA
  5166                           fsr0l	equ	0xFE9
  5167                           wreg	equ	0xFE8
  5168                           postdec1	equ	0xFE5
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           plusw2	equ	0xFDB
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _D_PWM_GetGreen *****************
  5179 ;; Defined at:
  5180 ;;		line 332 in file "Drivers/PWM_Driver.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      unsigned char 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5194 ;;      Params:         0       0       0       0       0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5197 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5198 ;;Total ram usage:        0 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:   12
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_handle_message
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text30
  5209  0021D6                     __ptext30:
  5210                           	opt stack 0
  5211  0021D6                     _D_PWM_GetGreen:
  5212                           	opt stack 17
  5213                           
  5214                           ;PWM_Driver.c: 333: return PWM_Green.duty_cnt;
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;incstack = 0
  5218  0021D6  0100               	movlb	0	; () banked
  5219  0021D8  51C8               	movf	_PWM_Green& (0+255),w,b
  5220  0021DA  0012               	return	
  5221  0021DC                     __end_of_D_PWM_GetGreen:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           intcon2	equ	0xFF1
  5231                           postinc0	equ	0xFEE
  5232                           plusw0	equ	0xFEB
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           postdec1	equ	0xFE5
  5237                           fsr1l	equ	0xFE1
  5238                           indf2	equ	0xFDF
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           plusw2	equ	0xFDB
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _D_PWM_GetBlue *****************
  5247 ;; Defined at:
  5248 ;;		line 336 in file "Drivers/PWM_Driver.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      unsigned char 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5265 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5266 ;;Total ram usage:        0 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:   12
  5269 ;; This function calls:
  5270 ;;		Nothing
  5271 ;; This function is called by:
  5272 ;;		_handle_message
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text31
  5277  0021DC                     __ptext31:
  5278                           	opt stack 0
  5279  0021DC                     _D_PWM_GetBlue:
  5280                           	opt stack 17
  5281                           
  5282                           ;PWM_Driver.c: 337: return PWM_Blue.duty_cnt;
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;incstack = 0
  5286  0021DC  0100               	movlb	0	; () banked
  5287  0021DE  51C6               	movf	_PWM_Blue& (0+255),w,b
  5288  0021E0  0012               	return	
  5289  0021E2                     __end_of_D_PWM_GetBlue:
  5290                           	opt stack 0
  5291                           tblptru	equ	0xFF8
  5292                           tblptrh	equ	0xFF7
  5293                           tblptrl	equ	0xFF6
  5294                           tablat	equ	0xFF5
  5295                           prodh	equ	0xFF4
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           postinc0	equ	0xFEE
  5300                           plusw0	equ	0xFEB
  5301                           fsr0h	equ	0xFEA
  5302                           fsr0l	equ	0xFE9
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           plusw2	equ	0xFDB
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _D_PWM_Flash *****************
  5315 ;; Defined at:
  5316 ;;		line 360 in file "Drivers/PWM_Driver.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:   12
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_handle_message
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text32
  5345  0021E2                     __ptext32:
  5346                           	opt stack 0
  5347  0021E2                     _D_PWM_Flash:
  5348                           	opt stack 17
  5349                           
  5350                           ;PWM_Driver.c: 361: state = Flash;
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;incstack = 0
  5354  0021E2  0E01               	movlw	1
  5355  0021E4  6E2F               	movwf	_state,c
  5356  0021E6  0012               	return		;funcret
  5357  0021E8                     __end_of_D_PWM_Flash:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           intcon2	equ	0xFF1
  5367                           postinc0	equ	0xFEE
  5368                           plusw0	equ	0xFEB
  5369                           fsr0h	equ	0xFEA
  5370                           fsr0l	equ	0xFE9
  5371                           wreg	equ	0xFE8
  5372                           postdec1	equ	0xFE5
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           postinc2	equ	0xFDE
  5376                           postdec2	equ	0xFDD
  5377                           plusw2	equ	0xFDB
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function _D_PWM_Fade *****************
  5383 ;; Defined at:
  5384 ;;		line 368 in file "Drivers/PWM_Driver.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0
  5399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5401 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:   12
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_handle_message
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text33
  5413  0021E8                     __ptext33:
  5414                           	opt stack 0
  5415  0021E8                     _D_PWM_Fade:
  5416                           	opt stack 17
  5417                           
  5418                           ;PWM_Driver.c: 369: state = Fade;
  5419                           
  5420                           ;incstack = 0
  5421  0021E8  0E03               	movlw	3
  5422  0021EA  6E2F               	movwf	_state,c
  5423  0021EC  0012               	return		;funcret
  5424  0021EE                     __end_of_D_PWM_Fade:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           plusw0	equ	0xFEB
  5436                           fsr0h	equ	0xFEA
  5437                           fsr0l	equ	0xFE9
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _D_UART_ReadBlock *****************
  5450 ;; Defined at:
  5451 ;;		line 307 in file "Drivers/UART_Driver.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  cnt             1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  cnt             1   44[BANK0 ] unsigned char 
  5456 ;;  cm             17   45[BANK0 ] struct .
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  6   37[BANK0 ] struct .
  5459 ;; Registers used:
  5460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5466 ;;      Params:         0       7       0       0       0       0       0       0       0
  5467 ;;      Locals:         0      18       0       0       0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5469 ;;      Totals:         0      25       0       0       0       0       0       0       0
  5470 ;;Total ram usage:       25 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   12
  5473 ;; This function calls:
  5474 ;;		Nothing
  5475 ;; This function is called by:
  5476 ;;		_main
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text34
  5481  001E08                     __ptext34:
  5482                           	opt stack 0
  5483  001E08                     _D_UART_ReadBlock:
  5484                           	opt stack 18
  5485                           
  5486                           ;incstack = 0
  5487                           ;D_UART_ReadBlock@cnt stored from wreg
  5488  001E08  0100               	movlb	0	; () banked
  5489  001E0A  6F8C               	movwf	D_UART_ReadBlock@cnt& (0+255),b
  5490                           
  5491                           ;UART_Driver.c: 308: READ_ComMes cm = readBuffer.comMes[cnt];
  5492  001E0C  0100               	movlb	0	; () banked
  5493  001E0E  518C               	movf	D_UART_ReadBlock@cnt& (0+255),w,b
  5494  001E10  0D11               	mullw	17
  5495  001E12  0E0A               	movlw	low (_readBuffer+10)
  5496  001E14  24F3               	addwf	prodl,w,c
  5497  001E16  6ED9               	movwf	fsr2l,c
  5498  001E18  0E01               	movlw	high (_readBuffer+10)
  5499  001E1A  20F4               	addwfc	prodh,w,c
  5500  001E1C  6EDA               	movwf	fsr2h,c
  5501  001E1E  EE10  F08D         	lfsr	1,D_UART_ReadBlock@cm
  5502  001E22  0E10               	movlw	16
  5503  001E24                     u2291:
  5504  001E24  CFDB FFE3          	movff	plusw2,plusw1
  5505  001E28  06E8               	decf	wreg,f,c
  5506  001E2A  E2FC               	bc	u2291
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;UART_Driver.c: 309: readData.sender = readBuffer.sender;
  5510  001E2C  0E04               	movlw	low (_readBuffer+4)
  5511  001E2E  0100               	movlb	0	; () banked
  5512  001E30  6FC0               	movwf	_readData& (0+255),b
  5513  001E32  0E01               	movlw	high (_readBuffer+4)
  5514  001E34  0100               	movlb	0	; () banked
  5515  001E36  6FC1               	movwf	(_readData+1)& (0+255),b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;UART_Driver.c: 310: readData.command = cm.command;
  5519  001E38  0E8D               	movlw	low D_UART_ReadBlock@cm
  5520  001E3A  0100               	movlb	0	; () banked
  5521  001E3C  6FC2               	movwf	(_readData+2)& (0+255),b
  5522  001E3E  0E00               	movlw	high D_UART_ReadBlock@cm
  5523  001E40  0100               	movlb	0	; () banked
  5524  001E42  6FC3               	movwf	(_readData+3)& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;UART_Driver.c: 311: readData.message = cm.message;
  5528  001E44  0E93               	movlw	low (D_UART_ReadBlock@cm+6)
  5529  001E46  0100               	movlb	0	; () banked
  5530  001E48  6FC4               	movwf	(_readData+4)& (0+255),b
  5531  001E4A  0E00               	movlw	high (D_UART_ReadBlock@cm+6)
  5532  001E4C  0100               	movlb	0	; () banked
  5533  001E4E  6FC5               	movwf	(_readData+5)& (0+255),b
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;UART_Driver.c: 312: return readData;
  5537  001E50  EE20  F0C0         	lfsr	2,_readData
  5538  001E54  EE00  F085         	lfsr	0,?_D_UART_ReadBlock
  5539  001E58  0E05               	movlw	5
  5540  001E5A                     u2301:
  5541  001E5A  CFDB FFEB          	movff	plusw2,plusw0
  5542  001E5E  06E8               	decf	wreg,f,c
  5543  001E60  E2FC               	bc	u2301
  5544  001E62  0012               	return	
  5545  001E64                     __end_of_D_UART_ReadBlock:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           postinc0	equ	0xFEE
  5556                           plusw0	equ	0xFEB
  5557                           fsr0h	equ	0xFEA
  5558                           fsr0l	equ	0xFE9
  5559                           wreg	equ	0xFE8
  5560                           postdec1	equ	0xFE5
  5561                           plusw1	equ	0xFE3
  5562                           fsr1l	equ	0xFE1
  5563                           indf2	equ	0xFDF
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           plusw2	equ	0xFDB
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _D_UART_Read *****************
  5572 ;; Defined at:
  5573 ;;		line 299 in file "Drivers/UART_Driver.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  cm             17   43[BANK0 ] struct .
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  6   37[BANK0 ] struct .
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5587 ;;      Params:         0       6       0       0       0       0       0       0       0
  5588 ;;      Locals:         0      17       0       0       0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5590 ;;      Totals:         0      23       0       0       0       0       0       0       0
  5591 ;;Total ram usage:       23 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:   12
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text35
  5602  001F6A                     __ptext35:
  5603                           	opt stack 0
  5604  001F6A                     _D_UART_Read:
  5605                           	opt stack 18
  5606                           
  5607                           ;UART_Driver.c: 300: READ_ComMes cm = readBuffer.comMes[0];
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  001F6A  EE21  F00A         	lfsr	2,_readBuffer+10
  5612  001F6E  EE10  F08B         	lfsr	1,D_UART_Read@cm
  5613  001F72  0E10               	movlw	16
  5614  001F74                     u2271:
  5615  001F74  CFDB FFE3          	movff	plusw2,plusw1
  5616  001F78  06E8               	decf	wreg,f,c
  5617  001F7A  E2FC               	bc	u2271
  5618                           
  5619                           ;UART_Driver.c: 301: readData.sender = readBuffer.sender;
  5620  001F7C  0E04               	movlw	low (_readBuffer+4)
  5621  001F7E  0100               	movlb	0	; () banked
  5622  001F80  6FC0               	movwf	_readData& (0+255),b
  5623  001F82  0E01               	movlw	high (_readBuffer+4)
  5624  001F84  0100               	movlb	0	; () banked
  5625  001F86  6FC1               	movwf	(_readData+1)& (0+255),b
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;UART_Driver.c: 302: readData.command = cm.command;
  5629  001F88  0E8B               	movlw	low D_UART_Read@cm
  5630  001F8A  0100               	movlb	0	; () banked
  5631  001F8C  6FC2               	movwf	(_readData+2)& (0+255),b
  5632  001F8E  0E00               	movlw	high D_UART_Read@cm
  5633  001F90  0100               	movlb	0	; () banked
  5634  001F92  6FC3               	movwf	(_readData+3)& (0+255),b
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;UART_Driver.c: 303: readData.message = cm.message;
  5638  001F94  0E91               	movlw	low (D_UART_Read@cm+6)
  5639  001F96  0100               	movlb	0	; () banked
  5640  001F98  6FC4               	movwf	(_readData+4)& (0+255),b
  5641  001F9A  0E00               	movlw	high (D_UART_Read@cm+6)
  5642  001F9C  0100               	movlb	0	; () banked
  5643  001F9E  6FC5               	movwf	(_readData+5)& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;UART_Driver.c: 304: return readData;
  5647  001FA0  EE20  F0C0         	lfsr	2,_readData
  5648  001FA4  EE00  F085         	lfsr	0,?_D_UART_Read
  5649  001FA8  0E05               	movlw	5
  5650  001FAA                     u2281:
  5651  001FAA  CFDB FFEB          	movff	plusw2,plusw0
  5652  001FAE  06E8               	decf	wreg,f,c
  5653  001FB0  E2FC               	bc	u2281
  5654  001FB2  0012               	return	
  5655  001FB4                     __end_of_D_UART_Read:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           intcon2	equ	0xFF1
  5665                           postinc0	equ	0xFEE
  5666                           plusw0	equ	0xFEB
  5667                           fsr0h	equ	0xFEA
  5668                           fsr0l	equ	0xFE9
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           plusw1	equ	0xFE3
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           plusw2	equ	0xFDB
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function _D_UART_BlockLength *****************
  5682 ;; Defined at:
  5683 ;;		line 315 in file "Drivers/UART_Driver.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      unsigned char 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5700 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:   12
  5704 ;; This function calls:
  5705 ;;		Nothing
  5706 ;; This function is called by:
  5707 ;;		_main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text36
  5712  0021EE                     __ptext36:
  5713                           	opt stack 0
  5714  0021EE                     _D_UART_BlockLength:
  5715                           	opt stack 18
  5716                           
  5717                           ;UART_Driver.c: 316: return readBuffer.blockLength;
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;incstack = 0
  5721  0021EE  0101               	movlb	1	; () banked
  5722  0021F0  5103               	movf	(_readBuffer+3)& (0+255),w,b
  5723  0021F2  0012               	return	
  5724  0021F4                     __end_of_D_UART_BlockLength:
  5725                           	opt stack 0
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           intcon	equ	0xFF2
  5733                           intcon2	equ	0xFF1
  5734                           postinc0	equ	0xFEE
  5735                           plusw0	equ	0xFEB
  5736                           fsr0h	equ	0xFEA
  5737                           fsr0l	equ	0xFE9
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           plusw1	equ	0xFE3
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           plusw2	equ	0xFDB
  5746                           fsr2h	equ	0xFDA
  5747                           fsr2l	equ	0xFD9
  5748                           status	equ	0xFD8
  5749                           
  5750 ;; *************** function _LowISR *****************
  5751 ;; Defined at:
  5752 ;;		line 361 in file "Drivers/UART_Driver.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0
  5767 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5768 ;;      Temps:          0      17       0       0       0       0       0       0       0
  5769 ;;      Totals:         0      17       0       0       0       0       0       0       0
  5770 ;;Total ram usage:       17 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:   11
  5773 ;; This function calls:
  5774 ;;		_fillDataBuffer
  5775 ;;		_readByte
  5776 ;; This function is called by:
  5777 ;;		Interrupt level 1
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	intcodelo
  5782  000018                     __pintcodelo:
  5783                           	opt stack 0
  5784  000018                     _LowISR:
  5785                           	opt stack 13
  5786                           
  5787                           ; BSR set to: 1
  5788                           ;incstack = 0
  5789  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5790  00001A  CFD8 F074          	movff	status,??_LowISR
  5791  00001E  CFE8 F075          	movff	wreg,??_LowISR+1
  5792  000022  CFE0 F076          	movff	bsr,??_LowISR+2
  5793  000026  CFFA F077          	movff	pclath,??_LowISR+3
  5794  00002A  CFFB F078          	movff	pclatu,??_LowISR+4
  5795  00002E  CFE9 F079          	movff	fsr0l,??_LowISR+5
  5796  000032  CFEA F07A          	movff	fsr0h,??_LowISR+6
  5797  000036  CFE1 F07B          	movff	fsr1l,??_LowISR+7
  5798  00003A  CFE2 F07C          	movff	fsr1h,??_LowISR+8
  5799  00003E  CFD9 F07D          	movff	fsr2l,??_LowISR+9
  5800  000042  CFDA F07E          	movff	fsr2h,??_LowISR+10
  5801  000046  CFF3 F07F          	movff	prodl,??_LowISR+11
  5802  00004A  CFF4 F080          	movff	prodh,??_LowISR+12
  5803  00004E  CFF6 F081          	movff	tblptrl,??_LowISR+13
  5804  000052  CFF7 F082          	movff	tblptrh,??_LowISR+14
  5805  000056  CFF8 F083          	movff	tblptru,??_LowISR+15
  5806  00005A  CFF5 F084          	movff	tablat,??_LowISR+16
  5807                           
  5808                           ;UART_Driver.c: 362: if (PIR1bits.RC1IF) {
  5809  00005E  AA9E               	btfss	3998,5,c	;volatile
  5810  000060  D005               	goto	i1l197
  5811                           
  5812                           ;UART_Driver.c: 363: fillDataBuffer(readByte());
  5813  000062  EC25  F010         	call	_readByte	;wreg free
  5814  000066  ECC2  F005         	call	_fillDataBuffer
  5815                           
  5816                           ;UART_Driver.c: 364: PIR1bits.RC1IF = 0;
  5817  00006A  9A9E               	bcf	3998,5,c	;volatile
  5818  00006C                     i1l197:
  5819  00006C  C084  FFF5         	movff	??_LowISR+16,tablat
  5820  000070  C083  FFF8         	movff	??_LowISR+15,tblptru
  5821  000074  C082  FFF7         	movff	??_LowISR+14,tblptrh
  5822  000078  C081  FFF6         	movff	??_LowISR+13,tblptrl
  5823  00007C  C080  FFF4         	movff	??_LowISR+12,prodh
  5824  000080  C07F  FFF3         	movff	??_LowISR+11,prodl
  5825  000084  C07E  FFDA         	movff	??_LowISR+10,fsr2h
  5826  000088  C07D  FFD9         	movff	??_LowISR+9,fsr2l
  5827  00008C  C07C  FFE2         	movff	??_LowISR+8,fsr1h
  5828  000090  C07B  FFE1         	movff	??_LowISR+7,fsr1l
  5829  000094  C07A  FFEA         	movff	??_LowISR+6,fsr0h
  5830  000098  C079  FFE9         	movff	??_LowISR+5,fsr0l
  5831  00009C  C078  FFFB         	movff	??_LowISR+4,pclatu
  5832  0000A0  C077  FFFA         	movff	??_LowISR+3,pclath
  5833  0000A4  C076  FFE0         	movff	??_LowISR+2,bsr
  5834  0000A8  C075  FFE8         	movff	??_LowISR+1,wreg
  5835  0000AC  C074  FFD8         	movff	??_LowISR,status
  5836  0000B0  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5837  0000B2  0010               	retfie	
  5838  0000B4                     __end_of_LowISR:
  5839                           	opt stack 0
  5840                           pclatu	equ	0xFFB
  5841                           pclath	equ	0xFFA
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon2	equ	0xFF1
  5850                           postinc0	equ	0xFEE
  5851                           plusw0	equ	0xFEB
  5852                           fsr0h	equ	0xFEA
  5853                           fsr0l	equ	0xFE9
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           plusw1	equ	0xFE3
  5857                           fsr1h	equ	0xFE2
  5858                           fsr1l	equ	0xFE1
  5859                           bsr	equ	0xFE0
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           plusw2	equ	0xFDB
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function _readByte *****************
  5869 ;; Defined at:
  5870 ;;		line 90 in file "Drivers/UART_Driver.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  dum             1   26[COMRAM] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      unsigned char 
  5877 ;; Registers used:
  5878 ;;		wreg, status,2, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5884 ;;      Params:         0       0       0       0       0       0       0       0       0
  5885 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5887 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5888 ;;Total ram usage:        1 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    6
  5891 ;; This function calls:
  5892 ;;		i1_D_UART_Enable
  5893 ;; This function is called by:
  5894 ;;		_LowISR
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text38
  5899  00204A                     __ptext38:
  5900                           	opt stack 0
  5901  00204A                     _readByte:
  5902                           	opt stack 17
  5903                           
  5904                           ;UART_Driver.c: 91: if(RCSTAbits.FERR == 1) {
  5905                           
  5906                           ;incstack = 0
  5907  00204A  A4AB               	btfss	4011,2,c	;volatile
  5908  00204C  D004               	goto	i1l113
  5909                           
  5910                           ;UART_Driver.c: 92: uint8_t dum = RCREG;
  5911  00204E  CFAE F01B          	movff	4014,readByte@dum	;volatile
  5912                           
  5913                           ;UART_Driver.c: 93: return 0;
  5914  002052  0E00               	movlw	0
  5915  002054  0012               	return	
  5916  002056                     i1l113:
  5917                           
  5918                           ;UART_Driver.c: 94: }
  5919                           ;UART_Driver.c: 95: if(RCSTAbits.OERR == 1) {
  5920  002056  A2AB               	btfss	4011,1,c	;volatile
  5921  002058  D00B               	goto	i1l3270
  5922                           
  5923                           ;UART_Driver.c: 96: D_UART_Enable(0);
  5924  00205A  0E00               	movlw	0
  5925  00205C  EC81  F010         	call	i1_D_UART_Enable
  5926                           
  5927                           ;UART_Driver.c: 97: _delay((unsigned long)((10)*(48000000/4000000.0)));
  5928  002060  0E28               	movlw	40
  5929  002062                     i1u302_27:
  5930  002062  2EE8               	decfsz	wreg,f,c
  5931  002064  D7FE               	bra	i1u302_27
  5932                           
  5933                           ;UART_Driver.c: 98: D_UART_Enable(1);
  5934  002066  0E01               	movlw	1
  5935  002068  EC81  F010         	call	i1_D_UART_Enable
  5936                           
  5937                           ;UART_Driver.c: 99: return 0;
  5938  00206C  0E00               	movlw	0
  5939  00206E  0012               	return	
  5940  002070                     i1l3270:
  5941                           
  5942                           ;UART_Driver.c: 100: }
  5943                           ;UART_Driver.c: 101: return RCREG;
  5944  002070  50AE               	movf	4014,w,c	;volatile
  5945  002072  0012               	return	
  5946  002074                     __end_of_readByte:
  5947                           	opt stack 0
  5948                           pclatu	equ	0xFFB
  5949                           pclath	equ	0xFFA
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           intcon2	equ	0xFF1
  5958                           postinc0	equ	0xFEE
  5959                           plusw0	equ	0xFEB
  5960                           fsr0h	equ	0xFEA
  5961                           fsr0l	equ	0xFE9
  5962                           wreg	equ	0xFE8
  5963                           postdec1	equ	0xFE5
  5964                           plusw1	equ	0xFE3
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           bsr	equ	0xFE0
  5968                           indf2	equ	0xFDF
  5969                           postinc2	equ	0xFDE
  5970                           postdec2	equ	0xFDD
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _fillDataBuffer *****************
  5977 ;; Defined at:
  5978 ;;		line 107 in file "Drivers/UART_Driver.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  data            1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  data            1   34[COMRAM] unsigned char 
  5983 ;;  i               1   33[COMRAM] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5993 ;;      Params:         0       0       0       0       0       0       0       0       0
  5994 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5996 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5997 ;;Total ram usage:        2 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:   10
  6000 ;; This function calls:
  6001 ;;		_acknowledge
  6002 ;; This function is called by:
  6003 ;;		_LowISR
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text39
  6008  000B84                     __ptext39:
  6009                           	opt stack 0
  6010  000B84                     _fillDataBuffer:
  6011                           	opt stack 13
  6012                           
  6013                           ;incstack = 0
  6014                           ;fillDataBuffer@data stored from wreg
  6015  000B84  6E23               	movwf	fillDataBuffer@data,c
  6016                           
  6017                           ;UART_Driver.c: 108: switch(readBuffer.state) {
  6018  000B86  D139               	goto	i1l3390
  6019  000B88                     i1l3276:
  6020                           
  6021                           ;UART_Driver.c: 110: if(data == 0x26) {
  6022  000B88  0E26               	movlw	38
  6023  000B8A  1823               	xorwf	fillDataBuffer@data,w,c
  6024  000B8C  A4D8               	btfss	status,2,c
  6025  000B8E  D01A               	goto	i1l3280
  6026                           
  6027                           ;UART_Driver.c: 111: readBuffer.typeCnt = 0;
  6028  000B90  0E00               	movlw	0
  6029  000B92  0101               	movlb	1	; () banked
  6030  000B94  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6031                           
  6032                           ;UART_Driver.c: 112: readBuffer.blockLength = 0;
  6033  000B96  0E00               	movlw	0
  6034  000B98  0101               	movlb	1	; () banked
  6035  000B9A  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6036                           
  6037                           ;UART_Driver.c: 113: blockLength = 0;
  6038  000B9C  0E00               	movlw	0
  6039  000B9E  6E2C               	movwf	_blockLength,c
  6040                           
  6041                           ;UART_Driver.c: 114: readBuffer.senderCnt = 0;
  6042  000BA0  0E00               	movlw	0
  6043  000BA2  0101               	movlb	1	; () banked
  6044  000BA4  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6045                           
  6046                           ;UART_Driver.c: 115: bufferCnt = 0;
  6047  000BA6  0E00               	movlw	0
  6048  000BA8  6E2D               	movwf	_bufferCnt,c
  6049                           
  6050                           ;UART_Driver.c: 116: comMes.commandCnt = 0;
  6051  000BAA  0E00               	movlw	0
  6052  000BAC  0100               	movlb	0	; () banked
  6053  000BAE  6FB4               	movwf	(_comMes+5)& (0+255),b
  6054                           
  6055                           ;UART_Driver.c: 117: comMes.messageCnt = 0;
  6056  000BB0  0E00               	movlw	0
  6057  000BB2  0100               	movlb	0	; () banked
  6058  000BB4  6FBF               	movwf	(_comMes+16)& (0+255),b
  6059                           
  6060                           ;UART_Driver.c: 118: D_UART_ReadFlag = 0;
  6061  000BB6  0E00               	movlw	0
  6062  000BB8  0100               	movlb	0	; () banked
  6063  000BBA  6FCC               	movwf	_D_UART_ReadFlag& (0+255),b
  6064                           
  6065                           ;UART_Driver.c: 119: readBuffer.state = 0x01;
  6066  000BBC  0E01               	movlw	1
  6067  000BBE  0101               	movlb	1	; () banked
  6068  000BC0  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6069                           
  6070                           ;UART_Driver.c: 120: } else {
  6071  000BC2  0012               	return	
  6072  000BC4                     i1l3280:
  6073                           
  6074                           ;UART_Driver.c: 121: readBuffer.state = 0x00;
  6075  000BC4  0E00               	movlw	0
  6076  000BC6  0101               	movlb	1	; () banked
  6077  000BC8  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6078                           
  6079                           ; BSR set to: 1
  6080                           ;UART_Driver.c: 123: }
  6081                           ;UART_Driver.c: 124: break;
  6082                           
  6083                           ; BSR set to: 1
  6084                           ;UART_Driver.c: 122: return;
  6085  000BCA  0012               	return	
  6086  000BCC                     i1l3284:
  6087                           
  6088                           ; BSR set to: 1
  6089                           ;UART_Driver.c: 127: if (data == 0x3A) {
  6090  000BCC  0E3A               	movlw	58
  6091  000BCE  1823               	xorwf	fillDataBuffer@data,w,c
  6092  000BD0  A4D8               	btfss	status,2,c
  6093  000BD2  D00F               	goto	i1l3290
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;UART_Driver.c: 128: readBuffer.state = 0x02;
  6097  000BD4  0E02               	movlw	2
  6098  000BD6  0101               	movlb	1	; () banked
  6099  000BD8  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;UART_Driver.c: 129: readBuffer.type[readBuffer.typeCnt] = '\0';
  6103  000BDA  0101               	movlb	1	; () banked
  6104  000BDC  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6105  000BDE  0D01               	mullw	1
  6106  000BE0  0E00               	movlw	low _readBuffer
  6107  000BE2  24F3               	addwf	prodl,w,c
  6108  000BE4  6ED9               	movwf	fsr2l,c
  6109  000BE6  0E01               	movlw	high _readBuffer
  6110  000BE8  20F4               	addwfc	prodh,w,c
  6111  000BEA  6EDA               	movwf	fsr2h,c
  6112  000BEC  0E00               	movlw	0
  6113  000BEE  6EDF               	movwf	indf2,c
  6114                           
  6115                           ;UART_Driver.c: 130: } else {
  6116  000BF0  0012               	return	
  6117  000BF2                     i1l3290:
  6118                           
  6119                           ; BSR set to: 1
  6120                           ;UART_Driver.c: 131: readBuffer.type[readBuffer.typeCnt] = data;
  6121  000BF2  0101               	movlb	1	; () banked
  6122  000BF4  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6123  000BF6  0D01               	mullw	1
  6124  000BF8  0E00               	movlw	low _readBuffer
  6125  000BFA  24F3               	addwf	prodl,w,c
  6126  000BFC  6ED9               	movwf	fsr2l,c
  6127  000BFE  0E01               	movlw	high _readBuffer
  6128  000C00  20F4               	addwfc	prodh,w,c
  6129  000C02  6EDA               	movwf	fsr2h,c
  6130  000C04  C023  FFDF         	movff	fillDataBuffer@data,indf2
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;UART_Driver.c: 132: readBuffer.typeCnt++;
  6134  000C08  0101               	movlb	1	; () banked
  6135  000C0A  2B02               	incf	(_readBuffer+2)& (0+255),f,b
  6136                           
  6137                           ; BSR set to: 1
  6138                           ;UART_Driver.c: 133: if(readBuffer.typeCnt > 10) {
  6139  000C0C  0E0A               	movlw	10
  6140  000C0E  0101               	movlb	1	; () banked
  6141  000C10  6502               	cpfsgt	(_readBuffer+2)& (0+255),b
  6142  000C12  0012               	return	
  6143                           
  6144                           ; BSR set to: 1
  6145                           ;UART_Driver.c: 134: readBuffer.typeCnt = 0;
  6146  000C14  0E00               	movlw	0
  6147  000C16  0101               	movlb	1	; () banked
  6148  000C18  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6149                           
  6150                           ; BSR set to: 1
  6151                           ;UART_Driver.c: 135: }
  6152                           ;UART_Driver.c: 136: }
  6153                           ;UART_Driver.c: 137: break;
  6154                           
  6155                           ; BSR set to: 1
  6156  000C1A  0012               	return	
  6157  000C1C                     i1l3298:
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;UART_Driver.c: 140: if (data == 0x3A) {
  6161  000C1C  0E3A               	movlw	58
  6162  000C1E  1823               	xorwf	fillDataBuffer@data,w,c
  6163  000C20  A4D8               	btfss	status,2,c
  6164  000C22  D00F               	goto	i1l3304
  6165                           
  6166                           ; BSR set to: 1
  6167                           ;UART_Driver.c: 141: readBuffer.state = 0x03;
  6168  000C24  0E03               	movlw	3
  6169  000C26  0101               	movlb	1	; () banked
  6170  000C28  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6171                           
  6172                           ; BSR set to: 1
  6173                           ;UART_Driver.c: 142: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6174  000C2A  0101               	movlb	1	; () banked
  6175  000C2C  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6176  000C2E  0D01               	mullw	1
  6177  000C30  0E04               	movlw	low (_readBuffer+4)
  6178  000C32  24F3               	addwf	prodl,w,c
  6179  000C34  6ED9               	movwf	fsr2l,c
  6180  000C36  0E01               	movlw	high (_readBuffer+4)
  6181  000C38  20F4               	addwfc	prodh,w,c
  6182  000C3A  6EDA               	movwf	fsr2h,c
  6183  000C3C  0E00               	movlw	0
  6184  000C3E  6EDF               	movwf	indf2,c
  6185                           
  6186                           ;UART_Driver.c: 143: } else {
  6187  000C40  0012               	return	
  6188  000C42                     i1l3304:
  6189                           
  6190                           ; BSR set to: 1
  6191                           ;UART_Driver.c: 144: readBuffer.sender[readBuffer.senderCnt] = data;
  6192  000C42  0101               	movlb	1	; () banked
  6193  000C44  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6194  000C46  0D01               	mullw	1
  6195  000C48  0E04               	movlw	low (_readBuffer+4)
  6196  000C4A  24F3               	addwf	prodl,w,c
  6197  000C4C  6ED9               	movwf	fsr2l,c
  6198  000C4E  0E01               	movlw	high (_readBuffer+4)
  6199  000C50  20F4               	addwfc	prodh,w,c
  6200  000C52  6EDA               	movwf	fsr2h,c
  6201  000C54  C023  FFDF         	movff	fillDataBuffer@data,indf2
  6202                           
  6203                           ; BSR set to: 1
  6204                           ;UART_Driver.c: 145: readBuffer.senderCnt++;
  6205  000C58  0101               	movlb	1	; () banked
  6206  000C5A  2B09               	incf	(_readBuffer+9)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 1
  6209                           ;UART_Driver.c: 146: if(readBuffer.senderCnt > 50) {
  6210  000C5C  0E32               	movlw	50
  6211  000C5E  0101               	movlb	1	; () banked
  6212  000C60  6509               	cpfsgt	(_readBuffer+9)& (0+255),b
  6213  000C62  0012               	return	
  6214                           
  6215                           ; BSR set to: 1
  6216                           ;UART_Driver.c: 147: readBuffer.senderCnt = 0;
  6217  000C64  0E00               	movlw	0
  6218  000C66  0101               	movlb	1	; () banked
  6219  000C68  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6220                           
  6221                           ; BSR set to: 1
  6222                           ;UART_Driver.c: 148: }
  6223                           ;UART_Driver.c: 149: }
  6224                           ;UART_Driver.c: 150: break;
  6225                           
  6226                           ; BSR set to: 1
  6227  000C6A  0012               	return	
  6228  000C6C                     i1l3312:
  6229                           
  6230                           ; BSR set to: 1
  6231                           ;UART_Driver.c: 153: if (data == 0x3A) {
  6232  000C6C  0E3A               	movlw	58
  6233  000C6E  1823               	xorwf	fillDataBuffer@data,w,c
  6234  000C70  A4D8               	btfss	status,2,c
  6235  000C72  D00F               	goto	i1l3318
  6236                           
  6237                           ; BSR set to: 1
  6238                           ;UART_Driver.c: 154: readBuffer.state = 0x04;
  6239  000C74  0E04               	movlw	4
  6240  000C76  0101               	movlb	1	; () banked
  6241  000C78  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6242                           
  6243                           ; BSR set to: 1
  6244                           ;UART_Driver.c: 155: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6245  000C7A  0101               	movlb	1	; () banked
  6246  000C7C  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6247  000C7E  0D01               	mullw	1
  6248  000C80  0E04               	movlw	low (_readBuffer+4)
  6249  000C82  24F3               	addwf	prodl,w,c
  6250  000C84  6ED9               	movwf	fsr2l,c
  6251  000C86  0E01               	movlw	high (_readBuffer+4)
  6252  000C88  20F4               	addwfc	prodh,w,c
  6253  000C8A  6EDA               	movwf	fsr2h,c
  6254  000C8C  0E00               	movlw	0
  6255  000C8E  6EDF               	movwf	indf2,c
  6256                           
  6257                           ;UART_Driver.c: 156: } else {
  6258  000C90  0012               	return	
  6259  000C92                     i1l3318:
  6260                           
  6261                           ; BSR set to: 1
  6262                           ;UART_Driver.c: 157: readBuffer.blockLength = (data - 0x30);
  6263  000C92  5023               	movf	fillDataBuffer@data,w,c
  6264  000C94  0FD0               	addlw	208
  6265  000C96  0101               	movlb	1	; () banked
  6266  000C98  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6267                           
  6268                           ;UART_Driver.c: 158: blockLength = (data - 0x30);
  6269  000C9A  5023               	movf	fillDataBuffer@data,w,c
  6270  000C9C  0FD0               	addlw	208
  6271  000C9E  6E2C               	movwf	_blockLength,c
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;UART_Driver.c: 159: }
  6275                           ;UART_Driver.c: 160: break;
  6276  000CA0  0012               	return	
  6277  000CA2                     i1l3320:
  6278                           
  6279                           ; BSR set to: 1
  6280                           ;UART_Driver.c: 163: if (data == 0x3A) {
  6281  000CA2  0E3A               	movlw	58
  6282  000CA4  1823               	xorwf	fillDataBuffer@data,w,c
  6283  000CA6  A4D8               	btfss	status,2,c
  6284  000CA8  D00F               	goto	i1l3326
  6285                           
  6286                           ; BSR set to: 1
  6287                           ;UART_Driver.c: 164: readBuffer.state = 0x05;
  6288  000CAA  0E05               	movlw	5
  6289  000CAC  0101               	movlb	1	; () banked
  6290  000CAE  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6291                           
  6292                           ; BSR set to: 1
  6293                           ;UART_Driver.c: 165: comMes.command[comMes.commandCnt] = '\0';
  6294  000CB0  0100               	movlb	0	; () banked
  6295  000CB2  51B4               	movf	(_comMes+5)& (0+255),w,b
  6296  000CB4  0D01               	mullw	1
  6297  000CB6  0EAF               	movlw	low _comMes
  6298  000CB8  24F3               	addwf	prodl,w,c
  6299  000CBA  6ED9               	movwf	fsr2l,c
  6300  000CBC  0E00               	movlw	high _comMes
  6301  000CBE  20F4               	addwfc	prodh,w,c
  6302  000CC0  6EDA               	movwf	fsr2h,c
  6303  000CC2  0E00               	movlw	0
  6304  000CC4  6EDF               	movwf	indf2,c
  6305                           
  6306                           ;UART_Driver.c: 166: } else {
  6307  000CC6  0012               	return	
  6308  000CC8                     i1l3326:
  6309                           
  6310                           ;UART_Driver.c: 167: comMes.command[comMes.commandCnt] = data;
  6311  000CC8  0100               	movlb	0	; () banked
  6312  000CCA  51B4               	movf	(_comMes+5)& (0+255),w,b
  6313  000CCC  0D01               	mullw	1
  6314  000CCE  0EAF               	movlw	low _comMes
  6315  000CD0  24F3               	addwf	prodl,w,c
  6316  000CD2  6ED9               	movwf	fsr2l,c
  6317  000CD4  0E00               	movlw	high _comMes
  6318  000CD6  20F4               	addwfc	prodh,w,c
  6319  000CD8  6EDA               	movwf	fsr2h,c
  6320  000CDA  C023  FFDF         	movff	fillDataBuffer@data,indf2
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;UART_Driver.c: 168: comMes.commandCnt++;
  6324  000CDE  0100               	movlb	0	; () banked
  6325  000CE0  2BB4               	incf	(_comMes+5)& (0+255),f,b
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;UART_Driver.c: 169: if(comMes.commandCnt > 50) {
  6329  000CE2  0E32               	movlw	50
  6330  000CE4  0100               	movlb	0	; () banked
  6331  000CE6  65B4               	cpfsgt	(_comMes+5)& (0+255),b
  6332  000CE8  0012               	return	
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;UART_Driver.c: 170: comMes.commandCnt = 0;
  6336  000CEA  0E00               	movlw	0
  6337  000CEC  0100               	movlb	0	; () banked
  6338  000CEE  6FB4               	movwf	(_comMes+5)& (0+255),b
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;UART_Driver.c: 171: }
  6342                           ;UART_Driver.c: 172: }
  6343                           ;UART_Driver.c: 173: break;
  6344                           
  6345                           ; BSR set to: 0
  6346  000CF0  0012               	return	
  6347  000CF2                     i1l3334:
  6348                           
  6349                           ;UART_Driver.c: 176: if (data == 0x3A) {
  6350  000CF2  0E3A               	movlw	58
  6351  000CF4  1823               	xorwf	fillDataBuffer@data,w,c
  6352  000CF6  A4D8               	btfss	status,2,c
  6353  000CF8  D055               	goto	i1l3368
  6354                           
  6355                           ;UART_Driver.c: 177: comMes.message[comMes.messageCnt] = '\0';
  6356  000CFA  0100               	movlb	0	; () banked
  6357  000CFC  51BF               	movf	(_comMes+16)& (0+255),w,b
  6358  000CFE  0D01               	mullw	1
  6359  000D00  0EB5               	movlw	low (_comMes+6)
  6360  000D02  24F3               	addwf	prodl,w,c
  6361  000D04  6ED9               	movwf	fsr2l,c
  6362  000D06  0E00               	movlw	high (_comMes+6)
  6363  000D08  20F4               	addwfc	prodh,w,c
  6364  000D0A  6EDA               	movwf	fsr2h,c
  6365  000D0C  0E00               	movlw	0
  6366  000D0E  6EDF               	movwf	indf2,c
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;UART_Driver.c: 178: readBuffer.comMes[bufferCnt] = comMes;
  6370  000D10  EE20  F0AF         	lfsr	2,_comMes
  6371  000D14  502D               	movf	_bufferCnt,w,c
  6372  000D16  0D11               	mullw	17
  6373  000D18  0E0A               	movlw	low (_readBuffer+10)
  6374  000D1A  24F3               	addwf	prodl,w,c
  6375  000D1C  6EE1               	movwf	fsr1l,c
  6376  000D1E  0E01               	movlw	high (_readBuffer+10)
  6377  000D20  20F4               	addwfc	prodh,w,c
  6378  000D22  6EE2               	movwf	fsr1h,c
  6379  000D24  0E10               	movlw	16
  6380  000D26                     i1u290_21:
  6381  000D26  CFDB FFE3          	movff	plusw2,plusw1
  6382  000D2A  06E8               	decf	wreg,f,c
  6383  000D2C  E2FC               	bc	i1u290_21
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;UART_Driver.c: 179: uint8_t i = 0;
  6387  000D2E  0E00               	movlw	0
  6388  000D30  6E22               	movwf	fillDataBuffer@i,c
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;UART_Driver.c: 180: for (i=0; i < comMes.commandCnt; i++) {
  6392  000D32  0E00               	movlw	0
  6393  000D34  6E22               	movwf	fillDataBuffer@i,c
  6394  000D36  D00B               	goto	i1l3348
  6395  000D38                     i1l3344:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;UART_Driver.c: 181: comMes.command[i] = 0;
  6399  000D38  5022               	movf	fillDataBuffer@i,w,c
  6400  000D3A  0D01               	mullw	1
  6401  000D3C  0EAF               	movlw	low _comMes
  6402  000D3E  24F3               	addwf	prodl,w,c
  6403  000D40  6ED9               	movwf	fsr2l,c
  6404  000D42  0E00               	movlw	high _comMes
  6405  000D44  20F4               	addwfc	prodh,w,c
  6406  000D46  6EDA               	movwf	fsr2h,c
  6407  000D48  0E00               	movlw	0
  6408  000D4A  6EDF               	movwf	indf2,c
  6409                           
  6410                           ; BSR set to: 0
  6411  000D4C  2A22               	incf	fillDataBuffer@i,f,c
  6412  000D4E                     i1l3348:
  6413                           
  6414                           ; BSR set to: 0
  6415  000D4E  0100               	movlb	0	; () banked
  6416  000D50  51B4               	movf	(_comMes+5)& (0+255),w,b
  6417  000D52  5C22               	subwf	fillDataBuffer@i,w,c
  6418  000D54  A0D8               	btfss	status,0,c
  6419  000D56  D7F0               	goto	i1l3344
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;UART_Driver.c: 182: }
  6423                           ;UART_Driver.c: 183: for (i=0; i < comMes.messageCnt; i++) {
  6424                           
  6425                           ; BSR set to: 0
  6426  000D58  0E00               	movlw	0
  6427  000D5A  6E22               	movwf	fillDataBuffer@i,c
  6428  000D5C  D00B               	goto	i1l3356
  6429  000D5E                     i1l3352:
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;UART_Driver.c: 184: comMes.message[i] = 0;
  6433  000D5E  5022               	movf	fillDataBuffer@i,w,c
  6434  000D60  0D01               	mullw	1
  6435  000D62  0EB5               	movlw	low (_comMes+6)
  6436  000D64  24F3               	addwf	prodl,w,c
  6437  000D66  6ED9               	movwf	fsr2l,c
  6438  000D68  0E00               	movlw	high (_comMes+6)
  6439  000D6A  20F4               	addwfc	prodh,w,c
  6440  000D6C  6EDA               	movwf	fsr2h,c
  6441  000D6E  0E00               	movlw	0
  6442  000D70  6EDF               	movwf	indf2,c
  6443                           
  6444                           ; BSR set to: 0
  6445  000D72  2A22               	incf	fillDataBuffer@i,f,c
  6446  000D74                     i1l3356:
  6447                           
  6448                           ; BSR set to: 0
  6449  000D74  0100               	movlb	0	; () banked
  6450  000D76  51BF               	movf	(_comMes+16)& (0+255),w,b
  6451  000D78  5C22               	subwf	fillDataBuffer@i,w,c
  6452  000D7A  A0D8               	btfss	status,0,c
  6453  000D7C  D7F0               	goto	i1l3352
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;UART_Driver.c: 185: }
  6457                           ;UART_Driver.c: 186: comMes.commandCnt = 0;
  6458                           
  6459                           ; BSR set to: 0
  6460  000D7E  0E00               	movlw	0
  6461  000D80  0100               	movlb	0	; () banked
  6462  000D82  6FB4               	movwf	(_comMes+5)& (0+255),b
  6463                           
  6464                           ;UART_Driver.c: 187: comMes.messageCnt = 0;
  6465  000D84  0E00               	movlw	0
  6466  000D86  0100               	movlb	0	; () banked
  6467  000D88  6FBF               	movwf	(_comMes+16)& (0+255),b
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;UART_Driver.c: 188: blockLength--;
  6471  000D8A  062C               	decf	_blockLength,f,c
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;UART_Driver.c: 189: bufferCnt++;
  6475  000D8C  2A2D               	incf	_bufferCnt,f,c
  6476                           
  6477                           ;UART_Driver.c: 190: if (blockLength == 0) {
  6478  000D8E  502C               	movf	_blockLength,w,c
  6479  000D90  A4D8               	btfss	status,2,c
  6480  000D92  D004               	goto	i1l3366
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;UART_Driver.c: 191: readBuffer.state = 0x06;
  6484  000D94  0E06               	movlw	6
  6485  000D96  0101               	movlb	1	; () banked
  6486  000D98  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6487                           
  6488                           ;UART_Driver.c: 192: } else {
  6489  000D9A  0012               	return	
  6490  000D9C                     i1l3366:
  6491                           
  6492                           ;UART_Driver.c: 193: readBuffer.state = 0x04;
  6493  000D9C  0E04               	movlw	4
  6494  000D9E  0101               	movlb	1	; () banked
  6495  000DA0  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;UART_Driver.c: 194: }
  6499                           ;UART_Driver.c: 195: } else {
  6500  000DA2  0012               	return	
  6501  000DA4                     i1l3368:
  6502                           
  6503                           ;UART_Driver.c: 196: comMes.message[comMes.messageCnt] = data;
  6504  000DA4  0100               	movlb	0	; () banked
  6505  000DA6  51BF               	movf	(_comMes+16)& (0+255),w,b
  6506  000DA8  0D01               	mullw	1
  6507  000DAA  0EB5               	movlw	low (_comMes+6)
  6508  000DAC  24F3               	addwf	prodl,w,c
  6509  000DAE  6ED9               	movwf	fsr2l,c
  6510  000DB0  0E00               	movlw	high (_comMes+6)
  6511  000DB2  20F4               	addwfc	prodh,w,c
  6512  000DB4  6EDA               	movwf	fsr2h,c
  6513  000DB6  C023  FFDF         	movff	fillDataBuffer@data,indf2
  6514                           
  6515                           ; BSR set to: 0
  6516                           ;UART_Driver.c: 197: comMes.messageCnt++;
  6517  000DBA  0100               	movlb	0	; () banked
  6518  000DBC  2BBF               	incf	(_comMes+16)& (0+255),f,b
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;UART_Driver.c: 198: if(comMes.messageCnt > 50) {
  6522  000DBE  0E32               	movlw	50
  6523  000DC0  0100               	movlb	0	; () banked
  6524  000DC2  65BF               	cpfsgt	(_comMes+16)& (0+255),b
  6525  000DC4  0012               	return	
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;UART_Driver.c: 199: comMes.messageCnt = 0;
  6529  000DC6  0E00               	movlw	0
  6530  000DC8  0100               	movlb	0	; () banked
  6531  000DCA  6FBF               	movwf	(_comMes+16)& (0+255),b
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;UART_Driver.c: 200: }
  6535                           ;UART_Driver.c: 201: }
  6536                           ;UART_Driver.c: 202: break;
  6537                           
  6538                           ; BSR set to: 0
  6539  000DCC  0012               	return	
  6540  000DCE                     i1l3376:
  6541                           
  6542                           ;UART_Driver.c: 205: if (data == 0x24) {
  6543  000DCE  0E24               	movlw	36
  6544  000DD0  1823               	xorwf	fillDataBuffer@data,w,c
  6545  000DD2  A4D8               	btfss	status,2,c
  6546  000DD4  D009               	goto	i1l3384
  6547                           
  6548                           ;UART_Driver.c: 206: acknowledge();
  6549  000DD6  ECCF  F00D         	call	_acknowledge	;wreg free
  6550                           
  6551                           ;UART_Driver.c: 207: readBuffer.state = 0x00;
  6552  000DDA  0E00               	movlw	0
  6553  000DDC  0101               	movlb	1	; () banked
  6554  000DDE  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;UART_Driver.c: 208: D_UART_ReadFlag = 1;
  6558  000DE0  0E01               	movlw	1
  6559  000DE2  0100               	movlb	0	; () banked
  6560  000DE4  6FCC               	movwf	_D_UART_ReadFlag& (0+255),b
  6561                           
  6562                           ;UART_Driver.c: 209: } else {
  6563  000DE6  0012               	return	
  6564  000DE8                     i1l3384:
  6565                           
  6566                           ;UART_Driver.c: 210: readBuffer.readId = (data - 0x30);
  6567  000DE8  5023               	movf	fillDataBuffer@data,w,c
  6568  000DEA  0FD0               	addlw	208
  6569  000DEC  0101               	movlb	1	; () banked
  6570  000DEE  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  6571                           
  6572                           ; BSR set to: 1
  6573                           ;UART_Driver.c: 211: }
  6574                           ;UART_Driver.c: 212: break;
  6575  000DF0  0012               	return	
  6576  000DF2                     i1l3386:
  6577                           
  6578                           ; BSR set to: 1
  6579                           ;UART_Driver.c: 215: readBuffer.state = 0x00;
  6580  000DF2  0E00               	movlw	0
  6581  000DF4  0101               	movlb	1	; () banked
  6582  000DF6  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6583                           
  6584                           ; BSR set to: 1
  6585                           ;UART_Driver.c: 217: }
  6586                           
  6587                           ;UART_Driver.c: 216: break;
  6588  000DF8  0012               	return	
  6589  000DFA                     i1l3390:
  6590  000DFA  0101               	movlb	1	; () banked
  6591  000DFC  513E               	movf	(_readBuffer+62)& (0+255),w,b
  6592                           
  6593                           ; Switch size 1, requested type "space"
  6594                           ; Number of cases is 7, Range of values is 0 to 6
  6595                           ; switch strategies available:
  6596                           ; Name         Instructions Cycles
  6597                           ; simple_byte           22    12 (average)
  6598                           ;	Chosen strategy is simple_byte
  6599  000DFE  0A00               	xorlw	0	; case 0
  6600  000E00  B4D8               	btfsc	status,2,c
  6601  000E02  D6C2               	goto	i1l3276
  6602  000E04  0A01               	xorlw	1	; case 1
  6603  000E06  B4D8               	btfsc	status,2,c
  6604  000E08  D6E1               	goto	i1l3284
  6605  000E0A  0A03               	xorlw	3	; case 2
  6606  000E0C  B4D8               	btfsc	status,2,c
  6607  000E0E  D706               	goto	i1l3298
  6608  000E10  0A01               	xorlw	1	; case 3
  6609  000E12  B4D8               	btfsc	status,2,c
  6610  000E14  D72B               	goto	i1l3312
  6611  000E16  0A07               	xorlw	7	; case 4
  6612  000E18  B4D8               	btfsc	status,2,c
  6613  000E1A  D743               	goto	i1l3320
  6614  000E1C  0A01               	xorlw	1	; case 5
  6615  000E1E  B4D8               	btfsc	status,2,c
  6616  000E20  D768               	goto	i1l3334
  6617  000E22  0A03               	xorlw	3	; case 6
  6618  000E24  B4D8               	btfsc	status,2,c
  6619  000E26  D7D3               	goto	i1l3376
  6620  000E28  D7E4               	goto	i1l3386
  6621  000E2A                     __end_of_fillDataBuffer:
  6622                           	opt stack 0
  6623                           pclatu	equ	0xFFB
  6624                           pclath	equ	0xFFA
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           intcon2	equ	0xFF1
  6633                           postinc0	equ	0xFEE
  6634                           plusw0	equ	0xFEB
  6635                           fsr0h	equ	0xFEA
  6636                           fsr0l	equ	0xFE9
  6637                           wreg	equ	0xFE8
  6638                           postdec1	equ	0xFE5
  6639                           plusw1	equ	0xFE3
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           bsr	equ	0xFE0
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           plusw2	equ	0xFDB
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _acknowledge *****************
  6652 ;; Defined at:
  6653 ;;		line 220 in file "Drivers/UART_Driver.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6667 ;;      Params:         0       0       0       0       0       0       0       0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    9
  6674 ;; This function calls:
  6675 ;;		i1_printf
  6676 ;; This function is called by:
  6677 ;;		_fillDataBuffer
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text40
  6682  001B9E                     __ptext40:
  6683                           	opt stack 0
  6684  001B9E                     _acknowledge:
  6685                           	opt stack 13
  6686                           
  6687                           ;UART_Driver.c: 221: printf(startCharacter);
  6688                           
  6689                           ;incstack = 0
  6690  001B9E  C040  F064         	movff	_startCharacter,i1printf@f
  6691  001BA2  C041  F065         	movff	_startCharacter+1,i1printf@f+1
  6692  001BA6  0100               	movlb	0	; () banked
  6693  001BA8  5164               	movf	i1printf@f& (0+255),w,b
  6694  001BAA  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6695  001BAC  A4D8               	btfss	status,2,c
  6696  001BAE  0E00               	movlw	low (__mediumconst shr (0+16))
  6697  001BB0  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6698  001BB2  EC4A  F008         	call	i1_printf	;wreg free
  6699                           
  6700                           ;UART_Driver.c: 223: printf(ackCharacter);
  6701  001BB6  C03C  F064         	movff	_ackCharacter,i1printf@f
  6702  001BBA  C03D  F065         	movff	_ackCharacter+1,i1printf@f+1
  6703  001BBE  0100               	movlb	0	; () banked
  6704  001BC0  5164               	movf	i1printf@f& (0+255),w,b
  6705  001BC2  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6706  001BC4  A4D8               	btfss	status,2,c
  6707  001BC6  0E00               	movlw	low (__mediumconst shr (0+16))
  6708  001BC8  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6709  001BCA  EC4A  F008         	call	i1_printf	;wreg free
  6710                           
  6711                           ;UART_Driver.c: 225: printf("%x",readBuffer.readId);
  6712  001BCE  0E50               	movlw	low STR_6
  6713  001BD0  0100               	movlb	0	; () banked
  6714  001BD2  6F64               	movwf	i1printf@f& (0+255),b
  6715  001BD4  0E08               	movlw	high STR_6
  6716  001BD6  0100               	movlb	0	; () banked
  6717  001BD8  6F65               	movwf	(i1printf@f+1)& (0+255),b
  6718  001BDA  0100               	movlb	0	; () banked
  6719  001BDC  5164               	movf	i1printf@f& (0+255),w,b
  6720  001BDE  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6721  001BE0  A4D8               	btfss	status,2,c
  6722  001BE2  0E00               	movlw	low (__mediumconst shr (0+16))
  6723  001BE4  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6724  001BE6  C13D  F067         	movff	_readBuffer+61,?i1_printf+3
  6725  001BEA  0100               	movlb	0	; () banked
  6726  001BEC  6B68               	clrf	(?i1_printf+4)& (0+255),b
  6727  001BEE  EC4A  F008         	call	i1_printf	;wreg free
  6728                           
  6729                           ;UART_Driver.c: 227: printf(stopCharacter);
  6730  001BF2  C042  F064         	movff	_stopCharacter,i1printf@f
  6731  001BF6  C043  F065         	movff	_stopCharacter+1,i1printf@f+1
  6732  001BFA  0100               	movlb	0	; () banked
  6733  001BFC  5164               	movf	i1printf@f& (0+255),w,b
  6734  001BFE  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6735  001C00  A4D8               	btfss	status,2,c
  6736  001C02  0E00               	movlw	low (__mediumconst shr (0+16))
  6737  001C04  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6738  001C06  EC4A  F008         	call	i1_printf	;wreg free
  6739  001C0A  0012               	return		;funcret
  6740  001C0C                     __end_of_acknowledge:
  6741                           	opt stack 0
  6742                           pclatu	equ	0xFFB
  6743                           pclath	equ	0xFFA
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           intcon2	equ	0xFF1
  6752                           postinc0	equ	0xFEE
  6753                           plusw0	equ	0xFEB
  6754                           fsr0h	equ	0xFEA
  6755                           fsr0l	equ	0xFE9
  6756                           wreg	equ	0xFE8
  6757                           postdec1	equ	0xFE5
  6758                           plusw1	equ	0xFE3
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           bsr	equ	0xFE0
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function i1_printf *****************
  6771 ;; Defined at:
  6772 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  f               3    4[BANK0 ] PTR const unsigned char 
  6775 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  6776 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  6777 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  6778 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  6779 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  printf          4    0        struct .
  6782 ;;  printf          3    0        PTR const unsigned char 
  6783 ;;  printf          2   17[BANK0 ] unsigned int 
  6784 ;;  printf          2   13[BANK0 ] PTR void [1]
  6785 ;;		 -> ?i1_printf(2), ?_printf(2), 
  6786 ;;  printf          2    0        unsigned int 
  6787 ;;  printf          1   19[BANK0 ] char 
  6788 ;;  printf          1   16[BANK0 ] unsigned char 
  6789 ;;  printf          1   15[BANK0 ] char 
  6790 ;;  printf          1   12[BANK0 ] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  2    4[BANK0 ] int 
  6793 ;; Registers used:
  6794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6800 ;;      Params:         0       5       0       0       0       0       0       0       0
  6801 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6802 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6803 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6804 ;;Total ram usage:       16 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    8
  6807 ;; This function calls:
  6808 ;;		i1___lwdiv
  6809 ;;		i1___lwmod
  6810 ;;		i1_putch
  6811 ;; This function is called by:
  6812 ;;		_acknowledge
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text41
  6817  001094                     __ptext41:
  6818                           	opt stack 0
  6819  001094                     i1_printf:
  6820                           	opt stack 13
  6821                           
  6822                           ;doprnt.c: 466: va_list ap;
  6823                           ;doprnt.c: 499: signed char c;
  6824                           ;doprnt.c: 506: signed char prec;
  6825                           ;doprnt.c: 508: unsigned char flag;
  6826                           ;doprnt.c: 523: union {
  6827                           ;doprnt.c: 524: unsigned long vd;
  6828                           ;doprnt.c: 525: double integ;
  6829                           ;doprnt.c: 526: } tmpval;
  6830                           ;doprnt.c: 528: unsigned int val;
  6831                           ;doprnt.c: 529: unsigned len;
  6832                           ;doprnt.c: 530: const char * cp;
  6833                           ;doprnt.c: 533: *ap = __va_start();
  6834                           
  6835                           ;incstack = 0
  6836  001094  0E67               	movlw	low (?i1_printf+3)
  6837  001096  0100               	movlb	0	; () banked
  6838  001098  6F6D               	movwf	i1printf@ap& (0+255),b
  6839  00109A  0E00               	movlw	high (?i1_printf+3)
  6840  00109C  0100               	movlb	0	; () banked
  6841  00109E  6F6E               	movwf	(i1printf@ap+1)& (0+255),b
  6842                           
  6843                           ;doprnt.c: 536: while(c = *f++) {
  6844  0010A0  D114               	goto	i1l3250
  6845  0010A2                     i1l3170:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;doprnt.c: 538: if(c != '%')
  6849  0010A2  0E25               	movlw	37
  6850  0010A4  0100               	movlb	0	; () banked
  6851  0010A6  1973               	xorwf	i1printf@c& (0+255),w,b
  6852  0010A8  B4D8               	btfsc	status,2,c
  6853  0010AA  D005               	goto	i1l3174
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;doprnt.c: 540: {
  6857                           ;doprnt.c: 541: (putch(c) );
  6858  0010AC  0100               	movlb	0	; () banked
  6859  0010AE  5173               	movf	i1printf@c& (0+255),w,b
  6860  0010B0  ECDD  F010         	call	i1_putch
  6861                           
  6862                           ;doprnt.c: 542: continue;
  6863  0010B4  D10A               	goto	i1l3250
  6864  0010B6                     i1l3174:
  6865                           
  6866                           ;doprnt.c: 543: }
  6867                           ;doprnt.c: 548: flag = 0;
  6868  0010B6  0E00               	movlw	0
  6869  0010B8  0100               	movlb	0	; () banked
  6870  0010BA  6F70               	movwf	i1printf@flag& (0+255),b
  6871                           
  6872                           ;doprnt.c: 635: switch(c = *f++) {
  6873  0010BC  D008               	goto	i1l3182
  6874  0010BE                     i1l3176:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;doprnt.c: 721: flag |= 0x80;
  6878  0010BE  0100               	movlb	0	; () banked
  6879  0010C0  8F70               	bsf	i1printf@flag& (0+255),7,b
  6880                           
  6881                           ;doprnt.c: 723: break;
  6882  0010C2  D028               	goto	i1l517
  6883  0010C4                     i1l3178:
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;doprnt.c: 809: (putch(c) );
  6887  0010C4  0100               	movlb	0	; () banked
  6888  0010C6  5173               	movf	i1printf@c& (0+255),w,b
  6889  0010C8  ECDD  F010         	call	i1_putch
  6890                           
  6891                           ;doprnt.c: 810: continue;
  6892  0010CC  D0FE               	goto	i1l3250
  6893  0010CE                     i1l3182:
  6894  0010CE  C064  F069         	movff	i1printf@f,??i1_printf
  6895  0010D2  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  6896  0010D6  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  6897  0010DA  0100               	movlb	0	; () banked
  6898  0010DC  2B64               	incf	i1printf@f& (0+255),f,b
  6899  0010DE  0E00               	movlw	0
  6900  0010E0  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  6901  0010E2  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  6902  0010E4  C069  FFF6         	movff	??i1_printf,tblptrl
  6903  0010E8  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  6904  0010EC  C06B  FFF8         	movff	??i1_printf+2,tblptru
  6905  0010F0  0008               	tblrd		*
  6906  0010F2  CFF5 F073          	movff	tablat,i1printf@c
  6907  0010F6  0100               	movlb	0	; () banked
  6908  0010F8  5173               	movf	i1printf@c& (0+255),w,b
  6909                           
  6910                           ; Switch size 1, requested type "space"
  6911                           ; Number of cases is 4, Range of values is 0 to 120
  6912                           ; switch strategies available:
  6913                           ; Name         Instructions Cycles
  6914                           ; simple_byte           13     7 (average)
  6915                           ;	Chosen strategy is simple_byte
  6916  0010FA  0A00               	xorlw	0	; case 0
  6917  0010FC  B4D8               	btfsc	status,2,c
  6918  0010FE  0012               	return	
  6919  001100  0A64               	xorlw	100	; case 100
  6920  001102  B4D8               	btfsc	status,2,c
  6921  001104  D007               	goto	i1l517
  6922  001106  0A0D               	xorlw	13	; case 105
  6923  001108  B4D8               	btfsc	status,2,c
  6924  00110A  D004               	goto	i1l517
  6925  00110C  0A11               	xorlw	17	; case 120
  6926  00110E  B4D8               	btfsc	status,2,c
  6927  001110  D7D6               	goto	i1l3176
  6928  001112  D7D8               	goto	i1l3178
  6929  001114                     i1l517:
  6930                           
  6931                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6932  001114  0100               	movlb	0	; () banked
  6933  001116  BF70               	btfsc	i1printf@flag& (0+255),7,b
  6934  001118  D019               	goto	i1l3194
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;doprnt.c: 1253: {
  6938                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6939  00111A  C06D  FFD9         	movff	i1printf@ap,fsr2l
  6940  00111E  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  6941  001122  CFDE F071          	movff	postinc2,i1printf@val
  6942  001126  CFDD F072          	movff	postdec2,i1printf@val+1
  6943                           
  6944                           ; BSR set to: 0
  6945  00112A  0E02               	movlw	2
  6946  00112C  0100               	movlb	0	; () banked
  6947  00112E  276D               	addwf	i1printf@ap& (0+255),f,b
  6948  001130  0E00               	movlw	0
  6949  001132  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1261: if((int)val < 0) {
  6953  001134  0100               	movlb	0	; () banked
  6954  001136  AF72               	btfss	(i1printf@val+1)& (0+255),7,b
  6955  001138  D053               	goto	i1l3228
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;doprnt.c: 1262: flag |= 0x03;
  6959  00113A  0E03               	movlw	3
  6960  00113C  0100               	movlb	0	; () banked
  6961  00113E  1370               	iorwf	i1printf@flag& (0+255),f,b
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;doprnt.c: 1263: val = -val;
  6965  001140  0100               	movlb	0	; () banked
  6966  001142  6D71               	negf	i1printf@val& (0+255),b
  6967  001144  1F72               	comf	(i1printf@val+1)& (0+255),f,b
  6968  001146  B0D8               	btfsc	status,0,c
  6969  001148  2B72               	incf	(i1printf@val+1)& (0+255),f,b
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;doprnt.c: 1264: }
  6973                           ;doprnt.c: 1266: }
  6974  00114A  D04A               	goto	i1l3228
  6975  00114C                     i1l3194:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 1268: else
  6979                           ;doprnt.c: 1273: {
  6980                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6981  00114C  C06D  FFD9         	movff	i1printf@ap,fsr2l
  6982  001150  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  6983  001154  CFDE F071          	movff	postinc2,i1printf@val
  6984  001158  CFDD F072          	movff	postdec2,i1printf@val+1
  6985                           
  6986                           ; BSR set to: 0
  6987  00115C  0E02               	movlw	2
  6988  00115E  0100               	movlb	0	; () banked
  6989  001160  276D               	addwf	i1printf@ap& (0+255),f,b
  6990  001162  0E00               	movlw	0
  6991  001164  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;doprnt.c: 1287: }
  6995                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6996  001166  D03C               	goto	i1l3228
  6997  001168                     i1l3198:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7001  001168  0E01               	movlw	1
  7002  00116A  0100               	movlb	0	; () banked
  7003  00116C  6F73               	movwf	i1printf@c& (0+255),b
  7004  00116E                     i1l3200:
  7005                           
  7006                           ; BSR set to: 0
  7007  00116E  0E05               	movlw	5
  7008  001170  0100               	movlb	0	; () banked
  7009  001172  1973               	xorwf	i1printf@c& (0+255),w,b
  7010  001174  B4D8               	btfsc	status,2,c
  7011  001176  D03D               	goto	i1l3230
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;doprnt.c: 1306: if(val < dpowers[c])
  7015                           
  7016                           ; BSR set to: 0
  7017                           
  7018                           ; BSR set to: 0
  7019  001178  0100               	movlb	0	; () banked
  7020  00117A  5173               	movf	i1printf@c& (0+255),w,b
  7021  00117C  0D02               	mullw	2
  7022  00117E  0E01               	movlw	low _dpowers
  7023  001180  24F3               	addwf	prodl,w,c
  7024  001182  6EF6               	movwf	tblptrl,c
  7025  001184  0E08               	movlw	high _dpowers
  7026  001186  20F4               	addwfc	prodh,w,c
  7027  001188  6EF7               	movwf	tblptrh,c
  7028  00118A                     	if	0	;There are less than 3 active tblptr bytes
  7029  00118A                     	endif
  7030  00118A  0009               	tblrd		*+
  7031  00118C  50F5               	movf	tablat,w,c
  7032  00118E  0100               	movlb	0	; () banked
  7033  001190  5D71               	subwf	i1printf@val& (0+255),w,b
  7034  001192  0009               	tblrd		*+
  7035  001194  50F5               	movf	tablat,w,c
  7036  001196  0100               	movlb	0	; () banked
  7037  001198  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7038  00119A  A0D8               	btfss	status,0,c
  7039  00119C  D02A               	goto	i1l3230
  7040                           
  7041                           ; BSR set to: 0
  7042                           
  7043                           ; BSR set to: 0
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;doprnt.c: 1307: break;
  7047  00119E  0100               	movlb	0	; () banked
  7048  0011A0  2B73               	incf	i1printf@c& (0+255),f,b
  7049  0011A2  D7E5               	goto	i1l3200
  7050  0011A4                     i1l3212:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7054  0011A4  0E01               	movlw	1
  7055  0011A6  0100               	movlb	0	; () banked
  7056  0011A8  6F73               	movwf	i1printf@c& (0+255),b
  7057  0011AA                     i1l3214:
  7058                           
  7059                           ; BSR set to: 0
  7060  0011AA  0E04               	movlw	4
  7061  0011AC  0100               	movlb	0	; () banked
  7062  0011AE  1973               	xorwf	i1printf@c& (0+255),w,b
  7063  0011B0  B4D8               	btfsc	status,2,c
  7064  0011B2  D01F               	goto	i1l3230
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7068                           
  7069                           ; BSR set to: 0
  7070                           
  7071                           ; BSR set to: 0
  7072  0011B4  0100               	movlb	0	; () banked
  7073  0011B6  5173               	movf	i1printf@c& (0+255),w,b
  7074  0011B8  0D02               	mullw	2
  7075  0011BA  0E0B               	movlw	low _hexpowers
  7076  0011BC  24F3               	addwf	prodl,w,c
  7077  0011BE  6EF6               	movwf	tblptrl,c
  7078  0011C0  0E08               	movlw	high _hexpowers
  7079  0011C2  20F4               	addwfc	prodh,w,c
  7080  0011C4  6EF7               	movwf	tblptrh,c
  7081  0011C6                     	if	0	;There are less than 3 active tblptr bytes
  7082  0011C6                     	endif
  7083  0011C6  0009               	tblrd		*+
  7084  0011C8  50F5               	movf	tablat,w,c
  7085  0011CA  0100               	movlb	0	; () banked
  7086  0011CC  5D71               	subwf	i1printf@val& (0+255),w,b
  7087  0011CE  0009               	tblrd		*+
  7088  0011D0  50F5               	movf	tablat,w,c
  7089  0011D2  0100               	movlb	0	; () banked
  7090  0011D4  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7091  0011D6  A0D8               	btfss	status,0,c
  7092  0011D8  D00C               	goto	i1l3230
  7093                           
  7094                           ; BSR set to: 0
  7095                           
  7096                           ; BSR set to: 0
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;doprnt.c: 1318: break;
  7100  0011DA  0100               	movlb	0	; () banked
  7101  0011DC  2B73               	incf	i1printf@c& (0+255),f,b
  7102  0011DE  D7E5               	goto	i1l3214
  7103  0011E0                     i1l3228:
  7104                           
  7105                           ; BSR set to: 0
  7106  0011E0  0100               	movlb	0	; () banked
  7107  0011E2  5170               	movf	i1printf@flag& (0+255),w,b
  7108  0011E4  0B80               	andlw	128
  7109                           
  7110                           ; Switch size 1, requested type "space"
  7111                           ; Number of cases is 2, Range of values is 0 to 128
  7112                           ; switch strategies available:
  7113                           ; Name         Instructions Cycles
  7114                           ; simple_byte            7     4 (average)
  7115                           ;	Chosen strategy is simple_byte
  7116  0011E6  0A00               	xorlw	0	; case 0
  7117  0011E8  B4D8               	btfsc	status,2,c
  7118  0011EA  D7BE               	goto	i1l3198
  7119  0011EC  0A80               	xorlw	128	; case 128
  7120  0011EE  B4D8               	btfsc	status,2,c
  7121  0011F0  D7D9               	goto	i1l3212
  7122  0011F2                     i1l3230:
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;doprnt.c: 1422: {
  7126                           ;doprnt.c: 1438: if(flag & 0x03)
  7127  0011F2  C070  F069         	movff	i1printf@flag,??i1_printf
  7128  0011F6  0E03               	movlw	3
  7129  0011F8  0100               	movlb	0	; () banked
  7130  0011FA  1769               	andwf	??i1_printf& (0+255),f,b
  7131  0011FC  B4D8               	btfsc	status,2,c
  7132  0011FE  D003               	goto	i1l3234
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;doprnt.c: 1439: (putch('-') );
  7136  001200  0E2D               	movlw	45
  7137  001202  ECDD  F010         	call	i1_putch
  7138  001206                     i1l3234:
  7139                           
  7140                           ;doprnt.c: 1469: }
  7141                           ;doprnt.c: 1472: prec = c;
  7142  001206  C073  F06F         	movff	i1printf@c,i1printf@prec
  7143                           
  7144                           ;doprnt.c: 1474: while(prec--) {
  7145  00120A  D059               	goto	i1l3248
  7146  00120C                     i1l3236:
  7147                           
  7148                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7149  00120C  0100               	movlb	0	; () banked
  7150  00120E  516F               	movf	i1printf@prec& (0+255),w,b
  7151  001210  0D02               	mullw	2
  7152  001212  0E01               	movlw	low _dpowers
  7153  001214  24F3               	addwf	prodl,w,c
  7154  001216  6EF6               	movwf	tblptrl,c
  7155  001218  0E08               	movlw	high _dpowers
  7156  00121A  20F4               	addwfc	prodh,w,c
  7157  00121C  6EF7               	movwf	tblptrh,c
  7158  00121E                     	if	0	;There are less than 3 active tblptr bytes
  7159  00121E                     	endif
  7160  00121E  0009               	tblrd		*+
  7161  001220  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7162  001224  000A               	tblrd		*-
  7163  001226  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7164  00122A  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7165  00122E  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7166  001232  EC8C  F00F         	call	i1___lwdiv	;wreg free
  7167  001236  C01A  F060         	movff	?i1___lwdiv,i1___lwmod@dividend
  7168  00123A  C01B  F061         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7169  00123E  0E00               	movlw	0
  7170  001240  0100               	movlb	0	; () banked
  7171  001242  6F63               	movwf	(i1___lwmod@divisor+1)& (0+255),b
  7172  001244  0E0A               	movlw	10
  7173  001246  6F62               	movwf	i1___lwmod@divisor& (0+255),b
  7174  001248  EC32  F00F         	call	i1___lwmod	;wreg free
  7175  00124C  0100               	movlb	0	; () banked
  7176  00124E  5160               	movf	?i1___lwmod& (0+255),w,b
  7177  001250  0F30               	addlw	48
  7178  001252  0100               	movlb	0	; () banked
  7179  001254  6F73               	movwf	i1printf@c& (0+255),b
  7180                           
  7181                           ;doprnt.c: 1491: break;
  7182  001256  D02F               	goto	i1l3246
  7183  001258                     i1l3238:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;doprnt.c: 1499: {
  7187                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7188  001258  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7189  00125C  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7190  001260  0100               	movlb	0	; () banked
  7191  001262  516F               	movf	i1printf@prec& (0+255),w,b
  7192  001264  0D02               	mullw	2
  7193  001266  0E0B               	movlw	low _hexpowers
  7194  001268  24F3               	addwf	prodl,w,c
  7195  00126A  6EF6               	movwf	tblptrl,c
  7196  00126C  0E08               	movlw	high _hexpowers
  7197  00126E  20F4               	addwfc	prodh,w,c
  7198  001270  6EF7               	movwf	tblptrh,c
  7199  001272                     	if	0	;There are less than 3 active tblptr bytes
  7200  001272                     	endif
  7201  001272  0009               	tblrd		*+
  7202  001274  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7203  001278  000A               	tblrd		*-
  7204  00127A  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7205  00127E  EC8C  F00F         	call	i1___lwdiv	;wreg free
  7206  001282  501A               	movf	?i1___lwdiv,w,c
  7207  001284  0B0F               	andlw	15
  7208  001286  0100               	movlb	0	; () banked
  7209  001288  6F6C               	movwf	i1printf@idx& (0+255),b
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7213  00128A  0100               	movlb	0	; () banked
  7214  00128C  516C               	movf	i1printf@idx& (0+255),w,b
  7215  00128E  0D01               	mullw	1
  7216  001290  0E13               	movlw	low STR_33
  7217  001292  24F3               	addwf	prodl,w,c
  7218  001294  6EF6               	movwf	tblptrl,c
  7219  001296  0E08               	movlw	high STR_33
  7220  001298  20F4               	addwfc	prodh,w,c
  7221  00129A  6EF7               	movwf	tblptrh,c
  7222  00129C                     	if	0	;There are less than 3 active tblptr bytes
  7223  00129C                     	endif
  7224  00129C  0008               	tblrd		*
  7225  00129E  CFF5 F073          	movff	tablat,i1printf@c
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;doprnt.c: 1523: }
  7229                           
  7230                           ;doprnt.c: 1508: }
  7231                           ;doprnt.c: 1510: break;
  7232  0012A2  D009               	goto	i1l3246
  7233  0012A4                     i1l3244:
  7234  0012A4  0100               	movlb	0	; () banked
  7235  0012A6  5170               	movf	i1printf@flag& (0+255),w,b
  7236  0012A8  0B80               	andlw	128
  7237                           
  7238                           ; Switch size 1, requested type "space"
  7239                           ; Number of cases is 2, Range of values is 0 to 128
  7240                           ; switch strategies available:
  7241                           ; Name         Instructions Cycles
  7242                           ; simple_byte            7     4 (average)
  7243                           ;	Chosen strategy is simple_byte
  7244  0012AA  0A00               	xorlw	0	; case 0
  7245  0012AC  B4D8               	btfsc	status,2,c
  7246  0012AE  D7AE               	goto	i1l3236
  7247  0012B0  0A80               	xorlw	128	; case 128
  7248  0012B2  B4D8               	btfsc	status,2,c
  7249  0012B4  D7D1               	goto	i1l3238
  7250  0012B6                     i1l3246:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;doprnt.c: 1524: (putch(c) );
  7254  0012B6  0100               	movlb	0	; () banked
  7255  0012B8  5173               	movf	i1printf@c& (0+255),w,b
  7256  0012BA  ECDD  F010         	call	i1_putch
  7257  0012BE                     i1l3248:
  7258  0012BE  0100               	movlb	0	; () banked
  7259  0012C0  076F               	decf	i1printf@prec& (0+255),f,b
  7260  0012C2  0100               	movlb	0	; () banked
  7261  0012C4  296F               	incf	i1printf@prec& (0+255),w,b
  7262  0012C6  A4D8               	btfss	status,2,c
  7263  0012C8  D7ED               	goto	i1l3244
  7264  0012CA                     i1l3250:
  7265  0012CA  C064  F069         	movff	i1printf@f,??i1_printf
  7266  0012CE  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  7267  0012D2  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  7268  0012D6  0100               	movlb	0	; () banked
  7269  0012D8  2B64               	incf	i1printf@f& (0+255),f,b
  7270  0012DA  0E00               	movlw	0
  7271  0012DC  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  7272  0012DE  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  7273  0012E0  C069  FFF6         	movff	??i1_printf,tblptrl
  7274  0012E4  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  7275  0012E8  C06B  FFF8         	movff	??i1_printf+2,tblptru
  7276  0012EC  0008               	tblrd		*
  7277  0012EE  CFF5 F073          	movff	tablat,i1printf@c
  7278  0012F2  0100               	movlb	0	; () banked
  7279  0012F4  5173               	movf	i1printf@c& (0+255),w,b
  7280  0012F6  B4D8               	btfsc	status,2,c
  7281  0012F8  0012               	return	
  7282  0012FA  D6D3               	goto	i1l3170
  7283  0012FC                     __end_ofi1_printf:
  7284                           	opt stack 0
  7285                           pclatu	equ	0xFFB
  7286                           pclath	equ	0xFFA
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           intcon2	equ	0xFF1
  7295                           postinc0	equ	0xFEE
  7296                           plusw0	equ	0xFEB
  7297                           fsr0h	equ	0xFEA
  7298                           fsr0l	equ	0xFE9
  7299                           wreg	equ	0xFE8
  7300                           postdec1	equ	0xFE5
  7301                           plusw1	equ	0xFE3
  7302                           fsr1h	equ	0xFE2
  7303                           fsr1l	equ	0xFE1
  7304                           bsr	equ	0xFE0
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           plusw2	equ	0xFDB
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function i1_putch *****************
  7314 ;; Defined at:
  7315 ;;		line 353 in file "Drivers/UART_Driver.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  data            1    wreg     unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  data            1   27[COMRAM] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0
  7330 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7332 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7333 ;;Total ram usage:        1 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    7
  7336 ;; This function calls:
  7337 ;;		i1_writeByte
  7338 ;; This function is called by:
  7339 ;;		i1_printf
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text42
  7344  0021BA                     __ptext42:
  7345                           	opt stack 0
  7346  0021BA                     i1_putch:
  7347                           	opt stack 13
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;incstack = 0
  7351                           ;i1putch@data stored from wreg
  7352  0021BA  6E1C               	movwf	i1putch@data,c
  7353                           
  7354                           ;UART_Driver.c: 354: writeByte(data);
  7355  0021BC  501C               	movf	i1putch@data,w,c
  7356  0021BE  ECB7  F010         	call	i1_writeByte
  7357  0021C2  0012               	return		;funcret
  7358  0021C4                     __end_ofi1_putch:
  7359                           	opt stack 0
  7360                           pclatu	equ	0xFFB
  7361                           pclath	equ	0xFFA
  7362                           tblptru	equ	0xFF8
  7363                           tblptrh	equ	0xFF7
  7364                           tblptrl	equ	0xFF6
  7365                           tablat	equ	0xFF5
  7366                           prodh	equ	0xFF4
  7367                           prodl	equ	0xFF3
  7368                           intcon	equ	0xFF2
  7369                           intcon2	equ	0xFF1
  7370                           postinc0	equ	0xFEE
  7371                           plusw0	equ	0xFEB
  7372                           fsr0h	equ	0xFEA
  7373                           fsr0l	equ	0xFE9
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           plusw1	equ	0xFE3
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           bsr	equ	0xFE0
  7380                           indf2	equ	0xFDF
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           plusw2	equ	0xFDB
  7384                           fsr2h	equ	0xFDA
  7385                           fsr2l	equ	0xFD9
  7386                           status	equ	0xFD8
  7387                           
  7388 ;; *************** function i1_writeByte *****************
  7389 ;; Defined at:
  7390 ;;		line 84 in file "Drivers/UART_Driver.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  data            1    wreg     unsigned char 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  data            1   26[COMRAM] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  1    wreg      void 
  7397 ;; Registers used:
  7398 ;;		wreg, status,2, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0
  7405 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7407 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7408 ;;Total ram usage:        1 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    6
  7411 ;; This function calls:
  7412 ;;		i1_D_UART_Enable
  7413 ;; This function is called by:
  7414 ;;		i1_putch
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text43
  7419  00216E                     __ptext43:
  7420                           	opt stack 0
  7421  00216E                     i1_writeByte:
  7422                           	opt stack 13
  7423                           
  7424                           ;incstack = 0
  7425                           ;i1writeByte@data stored from wreg
  7426  00216E  6E1B               	movwf	i1writeByte@data,c
  7427                           
  7428                           ;UART_Driver.c: 85: D_UART_Enable(1);
  7429  002170  0E01               	movlw	1
  7430  002172  EC81  F010         	call	i1_D_UART_Enable
  7431  002176                     i1l107:
  7432  002176  A2AC               	btfss	4012,1,c	;volatile
  7433  002178  D7FE               	goto	i1l107
  7434                           
  7435                           ;UART_Driver.c: 87: TXREG = data;
  7436  00217A  C01B  FFAD         	movff	i1writeByte@data,4013	;volatile
  7437  00217E  0012               	return		;funcret
  7438  002180                     __end_ofi1_writeByte:
  7439                           	opt stack 0
  7440                           pclatu	equ	0xFFB
  7441                           pclath	equ	0xFFA
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           postinc0	equ	0xFEE
  7451                           plusw0	equ	0xFEB
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           postdec1	equ	0xFE5
  7456                           plusw1	equ	0xFE3
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           bsr	equ	0xFE0
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           plusw2	equ	0xFDB
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function i1_D_UART_Enable *****************
  7469 ;; Defined at:
  7470 ;;		line 319 in file "Drivers/UART_Driver.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  enable          1    wreg     unsigned char 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  enable          1   25[COMRAM] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7484 ;;      Params:         0       0       0       0       0       0       0       0       0
  7485 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7487 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7488 ;;Total ram usage:        1 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    5
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_readByte
  7495 ;;		i1_writeByte
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           	psect	text44
  7500  002102                     __ptext44:
  7501                           	opt stack 0
  7502  002102                     i1_D_UART_Enable:
  7503                           	opt stack 17
  7504                           
  7505                           ;incstack = 0
  7506                           ;i1D_UART_Enable@enable stored from wreg
  7507  002102  6E1A               	movwf	i1D_UART_Enable@enable,c
  7508                           
  7509                           ;UART_Driver.c: 320: if(enable) {
  7510  002104  501A               	movf	i1D_UART_Enable@enable,w,c
  7511  002106  B4D8               	btfsc	status,2,c
  7512  002108  D006               	goto	i1l185
  7513                           
  7514                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  7515  00210A  9C94               	bcf	3988,6,c	;volatile
  7516                           
  7517                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  7518  00210C  8E94               	bsf	3988,7,c	;volatile
  7519                           
  7520                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  7521  00210E  8AAC               	bsf	4012,5,c	;volatile
  7522                           
  7523                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  7524  002110  88AB               	bsf	4011,4,c	;volatile
  7525                           
  7526                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  7527  002112  8EAB               	bsf	4011,7,c	;volatile
  7528                           
  7529                           ;UART_Driver.c: 326: } else {
  7530  002114  0012               	return	
  7531  002116                     i1l185:
  7532                           
  7533                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  7534  002116  9C94               	bcf	3988,6,c	;volatile
  7535                           
  7536                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  7537  002118  9E94               	bcf	3988,7,c	;volatile
  7538                           
  7539                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  7540  00211A  9AAC               	bcf	4012,5,c	;volatile
  7541                           
  7542                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  7543  00211C  98AB               	bcf	4011,4,c	;volatile
  7544                           
  7545                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  7546  00211E  9EAB               	bcf	4011,7,c	;volatile
  7547  002120  0012               	return	
  7548  002122                     __end_ofi1_D_UART_Enable:
  7549                           	opt stack 0
  7550                           pclatu	equ	0xFFB
  7551                           pclath	equ	0xFFA
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           prodh	equ	0xFF4
  7557                           prodl	equ	0xFF3
  7558                           intcon	equ	0xFF2
  7559                           intcon2	equ	0xFF1
  7560                           postinc0	equ	0xFEE
  7561                           plusw0	equ	0xFEB
  7562                           fsr0h	equ	0xFEA
  7563                           fsr0l	equ	0xFE9
  7564                           wreg	equ	0xFE8
  7565                           postdec1	equ	0xFE5
  7566                           plusw1	equ	0xFE3
  7567                           fsr1h	equ	0xFE2
  7568                           fsr1l	equ	0xFE1
  7569                           bsr	equ	0xFE0
  7570                           indf2	equ	0xFDF
  7571                           postinc2	equ	0xFDE
  7572                           postdec2	equ	0xFDD
  7573                           plusw2	equ	0xFDB
  7574                           fsr2h	equ	0xFDA
  7575                           fsr2l	equ	0xFD9
  7576                           status	equ	0xFD8
  7577                           
  7578 ;; *************** function i1___lwmod *****************
  7579 ;; Defined at:
  7580 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  dividend        2    0[BANK0 ] unsigned int 
  7583 ;;  divisor         2    2[BANK0 ] unsigned int 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  __lwmod         1   32[COMRAM] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  2    0[BANK0 ] unsigned int 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7595 ;;      Params:         0       4       0       0       0       0       0       0       0
  7596 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7598 ;;      Totals:         1       4       0       0       0       0       0       0       0
  7599 ;;Total ram usage:        5 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    5
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		i1_printf
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text45
  7610  001E64                     __ptext45:
  7611                           	opt stack 0
  7612  001E64                     i1___lwmod:
  7613                           	opt stack 15
  7614                           
  7615                           ;incstack = 0
  7616  001E64  0100               	movlb	0	; () banked
  7617  001E66  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7618  001E68  0100               	movlb	0	; () banked
  7619  001E6A  1163               	iorwf	(i1___lwmod@divisor+1)& (0+255),w,b
  7620  001E6C  B4D8               	btfsc	status,2,c
  7621  001E6E  D023               	goto	i1l955
  7622                           
  7623                           ; BSR set to: 0
  7624  001E70  0E01               	movlw	1
  7625  001E72  6E21               	movwf	i1___lwmod@counter,c
  7626  001E74  D005               	goto	i1l3158
  7627  001E76                     i1l3156:
  7628                           
  7629                           ; BSR set to: 0
  7630  001E76  0100               	movlb	0	; () banked
  7631  001E78  90D8               	bcf	status,0,c
  7632  001E7A  3762               	rlcf	i1___lwmod@divisor& (0+255),f,b
  7633  001E7C  3763               	rlcf	(i1___lwmod@divisor+1)& (0+255),f,b
  7634  001E7E  2A21               	incf	i1___lwmod@counter,f,c
  7635  001E80                     i1l3158:
  7636                           
  7637                           ; BSR set to: 0
  7638  001E80  0100               	movlb	0	; () banked
  7639  001E82  AF63               	btfss	(i1___lwmod@divisor+1)& (0+255),7,b
  7640  001E84  D7F8               	goto	i1l3156
  7641  001E86                     i1l3160:
  7642                           
  7643                           ; BSR set to: 0
  7644  001E86  0100               	movlb	0	; () banked
  7645  001E88  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7646  001E8A  0100               	movlb	0	; () banked
  7647  001E8C  5D60               	subwf	i1___lwmod@dividend& (0+255),w,b
  7648  001E8E  0100               	movlb	0	; () banked
  7649  001E90  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  7650  001E92  0100               	movlb	0	; () banked
  7651  001E94  5961               	subwfb	(i1___lwmod@dividend+1)& (0+255),w,b
  7652  001E96  A0D8               	btfss	status,0,c
  7653  001E98  D008               	goto	i1l3164
  7654                           
  7655                           ; BSR set to: 0
  7656  001E9A  0100               	movlb	0	; () banked
  7657  001E9C  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7658  001E9E  0100               	movlb	0	; () banked
  7659  001EA0  5F60               	subwf	i1___lwmod@dividend& (0+255),f,b
  7660  001EA2  0100               	movlb	0	; () banked
  7661  001EA4  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  7662  001EA6  0100               	movlb	0	; () banked
  7663  001EA8  5B61               	subwfb	(i1___lwmod@dividend+1)& (0+255),f,b
  7664  001EAA                     i1l3164:
  7665                           
  7666                           ; BSR set to: 0
  7667  001EAA  0100               	movlb	0	; () banked
  7668  001EAC  90D8               	bcf	status,0,c
  7669  001EAE  3363               	rrcf	(i1___lwmod@divisor+1)& (0+255),f,b
  7670  001EB0  3362               	rrcf	i1___lwmod@divisor& (0+255),f,b
  7671                           
  7672                           ; BSR set to: 0
  7673  001EB2  2E21               	decfsz	i1___lwmod@counter,f,c
  7674  001EB4  D7E8               	goto	i1l3160
  7675  001EB6                     i1l955:
  7676                           
  7677                           ; BSR set to: 0
  7678  001EB6  C060  F060         	movff	i1___lwmod@dividend,?i1___lwmod
  7679  001EBA  C061  F061         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  7680                           
  7681                           ; BSR set to: 0
  7682  001EBE  0012               	return		;funcret
  7683  001EC0                     __end_ofi1___lwmod:
  7684                           	opt stack 0
  7685                           pclatu	equ	0xFFB
  7686                           pclath	equ	0xFFA
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           intcon2	equ	0xFF1
  7695                           postinc0	equ	0xFEE
  7696                           plusw0	equ	0xFEB
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           postdec1	equ	0xFE5
  7701                           plusw1	equ	0xFE3
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           bsr	equ	0xFE0
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           plusw2	equ	0xFDB
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function i1___lwdiv *****************
  7714 ;; Defined at:
  7715 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  dividend        2   25[COMRAM] unsigned int 
  7718 ;;  divisor         2   27[COMRAM] unsigned int 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  __lwdiv         2   30[COMRAM] unsigned int 
  7721 ;;  __lwdiv         1   29[COMRAM] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  2   25[COMRAM] unsigned int 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7731 ;;      Params:         4       0       0       0       0       0       0       0       0
  7732 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7734 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7735 ;;Total ram usage:        7 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    5
  7738 ;; This function calls:
  7739 ;;		Nothing
  7740 ;; This function is called by:
  7741 ;;		i1_printf
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text46
  7746  001F18                     __ptext46:
  7747                           	opt stack 0
  7748  001F18                     i1___lwdiv:
  7749                           	opt stack 15
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;incstack = 0
  7753  001F18  0E00               	movlw	0
  7754  001F1A  6E20               	movwf	i1___lwdiv@quotient+1,c
  7755  001F1C  0E00               	movlw	0
  7756  001F1E  6E1F               	movwf	i1___lwdiv@quotient,c
  7757  001F20  501C               	movf	i1___lwdiv@divisor,w,c
  7758  001F22  101D               	iorwf	i1___lwdiv@divisor+1,w,c
  7759  001F24  B4D8               	btfsc	status,2,c
  7760  001F26  D01C               	goto	i1l945
  7761  001F28  0E01               	movlw	1
  7762  001F2A  6E1E               	movwf	i1___lwdiv@counter,c
  7763  001F2C  D004               	goto	i1l3138
  7764  001F2E                     i1l3136:
  7765  001F2E  90D8               	bcf	status,0,c
  7766  001F30  361C               	rlcf	i1___lwdiv@divisor,f,c
  7767  001F32  361D               	rlcf	i1___lwdiv@divisor+1,f,c
  7768  001F34  2A1E               	incf	i1___lwdiv@counter,f,c
  7769  001F36                     i1l3138:
  7770  001F36  AE1D               	btfss	i1___lwdiv@divisor+1,7,c
  7771  001F38  D7FA               	goto	i1l3136
  7772  001F3A                     i1l3140:
  7773  001F3A  90D8               	bcf	status,0,c
  7774  001F3C  361F               	rlcf	i1___lwdiv@quotient,f,c
  7775  001F3E  3620               	rlcf	i1___lwdiv@quotient+1,f,c
  7776  001F40  501C               	movf	i1___lwdiv@divisor,w,c
  7777  001F42  5C1A               	subwf	i1___lwdiv@dividend,w,c
  7778  001F44  501D               	movf	i1___lwdiv@divisor+1,w,c
  7779  001F46  581B               	subwfb	i1___lwdiv@dividend+1,w,c
  7780  001F48  A0D8               	btfss	status,0,c
  7781  001F4A  D005               	goto	i1l3148
  7782  001F4C  501C               	movf	i1___lwdiv@divisor,w,c
  7783  001F4E  5E1A               	subwf	i1___lwdiv@dividend,f,c
  7784  001F50  501D               	movf	i1___lwdiv@divisor+1,w,c
  7785  001F52  5A1B               	subwfb	i1___lwdiv@dividend+1,f,c
  7786  001F54  801F               	bsf	i1___lwdiv@quotient,0,c
  7787  001F56                     i1l3148:
  7788  001F56  90D8               	bcf	status,0,c
  7789  001F58  321D               	rrcf	i1___lwdiv@divisor+1,f,c
  7790  001F5A  321C               	rrcf	i1___lwdiv@divisor,f,c
  7791  001F5C  2E1E               	decfsz	i1___lwdiv@counter,f,c
  7792  001F5E  D7ED               	goto	i1l3140
  7793  001F60                     i1l945:
  7794  001F60  C01F  F01A         	movff	i1___lwdiv@quotient,?i1___lwdiv
  7795  001F64  C020  F01B         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  7796  001F68  0012               	return		;funcret
  7797  001F6A                     __end_ofi1___lwdiv:
  7798                           	opt stack 0
  7799                           pclatu	equ	0xFFB
  7800                           pclath	equ	0xFFA
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           intcon2	equ	0xFF1
  7809                           postinc0	equ	0xFEE
  7810                           plusw0	equ	0xFEB
  7811                           fsr0h	equ	0xFEA
  7812                           fsr0l	equ	0xFE9
  7813                           wreg	equ	0xFE8
  7814                           postdec1	equ	0xFE5
  7815                           plusw1	equ	0xFE3
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           bsr	equ	0xFE0
  7819                           indf2	equ	0xFDF
  7820                           postinc2	equ	0xFDE
  7821                           postdec2	equ	0xFDD
  7822                           plusw2	equ	0xFDB
  7823                           fsr2h	equ	0xFDA
  7824                           fsr2l	equ	0xFD9
  7825                           status	equ	0xFD8
  7826                           
  7827 ;; *************** function _HighISR *****************
  7828 ;; Defined at:
  7829 ;;		line 379 in file "Drivers/PWM_Driver.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;		None
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      void 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7843 ;;      Params:         0       0       0       0       0       0       0       0       0
  7844 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7845 ;;      Temps:         14       0       0       0       0       0       0       0       0
  7846 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7847 ;;Total ram usage:       14 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		_handleState
  7852 ;; This function is called by:
  7853 ;;		Interrupt level 2
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	intcode
  7858  000008                     __pintcode:
  7859                           	opt stack 0
  7860  000008                     _HighISR:
  7861                           	opt stack 13
  7862                           
  7863                           ;incstack = 0
  7864  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7865  00000A  ED96  F00C         	call	int_func,f	;refresh shadow registers
  7866                           pclatu	equ	0xFFB
  7867                           pclath	equ	0xFFA
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon2	equ	0xFF1
  7876                           postinc0	equ	0xFEE
  7877                           plusw0	equ	0xFEB
  7878                           fsr0h	equ	0xFEA
  7879                           fsr0l	equ	0xFE9
  7880                           wreg	equ	0xFE8
  7881                           postdec1	equ	0xFE5
  7882                           plusw1	equ	0xFE3
  7883                           fsr1h	equ	0xFE2
  7884                           fsr1l	equ	0xFE1
  7885                           bsr	equ	0xFE0
  7886                           indf2	equ	0xFDF
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           plusw2	equ	0xFDB
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894                           	psect	intcode_body
  7895  00192C                     __pintcode_body:
  7896                           	opt stack 13
  7897  00192C                     int_func:
  7898                           	opt stack 13
  7899  00192C  0006               	pop		; remove dummy address from shadow register refresh
  7900  00192E  CFFA F00C          	movff	pclath,??_HighISR
  7901  001932  CFFB F00D          	movff	pclatu,??_HighISR+1
  7902  001936  CFE9 F00E          	movff	fsr0l,??_HighISR+2
  7903  00193A  CFEA F00F          	movff	fsr0h,??_HighISR+3
  7904  00193E  CFE1 F010          	movff	fsr1l,??_HighISR+4
  7905  001942  CFE2 F011          	movff	fsr1h,??_HighISR+5
  7906  001946  CFD9 F012          	movff	fsr2l,??_HighISR+6
  7907  00194A  CFDA F013          	movff	fsr2h,??_HighISR+7
  7908  00194E  CFF3 F014          	movff	prodl,??_HighISR+8
  7909  001952  CFF4 F015          	movff	prodh,??_HighISR+9
  7910  001956  CFF6 F016          	movff	tblptrl,??_HighISR+10
  7911  00195A  CFF7 F017          	movff	tblptrh,??_HighISR+11
  7912  00195E  CFF8 F018          	movff	tblptru,??_HighISR+12
  7913  001962  CFF5 F019          	movff	tablat,??_HighISR+13
  7914                           
  7915                           ;PWM_Driver.c: 380: if (INTCONbits.TMR0IF) {
  7916  001966  A4F2               	btfss	intcon,2,c	;volatile
  7917  001968  D007               	goto	i2l393
  7918                           
  7919                           ;PWM_Driver.c: 381: TMR0L = 0;
  7920  00196A  0E00               	movlw	0
  7921  00196C  6ED6               	movwf	4054,c	;volatile
  7922                           
  7923                           ;PWM_Driver.c: 382: TMR0H = 0;
  7924  00196E  0E00               	movlw	0
  7925  001970  6ED7               	movwf	4055,c	;volatile
  7926                           
  7927                           ;PWM_Driver.c: 383: INTCONbits.TMR0IF = 0;
  7928  001972  94F2               	bcf	intcon,2,c	;volatile
  7929                           
  7930                           ;PWM_Driver.c: 384: handleState();
  7931  001974  EC06  F00E         	call	_handleState	;wreg free
  7932  001978                     i2l393:
  7933  001978  C019  FFF5         	movff	??_HighISR+13,tablat
  7934  00197C  C018  FFF8         	movff	??_HighISR+12,tblptru
  7935  001980  C017  FFF7         	movff	??_HighISR+11,tblptrh
  7936  001984  C016  FFF6         	movff	??_HighISR+10,tblptrl
  7937  001988  C015  FFF4         	movff	??_HighISR+9,prodh
  7938  00198C  C014  FFF3         	movff	??_HighISR+8,prodl
  7939  001990  C013  FFDA         	movff	??_HighISR+7,fsr2h
  7940  001994  C012  FFD9         	movff	??_HighISR+6,fsr2l
  7941  001998  C011  FFE2         	movff	??_HighISR+5,fsr1h
  7942  00199C  C010  FFE1         	movff	??_HighISR+4,fsr1l
  7943  0019A0  C00F  FFEA         	movff	??_HighISR+3,fsr0h
  7944  0019A4  C00E  FFE9         	movff	??_HighISR+2,fsr0l
  7945  0019A8  C00D  FFFB         	movff	??_HighISR+1,pclatu
  7946  0019AC  C00C  FFFA         	movff	??_HighISR,pclath
  7947  0019B0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7948  0019B2  0011               	retfie		f
  7949  0019B4                     __end_of_HighISR:
  7950                           	opt stack 0
  7951                           pclatu	equ	0xFFB
  7952                           pclath	equ	0xFFA
  7953                           tblptru	equ	0xFF8
  7954                           tblptrh	equ	0xFF7
  7955                           tblptrl	equ	0xFF6
  7956                           tablat	equ	0xFF5
  7957                           prodh	equ	0xFF4
  7958                           prodl	equ	0xFF3
  7959                           intcon	equ	0xFF2
  7960                           intcon2	equ	0xFF1
  7961                           postinc0	equ	0xFEE
  7962                           plusw0	equ	0xFEB
  7963                           fsr0h	equ	0xFEA
  7964                           fsr0l	equ	0xFE9
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           plusw1	equ	0xFE3
  7968                           fsr1h	equ	0xFE2
  7969                           fsr1l	equ	0xFE1
  7970                           bsr	equ	0xFE0
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           plusw2	equ	0xFDB
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function _handleState *****************
  7980 ;; Defined at:
  7981 ;;		line 234 in file "Drivers/PWM_Driver.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7995 ;;      Params:         0       0       0       0       0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7998 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7999 ;;Total ram usage:        0 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    3
  8002 ;; This function calls:
  8003 ;;		_fade
  8004 ;;		_flash
  8005 ;;		_pwmColors
  8006 ;;		_smooth
  8007 ;;		_strobe2
  8008 ;; This function is called by:
  8009 ;;		_HighISR
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text48
  8014  001C0C                     __ptext48:
  8015                           	opt stack 0
  8016  001C0C                     _handleState:
  8017                           	opt stack 13
  8018                           
  8019                           ;PWM_Driver.c: 235: static uint8_t cnt;
  8020                           ;PWM_Driver.c: 237: switch(state) {
  8021                           
  8022                           ;incstack = 0
  8023  001C0C  D024               	goto	i2l2964
  8024  001C0E                     i2l2944:
  8025                           
  8026                           ;PWM_Driver.c: 239: pwmColors(scale);
  8027  001C0E  502E               	movf	_scale,w,c
  8028  001C10  ECDA  F00C         	call	_pwmColors
  8029                           
  8030                           ;PWM_Driver.c: 240: break;
  8031  001C14  D030               	goto	i2l2966
  8032  001C16                     i2l2946:
  8033                           
  8034                           ;PWM_Driver.c: 243: if (cnt == 0) {
  8035  001C16  5036               	movf	handleState@cnt,w,c
  8036  001C18  B4D8               	btfsc	status,2,c
  8037                           
  8038                           ;PWM_Driver.c: 244: flash();
  8039  001C1A  ECA6  F00B         	call	_flash	;wreg free
  8040                           
  8041                           ;PWM_Driver.c: 245: }
  8042                           ;PWM_Driver.c: 246: pwmColors(0);
  8043  001C1E  0E00               	movlw	0
  8044  001C20  ECDA  F00C         	call	_pwmColors
  8045                           
  8046                           ;PWM_Driver.c: 247: break;
  8047  001C24  D028               	goto	i2l2966
  8048  001C26                     i2l2950:
  8049                           
  8050                           ;PWM_Driver.c: 250: if (cnt == 0) {
  8051  001C26  5036               	movf	handleState@cnt,w,c
  8052  001C28  B4D8               	btfsc	status,2,c
  8053                           
  8054                           ;PWM_Driver.c: 251: strobe2();
  8055  001C2A  EC56  F00D         	call	_strobe2	;wreg free
  8056                           
  8057                           ;PWM_Driver.c: 252: }
  8058                           ;PWM_Driver.c: 253: pwmColors(0);
  8059  001C2E  0E00               	movlw	0
  8060  001C30  ECDA  F00C         	call	_pwmColors
  8061                           
  8062                           ;PWM_Driver.c: 254: break;
  8063  001C34  D020               	goto	i2l2966
  8064  001C36                     i2l2954:
  8065                           
  8066                           ;PWM_Driver.c: 257: if (cnt == 0) {
  8067  001C36  5036               	movf	handleState@cnt,w,c
  8068  001C38  B4D8               	btfsc	status,2,c
  8069                           
  8070                           ;PWM_Driver.c: 258: fade();
  8071  001C3A  EC18  F00D         	call	_fade	;wreg free
  8072                           
  8073                           ;PWM_Driver.c: 259: }
  8074                           ;PWM_Driver.c: 260: pwmColors(0);
  8075  001C3E  0E00               	movlw	0
  8076  001C40  ECDA  F00C         	call	_pwmColors
  8077                           
  8078                           ;PWM_Driver.c: 261: break;
  8079  001C44  D018               	goto	i2l2966
  8080  001C46                     i2l2958:
  8081                           
  8082                           ;PWM_Driver.c: 264: if (cnt == 0) {
  8083  001C46  5036               	movf	handleState@cnt,w,c
  8084  001C48  B4D8               	btfsc	status,2,c
  8085                           
  8086                           ;PWM_Driver.c: 265: smooth();
  8087  001C4A  EC7B  F00A         	call	_smooth	;wreg free
  8088                           
  8089                           ;PWM_Driver.c: 266: }
  8090                           ;PWM_Driver.c: 267: pwmColors(0);
  8091  001C4E  0E00               	movlw	0
  8092  001C50  ECDA  F00C         	call	_pwmColors
  8093                           
  8094                           ;PWM_Driver.c: 272: }
  8095                           
  8096                           ;PWM_Driver.c: 271: break;
  8097                           
  8098                           ;PWM_Driver.c: 270: default:
  8099                           
  8100                           ;PWM_Driver.c: 268: break;
  8101  001C54  D010               	goto	i2l2966
  8102  001C56                     i2l2964:
  8103  001C56  502F               	movf	_state,w,c
  8104                           
  8105                           ; Switch size 1, requested type "space"
  8106                           ; Number of cases is 5, Range of values is 0 to 4
  8107                           ; switch strategies available:
  8108                           ; Name         Instructions Cycles
  8109                           ; simple_byte           16     9 (average)
  8110                           ;	Chosen strategy is simple_byte
  8111  001C58  0A00               	xorlw	0	; case 0
  8112  001C5A  B4D8               	btfsc	status,2,c
  8113  001C5C  D7D8               	goto	i2l2944
  8114  001C5E  0A01               	xorlw	1	; case 1
  8115  001C60  B4D8               	btfsc	status,2,c
  8116  001C62  D7D9               	goto	i2l2946
  8117  001C64  0A03               	xorlw	3	; case 2
  8118  001C66  B4D8               	btfsc	status,2,c
  8119  001C68  D7DE               	goto	i2l2950
  8120  001C6A  0A01               	xorlw	1	; case 3
  8121  001C6C  B4D8               	btfsc	status,2,c
  8122  001C6E  D7E3               	goto	i2l2954
  8123  001C70  0A07               	xorlw	7	; case 4
  8124  001C72  B4D8               	btfsc	status,2,c
  8125  001C74  D7E8               	goto	i2l2958
  8126  001C76                     i2l2966:
  8127                           
  8128                           ;PWM_Driver.c: 273: cnt++;
  8129  001C76  2A36               	incf	handleState@cnt,f,c
  8130  001C78  0012               	return		;funcret
  8131  001C7A                     __end_of_handleState:
  8132                           	opt stack 0
  8133                           pclatu	equ	0xFFB
  8134                           pclath	equ	0xFFA
  8135                           tblptru	equ	0xFF8
  8136                           tblptrh	equ	0xFF7
  8137                           tblptrl	equ	0xFF6
  8138                           tablat	equ	0xFF5
  8139                           prodh	equ	0xFF4
  8140                           prodl	equ	0xFF3
  8141                           intcon	equ	0xFF2
  8142                           intcon2	equ	0xFF1
  8143                           postinc0	equ	0xFEE
  8144                           plusw0	equ	0xFEB
  8145                           fsr0h	equ	0xFEA
  8146                           fsr0l	equ	0xFE9
  8147                           wreg	equ	0xFE8
  8148                           postdec1	equ	0xFE5
  8149                           plusw1	equ	0xFE3
  8150                           fsr1h	equ	0xFE2
  8151                           fsr1l	equ	0xFE1
  8152                           bsr	equ	0xFE0
  8153                           indf2	equ	0xFDF
  8154                           postinc2	equ	0xFDE
  8155                           postdec2	equ	0xFDD
  8156                           plusw2	equ	0xFDB
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _strobe2 *****************
  8162 ;; Defined at:
  8163 ;;		line 125 in file "Drivers/PWM_Driver.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      void 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8179 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8180 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8181 ;;Total ram usage:        5 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    2
  8184 ;; This function calls:
  8185 ;;		i2_setRGB
  8186 ;; This function is called by:
  8187 ;;		_handleState
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text49
  8192  001AAC                     __ptext49:
  8193                           	opt stack 0
  8194  001AAC                     _strobe2:
  8195                           	opt stack 13
  8196                           
  8197                           ;PWM_Driver.c: 126: static uint8_t cnt;
  8198                           ;PWM_Driver.c: 127: static uint8_t on_cnt;
  8199                           ;PWM_Driver.c: 128: static bool on;
  8200                           ;PWM_Driver.c: 130: if (cnt < ((scale<<6)+1)) {
  8201                           
  8202                           ;incstack = 0
  8203  001AAC  502E               	movf	_scale,w,c
  8204  001AAE  6E06               	movwf	??_strobe2& (0+255),c
  8205  001AB0  6A07               	clrf	(??_strobe2+1)& (0+255),c
  8206  001AB2  0E06               	movlw	6
  8207  001AB4                     i2u187_45:
  8208  001AB4  90D8               	bcf	status,0,c
  8209  001AB6  3606               	rlcf	??_strobe2,f,c
  8210  001AB8  3607               	rlcf	??_strobe2+1,f,c
  8211  001ABA  2EE8               	decfsz	wreg,f,c
  8212  001ABC  D7FB               	goto	i2u187_45
  8213  001ABE  0E01               	movlw	1
  8214  001AC0  2606               	addwf	??_strobe2,f,c
  8215  001AC2  0E00               	movlw	0
  8216  001AC4  2207               	addwfc	??_strobe2+1,f,c
  8217  001AC6  5039               	movf	strobe2@cnt,w,c
  8218  001AC8  6E08               	movwf	(??_strobe2+2)& (0+255),c
  8219  001ACA  6A09               	clrf	(??_strobe2+3)& (0+255),c
  8220  001ACC  5006               	movf	??_strobe2,w,c
  8221  001ACE  5C08               	subwf	??_strobe2+2,w,c
  8222  001AD0  5009               	movf	??_strobe2+3,w,c
  8223  001AD2  0A80               	xorlw	128
  8224  001AD4  6E0A               	movwf	(??_strobe2+4)& (0+255),c
  8225  001AD6  5007               	movf	??_strobe2+1,w,c
  8226  001AD8  0A80               	xorlw	128
  8227  001ADA  580A               	subwfb	(??_strobe2+4)& (0+255),w,c
  8228  001ADC  B0D8               	btfsc	status,0,c
  8229  001ADE  D018               	goto	i2l2604
  8230                           
  8231                           ;PWM_Driver.c: 131: if (on_cnt < 2) {
  8232  001AE0  0E02               	movlw	2
  8233  001AE2  603B               	cpfslt	strobe2@on_cnt,c
  8234  001AE4  D008               	goto	i2l2596
  8235                           
  8236                           ;PWM_Driver.c: 132: setRGB(255,255,255);
  8237  001AE6  0EFF               	movlw	255
  8238  001AE8  6E03               	movwf	i2setRGB@g,c
  8239  001AEA  0EFF               	movlw	255
  8240  001AEC  6E04               	movwf	i2setRGB@b,c
  8241  001AEE  0EFF               	movlw	255
  8242  001AF0  EC70  F010         	call	i2_setRGB
  8243                           
  8244                           ;PWM_Driver.c: 133: } else {
  8245  001AF4  D007               	goto	i2l2598
  8246  001AF6                     i2l2596:
  8247                           
  8248                           ;PWM_Driver.c: 134: setRGB(0,0,0);
  8249  001AF6  0E00               	movlw	0
  8250  001AF8  6E03               	movwf	i2setRGB@g,c
  8251  001AFA  0E00               	movlw	0
  8252  001AFC  6E04               	movwf	i2setRGB@b,c
  8253  001AFE  0E00               	movlw	0
  8254  001B00  EC70  F010         	call	i2_setRGB
  8255  001B04                     i2l2598:
  8256                           
  8257                           ;PWM_Driver.c: 135: }
  8258                           ;PWM_Driver.c: 137: on_cnt++;
  8259  001B04  2A3B               	incf	strobe2@on_cnt,f,c
  8260                           
  8261                           ;PWM_Driver.c: 138: if (on_cnt >= 20) {
  8262  001B06  0E13               	movlw	19
  8263  001B08  643B               	cpfsgt	strobe2@on_cnt,c
  8264  001B0A  D002               	goto	i2l2604
  8265                           
  8266                           ;PWM_Driver.c: 139: on_cnt = 0;
  8267  001B0C  0E00               	movlw	0
  8268  001B0E  6E3B               	movwf	strobe2@on_cnt,c
  8269  001B10                     i2l2604:
  8270                           
  8271                           ;PWM_Driver.c: 140: }
  8272                           ;PWM_Driver.c: 141: }
  8273                           ;PWM_Driver.c: 142: cnt += ((scale<<6) + 1);
  8274  001B10  C02E  F006         	movff	_scale,??_strobe2
  8275  001B14  0E06               	movlw	6
  8276  001B16  6E07               	movwf	(??_strobe2+1)& (0+255),c
  8277  001B18                     i2u191_45:
  8278  001B18  90D8               	bcf	status,0,c
  8279  001B1A  3606               	rlcf	??_strobe2,f,c
  8280  001B1C  2E07               	decfsz	(??_strobe2+1)& (0+255),f,c
  8281  001B1E  D7FC               	goto	i2u191_45
  8282  001B20  2806               	incf	??_strobe2,w,c
  8283  001B22  2639               	addwf	strobe2@cnt,f,c
  8284  001B24  0012               	return		;funcret
  8285  001B26                     __end_of_strobe2:
  8286                           	opt stack 0
  8287                           pclatu	equ	0xFFB
  8288                           pclath	equ	0xFFA
  8289                           tblptru	equ	0xFF8
  8290                           tblptrh	equ	0xFF7
  8291                           tblptrl	equ	0xFF6
  8292                           tablat	equ	0xFF5
  8293                           prodh	equ	0xFF4
  8294                           prodl	equ	0xFF3
  8295                           intcon	equ	0xFF2
  8296                           intcon2	equ	0xFF1
  8297                           postinc0	equ	0xFEE
  8298                           plusw0	equ	0xFEB
  8299                           fsr0h	equ	0xFEA
  8300                           fsr0l	equ	0xFE9
  8301                           wreg	equ	0xFE8
  8302                           postdec1	equ	0xFE5
  8303                           plusw1	equ	0xFE3
  8304                           fsr1h	equ	0xFE2
  8305                           fsr1l	equ	0xFE1
  8306                           bsr	equ	0xFE0
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           plusw2	equ	0xFDB
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _smooth *****************
  8316 ;; Defined at:
  8317 ;;		line 195 in file "Drivers/PWM_Driver.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8331 ;;      Params:         0       0       0       0       0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8333 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8334 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8335 ;;Total ram usage:        6 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    2
  8338 ;; This function calls:
  8339 ;;		i2_setRGB
  8340 ;; This function is called by:
  8341 ;;		_handleState
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text50
  8346  0014F6                     __ptext50:
  8347                           	opt stack 0
  8348  0014F6                     _smooth:
  8349                           	opt stack 13
  8350                           
  8351                           ;PWM_Driver.c: 196: static uint8_t count;
  8352                           ;PWM_Driver.c: 197: static uint8_t color;
  8353                           ;PWM_Driver.c: 199: if (count >= (0xFF >> scale)) {
  8354                           
  8355                           ;incstack = 0
  8356  0014F6  C02E  F006         	movff	_scale,??_smooth
  8357  0014FA  0EFF               	movlw	255
  8358  0014FC  6E07               	movwf	(??_smooth+1)& (0+255),c
  8359  0014FE  0E00               	movlw	0
  8360  001500  6E08               	movwf	(??_smooth+2)& (0+255),c
  8361  001502  2A06               	incf	??_smooth,f,c
  8362  001504  D003               	goto	i2u201_44
  8363  001506                     i2u201_45:
  8364  001506  3408               	rlcf	??_smooth+2,w,c
  8365  001508  3208               	rrcf	??_smooth+2,f,c
  8366  00150A  3207               	rrcf	??_smooth+1,f,c
  8367  00150C                     i2u201_44:
  8368  00150C  2E06               	decfsz	??_smooth,f,c
  8369  00150E  D7FB               	goto	i2u201_45
  8370  001510  5038               	movf	smooth@count,w,c
  8371  001512  6E09               	movwf	(??_smooth+3)& (0+255),c
  8372  001514  6A0A               	clrf	(??_smooth+4)& (0+255),c
  8373  001516  5007               	movf	??_smooth+1,w,c
  8374  001518  5C09               	subwf	??_smooth+3,w,c
  8375  00151A  500A               	movf	??_smooth+4,w,c
  8376  00151C  0A80               	xorlw	128
  8377  00151E  6E0B               	movwf	(??_smooth+5)& (0+255),c
  8378  001520  5008               	movf	??_smooth+2,w,c
  8379  001522  0A80               	xorlw	128
  8380  001524  580B               	subwfb	(??_smooth+5)& (0+255),w,c
  8381  001526  A0D8               	btfss	status,0,c
  8382  001528  D002               	goto	i2l310
  8383                           
  8384                           ;PWM_Driver.c: 200: count = 0;
  8385  00152A  0E00               	movlw	0
  8386  00152C  6E38               	movwf	smooth@count,c
  8387  00152E                     i2l310:
  8388                           
  8389                           ;PWM_Driver.c: 201: }
  8390                           ;PWM_Driver.c: 202: if (count == 0) {
  8391  00152E  5038               	movf	smooth@count,w,c
  8392  001530  B4D8               	btfsc	status,2,c
  8393  001532  D038               	goto	i2l2680
  8394  001534  D04A               	goto	i2l2682
  8395  001536                     i2l2654:
  8396                           
  8397                           ;PWM_Driver.c: 205: setRGB(255, 0, 0);
  8398  001536  0E00               	movlw	0
  8399  001538  6E03               	movwf	i2setRGB@g,c
  8400  00153A  0E00               	movlw	0
  8401  00153C  6E04               	movwf	i2setRGB@b,c
  8402  00153E  0EFF               	movlw	255
  8403  001540  EC70  F010         	call	i2_setRGB
  8404                           
  8405                           ;PWM_Driver.c: 206: color = 1;
  8406  001544  0E01               	movlw	1
  8407  001546  D02C               	goto	L10
  8408  001548                     i2l2658:
  8409                           
  8410                           ;PWM_Driver.c: 209: setRGB(255, 255, 0);
  8411  001548  0EFF               	movlw	255
  8412  00154A  6E03               	movwf	i2setRGB@g,c
  8413  00154C  0E00               	movlw	0
  8414  00154E  6E04               	movwf	i2setRGB@b,c
  8415  001550  0EFF               	movlw	255
  8416  001552  EC70  F010         	call	i2_setRGB
  8417                           
  8418                           ;PWM_Driver.c: 210: color = 2;
  8419  001556  0E02               	movlw	2
  8420  001558  D023               	goto	L10
  8421  00155A                     i2l2662:
  8422                           
  8423                           ;PWM_Driver.c: 213: setRGB(0, 255, 0);
  8424  00155A  0EFF               	movlw	255
  8425  00155C  6E03               	movwf	i2setRGB@g,c
  8426  00155E  0E00               	movlw	0
  8427  001560  6E04               	movwf	i2setRGB@b,c
  8428  001562  0E00               	movlw	0
  8429  001564  EC70  F010         	call	i2_setRGB
  8430                           
  8431                           ;PWM_Driver.c: 214: color = 3;
  8432  001568  0E03               	movlw	3
  8433  00156A  D01A               	goto	L10
  8434  00156C                     i2l2666:
  8435                           
  8436                           ;PWM_Driver.c: 217: setRGB(0, 255, 255);
  8437  00156C  0EFF               	movlw	255
  8438  00156E  6E03               	movwf	i2setRGB@g,c
  8439  001570  0EFF               	movlw	255
  8440  001572  6E04               	movwf	i2setRGB@b,c
  8441  001574  0E00               	movlw	0
  8442  001576  EC70  F010         	call	i2_setRGB
  8443                           
  8444                           ;PWM_Driver.c: 218: color = 4;
  8445  00157A  0E04               	movlw	4
  8446  00157C  D011               	goto	L10
  8447  00157E                     i2l2670:
  8448                           
  8449                           ;PWM_Driver.c: 221: setRGB(0, 0, 255);
  8450  00157E  0E00               	movlw	0
  8451  001580  6E03               	movwf	i2setRGB@g,c
  8452  001582  0EFF               	movlw	255
  8453  001584  6E04               	movwf	i2setRGB@b,c
  8454  001586  0E00               	movlw	0
  8455  001588  EC70  F010         	call	i2_setRGB
  8456                           
  8457                           ;PWM_Driver.c: 222: color = 5;
  8458  00158C  0E05               	movlw	5
  8459  00158E  D008               	goto	L10
  8460  001590                     i2l2674:
  8461                           
  8462                           ;PWM_Driver.c: 225: setRGB(255, 0, 255);
  8463  001590  0E00               	movlw	0
  8464  001592  6E03               	movwf	i2setRGB@g,c
  8465  001594  0EFF               	movlw	255
  8466  001596  6E04               	movwf	i2setRGB@b,c
  8467  001598  0EFF               	movlw	255
  8468  00159A  EC70  F010         	call	i2_setRGB
  8469                           
  8470                           ;PWM_Driver.c: 226: color = 0;
  8471  00159E  0E00               	movlw	0
  8472  0015A0                     L10:
  8473  0015A0  6E37               	movwf	smooth@color,c
  8474                           
  8475                           ;PWM_Driver.c: 228: }
  8476                           
  8477                           ;PWM_Driver.c: 227: break;
  8478  0015A2  D013               	goto	i2l2682
  8479  0015A4                     i2l2680:
  8480  0015A4  5037               	movf	smooth@color,w,c
  8481                           
  8482                           ; Switch size 1, requested type "space"
  8483                           ; Number of cases is 6, Range of values is 0 to 5
  8484                           ; switch strategies available:
  8485                           ; Name         Instructions Cycles
  8486                           ; simple_byte           19    10 (average)
  8487                           ;	Chosen strategy is simple_byte
  8488  0015A6  0A00               	xorlw	0	; case 0
  8489  0015A8  B4D8               	btfsc	status,2,c
  8490  0015AA  D7C5               	goto	i2l2654
  8491  0015AC  0A01               	xorlw	1	; case 1
  8492  0015AE  B4D8               	btfsc	status,2,c
  8493  0015B0  D7CB               	goto	i2l2658
  8494  0015B2  0A03               	xorlw	3	; case 2
  8495  0015B4  B4D8               	btfsc	status,2,c
  8496  0015B6  D7D1               	goto	i2l2662
  8497  0015B8  0A01               	xorlw	1	; case 3
  8498  0015BA  B4D8               	btfsc	status,2,c
  8499  0015BC  D7D7               	goto	i2l2666
  8500  0015BE  0A07               	xorlw	7	; case 4
  8501  0015C0  B4D8               	btfsc	status,2,c
  8502  0015C2  D7DD               	goto	i2l2670
  8503  0015C4  0A01               	xorlw	1	; case 5
  8504  0015C6  B4D8               	btfsc	status,2,c
  8505  0015C8  D7E3               	goto	i2l2674
  8506  0015CA                     i2l2682:
  8507                           
  8508                           ;PWM_Driver.c: 229: }
  8509                           ;PWM_Driver.c: 231: count++;
  8510  0015CA  2A38               	incf	smooth@count,f,c
  8511  0015CC  0012               	return		;funcret
  8512  0015CE                     __end_of_smooth:
  8513                           	opt stack 0
  8514                           pclatu	equ	0xFFB
  8515                           pclath	equ	0xFFA
  8516                           tblptru	equ	0xFF8
  8517                           tblptrh	equ	0xFF7
  8518                           tblptrl	equ	0xFF6
  8519                           tablat	equ	0xFF5
  8520                           prodh	equ	0xFF4
  8521                           prodl	equ	0xFF3
  8522                           intcon	equ	0xFF2
  8523                           intcon2	equ	0xFF1
  8524                           postinc0	equ	0xFEE
  8525                           plusw0	equ	0xFEB
  8526                           fsr0h	equ	0xFEA
  8527                           fsr0l	equ	0xFE9
  8528                           wreg	equ	0xFE8
  8529                           postdec1	equ	0xFE5
  8530                           plusw1	equ	0xFE3
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           bsr	equ	0xFE0
  8534                           indf2	equ	0xFDF
  8535                           postinc2	equ	0xFDE
  8536                           postdec2	equ	0xFDD
  8537                           plusw2	equ	0xFDB
  8538                           fsr2h	equ	0xFDA
  8539                           fsr2l	equ	0xFD9
  8540                           status	equ	0xFD8
  8541                           
  8542 ;; *************** function _pwmColors *****************
  8543 ;; Defined at:
  8544 ;;		line 48 in file "Drivers/PWM_Driver.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;  birghtness      1    wreg     unsigned char 
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;  birghtness      1    2[COMRAM] unsigned char 
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      void 
  8551 ;; Registers used:
  8552 ;;		wreg, status,2, status,0
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8558 ;;      Params:         0       0       0       0       0       0       0       0       0
  8559 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8560 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8561 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8562 ;;Total ram usage:        3 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_handleState
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text51
  8572  0019B4                     __ptext51:
  8573                           	opt stack 0
  8574  0019B4                     _pwmColors:
  8575                           	opt stack 15
  8576                           
  8577                           ;incstack = 0
  8578                           ;pwmColors@birghtness stored from wreg
  8579  0019B4  6E03               	movwf	pwmColors@birghtness,c
  8580                           
  8581                           ;PWM_Driver.c: 50: if (PWM_Red.duty_cnt >= (PWM_Red.duty_val >> birghtness)) {
  8582  0019B6  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8583  0019BA  C0CB  F002         	movff	_PWM_Red+1,??_pwmColors+1
  8584  0019BE  2A01               	incf	??_pwmColors,f,c
  8585  0019C0  D002               	goto	i2u178_44
  8586  0019C2                     i2u178_45:
  8587  0019C2  90D8               	bcf	status,0,c
  8588  0019C4  3202               	rrcf	??_pwmColors+1,f,c
  8589  0019C6                     i2u178_44:
  8590  0019C6  2E01               	decfsz	??_pwmColors,f,c
  8591  0019C8  D7FC               	goto	i2u178_45
  8592  0019CA  5002               	movf	??_pwmColors+1,w,c
  8593  0019CC  0100               	movlb	0	; () banked
  8594  0019CE  5DCA               	subwf	_PWM_Red& (0+255),w,b
  8595  0019D0  A0D8               	btfss	status,0,c
  8596  0019D2  D002               	goto	i2l231
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;PWM_Driver.c: 51: PORTBbits.RB2 = 0;
  8600  0019D4  9481               	bcf	3969,2,c	;volatile
  8601                           
  8602                           ;PWM_Driver.c: 52: } else {
  8603  0019D6  D001               	goto	i2l2552
  8604  0019D8                     i2l231:
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;PWM_Driver.c: 53: PORTBbits.RB2 = 1;
  8608  0019D8  8481               	bsf	3969,2,c	;volatile
  8609  0019DA                     i2l2552:
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;PWM_Driver.c: 54: }
  8613                           ;PWM_Driver.c: 56: if (PWM_Green.duty_cnt >= (PWM_Green.duty_val >> birghtness)) {
  8614  0019DA  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8615  0019DE  C0C9  F002         	movff	_PWM_Green+1,??_pwmColors+1
  8616  0019E2  2A01               	incf	??_pwmColors,f,c
  8617  0019E4  D002               	goto	i2u180_44
  8618  0019E6                     i2u180_45:
  8619  0019E6  90D8               	bcf	status,0,c
  8620  0019E8  3202               	rrcf	??_pwmColors+1,f,c
  8621  0019EA                     i2u180_44:
  8622  0019EA  2E01               	decfsz	??_pwmColors,f,c
  8623  0019EC  D7FC               	goto	i2u180_45
  8624  0019EE  5002               	movf	??_pwmColors+1,w,c
  8625  0019F0  0100               	movlb	0	; () banked
  8626  0019F2  5DC8               	subwf	_PWM_Green& (0+255),w,b
  8627  0019F4  A0D8               	btfss	status,0,c
  8628  0019F6  D002               	goto	i2l233
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;PWM_Driver.c: 57: PORTBbits.RB3 = 0;
  8632  0019F8  9681               	bcf	3969,3,c	;volatile
  8633                           
  8634                           ;PWM_Driver.c: 58: } else {
  8635  0019FA  D001               	goto	i2l2556
  8636  0019FC                     i2l233:
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;PWM_Driver.c: 59: PORTBbits.RB3 = 1;
  8640  0019FC  8681               	bsf	3969,3,c	;volatile
  8641  0019FE                     i2l2556:
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;PWM_Driver.c: 60: }
  8645                           ;PWM_Driver.c: 62: if (PWM_Blue.duty_cnt >= (PWM_Blue.duty_val >> birghtness)) {
  8646  0019FE  C003  F001         	movff	pwmColors@birghtness,??_pwmColors
  8647  001A02  C0C7  F002         	movff	_PWM_Blue+1,??_pwmColors+1
  8648  001A06  2A01               	incf	??_pwmColors,f,c
  8649  001A08  D002               	goto	i2u182_44
  8650  001A0A                     i2u182_45:
  8651  001A0A  90D8               	bcf	status,0,c
  8652  001A0C  3202               	rrcf	??_pwmColors+1,f,c
  8653  001A0E                     i2u182_44:
  8654  001A0E  2E01               	decfsz	??_pwmColors,f,c
  8655  001A10  D7FC               	goto	i2u182_45
  8656  001A12  5002               	movf	??_pwmColors+1,w,c
  8657  001A14  0100               	movlb	0	; () banked
  8658  001A16  5DC6               	subwf	_PWM_Blue& (0+255),w,b
  8659  001A18  A0D8               	btfss	status,0,c
  8660  001A1A  D002               	goto	i2l235
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;PWM_Driver.c: 63: PORTBbits.RB1 = 0;
  8664  001A1C  9281               	bcf	3969,1,c	;volatile
  8665                           
  8666                           ;PWM_Driver.c: 64: } else {
  8667  001A1E  D001               	goto	i2l2560
  8668  001A20                     i2l235:
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;PWM_Driver.c: 65: PORTBbits.RB1 = 1;
  8672  001A20  8281               	bsf	3969,1,c	;volatile
  8673  001A22                     i2l2560:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;PWM_Driver.c: 66: }
  8677                           ;PWM_Driver.c: 69: PWM_Red.duty_cnt++;
  8678  001A22  0100               	movlb	0	; () banked
  8679  001A24  2BCA               	incf	_PWM_Red& (0+255),f,b
  8680                           
  8681                           ;PWM_Driver.c: 70: PWM_Green.duty_cnt++;
  8682  001A26  0100               	movlb	0	; () banked
  8683  001A28  2BC8               	incf	_PWM_Green& (0+255),f,b
  8684                           
  8685                           ;PWM_Driver.c: 71: PWM_Blue.duty_cnt++;
  8686  001A2A  0100               	movlb	0	; () banked
  8687  001A2C  2BC6               	incf	_PWM_Blue& (0+255),f,b
  8688                           
  8689                           ; BSR set to: 0
  8690  001A2E  0012               	return		;funcret
  8691  001A30                     __end_of_pwmColors:
  8692                           	opt stack 0
  8693                           pclatu	equ	0xFFB
  8694                           pclath	equ	0xFFA
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           prodh	equ	0xFF4
  8700                           prodl	equ	0xFF3
  8701                           intcon	equ	0xFF2
  8702                           intcon2	equ	0xFF1
  8703                           postinc0	equ	0xFEE
  8704                           plusw0	equ	0xFEB
  8705                           fsr0h	equ	0xFEA
  8706                           fsr0l	equ	0xFE9
  8707                           wreg	equ	0xFE8
  8708                           postdec1	equ	0xFE5
  8709                           plusw1	equ	0xFE3
  8710                           fsr1h	equ	0xFE2
  8711                           fsr1l	equ	0xFE1
  8712                           bsr	equ	0xFE0
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           plusw2	equ	0xFDB
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721 ;; *************** function _flash *****************
  8722 ;; Defined at:
  8723 ;;		line 74 in file "Drivers/PWM_Driver.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;		None
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      void 
  8730 ;; Registers used:
  8731 ;;		wreg, status,2, status,0, cstack
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8737 ;;      Params:         0       0       0       0       0       0       0       0       0
  8738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8739 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8740 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8741 ;;Total ram usage:        6 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:    2
  8744 ;; This function calls:
  8745 ;;		i2_setRGB
  8746 ;; This function is called by:
  8747 ;;		_handleState
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           	psect	text52
  8752  00174C                     __ptext52:
  8753                           	opt stack 0
  8754  00174C                     _flash:
  8755                           	opt stack 13
  8756                           
  8757                           ;PWM_Driver.c: 75: static uint8_t count;
  8758                           ;PWM_Driver.c: 76: static uint8_t color;
  8759                           ;PWM_Driver.c: 78: if (count >= (0xFF >> scale)) {
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;incstack = 0
  8763  00174C  C02E  F006         	movff	_scale,??_flash
  8764  001750  0EFF               	movlw	255
  8765  001752  6E07               	movwf	(??_flash+1)& (0+255),c
  8766  001754  0E00               	movlw	0
  8767  001756  6E08               	movwf	(??_flash+2)& (0+255),c
  8768  001758  2A06               	incf	??_flash,f,c
  8769  00175A  D003               	goto	i2u184_44
  8770  00175C                     i2u184_45:
  8771  00175C  3408               	rlcf	??_flash+2,w,c
  8772  00175E  3208               	rrcf	??_flash+2,f,c
  8773  001760  3207               	rrcf	??_flash+1,f,c
  8774  001762                     i2u184_44:
  8775  001762  2E06               	decfsz	??_flash,f,c
  8776  001764  D7FB               	goto	i2u184_45
  8777  001766  5035               	movf	flash@count,w,c
  8778  001768  6E09               	movwf	(??_flash+3)& (0+255),c
  8779  00176A  6A0A               	clrf	(??_flash+4)& (0+255),c
  8780  00176C  5007               	movf	??_flash+1,w,c
  8781  00176E  5C09               	subwf	??_flash+3,w,c
  8782  001770  500A               	movf	??_flash+4,w,c
  8783  001772  0A80               	xorlw	128
  8784  001774  6E0B               	movwf	(??_flash+5)& (0+255),c
  8785  001776  5008               	movf	??_flash+2,w,c
  8786  001778  0A80               	xorlw	128
  8787  00177A  580B               	subwfb	(??_flash+5)& (0+255),w,c
  8788  00177C  A0D8               	btfss	status,0,c
  8789  00177E  D002               	goto	i2l244
  8790                           
  8791                           ;PWM_Driver.c: 79: count = 0;
  8792  001780  0E00               	movlw	0
  8793  001782  6E35               	movwf	flash@count,c
  8794  001784                     i2l244:
  8795                           
  8796                           ;PWM_Driver.c: 80: }
  8797                           ;PWM_Driver.c: 81: if (count == 0) {
  8798  001784  5035               	movf	flash@count,w,c
  8799  001786  B4D8               	btfsc	status,2,c
  8800  001788  D026               	goto	i2l2586
  8801  00178A  D032               	goto	i2l2588
  8802  00178C                     i2l2568:
  8803                           
  8804                           ;PWM_Driver.c: 84: setRGB(255, 0, 0);
  8805  00178C  0E00               	movlw	0
  8806  00178E  6E03               	movwf	i2setRGB@g,c
  8807  001790  0E00               	movlw	0
  8808  001792  6E04               	movwf	i2setRGB@b,c
  8809  001794  0EFF               	movlw	255
  8810  001796  EC70  F010         	call	i2_setRGB
  8811                           
  8812                           ;PWM_Driver.c: 85: color = 1;
  8813  00179A  0E01               	movlw	1
  8814  00179C  D01A               	goto	L13
  8815  00179E                     i2l2572:
  8816                           
  8817                           ;PWM_Driver.c: 88: setRGB(0, 255, 0);
  8818  00179E  0EFF               	movlw	255
  8819  0017A0  6E03               	movwf	i2setRGB@g,c
  8820  0017A2  0E00               	movlw	0
  8821  0017A4  6E04               	movwf	i2setRGB@b,c
  8822  0017A6  0E00               	movlw	0
  8823  0017A8  EC70  F010         	call	i2_setRGB
  8824                           
  8825                           ;PWM_Driver.c: 89: color = 2;
  8826  0017AC  0E02               	movlw	2
  8827  0017AE  D011               	goto	L13
  8828  0017B0                     i2l2576:
  8829                           
  8830                           ;PWM_Driver.c: 92: setRGB(0, 0, 255);
  8831  0017B0  0E00               	movlw	0
  8832  0017B2  6E03               	movwf	i2setRGB@g,c
  8833  0017B4  0EFF               	movlw	255
  8834  0017B6  6E04               	movwf	i2setRGB@b,c
  8835  0017B8  0E00               	movlw	0
  8836  0017BA  EC70  F010         	call	i2_setRGB
  8837                           
  8838                           ;PWM_Driver.c: 93: color = 3;
  8839  0017BE  0E03               	movlw	3
  8840  0017C0  D008               	goto	L13
  8841  0017C2                     i2l2580:
  8842                           
  8843                           ;PWM_Driver.c: 96: setRGB(255, 255, 255);
  8844  0017C2  0EFF               	movlw	255
  8845  0017C4  6E03               	movwf	i2setRGB@g,c
  8846  0017C6  0EFF               	movlw	255
  8847  0017C8  6E04               	movwf	i2setRGB@b,c
  8848  0017CA  0EFF               	movlw	255
  8849  0017CC  EC70  F010         	call	i2_setRGB
  8850                           
  8851                           ;PWM_Driver.c: 97: color = 0;
  8852  0017D0  0E00               	movlw	0
  8853  0017D2                     L13:
  8854  0017D2  6E34               	movwf	flash@color,c
  8855                           
  8856                           ;PWM_Driver.c: 99: }
  8857                           
  8858                           ;PWM_Driver.c: 98: break;
  8859  0017D4  D00D               	goto	i2l2588
  8860  0017D6                     i2l2586:
  8861  0017D6  5034               	movf	flash@color,w,c
  8862                           
  8863                           ; Switch size 1, requested type "space"
  8864                           ; Number of cases is 4, Range of values is 0 to 3
  8865                           ; switch strategies available:
  8866                           ; Name         Instructions Cycles
  8867                           ; simple_byte           13     7 (average)
  8868                           ;	Chosen strategy is simple_byte
  8869  0017D8  0A00               	xorlw	0	; case 0
  8870  0017DA  B4D8               	btfsc	status,2,c
  8871  0017DC  D7D7               	goto	i2l2568
  8872  0017DE  0A01               	xorlw	1	; case 1
  8873  0017E0  B4D8               	btfsc	status,2,c
  8874  0017E2  D7DD               	goto	i2l2572
  8875  0017E4  0A03               	xorlw	3	; case 2
  8876  0017E6  B4D8               	btfsc	status,2,c
  8877  0017E8  D7E3               	goto	i2l2576
  8878  0017EA  0A01               	xorlw	1	; case 3
  8879  0017EC  B4D8               	btfsc	status,2,c
  8880  0017EE  D7E9               	goto	i2l2580
  8881  0017F0                     i2l2588:
  8882                           
  8883                           ;PWM_Driver.c: 100: }
  8884                           ;PWM_Driver.c: 102: count++;
  8885  0017F0  2A35               	incf	flash@count,f,c
  8886  0017F2  0012               	return		;funcret
  8887  0017F4                     __end_of_flash:
  8888                           	opt stack 0
  8889                           pclatu	equ	0xFFB
  8890                           pclath	equ	0xFFA
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           intcon2	equ	0xFF1
  8899                           postinc0	equ	0xFEE
  8900                           plusw0	equ	0xFEB
  8901                           fsr0h	equ	0xFEA
  8902                           fsr0l	equ	0xFE9
  8903                           wreg	equ	0xFE8
  8904                           postdec1	equ	0xFE5
  8905                           plusw1	equ	0xFE3
  8906                           fsr1h	equ	0xFE2
  8907                           fsr1l	equ	0xFE1
  8908                           bsr	equ	0xFE0
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           postdec2	equ	0xFDD
  8912                           plusw2	equ	0xFDB
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _fade *****************
  8918 ;; Defined at:
  8919 ;;		line 145 in file "Drivers/PWM_Driver.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;		None
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;		None
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  1    wreg      void 
  8926 ;; Registers used:
  8927 ;;		wreg, status,2, status,0, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8933 ;;      Params:         0       0       0       0       0       0       0       0       0
  8934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8936 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8937 ;;Total ram usage:        0 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    2
  8940 ;; This function calls:
  8941 ;;		i2_setRGB
  8942 ;; This function is called by:
  8943 ;;		_handleState
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text53
  8948  001A30                     __ptext53:
  8949                           	opt stack 0
  8950  001A30                     _fade:
  8951                           	opt stack 13
  8952                           
  8953                           ;PWM_Driver.c: 146: static uint8_t r_cnt = 0x00;
  8954                           ;PWM_Driver.c: 147: static uint8_t g_cnt = 0x80;
  8955                           ;PWM_Driver.c: 148: static uint8_t b_cnt = 0xFF;
  8956                           ;PWM_Driver.c: 149: static bool r_up;
  8957                           ;PWM_Driver.c: 150: static bool g_up;
  8958                           ;PWM_Driver.c: 151: static bool b_up;
  8959                           ;PWM_Driver.c: 153: if (r_cnt > 0xF7) {
  8960                           
  8961                           ;incstack = 0
  8962  001A30  0EF7               	movlw	247
  8963  001A32  6432               	cpfsgt	fade@r_cnt,c
  8964  001A34  D002               	goto	i2l2610
  8965                           
  8966                           ;PWM_Driver.c: 154: r_up = 0;
  8967  001A36  0E00               	movlw	0
  8968  001A38  6E33               	movwf	fade@r_up,c
  8969  001A3A                     i2l2610:
  8970                           
  8971                           ;PWM_Driver.c: 155: }
  8972                           ;PWM_Driver.c: 156: if (r_cnt < 8) {
  8973  001A3A  0E08               	movlw	8
  8974  001A3C  6032               	cpfslt	fade@r_cnt,c
  8975  001A3E  D002               	goto	i2l2614
  8976                           
  8977                           ;PWM_Driver.c: 157: r_up = 1;
  8978  001A40  0E01               	movlw	1
  8979  001A42  6E33               	movwf	fade@r_up,c
  8980  001A44                     i2l2614:
  8981                           
  8982                           ;PWM_Driver.c: 158: }
  8983                           ;PWM_Driver.c: 160: if (g_cnt > 0xF7) {
  8984  001A44  0EF7               	movlw	247
  8985  001A46  6445               	cpfsgt	fade@g_cnt,c
  8986  001A48  D002               	goto	i2l2618
  8987                           
  8988                           ;PWM_Driver.c: 161: g_up = 0;
  8989  001A4A  0E00               	movlw	0
  8990  001A4C  6E31               	movwf	fade@g_up,c
  8991  001A4E                     i2l2618:
  8992                           
  8993                           ;PWM_Driver.c: 162: }
  8994                           ;PWM_Driver.c: 163: if (g_cnt < 8) {
  8995  001A4E  0E08               	movlw	8
  8996  001A50  6045               	cpfslt	fade@g_cnt,c
  8997  001A52  D002               	goto	i2l2622
  8998                           
  8999                           ;PWM_Driver.c: 164: g_up = 1;
  9000  001A54  0E01               	movlw	1
  9001  001A56  6E31               	movwf	fade@g_up,c
  9002  001A58                     i2l2622:
  9003                           
  9004                           ;PWM_Driver.c: 165: }
  9005                           ;PWM_Driver.c: 167: if (b_cnt > 0xF7) {
  9006  001A58  0EF7               	movlw	247
  9007  001A5A  6444               	cpfsgt	fade@b_cnt,c
  9008  001A5C  D002               	goto	i2l2626
  9009                           
  9010                           ;PWM_Driver.c: 168: b_up = 0;
  9011  001A5E  0E00               	movlw	0
  9012  001A60  6E30               	movwf	fade@b_up,c
  9013  001A62                     i2l2626:
  9014                           
  9015                           ;PWM_Driver.c: 169: }
  9016                           ;PWM_Driver.c: 170: if (b_cnt < 8) {
  9017  001A62  0E08               	movlw	8
  9018  001A64  6044               	cpfslt	fade@b_cnt,c
  9019  001A66  D002               	goto	i2l296
  9020                           
  9021                           ;PWM_Driver.c: 171: b_up = 1;
  9022  001A68  0E01               	movlw	1
  9023  001A6A  6E30               	movwf	fade@b_up,c
  9024  001A6C                     i2l296:
  9025                           
  9026                           ;PWM_Driver.c: 172: }
  9027                           ;PWM_Driver.c: 174: if (r_up) {
  9028  001A6C  5033               	movf	fade@r_up,w,c
  9029  001A6E  B4D8               	btfsc	status,2,c
  9030  001A70  D003               	goto	i2l2632
  9031                           
  9032                           ;PWM_Driver.c: 175: r_cnt+=(scale+1);
  9033  001A72  282E               	incf	_scale,w,c
  9034  001A74  2632               	addwf	fade@r_cnt,f,c
  9035                           
  9036                           ;PWM_Driver.c: 176: } else {
  9037  001A76  D002               	goto	i2l2634
  9038  001A78                     i2l2632:
  9039                           
  9040                           ;PWM_Driver.c: 177: r_cnt-=(scale+1);
  9041  001A78  282E               	incf	_scale,w,c
  9042  001A7A  5E32               	subwf	fade@r_cnt,f,c
  9043  001A7C                     i2l2634:
  9044                           
  9045                           ;PWM_Driver.c: 178: }
  9046                           ;PWM_Driver.c: 180: if (g_up) {
  9047  001A7C  5031               	movf	fade@g_up,w,c
  9048  001A7E  B4D8               	btfsc	status,2,c
  9049  001A80  D003               	goto	i2l2638
  9050                           
  9051                           ;PWM_Driver.c: 181: g_cnt+=(scale+1);
  9052  001A82  282E               	incf	_scale,w,c
  9053  001A84  2645               	addwf	fade@g_cnt,f,c
  9054                           
  9055                           ;PWM_Driver.c: 182: } else {
  9056  001A86  D002               	goto	i2l2640
  9057  001A88                     i2l2638:
  9058                           
  9059                           ;PWM_Driver.c: 183: g_cnt-=(scale+1);
  9060  001A88  282E               	incf	_scale,w,c
  9061  001A8A  5E45               	subwf	fade@g_cnt,f,c
  9062  001A8C                     i2l2640:
  9063                           
  9064                           ;PWM_Driver.c: 184: }
  9065                           ;PWM_Driver.c: 186: if (b_up) {
  9066  001A8C  5030               	movf	fade@b_up,w,c
  9067  001A8E  B4D8               	btfsc	status,2,c
  9068  001A90  D003               	goto	i2l2644
  9069                           
  9070                           ;PWM_Driver.c: 187: b_cnt+=(scale+1);
  9071  001A92  282E               	incf	_scale,w,c
  9072  001A94  2644               	addwf	fade@b_cnt,f,c
  9073                           
  9074                           ;PWM_Driver.c: 188: } else {
  9075  001A96  D002               	goto	i2l2646
  9076  001A98                     i2l2644:
  9077                           
  9078                           ;PWM_Driver.c: 189: b_cnt-=(scale+1);
  9079  001A98  282E               	incf	_scale,w,c
  9080  001A9A  5E44               	subwf	fade@b_cnt,f,c
  9081  001A9C                     i2l2646:
  9082                           
  9083                           ;PWM_Driver.c: 190: }
  9084                           ;PWM_Driver.c: 192: setRGB(r_cnt, g_cnt, b_cnt);
  9085  001A9C  C045  F003         	movff	fade@g_cnt,i2setRGB@g
  9086  001AA0  C044  F004         	movff	fade@b_cnt,i2setRGB@b
  9087  001AA4  5032               	movf	fade@r_cnt,w,c
  9088  001AA6  EC70  F010         	call	i2_setRGB
  9089  001AAA  0012               	return		;funcret
  9090  001AAC                     __end_of_fade:
  9091                           	opt stack 0
  9092                           pclatu	equ	0xFFB
  9093                           pclath	equ	0xFFA
  9094                           tblptru	equ	0xFF8
  9095                           tblptrh	equ	0xFF7
  9096                           tblptrl	equ	0xFF6
  9097                           tablat	equ	0xFF5
  9098                           prodh	equ	0xFF4
  9099                           prodl	equ	0xFF3
  9100                           intcon	equ	0xFF2
  9101                           intcon2	equ	0xFF1
  9102                           postinc0	equ	0xFEE
  9103                           plusw0	equ	0xFEB
  9104                           fsr0h	equ	0xFEA
  9105                           fsr0l	equ	0xFE9
  9106                           wreg	equ	0xFE8
  9107                           postdec1	equ	0xFE5
  9108                           plusw1	equ	0xFE3
  9109                           fsr1h	equ	0xFE2
  9110                           fsr1l	equ	0xFE1
  9111                           bsr	equ	0xFE0
  9112                           indf2	equ	0xFDF
  9113                           postinc2	equ	0xFDE
  9114                           postdec2	equ	0xFDD
  9115                           plusw2	equ	0xFDB
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function i2_setRGB *****************
  9121 ;; Defined at:
  9122 ;;		line 42 in file "Drivers/PWM_Driver.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  r               1    wreg     unsigned char 
  9125 ;;  g               1    2[COMRAM] unsigned char 
  9126 ;;  b               1    3[COMRAM] unsigned char 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  r               1    4[COMRAM] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      void 
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0, cstack
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9138 ;;      Params:         2       0       0       0       0       0       0       0       0
  9139 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9141 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9142 ;;Total ram usage:        3 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    1
  9145 ;; This function calls:
  9146 ;;		i2_D_PWM_SetDuty
  9147 ;; This function is called by:
  9148 ;;		_flash
  9149 ;;		_strobe2
  9150 ;;		_fade
  9151 ;;		_smooth
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text54
  9156  0020E0                     __ptext54:
  9157                           	opt stack 0
  9158  0020E0                     i2_setRGB:
  9159                           	opt stack 13
  9160                           
  9161                           ;incstack = 0
  9162                           ;i2setRGB@r stored from wreg
  9163  0020E0  6E05               	movwf	i2setRGB@r,c
  9164                           
  9165                           ;PWM_Driver.c: 43: D_PWM_SetDuty(0, r);
  9166  0020E2  C005  F001         	movff	i2setRGB@r,i2D_PWM_SetDuty@duty
  9167  0020E6  0E00               	movlw	0
  9168  0020E8  EC0F  F010         	call	i2_D_PWM_SetDuty
  9169                           
  9170                           ;PWM_Driver.c: 44: D_PWM_SetDuty(1, g);
  9171  0020EC  C003  F001         	movff	i2setRGB@g,i2D_PWM_SetDuty@duty
  9172  0020F0  0E01               	movlw	1
  9173  0020F2  EC0F  F010         	call	i2_D_PWM_SetDuty
  9174                           
  9175                           ;PWM_Driver.c: 45: D_PWM_SetDuty(2, b);
  9176  0020F6  C004  F001         	movff	i2setRGB@b,i2D_PWM_SetDuty@duty
  9177  0020FA  0E02               	movlw	2
  9178  0020FC  EC0F  F010         	call	i2_D_PWM_SetDuty
  9179  002100  0012               	return		;funcret
  9180  002102                     __end_ofi2_setRGB:
  9181                           	opt stack 0
  9182                           pclatu	equ	0xFFB
  9183                           pclath	equ	0xFFA
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           intcon2	equ	0xFF1
  9192                           postinc0	equ	0xFEE
  9193                           plusw0	equ	0xFEB
  9194                           fsr0h	equ	0xFEA
  9195                           fsr0l	equ	0xFE9
  9196                           wreg	equ	0xFE8
  9197                           postdec1	equ	0xFE5
  9198                           plusw1	equ	0xFE3
  9199                           fsr1h	equ	0xFE2
  9200                           fsr1l	equ	0xFE1
  9201                           bsr	equ	0xFE0
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           postdec2	equ	0xFDD
  9205                           plusw2	equ	0xFDB
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function i2_D_PWM_SetDuty *****************
  9211 ;; Defined at:
  9212 ;;		line 307 in file "Drivers/PWM_Driver.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  which           1    wreg     unsigned char 
  9215 ;;  duty            1    0[COMRAM] unsigned char 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  which           1    1[COMRAM] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		wreg, status,2, status,0
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9227 ;;      Params:         1       0       0       0       0       0       0       0       0
  9228 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9230 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9231 ;;Total ram usage:        2 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		i2_setRGB
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           	psect	text55
  9241  00201E                     __ptext55:
  9242                           	opt stack 0
  9243  00201E                     i2_D_PWM_SetDuty:
  9244                           	opt stack 13
  9245                           
  9246                           ;incstack = 0
  9247                           ;i2D_PWM_SetDuty@which stored from wreg
  9248  00201E  6E02               	movwf	i2D_PWM_SetDuty@which,c
  9249                           
  9250                           ;PWM_Driver.c: 308: switch(which) {
  9251  002020  D009               	goto	i2l2216
  9252  002022                     i2l347:
  9253                           
  9254                           ;PWM_Driver.c: 310: PWM_Red.duty_val = duty;
  9255  002022  C001  F0CB         	movff	i2D_PWM_SetDuty@duty,_PWM_Red+1
  9256                           
  9257                           ;PWM_Driver.c: 311: break;
  9258  002026  0012               	return	
  9259  002028                     i2l349:
  9260                           
  9261                           ;PWM_Driver.c: 314: PWM_Green.duty_val = duty;
  9262  002028  C001  F0C9         	movff	i2D_PWM_SetDuty@duty,_PWM_Green+1
  9263                           
  9264                           ;PWM_Driver.c: 315: break;
  9265  00202C  0012               	return	
  9266  00202E                     i2l350:
  9267                           
  9268                           ;PWM_Driver.c: 318: PWM_Blue.duty_val = duty;
  9269  00202E  C001  F0C7         	movff	i2D_PWM_SetDuty@duty,_PWM_Blue+1
  9270                           
  9271                           ;PWM_Driver.c: 320: }
  9272                           
  9273                           ;PWM_Driver.c: 319: break;
  9274  002032  0012               	return	
  9275  002034                     i2l2216:
  9276  002034  5002               	movf	i2D_PWM_SetDuty@which,w,c
  9277                           
  9278                           ; Switch size 1, requested type "space"
  9279                           ; Number of cases is 3, Range of values is 0 to 2
  9280                           ; switch strategies available:
  9281                           ; Name         Instructions Cycles
  9282                           ; simple_byte           10     6 (average)
  9283                           ;	Chosen strategy is simple_byte
  9284  002036  0A00               	xorlw	0	; case 0
  9285  002038  B4D8               	btfsc	status,2,c
  9286  00203A  D7F3               	goto	i2l347
  9287  00203C  0A01               	xorlw	1	; case 1
  9288  00203E  B4D8               	btfsc	status,2,c
  9289  002040  D7F3               	goto	i2l349
  9290  002042  0A03               	xorlw	3	; case 2
  9291  002044  A4D8               	btfss	status,2,c
  9292  002046  0012               	return	
  9293  002048  D7F2               	goto	i2l350
  9294  00204A                     __end_ofi2_D_PWM_SetDuty:
  9295                           	opt stack 0
  9296                           pclatu	equ	0xFFB
  9297                           pclath	equ	0xFFA
  9298                           tblptru	equ	0xFF8
  9299                           tblptrh	equ	0xFF7
  9300                           tblptrl	equ	0xFF6
  9301                           tablat	equ	0xFF5
  9302                           prodh	equ	0xFF4
  9303                           prodl	equ	0xFF3
  9304                           intcon	equ	0xFF2
  9305                           intcon2	equ	0xFF1
  9306                           postinc0	equ	0xFEE
  9307                           plusw0	equ	0xFEB
  9308                           fsr0h	equ	0xFEA
  9309                           fsr0l	equ	0xFE9
  9310                           wreg	equ	0xFE8
  9311                           postdec1	equ	0xFE5
  9312                           plusw1	equ	0xFE3
  9313                           fsr1h	equ	0xFE2
  9314                           fsr1l	equ	0xFE1
  9315                           bsr	equ	0xFE0
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           plusw2	equ	0xFDB
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           pclatu	equ	0xFFB
  9324                           pclath	equ	0xFFA
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           intcon	equ	0xFF2
  9332                           intcon2	equ	0xFF1
  9333                           postinc0	equ	0xFEE
  9334                           plusw0	equ	0xFEB
  9335                           fsr0h	equ	0xFEA
  9336                           fsr0l	equ	0xFE9
  9337                           wreg	equ	0xFE8
  9338                           postdec1	equ	0xFE5
  9339                           plusw1	equ	0xFE3
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           bsr	equ	0xFE0
  9343                           indf2	equ	0xFDF
  9344                           postinc2	equ	0xFDE
  9345                           postdec2	equ	0xFDD
  9346                           plusw2	equ	0xFDB
  9347                           fsr2h	equ	0xFDA
  9348                           fsr2l	equ	0xFD9
  9349                           status	equ	0xFD8
  9350                           
  9351                           	psect	rparam
  9352  0000                     pclatu	equ	0xFFB
  9353                           pclath	equ	0xFFA
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           postinc0	equ	0xFEE
  9363                           plusw0	equ	0xFEB
  9364                           fsr0h	equ	0xFEA
  9365                           fsr0l	equ	0xFE9
  9366                           wreg	equ	0xFE8
  9367                           postdec1	equ	0xFE5
  9368                           plusw1	equ	0xFE3
  9369                           fsr1h	equ	0xFE2
  9370                           fsr1l	equ	0xFE1
  9371                           bsr	equ	0xFE0
  9372                           indf2	equ	0xFDF
  9373                           postinc2	equ	0xFDE
  9374                           postdec2	equ	0xFDD
  9375                           plusw2	equ	0xFDB
  9376                           fsr2h	equ	0xFDA
  9377                           fsr2l	equ	0xFD9
  9378                           status	equ	0xFD8
  9379                           
  9380                           	psect	temp
  9381  000046                     btemp:
  9382                           	opt stack 0
  9383  000046                     	ds	1
  9384  0000                     int$flags	set	btemp
  9385                           pclatu	equ	0xFFB
  9386                           pclath	equ	0xFFA
  9387                           tblptru	equ	0xFF8
  9388                           tblptrh	equ	0xFF7
  9389                           tblptrl	equ	0xFF6
  9390                           tablat	equ	0xFF5
  9391                           prodh	equ	0xFF4
  9392                           prodl	equ	0xFF3
  9393                           intcon	equ	0xFF2
  9394                           intcon2	equ	0xFF1
  9395                           postinc0	equ	0xFEE
  9396                           plusw0	equ	0xFEB
  9397                           fsr0h	equ	0xFEA
  9398                           fsr0l	equ	0xFE9
  9399                           wreg	equ	0xFE8
  9400                           postdec1	equ	0xFE5
  9401                           plusw1	equ	0xFE3
  9402                           fsr1h	equ	0xFE2
  9403                           fsr1l	equ	0xFE1
  9404                           bsr	equ	0xFE0
  9405                           indf2	equ	0xFDF
  9406                           postinc2	equ	0xFDE
  9407                           postdec2	equ	0xFDD
  9408                           plusw2	equ	0xFDB
  9409                           fsr2h	equ	0xFDA
  9410                           fsr2l	equ	0xFD9
  9411                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    18
    Data        12
    BSS         122
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      69
    BANK0           160     79     119
    BANK1           256      0      63
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_ReadBlock.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_25(CODE[4]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_14(CODE[5]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(BANK0[2]), ?_printf(BANK0[2]), 

    strToInt@str	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    sp__D_UART_GetDeviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    S280$message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.message(COMRAM[10]), D_UART_ReadBlock@cm(BANK0[17]), cm.message(COMRAM[10]), D_UART_Read@cm(BANK0[17]), 

    S280$command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.command(COMRAM[5]), D_UART_ReadBlock@cm(BANK0[17]), cm.command(COMRAM[5]), D_UART_Read@cm(BANK0[17]), 

    S280$sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer.sender(BANK1[5]), readBuffer(BANK1[63]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    blockCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _readByte->i1_D_UART_Enable
    i1_printf->i1___lwmod
    i1_putch->i1_writeByte
    i1_writeByte->i1_D_UART_Enable
    i1___lwmod->i1___lwdiv

Critical Paths under _HighISR in COMRAM

    _handleState->_flash
    _handleState->_smooth
    _strobe2->i2_setRGB
    _smooth->i2_setRGB
    _flash->i2_setRGB
    _fade->i2_setRGB
    i2_setRGB->i2_D_PWM_SetDuty

Critical Paths under _main in BANK0

    _main->_handle_message
    _initialize->_D_UART_Write
    _D_UART_Write->_printf
    _D_UART_Init->___aldiv
    _D_PWM_Init->_D_TIMER0_Init
    _D_TIMER0_Init->_D_TIMER0_Enable
    _D_PWM_Enable->_D_TIMER0_Enable
    _handle_message->_D_UART_WriteInt
    _D_UART_WriteInt->_printf
    _printf->___lwmod
    _putch->_writeByte
    _writeByte->_D_UART_Enable
    ___lwmod->___lwdiv
    _D_PWM_SetRGB->_setRGB
    _setRGB->_D_PWM_SetDuty

Critical Paths under _LowISR in BANK0

    _acknowledge->i1_printf
    i1_printf->i1___lwmod

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14185
                                             77 BANK0      2     2      0
                       _D_PWM_SetRGB
                 _D_UART_BlockLength
                        _D_UART_Read
                   _D_UART_ReadBlock
                     _handle_message
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    3767
                        _D_PORT_Init
                       _D_PWM_Enable
                         _D_PWM_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    2776
                                             65 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Init                                          9     4      5     859
                                             51 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                             37 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Init                                           0     0      0      66
                    _D_TIMER0_Enable
                      _D_TIMER0_Init
 ---------------------------------------------------------------------------------
 (3) _D_TIMER0_Init                                        1     1      0      44
                                             38 BANK0      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Enable                                         1     1      0      44
                                             38 BANK0      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (4) _D_TIMER0_Enable                                      1     1      0      22
                                             37 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_message                                       7     1      6    8017
                                             70 BANK0      7     1      6
                         _D_PWM_Fade
                        _D_PWM_Flash
                      _D_PWM_GetBlue
                     _D_PWM_GetGreen
                       _D_PWM_GetRed
                     _D_PWM_GetScale
                     _D_PWM_GetState
                    _D_PWM_ScaleDown
                      _D_PWM_ScaleUp
                       _D_PWM_SetRGB
                       _D_PWM_Smooth
                       _D_PWM_Strobe
                        _D_UART_Read (ARG)
                   _D_UART_ReadBlock (ARG)
                    _D_UART_WriteInt
                           _strToInt
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1755
                                             37 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strToInt                                             5     3      2     310
                                             37 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    3288
                                             65 BANK0      5     1      4
                      _D_PWM_GetBlue (ARG)
                     _D_PWM_GetGreen (ARG)
                       _D_PWM_GetRed (ARG)
                     _D_PWM_GetScale (ARG)
                     _D_PWM_GetState (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              25    20      5    2604
                                             49 BANK0     16    11      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                             39 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            1     1      0      44
                                             38 BANK0      1     1      0
                      _D_UART_Enable
 ---------------------------------------------------------------------------------
 (6) _D_UART_Enable                                        1     1      0      22
                                             37 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                             44 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                             37 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Strobe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Smooth                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetRGB                                         3     1      2    2168
                                             42 BANK0      3     1      2
                             _setRGB
 ---------------------------------------------------------------------------------
 (3) _setRGB                                               3     1      2    1590
                                             39 BANK0      3     1      2
                      _D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (4) _D_PWM_SetDuty                                        2     1      1     280
                                             37 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleUp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetScale                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetRed                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetGreen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetBlue                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Flash                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Fade                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_UART_ReadBlock                                    25    18      7      71
                                             37 BANK0     25    18      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                         23    17      6      49
                                             37 BANK0     23    17      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_BlockLength                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowISR                                              17    17      0    2479
                                             20 BANK0     17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (8) _readByte                                             1     1      0      34
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       2     2      0    2445
                                             33 COMRAM     2     2      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (9) _acknowledge                                          0     0      0    1872
                           i1_printf
 ---------------------------------------------------------------------------------
 (10) i1_printf                                           25    20      5    1872
                                              4 BANK0     16    11      5
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (11) i1_putch                                             1     1      0      93
                                             27 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (12) i1_writeByte                                         1     1      0      62
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (9) i1_D_UART_Enable                                      1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           5     1      4     302
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           7     3      4     381
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _HighISR                                            14    14      0    3698
                                             11 COMRAM    14    14      0
                        _handleState
 ---------------------------------------------------------------------------------
 (15) _handleState                                         0     0      0    3698
                               _fade
                              _flash
                          _pwmColors
                             _smooth
                            _strobe2
 ---------------------------------------------------------------------------------
 (16) _strobe2                                             5     5      0     908
                                              5 COMRAM     5     5      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _smooth                                              6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _pwmColors                                           3     3      0      66
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (16) _flash                                               6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _fade                                                0     0      0     908
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (17) i2_setRGB                                            3     1      2     908
                                              2 COMRAM     3     1      2
                    i2_D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (18) i2_D_PWM_SetDuty                                     2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PWM_SetRGB
     _setRGB
       _D_PWM_SetDuty
   _D_UART_BlockLength
   _D_UART_Read
   _D_UART_ReadBlock
   _handle_message
     _D_PWM_Fade
     _D_PWM_Flash
     _D_PWM_GetBlue
     _D_PWM_GetGreen
     _D_PWM_GetRed
     _D_PWM_GetScale
     _D_PWM_GetState
     _D_PWM_ScaleDown
     _D_PWM_ScaleUp
     _D_PWM_SetRGB
       _setRGB
         _D_PWM_SetDuty
     _D_PWM_Smooth
     _D_PWM_Strobe
     _D_UART_Read (ARG)
     _D_UART_ReadBlock (ARG)
     _D_UART_WriteInt (ARG)
       _D_PWM_GetBlue (ARG)
       _D_PWM_GetGreen (ARG)
       _D_PWM_GetRed (ARG)
       _D_PWM_GetScale (ARG)
       _D_PWM_GetState (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _strToInt (ARG)
     _strcmp (ARG)
   _initialize
     _D_PORT_Init
     _D_PWM_Enable
       _D_TIMER0_Enable
     _D_PWM_Init
       _D_TIMER0_Enable
       _D_TIMER0_Init
         _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_Init
       _D_UART_Enable
       ___aldiv
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1___lwmod
           i1___lwdiv (ARG)
         i1_putch
           i1_writeByte
             i1_D_UART_Enable
   _readByte
     i1_D_UART_Enable

 _HighISR (ROOT)
   _handleState
     _fade
       i2_setRGB
         i2_D_PWM_SetDuty
     _flash
       i2_setRGB
         i2_D_PWM_SetDuty
     _pwmColors
     _smooth
       i2_setRGB
         i2_D_PWM_SetDuty
     _strobe2
       i2_setRGB
         i2_D_PWM_SetDuty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3F       7       24.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      77       5       74.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FB      20        0.0%
DATA                 0      0      FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 16 21:52:38 2017

                          _b 00CD                            _g 00CE                            _r 00CF  
                         l50 20D6                           l46 1840                           l39 1806  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
      __end_of_D_PWM_GetBlue 21E2                 _ackCharacter 003C                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l107 2164                          l350 2000                          l185 208E  
                        l347 1FF4                          l349 1FFA                          l517 0EAA  
                        l945 1B94                          l955 1DA0                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000        __end_of_D_PWM_ScaleUp 21B0        __end_of_D_PWM_SetDuty 201E  
                        prod 000FF3                          wreg 000FE8       __end_of_D_PWM_GetGreen 21DC  
     __end_of_D_PWM_GetScale 21FC       __end_of_D_PWM_GetState 21F8     __size_of_D_TIMER0_Enable 0022  
    __end_ofi2_D_PWM_SetDuty 204A          __end_ofi1_writeByte 2180                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2200 1D68                         l3000 08F4  
                       l2202 1D6E                         l2300 0E4C                         l3020 09AE  
                       l2206 1D92                         l2302 0E54                         l3102 18AA  
                       l2320 0EE2                         l2304 0E5A                         l3032 0A02  
                       l3008 093A                         l2400 136C                         l3120 191E  
                       l3112 18E8                         l2170 2006                         l3026 09D8  
                       l2402 137C                         l2180 1B50                         l2340 0F40  
                       l2324 0EFE                         l2308 0E64                         l3044 0A56  
                       l2420 1404                         l2412 13D6                         l2404 1382  
                       l3116 18F8                         l2190 1B86                         l2182 1B56  
                       l2326 0F04                         l3038 0A2C                         l2270 1826  
                       l2360 0F9C                         l3064 0B3C                         l2272 182E  
                       l2264 180E                         l2280 187E                         l2416 13E8  
                       l2178 1B44                         l2362 0FA2                         l2370 103C  
                       l2338 0F3A                         l2354 0F76                         l3058 0AF4  
                       l2274 1836                         l2266 1816                         l2364 0FEE  
                       l2372 104E                         l2356 0F88                         l2268 181E  
                       l2198 1D5C                         l2374 1056                         l2278 1848  
                       l2296 0E38                         l2376 1062                         l2394 133E  
                       l2388 1320                         l2752 1F08                         l2770 1DF4  
                       l2746 1EC2                         l2764 1DE2                         l2748 1ECE  
                       l2758 1DBE                         l2992 08AE                         STR_1 0863  
                       STR_2 0861                         STR_3 083D                         STR_4 0839  
                       STR_5 0835                         STR_6 0850                         STR_7 0865  
                       STR_8 0865                         STR_9 0865                         u2301 1E5A  
                       u3007 0AEE                         u3017 14EA                         u2271 1F74  
                       u2281 1FAA                         u2291 1E24                         u2551 18DA  
                       u2571 190E                         u2977 1696                         u2987 0A9E  
                       u2997 0AC6                         _fade 1A30                         _baud 002B  
                       _main 1894                         _read 0024                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0046                         prodh 000FF4                         prodl 000FF3  
                       start 00B4                D_UART_Read@cm 008B                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 21C4              __end_of_HighISR 19B4                __CFG_MCLRE$ON 000000  
                ?_D_PWM_Fade 0001                 ___param_bank 000000        D_TIMER0_Enable@enable 0085  
                ?_D_PWM_Init 0001               _startCharacter 0040                __CFG_PLLDIV$4 000000  
                      ?_fade 0001              __end_of___aldiv 1416                        ?_main 0001  
                      STR_10 0865                        STR_11 084D                        STR_20 085F  
                      STR_12 0859                        STR_13 0857                        STR_21 0844  
                      STR_30 0829                        STR_22 084A                        STR_14 0824  
                      STR_15 085B                        STR_23 0841                        STR_31 082D  
                      STR_32 082D                        STR_16 0855                        STR_24 0847  
                      STR_17 0833                        STR_25 0831                        STR_33 0813  
                      STR_26 085B                        STR_18 085D                        STR_27 0855  
                      STR_19 0853                        STR_28 0833                        STR_29 0829  
            __end_of___lwdiv 1B9E                        i1l113 2056                        i1l107 2176  
                      i1l185 2116              __end_of___lwmod 1DAA                        i1l517 1114  
                      i1l197 006C                        i2l310 152E                        i2l231 19D8  
                      i2l233 19FC                        i2l235 1A20                        i2l244 1784  
                      i2l350 202E                        i2l347 2022                        i2l349 2028  
                      i2l296 1A6C                        i2l393 1978                        i1l945 1F60  
                      i1l955 1EB6                        _RCREG 000FAE                        _TMR0H 000FD7  
                      _TMR0L 000FD6         __size_of_acknowledge 006E                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              ?_D_PWM_GetGreen 0001              ?_D_PWM_GetScale 0001  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000      __end_of_D_PWM_ScaleDown 21BA               __CFG_EBTR3$OFF 000000  
            ?_D_PWM_GetState 0001                __CFG_WRTB$OFF 000000           i1___lwmod@dividend 0060  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
                      _flash 174C              __end_of_dpowers 080B                        _scale 002E  
                      _state 002F                        _putch 218E                        main@i 00AD  
            i1writeByte@data 001B                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 0093                 ?_D_UART_Read 0085                        plusw0 000FEB  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
            __end_of_strobe2 1B26                 ?_D_PORT_Init 0001             __end_ofi2_setRGB 2102  
         __size_ofi1___lwdiv 0052           __size_ofi1___lwmod 005C                _stopCharacter 0042  
           __end_ofi1_printf 12FC                   i1printf@ap 006D              __initialization 1C7A  
           _D_UART_Init$1755 0098                 __end_of_fade 1AAC                 ?_D_PWM_Flash 0001  
               __end_of_main 192C     __size_ofi1_D_UART_Enable 0020                       ??_fade 0006  
                     ??_main 00AD                  i1_writeByte 216E                __activetblptr 000002  
           _D_UART_ReadBlock 1E08              __CFG_CCP2MX$OFF 000000         __size_of_handleState 006E  
           ?i2_D_PWM_SetDuty 0001                       ?_flash 0001                       _ADCON1 000FC1  
        __size_of_D_PWM_Fade 0006          __size_of_D_PWM_Init 003A                       ?_putch 0001  
                     i1l3200 116E                       i1l3140 1F3A                       i1l3212 11A4  
                     i1l3214 11AA                       i1l3230 11F2                       i1l3136 1F2E  
                     i1l3160 1E86                       i1l3320 0CA2                       i1l3312 0C6C  
                     i1l3304 0C42                       i1l3138 1F36                       i1l3234 1206  
                     i1l3170 10A2                       i1l3250 12CA                       i1l3148 1F56  
                     i1l3164 1EAA                       i1l3156 1E76                       i1l3236 120C  
                     i1l3244 12A4                       i1l3228 11E0                       i1l3158 1E80  
                     i1l3238 1258                       i1l3246 12B6                       i1l3182 10CE  
                     i1l3174 10B6                       i1l3334 0CF2                       i1l3326 0CC8  
                     i1l3318 0C92                       i1l3270 2070                       i1l3248 12BE  
                     i1l3176 10BE                       i1l3352 0D5E                       i1l3344 0D38  
                     i1l3280 0BC4                       i1l3194 114C                       i1l3178 10C4  
                     i1l3290 0BF2                       i1l3356 0D74                       i1l3348 0D4E  
                     i1l3284 0BCC                       i1l3276 0B88                       i1l3198 1168  
                     i1l3366 0D9C                       i1l3390 0DFA                       i1l3384 0DE8  
                     i1l3376 0DCE                       i1l3368 0DA4                       i1l3386 0DF2  
                     i1l3298 0C1C                       i2l2216 2034                       i2l2610 1A3A  
                     i2l2604 1B10                       i2l2622 1A58                       i2l2614 1A44  
                     i2l2640 1A8C                       i2l2632 1A78                       i2l2560 1A22  
                     i2l2552 19DA                       i2l2634 1A7C                       i2l2626 1A62  
                     i2l2618 1A4E                       i2l2644 1A98                       i2l2580 17C2  
                     i2l2572 179E                       i2l2556 19FE                       i2l2646 1A9C  
                     i2l2638 1A88                       i2l2670 157E                       i2l2662 155A  
                     i2l2654 1536                       i2l2576 17B0                       i2l2568 178C  
                     i2l2680 15A4                       i2l2586 17D6                       i2l2674 1590  
                     i2l2666 156C                       i2l2658 1548                       i2l2682 15CA  
                     i2l2588 17F0                       i2l2596 1AF6                       i2l2598 1B04  
                     i2l2950 1C26                       i2l2944 1C0E                       i2l2954 1C36  
                     i2l2946 1C16                       i2l2964 1C56                       i2l2958 1C46  
                     i2l2966 1C76                    ??i1_putch 001C                    ??_HighISR 000C  
          ??_D_TIMER0_Enable 0085                  readByte@dum 001B                       _LowISR 0018  
             __CFG_XINST$OFF 000000                    ??___aldiv 008D                       _comMes 00AF  
                  ??___lwdiv 0089                    ??___lwmod 0090             __end_of_readByte 2074  
                     _setRGB 209A                       clear_0 1CB8                       clear_1 1CC4  
                     clear_2 1CD0                       _printf 0E2A   __end_of_D_UART_BlockLength 21F4  
                     _smooth 14F6     __size_of_D_UART_WriteInt 00E0                       _strcmp 1EC0  
          __end_ofi1___lwdiv 1F6A                 __pdataCOMRAM 003C            __end_ofi1___lwmod 1EC0  
      D_UART_Init@interrupts 0097                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00A1  
           ?_D_PWM_ScaleDown 0001              D_UART_Init@baud 0095              D_UART_Init@name 0093  
           __end_of_strToInt 1E08                    ??_strobe2 0006                   __accesstop 0060  
    __end_of__initialization 1CD6              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
     __size_of_D_TIMER0_Init 00A0                D_PWM_SetRGB@b 008B                D_PWM_SetRGB@g 008A  
              D_PWM_SetRGB@r 008C                  i1printf@idx 006C                  i1printf@val 0071  
             __pcstackCOMRAM 0001                 __pidataBANK0 21FC                ?_D_PWM_GetRed 0001  
              ?_D_PWM_Enable 0001                __end_of_flash 17F4                  i1putch@data 001C  
              ?_D_PWM_SetRGB 008A                __end_of_putch 219C             _messageCharacter 00D5  
          D_PWM_SetDuty@duty 0085                ?_D_PWM_Smooth 0001                ?_D_PWM_Strobe 0001  
     __size_of_D_UART_Enable 0026            ??i1_D_UART_Enable 001A               ??_D_UART_Write 00A5  
                  ?i2_setRGB 0003                    ?i1_printf 0064                      ??_flash 0006  
                    ??_putch 0087                   __pbssBANK0 00AF                   __pbssBANK1 0100  
       __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 004A                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E                 ??_D_PWM_Fade 0085              fillDataBuffer@i 0022  
               ??_D_PWM_Init 0087               ??_D_PWM_GetRed 0085               ??_D_PWM_Enable 0086  
             ??_D_PWM_SetRGB 008C                   _deviceName 00D2                      ?_setRGB 0087  
       __size_of_D_PWM_Flash 0006               ??_D_PWM_Smooth 0085               ??_D_PWM_Strobe 0085  
           ??_D_PWM_GetGreen 0085             ??_D_PWM_GetScale 0085                      ?_printf 0091  
                    ?_smooth 0001             ??_D_PWM_GetState 0085                      ?_strcmp 0085  
              _D_TIMER0_Flag 002A           __size_of_pwmColors 007C                _D_TIMER0_Init 17F4  
                 ??i2_setRGB 0005                   ??i1_printf 0069      __size_of_fillDataBuffer 02A6  
        D_UART_Enable@enable 0085      __size_of_handle_message 031C            ??_D_UART_WriteInt 00A5  
             _blockCharacter 003E           __end_of_D_PWM_Fade 21EE                      _PWM_Red 00CA  
         __end_of_D_PWM_Init 1FEE              __CFG_VREGEN$OFF 000000                      i1_putch 21BA  
                    _HighISR 0008                    ?_readByte 0001       __size_of_D_PWM_GetBlue 0006  
         __size_of_writeByte 0014                _D_UART_Enable 2074     __end_of_D_UART_ReadBlock 1E64  
                    __Hparam 0000       __size_of_D_PWM_ScaleUp 000A                      __Lparam 0000  
            __size_of_LowISR 009C       __size_of_D_PWM_SetDuty 0030                   _readBuffer 0100  
              strToInt@shift 0088                      ___aldiv 12FC                      ___lwdiv 1B26  
                    ___lwmod 1D48                    ?_strToInt 0085                 __psmallconst 0800  
          handle_message@msg 00A6              __CFG_STVREN$OFF 000000                ??_acknowledge 0022  
                    __pcinit 1C7A              __size_of_setRGB 0024                      __ramtop 0800  
                 _initialize 1CE4                      __ptext0 1894                      __ptext1 1CE4  
                    __ptext2 15CE                      __ptext3 16A2                      __ptext4 12FC  
                    __ptext5 1FB4                      __ptext6 17F4                      __ptext7 2180  
                    __ptext8 20BE                      __ptext9 2122              __size_of_printf 026A  
             ?_D_TIMER0_Init 0001                    _T0CONbits 000FD5              __size_of_smooth 00D8  
               ?i1_writeByte 0001              __size_of_strcmp 0058            __end_of_hexpowers 0813  
                    _dpowers 0801            i1___lwdiv@divisor 001C            i1___lwdiv@counter 001E  
            _D_TIMER0_Enable 20BE             ___aldiv@dividend 0085                      _strobe2 1AAC  
             __pintcode_body 192C         end_of_initialization 1CD6                   ??_readByte 001B  
                    setRGB@b 0088                      setRGB@g 0087                      setRGB@r 0089  
              __Lmediumconst 0000                      int_func 192C               ?_D_UART_Enable 0001  
          __end_of_pwmColors 1A30         __end_of_D_UART_Write 16A2                    _RCSTAbits 000FAB  
                    printf@c 00A0                      printf@f 0091             ___aldiv@quotient 008F  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                   ??_strToInt 0087                      strcmp@r 008A  
              _D_PWM_GetBlue 21DC                    _PORTBbits 000F81                ??_handleState 000C  
          __end_of_writeByte 216E                   flash@color 0034                   flash@count 0035  
              _D_PWM_ScaleUp 21A6                    _TRISBbits 000F93                _D_PWM_SetDuty 1FEE  
                  _TRISCbits 000F94          __end_of_acknowledge 1C0C                    _PWM_Green 00C8  
                  i1___lwdiv 1F18                    i1___lwmod 1E64         __end_of_D_PWM_GetRed 21D6  
       __end_of_D_PWM_Enable 218E           _D_UART_BlockLength 21EE         __end_of_D_PWM_SetRGB 215A  
       __end_of_D_PWM_Smooth 21D0        D_TIMER0_Init@prescale 0086         __end_of_D_PWM_Strobe 21CA  
                  _TXSTAbits 000FAC     __size_ofi2_D_PWM_SetDuty 002C                   main@length 00AE  
               i1printf@flag 0070          ?_D_UART_BlockLength 0001                 i1printf@prec 006F  
             __end_of_LowISR 00B4              i1_D_UART_Enable 2102      __end_of_D_TIMER0_Enable 20E0  
            ??_D_TIMER0_Init 0086                  _BAUDCONbits 000FB8               ?_D_PWM_GetBlue 0001  
              __pidataCOMRAM 219C                  ?_initialize 0001            i1___lwmod@divisor 0062  
                  i2setRGB@b 0004                    i2setRGB@g 0003                    i2setRGB@r 0005  
             __end_of_setRGB 20BE            i1___lwmod@counter 0021               __end_of_printf 1094  
             ?_D_PWM_ScaleUp 0001         ??_D_UART_BlockLength 0085               __end_of_smooth 15CE  
             __end_of_strcmp 1F18               ?_D_PWM_SetDuty 0085          start_initialization 1C7A  
             _fillDataBuffer 0B84                    i1printf@c 0073                    i1printf@f 0064  
             _handle_message 0868           D_PWM_SetDuty@which 0086                   ?i1___lwdiv 001A  
                 ?i1___lwmod 0060            __size_ofi2_setRGB 0022          __end_of_handleState 1C7A  
          __size_ofi1_printf 0268              _D_UART_ReadFlag 00CC              ??_D_UART_Enable 0085  
   __size_of_D_PWM_ScaleDown 000A                  smooth@color 0037                  smooth@count 0038  
                   ??_LowISR 0074                  strToInt@val 0089                  strToInt@tmp 0087  
                strToInt@str 0085                  __pdataBANK0 00D5             __CFG_LPT1OSC$OFF 000000  
                   ??_setRGB 0089              _D_UART_WriteInt 1416                  _acknowledge 1B9E  
           D_UART_Write@data 00A3                     ??_printf 0096                     ??_smooth 0006  
                   ??_strcmp 0089       __end_of_fillDataBuffer 0E2A       __end_of_handle_message 0B84  
                __pbssCOMRAM 0024               handleState@cnt 0036         __size_ofi1_writeByte 0012  
              __pcstackBANK0 0060                ??_D_UART_Init 0098                ??_D_UART_Read 008B  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00D4  
              ??_D_PORT_Init 0085          __size_of_initialize 0064      __end_ofi1_D_UART_Enable 2122  
                  __pnvBANK0 00D2            __size_of_readByte 002A            ?_D_UART_ReadBlock 0085  
           ___lwdiv@dividend 0085                ??_D_PWM_Flash 0085                    __pintcode 0008  
                   ?___aldiv 0085           ??_D_UART_ReadBlock 008C            ??i2_D_PWM_SetDuty 0002  
            ??_D_PWM_GetBlue 0085                     ?___lwdiv 0085                     ?___lwmod 008C  
                _blockLength 002C                    fade@b_cnt 0044                    fade@g_cnt 0045  
                __pintcodelo 0018             ?_D_TIMER0_Enable 0001                    _bufferCnt 002D  
         fillDataBuffer@data 0023                    fade@r_cnt 0032              ??_D_PWM_ScaleUp 0085  
          __size_of_strToInt 005E              ??_D_PWM_SetDuty 0086              ?_fillDataBuffer 0001  
                __smallconst 0800                  _handleState 1C0C        __size_of_D_PWM_GetRed 0006  
      __size_of_D_PWM_Enable 000E              ?_handle_message 00A6        __size_of_D_PWM_SetRGB 001A  
               _D_UART_Write 15CE                    _hexpowers 080B        __size_of_D_PWM_Smooth 0006  
           ___lwdiv@quotient 0089                  ??i1___lwdiv 001E                  ??i1___lwmod 0021  
      __size_of_D_PWM_Strobe 0006               __size_of_flash 00A8                     ?_strobe2 0001  
              strobe2@on_cnt 003B               __size_of_putch 000E              ___aldiv@divisor 0089  
            ___aldiv@counter 008D                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
                   i1u302_27 2062                     i2u201_44 150C                     i2u201_45 1506  
                   i1u290_21 0D26          __end_of_D_UART_Init 174C          __end_of_D_UART_Read 1FB4  
                   i2u180_44 19EA                     i2u180_45 19E6                     i2u182_44 1A0E  
                   i2u182_45 1A0A                     i2u191_45 1B18                     i2u184_44 1762  
                   i2u184_45 175C                     _PIR1bits 000F9E                     i2u178_44 19C6  
                   i2u178_45 19C2      __end_of_D_UART_WriteInt 14F6                     i2u187_45 1AB4  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 00A1  
          ??_D_PWM_ScaleDown 0085                    _pwmColors 19B4          __end_of_D_PORT_Init 2140  
               _D_PWM_GetRed 21D0                 _D_PWM_Enable 2180           D_PWM_Enable@enable 0086  
               _D_PWM_SetRGB 2140                     _PWM_Blue 00C6                 _D_PWM_Smooth 21CA  
        __end_of_D_PWM_Flash 21E8                 _D_PWM_Strobe 21C4                   printf@flag 009D  
                 printf@prec 009C                     i2_setRGB 20E0                     i1_printf 1094  
                  _writeByte 215A      __size_of_D_PWM_GetGreen 0006                  _INTCON2bits 000FF1  
    __size_of_D_PWM_GetScale 0004                    copy_data0 1CA6      __size_of_D_PWM_GetState 0004  
           __size_ofi1_putch 000A             __size_of_HighISR 19AC             ?i1_D_UART_Enable 0001  
                   __Hrparam 0000                     __Lrparam 0000                   ?_pwmColors 0001  
           __size_of___aldiv 011A             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               ??_initialize 00A6        i1D_UART_Enable@enable 001A              ___lwdiv@divisor 0087  
            ___lwdiv@counter 008B                     __ptext10 0868                     __ptext11 1EC0  
                   __ptext20 21C4                     __ptext12 1DAA                     __ptext21 21CA  
                   __ptext13 1416                     __ptext30 21D6                     __ptext22 2140  
                   __ptext14 0E2A                     __ptext31 21DC                     __ptext23 209A  
                   __ptext15 218E                     __ptext40 1B9E                     __ptext32 21E2  
                   __ptext24 1FEE                     __ptext16 215A                     __ptext41 1094  
                   __ptext33 21E8                     __ptext25 21A6                     __ptext17 2074  
                   __ptext50 14F6                     __ptext42 21BA                     __ptext34 1E08  
                   __ptext26 21B0                     __ptext18 1D48                     __ptext51 19B4  
                   __ptext43 216E                     __ptext35 1F6A                     __ptext27 21F4  
                   __ptext19 1B26                     __ptext52 174C                     __ptext44 2102  
                   __ptext36 21EE                     __ptext28 21F8                     __ptext53 1A30  
                   __ptext45 1E64                     __ptext29 21D0                     __ptext54 20E0  
                   __ptext46 1F18                     __ptext38 204A                     __ptext55 201E  
                   __ptext39 0B84                     __ptext48 1C0C                     __ptext49 1AAC  
                 strobe2@cnt 0039                   ?_writeByte 0001                     fade@b_up 0030  
                   fade@g_up 0031          D_UART_ReadBlock@cnt 008C                     fade@r_up 0033  
           __size_of_strobe2 007A           i1___lwdiv@dividend 001A                  _D_UART_Init 16A2  
                _D_UART_Read 1F6A                     _readData 00C0                     _readByte 204A  
              __size_of_fade 007C                __size_of_main 0098                  _D_PORT_Init 2122  
         __end_of_initialize 1D48             ?_D_UART_WriteInt 00A1                  _D_PWM_Flash 21E2  
                   int$flags 0046                     _strToInt 1DAA                    printf@idx 0099  
                  printf@val 009E                 ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000  
      __end_of_D_TIMER0_Init 1894           i1___lwdiv@quotient 001F                    putch@data 0087  
                 _INTCONbits 000FF2  __size_of_D_UART_BlockLength 0006                     intlevel1 0000  
                   intlevel2 0000              i2_D_PWM_SetDuty 201E             ___lwmod@dividend 008C  
                  strobe2@on 003A           D_UART_ReadBlock@cm 008D        __end_of_D_UART_Enable 209A  
                  strobe@cnt 00D0                   _D_PWM_Fade 21E8                   _D_PWM_Init 1FB4  
                ??_pwmColors 0001                     printf@ap 009A             ??_fillDataBuffer 0022  
        D_UART_Write@command 00A1             ??_handle_message 00AC                ??i1_writeByte 001B  
               ?_handleState 0001                     strcmp@s1 0085                     strcmp@s2 0087  
            ___lwmod@divisor 008E    __size_of_D_UART_ReadBlock 005C                     strobe@up 00D1  
              writeByte@data 0086              ___lwmod@counter 0090                 ___aldiv@sign 008E  
        D_UART_WriteInt@data 00A3         i2D_PWM_SetDuty@which 0002                  ??_writeByte 0086  
             _D_PWM_GetGreen 21D6               _D_PWM_GetScale 21F8               _D_PWM_GetState 21F4  
         __CFG_FOSC$HSPLL_HS 000000          pwmColors@birghtness 0003              _D_PWM_ScaleDown 21B0  
        i2D_PWM_SetDuty@duty 0001  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 21:04:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.40
    79                           ; Generated 01/12/2016 GMT
    80                           ; 
    81                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F2550 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  0021E2                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _ackCharacter
   118  0021E2  35                 	db	low STR_5
   119  0021E3  08                 	db	high STR_5
   120                           
   121                           ;initializer for _blockCharacter
   122  0021E4  39                 	db	low STR_4
   123  0021E5  08                 	db	high STR_4
   124                           
   125                           ;initializer for _startCharacter
   126  0021E6  63                 	db	low STR_1
   127  0021E7  08                 	db	high STR_1
   128                           
   129                           ;initializer for _stopCharacter
   130  0021E8  61                 	db	low STR_2
   131  0021E9  08                 	db	high STR_2
   132                           
   133                           ;initializer for fade@b_cnt
   134  0021EA  FF                 	db	255
   135                           
   136                           ;initializer for fade@g_cnt
   137  0021EB  80                 	db	128
   138                           
   139                           	psect	idataBANK0
   140  002242                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _messageCharacter
   144  002242  3D                 	db	low STR_3
   145  002243  08                 	db	high STR_3
   146                           
   147                           	psect	smallconst
   148  000800                     __psmallconst:
   149                           	opt stack 0
   150  000800  00                 	db	0
   151  000801                     _dpowers:
   152                           	opt stack 0
   153  000801  0001               	dw	1
   154  000803  000A               	dw	10
   155  000805  0064               	dw	100
   156  000807  03E8               	dw	1000
   157  000809  2710               	dw	10000
   158  00080B                     __end_of_dpowers:
   159                           	opt stack 0
   160  00080B                     _hexpowers:
   161                           	opt stack 0
   162  00080B  0001               	dw	1
   163  00080D  0010               	dw	16
   164  00080F  0100               	dw	256
   165  000811  1000               	dw	4096
   166  000813                     __end_of_hexpowers:
   167                           	opt stack 0
   168  000813                     STR_33:
   169  000813  30                 	db	48	;'0'
   170  000814  31                 	db	49	;'1'
   171  000815  32                 	db	50	;'2'
   172  000816  33                 	db	51	;'3'
   173  000817  34                 	db	52	;'4'
   174  000818  35                 	db	53	;'5'
   175  000819  36                 	db	54	;'6'
   176  00081A  37                 	db	55	;'7'
   177  00081B  38                 	db	56	;'8'
   178  00081C  39                 	db	57	;'9'
   179  00081D  61                 	db	97	;'a'
   180  00081E  62                 	db	98	;'b'
   181  00081F  63                 	db	99	;'c'
   182  000820  64                 	db	100	;'d'
   183  000821  65                 	db	101	;'e'
   184  000822  66                 	db	102	;'f'
   185  000823  00                 	db	0
   186  000824                     STR_14:
   187  000824  69                 	db	105	;'i'
   188  000825  6E                 	db	110	;'n'
   189  000826  69                 	db	105	;'i'
   190  000827  74                 	db	116	;'t'
   191  000828  00                 	db	0
   192  000829                     STR_29:
   193  000829  53                 	db	83	;'S'
   194  00082A  43                 	db	67	;'C'
   195  00082B  41                 	db	65	;'A'
   196  00082C  00                 	db	0
   197  00082D                     STR_31:
   198  00082D  53                 	db	83	;'S'
   199  00082E  54                 	db	84	;'T'
   200  00082F  41                 	db	65	;'A'
   201  000830  00                 	db	0
   202  000831                     STR_25:
   203  000831  52                 	db	82	;'R'
   204  000832  47                 	db	71	;'G'
   205  000833  42                 	db	66	;'B'
   206  000834  00                 	db	0
   207  000835                     STR_5:
   208  000835  5B                 	db	91	;'['
   209  000836  41                 	db	65	;'A'
   210  000837  5D                 	db	93	;']'
   211  000838  00                 	db	0
   212  000839                     STR_4:
   213  000839  5B                 	db	91	;'['
   214  00083A  42                 	db	66	;'B'
   215  00083B  5D                 	db	93	;']'
   216  00083C  00                 	db	0
   217  00083D                     STR_3:
   218  00083D  5B                 	db	91	;'['
   219  00083E  4D                 	db	77	;'M'
   220  00083F  5D                 	db	93	;']'
   221  000840  00                 	db	0
   222  000841                     STR_23:
   223  000841  46                 	db	70	;'F'
   224  000842  41                 	db	65	;'A'
   225  000843  00                 	db	0
   226  000844                     STR_21:
   227  000844  46                 	db	70	;'F'
   228  000845  4C                 	db	76	;'L'
   229  000846  00                 	db	0
   230  000847                     STR_24:
   231  000847  53                 	db	83	;'S'
   232  000848  4D                 	db	77	;'M'
   233  000849  00                 	db	0
   234  00084A                     STR_22:
   235  00084A  53                 	db	83	;'S'
   236  00084B  54                 	db	84	;'T'
   237  00084C  00                 	db	0
   238  00084D                     STR_11:
   239  00084D  25                 	db	37
   240  00084E  64                 	db	100	;'d'
   241  00084F  00                 	db	0
   242  000850                     STR_6:
   243  000850  25                 	db	37
   244  000851  78                 	db	120	;'x'
   245  000852  00                 	db	0
   246  000853                     STR_19:
   247  000853  44                 	db	68	;'D'
   248  000854  00                 	db	0
   249  000855                     STR_16:
   250  000855  47                 	db	71	;'G'
   251  000856  00                 	db	0
   252  000857                     STR_13:
   253  000857  49                 	db	73	;'I'
   254  000858  00                 	db	0
   255  000859                     STR_12:
   256  000859  50                 	db	80	;'P'
   257  00085A  00                 	db	0
   258  00085B                     STR_15:
   259  00085B  52                 	db	82	;'R'
   260  00085C  00                 	db	0
   261  00085D                     STR_18:
   262  00085D  53                 	db	83	;'S'
   263  00085E  00                 	db	0
   264  00085F                     STR_20:
   265  00085F  55                 	db	85	;'U'
   266  000860  00                 	db	0
   267  000861                     STR_2:
   268  000861  24                 	db	36
   269  000862  00                 	db	0
   270  000863                     STR_1:
   271  000863  26                 	db	38
   272  000864  00                 	db	0
   273  000865                     STR_7:
   274  000865  3A                 	db	58	;':'
   275  000866  00                 	db	0
   276  0000                     
   277                           ; #config settings
   278  000867  00                 	db	0	; dummy byte at the end
   279  0000                     
   280                           	psect	nvBANK0
   281  0000D4                     __pnvBANK0:
   282                           	opt stack 0
   283  0000D4                     _deviceName:
   284                           	opt stack 0
   285  0000D4                     	ds	3
   286  0000                     _ADCON1	set	4033
   287  0000                     _BAUDCONbits	set	4024
   288  0000                     _INTCON2bits	set	4081
   289  0000                     _INTCONbits	set	4082
   290  0000                     _IPR1bits	set	3999
   291  0000                     _PIE1bits	set	3997
   292  0000                     _PIR1bits	set	3998
   293  0000                     _PORTA	set	3968
   294  0000                     _PORTB	set	3969
   295  0000                     _PORTBbits	set	3969
   296  0000                     _PORTC	set	3970
   297  0000                     _RCONbits	set	4048
   298  0000                     _RCREG	set	4014
   299  0000                     _RCSTAbits	set	4011
   300  0000                     _SPBRG	set	4015
   301  0000                     _T0CONbits	set	4053
   302  0000                     _TMR0H	set	4055
   303  0000                     _TMR0L	set	4054
   304  0000                     _TRISA	set	3986
   305  0000                     _TRISB	set	3987
   306  0000                     _TRISBbits	set	3987
   307  0000                     _TRISC	set	3988
   308  0000                     _TRISCbits	set	3988
   309  0000                     _TXREG	set	4013
   310  0000                     _TXSTAbits	set	4012
   311                           
   312                           	psect	cinit
   313  001CC2                     __pcinit:
   314                           	opt stack 0
   315  001CC2                     start_initialization:
   316                           	opt stack 0
   317  001CC2                     __initialization:
   318                           	opt stack 0
   319                           
   320                           ; Initialize objects allocated to BANK0 (2 bytes)
   321                           ; load TBLPTR registers with __pidataBANK0
   322  001CC2  0E42               	movlw	low __pidataBANK0
   323  001CC4  6EF6               	movwf	tblptrl,c
   324  001CC6  0E22               	movlw	high __pidataBANK0
   325  001CC8  6EF7               	movwf	tblptrh,c
   326  001CCA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   327  001CCC  6EF8               	movwf	tblptru,c
   328  001CCE  0009               	tblrd		*+	;fetch initializer
   329  001CD0  CFF5 F0D7          	movff	tablat,__pdataBANK0
   330  001CD4  0009               	tblrd		*+	;fetch initializer
   331  001CD6  CFF5 F0D8          	movff	tablat,__pdataBANK0+1
   332                           
   333                           ; Initialize objects allocated to COMRAM (10 bytes)
   334                           ; load TBLPTR registers with __pidataCOMRAM
   335  001CDA  0EE2               	movlw	low __pidataCOMRAM
   336  001CDC  6EF6               	movwf	tblptrl,c
   337  001CDE  0E21               	movlw	high __pidataCOMRAM
   338  001CE0  6EF7               	movwf	tblptrh,c
   339  001CE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   340  001CE4  6EF8               	movwf	tblptru,c
   341  001CE6  EE00  F03B         	lfsr	0,__pdataCOMRAM
   342  001CEA  EE10 F00A          	lfsr	1,10
   343  001CEE                     copy_data0:
   344  001CEE  0009               	tblrd		*+
   345  001CF0  CFF5 FFEE          	movff	tablat,postinc0
   346  001CF4  50E5               	movf	postdec1,w,c
   347  001CF6  50E1               	movf	fsr1l,w,c
   348  001CF8  E1FA               	bnz	copy_data0
   349                           
   350                           ; Clear objects allocated to BANK1 (63 bytes)
   351  001CFA  EE01  F000         	lfsr	0,__pbssBANK1
   352  001CFE  0E3F               	movlw	63
   353  001D00                     clear_0:
   354  001D00  6AEE               	clrf	postinc0,c
   355  001D02  06E8               	decf	wreg,f,c
   356  001D04  E1FD               	bnz	clear_0
   357                           
   358                           ; Clear objects allocated to BANK0 (35 bytes)
   359  001D06  EE00  F0B1         	lfsr	0,__pbssBANK0
   360  001D0A  0E23               	movlw	35
   361  001D0C                     clear_1:
   362  001D0C  6AEE               	clrf	postinc0,c
   363  001D0E  06E8               	decf	wreg,f,c
   364  001D10  E1FD               	bnz	clear_1
   365                           
   366                           ; Clear objects allocated to COMRAM (25 bytes)
   367  001D12  EE00  F022         	lfsr	0,__pbssCOMRAM
   368  001D16  0E19               	movlw	25
   369  001D18                     clear_2:
   370  001D18  6AEE               	clrf	postinc0,c
   371  001D1A  06E8               	decf	wreg,f,c
   372  001D1C  E1FD               	bnz	clear_2
   373  001D1E                     end_of_initialization:
   374                           	opt stack 0
   375  001D1E                     __end_of__initialization:
   376                           	opt stack 0
   377  001D1E  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   378  001D20  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   379  001D22  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  001D24  6EF8               	movwf	tblptru,c
   381  001D26  0100               	movlb	0
   382  001D28  EF5E  F00C         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssCOMRAM
   393  000022                     __pbssCOMRAM:
   394                           	opt stack 0
   395  000022                     _read:
   396                           	opt stack 0
   397  000022                     	ds	6
   398  000028                     _D_TIMER0_Flag:
   399                           	opt stack 0
   400  000028                     	ds	1
   401  000029                     _baud:
   402                           	opt stack 0
   403  000029                     	ds	1
   404  00002A                     _blockLength:
   405                           	opt stack 0
   406  00002A                     	ds	1
   407  00002B                     _bufferCnt:
   408                           	opt stack 0
   409  00002B                     	ds	1
   410  00002C                     _scale:
   411                           	opt stack 0
   412  00002C                     	ds	1
   413  00002D                     _state:
   414                           	opt stack 0
   415  00002D                     	ds	1
   416  00002E                     fade@b_up:
   417                           	opt stack 0
   418  00002E                     	ds	1
   419  00002F                     fade@fade:
   420                           	opt stack 0
   421  00002F                     	ds	1
   422  000030                     fade@g_up:
   423                           	opt stack 0
   424  000030                     	ds	1
   425  000031                     fade@r_cnt:
   426                           	opt stack 0
   427  000031                     	ds	1
   428  000032                     fade@r_up:
   429                           	opt stack 0
   430  000032                     	ds	1
   431  000033                     flash@color:
   432                           	opt stack 0
   433  000033                     	ds	1
   434  000034                     flash@count:
   435                           	opt stack 0
   436  000034                     	ds	1
   437  000035                     handleState@cnt:
   438                           	opt stack 0
   439  000035                     	ds	1
   440  000036                     smooth@color:
   441                           	opt stack 0
   442  000036                     	ds	1
   443  000037                     smooth@count:
   444                           	opt stack 0
   445  000037                     	ds	1
   446  000038                     strobe2@cnt:
   447                           	opt stack 0
   448  000038                     	ds	1
   449  000039                     	ds	1
   450  00003A                     strobe2@on_cnt:
   451                           	opt stack 0
   452  00003A                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	dataCOMRAM
   463  00003B                     __pdataCOMRAM:
   464                           	opt stack 0
   465  00003B                     _ackCharacter:
   466                           	opt stack 0
   467  00003B                     	ds	2
   468  00003D                     _blockCharacter:
   469                           	opt stack 0
   470  00003D                     	ds	2
   471  00003F                     _startCharacter:
   472                           	opt stack 0
   473  00003F                     	ds	2
   474  000041                     _stopCharacter:
   475                           	opt stack 0
   476  000041                     	ds	2
   477  000043                     fade@b_cnt:
   478                           	opt stack 0
   479  000043                     	ds	1
   480  000044                     fade@g_cnt:
   481                           	opt stack 0
   482  000044                     	ds	1
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	bssBANK0
   493  0000B1                     __pbssBANK0:
   494                           	opt stack 0
   495  0000B1                     _comMes:
   496                           	opt stack 0
   497  0000B1                     	ds	17
   498  0000C2                     _readData:
   499                           	opt stack 0
   500  0000C2                     	ds	6
   501  0000C8                     _PWM_Blue:
   502                           	opt stack 0
   503  0000C8                     	ds	2
   504  0000CA                     _PWM_Green:
   505                           	opt stack 0
   506  0000CA                     	ds	2
   507  0000CC                     _PWM_Red:
   508                           	opt stack 0
   509  0000CC                     	ds	2
   510  0000CE                     _D_UART_ReadFlag:
   511                           	opt stack 0
   512  0000CE                     	ds	1
   513  0000CF                     _b:
   514                           	opt stack 0
   515  0000CF                     	ds	1
   516  0000D0                     _g:
   517                           	opt stack 0
   518  0000D0                     	ds	1
   519  0000D1                     _r:
   520                           	opt stack 0
   521  0000D1                     	ds	1
   522  0000D2                     strobe@cnt:
   523                           	opt stack 0
   524  0000D2                     	ds	1
   525  0000D3                     strobe@up:
   526                           	opt stack 0
   527  0000D3                     	ds	1
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	dataBANK0
   538  0000D7                     __pdataBANK0:
   539                           	opt stack 0
   540  0000D7                     _messageCharacter:
   541                           	opt stack 0
   542  0000D7                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           postdec1	equ	0xFE5
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	bssBANK1
   553  000100                     __pbssBANK1:
   554                           	opt stack 0
   555  000100                     _readBuffer:
   556                           	opt stack 0
   557  000100                     	ds	63
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1l	equ	0xFE1
   566                           
   567                           	psect	cstackBANK0
   568  000060                     __pcstackBANK0:
   569                           	opt stack 0
   570  000060                     ?i1___lwmod:
   571                           	opt stack 0
   572  000060                     i1___lwmod@dividend:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x0
   576  000060                     	ds	2
   577  000062                     i1___lwmod@divisor:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x2
   581  000062                     	ds	2
   582  000064                     ?i1_printf:
   583                           	opt stack 0
   584  000064                     i1printf@f:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x4
   588  000064                     	ds	5
   589  000069                     ??i1_printf:
   590                           
   591                           ; 1 bytes @ 0x9
   592  000069                     	ds	3
   593  00006C                     i1printf@idx:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0xC
   597  00006C                     	ds	1
   598  00006D                     i1printf@ap:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0xD
   602  00006D                     	ds	2
   603  00006F                     i1printf@prec:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0xF
   607  00006F                     	ds	1
   608  000070                     i1printf@flag:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x10
   612  000070                     	ds	1
   613  000071                     i1printf@val:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x11
   617  000071                     	ds	2
   618  000073                     i1printf@c:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x13
   622  000073                     	ds	1
   623  000074                     fillDataBuffer@i:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x14
   627  000074                     	ds	1
   628  000075                     fillDataBuffer@data:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x15
   632  000075                     	ds	1
   633  000076                     ??_LowISR:
   634                           
   635                           ; 1 bytes @ 0x16
   636  000076                     	ds	17
   637  000087                     ?_strcmp:
   638                           	opt stack 0
   639  000087                     ?___lwdiv:
   640                           	opt stack 0
   641  000087                     ?___aldiv:
   642                           	opt stack 0
   643  000087                     ?_D_UART_Read:
   644                           	opt stack 0
   645  000087                     ?_D_UART_ReadBlock:
   646                           	opt stack 0
   647  000087                     D_TIMER0_Enable@enable:
   648                           	opt stack 0
   649  000087                     D_UART_Enable@enable:
   650                           	opt stack 0
   651  000087                     D_PWM_SetDuty@duty:
   652                           	opt stack 0
   653  000087                     strToInt@str:
   654                           	opt stack 0
   655  000087                     ___lwdiv@dividend:
   656                           	opt stack 0
   657  000087                     strcmp@s1:
   658                           	opt stack 0
   659  000087                     ___aldiv@dividend:
   660                           	opt stack 0
   661                           
   662                           ; 4 bytes @ 0x27
   663  000087                     	ds	1
   664  000088                     D_TIMER0_Init@prescale:
   665                           	opt stack 0
   666  000088                     writeByte@data:
   667                           	opt stack 0
   668  000088                     D_PWM_Enable@enable:
   669                           	opt stack 0
   670  000088                     D_PWM_SetDuty@which:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x28
   674  000088                     	ds	1
   675  000089                     putch@data:
   676                           	opt stack 0
   677  000089                     setRGB@g:
   678                           	opt stack 0
   679  000089                     strToInt@tmp:
   680                           	opt stack 0
   681  000089                     ___lwdiv@divisor:
   682                           	opt stack 0
   683  000089                     strcmp@s2:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x29
   687  000089                     	ds	1
   688  00008A                     setRGB@b:
   689                           	opt stack 0
   690  00008A                     strToInt@shift:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x2A
   694  00008A                     	ds	1
   695  00008B                     ??_strcmp:
   696  00008B                     setRGB@r:
   697                           	opt stack 0
   698  00008B                     strToInt@val:
   699                           	opt stack 0
   700  00008B                     ___lwdiv@quotient:
   701                           	opt stack 0
   702  00008B                     ___aldiv@divisor:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x2B
   706  00008B                     	ds	1
   707  00008C                     D_PWM_SetRGB@g:
   708                           	opt stack 0
   709  00008C                     strcmp@r:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2C
   713  00008C                     	ds	1
   714  00008D                     D_PWM_SetRGB@b:
   715                           	opt stack 0
   716  00008D                     ___lwdiv@counter:
   717                           	opt stack 0
   718  00008D                     D_UART_Read@cm:
   719                           	opt stack 0
   720                           
   721                           ; 17 bytes @ 0x2D
   722  00008D                     	ds	1
   723  00008E                     ?___lwmod:
   724                           	opt stack 0
   725  00008E                     D_UART_ReadBlock@cnt:
   726                           	opt stack 0
   727  00008E                     D_PWM_SetRGB@r:
   728                           	opt stack 0
   729  00008E                     ___lwmod@dividend:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x2E
   733  00008E                     	ds	1
   734  00008F                     ___aldiv@counter:
   735                           	opt stack 0
   736  00008F                     D_UART_ReadBlock@cm:
   737                           	opt stack 0
   738                           
   739                           ; 17 bytes @ 0x2F
   740  00008F                     	ds	1
   741  000090                     ___aldiv@sign:
   742                           	opt stack 0
   743  000090                     ___lwmod@divisor:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x30
   747  000090                     	ds	1
   748  000091                     ___aldiv@quotient:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x31
   752  000091                     	ds	1
   753  000092                     ___lwmod@counter:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x32
   757  000092                     	ds	1
   758  000093                     ?_printf:
   759                           	opt stack 0
   760  000093                     printf@f:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0x33
   764  000093                     	ds	2
   765  000095                     D_UART_Init@name:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x35
   769  000095                     	ds	2
   770  000097                     D_UART_Init@baud:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x37
   774  000097                     	ds	1
   775  000098                     ??_printf:
   776                           
   777                           ; 1 bytes @ 0x38
   778  000098                     	ds	1
   779  000099                     D_UART_Init@interrupts:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x39
   783  000099                     	ds	1
   784  00009A                     _D_UART_Init$1756:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x3A
   788  00009A                     	ds	1
   789  00009B                     printf@idx:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x3B
   793  00009B                     	ds	1
   794  00009C                     printf@ap:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x3C
   798  00009C                     	ds	2
   799  00009E                     printf@prec:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3E
   803  00009E                     	ds	1
   804  00009F                     printf@flag:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x3F
   808  00009F                     	ds	1
   809  0000A0                     printf@val:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x40
   813  0000A0                     	ds	2
   814  0000A2                     printf@c:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x42
   818  0000A2                     	ds	1
   819  0000A3                     D_UART_Write@command:
   820                           	opt stack 0
   821  0000A3                     D_UART_WriteInt@command:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x43
   825  0000A3                     	ds	2
   826  0000A5                     D_UART_Write@data:
   827                           	opt stack 0
   828  0000A5                     D_UART_WriteInt@data:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x45
   832  0000A5                     	ds	2
   833  0000A7                     ??_D_UART_Write:
   834  0000A7                     ??_D_UART_WriteInt:
   835                           
   836                           ; 1 bytes @ 0x47
   837  0000A7                     	ds	1
   838  0000A8                     handle_message@msg:
   839                           	opt stack 0
   840                           
   841                           ; 6 bytes @ 0x48
   842  0000A8                     	ds	6
   843  0000AE                     ??_handle_message:
   844                           
   845                           ; 1 bytes @ 0x4E
   846  0000AE                     	ds	1
   847  0000AF                     main@i:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x4F
   851  0000AF                     	ds	1
   852  0000B0                     main@length:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x50
   856  0000B0                     	ds	1
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           
   866                           	psect	cstackCOMRAM
   867  000001                     __pcstackCOMRAM:
   868                           	opt stack 0
   869  000001                     ??_pwmColors:
   870  000001                     i2D_PWM_SetDuty@duty:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x0
   874  000001                     	ds	1
   875  000002                     i2D_PWM_SetDuty@which:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1
   879  000002                     	ds	1
   880  000003                     pwmColors@birghtness:
   881                           	opt stack 0
   882  000003                     i2setRGB@g:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x2
   886  000003                     	ds	1
   887  000004                     i2setRGB@b:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x3
   891  000004                     	ds	1
   892  000005                     i2setRGB@r:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x4
   896  000005                     	ds	1
   897  000006                     ??_flash:
   898  000006                     ??_strobe2:
   899  000006                     ??_smooth:
   900                           
   901                           ; 1 bytes @ 0x5
   902  000006                     	ds	6
   903  00000C                     ??_HighISR:
   904                           
   905                           ; 1 bytes @ 0xB
   906  00000C                     	ds	14
   907  00001A                     ?i1___lwdiv:
   908                           	opt stack 0
   909  00001A                     i1D_UART_Enable@enable:
   910                           	opt stack 0
   911  00001A                     i1___lwdiv@dividend:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x19
   915  00001A                     	ds	1
   916  00001B                     readByte@dum:
   917                           	opt stack 0
   918  00001B                     i1writeByte@data:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x1A
   922  00001B                     	ds	1
   923  00001C                     i1putch@data:
   924                           	opt stack 0
   925  00001C                     i1___lwdiv@divisor:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x1B
   929  00001C                     	ds	2
   930  00001E                     i1___lwdiv@counter:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x1D
   934  00001E                     	ds	1
   935  00001F                     i1___lwdiv@quotient:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x1E
   939  00001F                     	ds	2
   940  000021                     i1___lwmod@counter:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	1
   945  000022                     tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1l	equ	0xFE1
   953                           
   954                           ; 1 bytes @ 0x21
   955 ;;
   956 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   957 ;;
   958 ;; *************** function _main *****************
   959 ;; Defined at:
   960 ;;		line 65 in file "main.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  i               1   79[BANK0 ] unsigned char 
   965 ;;  length          1   80[BANK0 ] unsigned char 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   975 ;;      Params:         0       0       0       0       0       0       0       0       0
   976 ;;      Locals:         0       2       0       0       0       0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0       0       0
   978 ;;      Totals:         0       2       0       0       0       0       0       0       0
   979 ;;Total ram usage:        2 bytes
   980 ;; Hardware stack levels required when called:   18
   981 ;; This function calls:
   982 ;;		_D_PWM_SetRGB
   983 ;;		_D_UART_BlockLength
   984 ;;		_D_UART_Read
   985 ;;		_D_UART_ReadBlock
   986 ;;		_handle_message
   987 ;;		_initialize
   988 ;; This function is called by:
   989 ;;		Startup code after reset
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text0
   994  0018BC                     __ptext0:
   995                           	opt stack 0
   996  0018BC                     _main:
   997                           	opt stack 13
   998                           
   999                           ;main.c: 67: initialize();
  1000                           
  1001                           ;incstack = 0
  1002  0018BC  EC96  F00E         	call	_initialize	;wreg free
  1003                           
  1004                           ;main.c: 69: D_PWM_SetRGB(r, g, b);
  1005  0018C0  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  1006  0018C4  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  1007  0018C8  0100               	movlb	0	; () banked
  1008  0018CA  51D1               	movf	_r& (0+255),w,b
  1009  0018CC  ECC3  F010         	call	_D_PWM_SetRGB
  1010  0018D0                     l3118:
  1011                           
  1012                           ;main.c: 73: if (D_UART_ReadFlag) {
  1013  0018D0  0100               	movlb	0	; () banked
  1014  0018D2  51CE               	movf	_D_UART_ReadFlag& (0+255),w,b
  1015  0018D4  B4D8               	btfsc	status,2,c
  1016  0018D6  D7FC               	goto	l3118
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 74: D_UART_ReadFlag = 0;
  1020  0018D8  0E00               	movlw	0
  1021  0018DA  0100               	movlb	0	; () banked
  1022  0018DC  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;main.c: 75: uint8_t length = D_UART_BlockLength();
  1026  0018DE  EC1A  F011         	call	_D_UART_BlockLength	;wreg free
  1027  0018E2  0100               	movlb	0	; () banked
  1028  0018E4  6FB0               	movwf	main@length& (0+255),b
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;main.c: 76: if (length == 1) {
  1032  0018E6  0100               	movlb	0	; () banked
  1033  0018E8  05B0               	decf	main@length& (0+255),w,b
  1034  0018EA  A4D8               	btfss	status,2,c
  1035  0018EC  D010               	goto	l3128
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;main.c: 77: handle_message(D_UART_Read());
  1039  0018EE  ECD8  F00F         	call	_D_UART_Read	;wreg free
  1040  0018F2  CFE9 FFD9          	movff	fsr0l,fsr2l
  1041  0018F6  CFEA FFDA          	movff	fsr0h,fsr2h
  1042  0018FA  EE00  F0A8         	lfsr	0,handle_message@msg
  1043  0018FE  0E05               	movlw	5
  1044  001900                     u2571:
  1045  001900  CFDB FFEB          	movff	plusw2,plusw0
  1046  001904  06E8               	decf	wreg,f,c
  1047  001906  E2FC               	bc	u2571
  1048  001908  EC34  F004         	call	_handle_message	;wreg free
  1049                           
  1050                           ;main.c: 78: } else if (length > 1) {
  1051  00190C  D7E1               	goto	l3118
  1052  00190E                     l3128:
  1053  00190E  0E01               	movlw	1
  1054  001910  0100               	movlb	0	; () banked
  1055  001912  65B0               	cpfsgt	main@length& (0+255),b
  1056  001914  D7DD               	goto	l3118
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;main.c: 79: uint8_t i;
  1060                           ;main.c: 80: for (i=0; i < length; i++) {
  1061  001916  0E00               	movlw	0
  1062  001918  0100               	movlb	0	; () banked
  1063  00191A  6FAF               	movwf	main@i& (0+255),b
  1064  00191C  D013               	goto	l3136
  1065  00191E                     l3132:
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 81: handle_message(D_UART_ReadBlock(i));
  1069  00191E  0100               	movlb	0	; () banked
  1070  001920  51AF               	movf	main@i& (0+255),w,b
  1071  001922  EC27  F00F         	call	_D_UART_ReadBlock
  1072  001926  CFE9 FFD9          	movff	fsr0l,fsr2l
  1073  00192A  CFEA FFDA          	movff	fsr0h,fsr2h
  1074  00192E  EE00  F0A8         	lfsr	0,handle_message@msg
  1075  001932  0E05               	movlw	5
  1076  001934                     u2591:
  1077  001934  CFDB FFEB          	movff	plusw2,plusw0
  1078  001938  06E8               	decf	wreg,f,c
  1079  00193A  E2FC               	bc	u2591
  1080  00193C  EC34  F004         	call	_handle_message	;wreg free
  1081  001940  0100               	movlb	0	; () banked
  1082  001942  2BAF               	incf	main@i& (0+255),f,b
  1083  001944                     l3136:
  1084                           
  1085                           ; BSR set to: 0
  1086  001944  0100               	movlb	0	; () banked
  1087  001946  51B0               	movf	main@length& (0+255),w,b
  1088  001948  0100               	movlb	0	; () banked
  1089  00194A  5DAF               	subwf	main@i& (0+255),w,b
  1090  00194C  B0D8               	btfsc	status,0,c
  1091  00194E  D7C0               	goto	l3118
  1092  001950  D7E6               	goto	l3132
  1093  001952                     __end_of_main:
  1094                           	opt stack 0
  1095                           tblptru	equ	0xFF8
  1096                           tblptrh	equ	0xFF7
  1097                           tblptrl	equ	0xFF6
  1098                           tablat	equ	0xFF5
  1099                           postinc0	equ	0xFEE
  1100                           plusw0	equ	0xFEB
  1101                           fsr0h	equ	0xFEA
  1102                           fsr0l	equ	0xFE9
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           plusw2	equ	0xFDB
  1107                           fsr2h	equ	0xFDA
  1108                           fsr2l	equ	0xFD9
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _initialize *****************
  1112 ;; Defined at:
  1113 ;;		line 46 in file "main.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;		None
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0
  1128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1130 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1131 ;;Total ram usage:        0 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:   17
  1134 ;; This function calls:
  1135 ;;		_D_PORT_Init
  1136 ;;		_D_PWM_Enable
  1137 ;;		_D_PWM_Init
  1138 ;;		_D_UART_Enable
  1139 ;;		_D_UART_Init
  1140 ;;		_D_UART_Write
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text1
  1147  001D2C                     __ptext1:
  1148                           	opt stack 0
  1149  001D2C                     _initialize:
  1150                           	opt stack 13
  1151                           
  1152                           ;main.c: 47: D_PORT_Init();
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;incstack = 0
  1156  001D2C  ECB4  F010         	call	_D_PORT_Init	;wreg free
  1157                           
  1158                           ;main.c: 50: D_UART_Init("P", 19200, 1);
  1159  001D30  0E59               	movlw	low STR_12
  1160  001D32  0100               	movlb	0	; () banked
  1161  001D34  6F95               	movwf	D_UART_Init@name& (0+255),b
  1162  001D36  0E08               	movlw	high STR_12
  1163  001D38  0100               	movlb	0	; () banked
  1164  001D3A  6F96               	movwf	(D_UART_Init@name+1)& (0+255),b
  1165  001D3C  0E4B               	movlw	75
  1166  001D3E  0100               	movlb	0	; () banked
  1167  001D40  6F98               	movwf	(D_UART_Init@baud+1)& (0+255),b
  1168  001D42  0E00               	movlw	0
  1169  001D44  6F97               	movwf	D_UART_Init@baud& (0+255),b
  1170  001D46  0E01               	movlw	1
  1171  001D48  0100               	movlb	0	; () banked
  1172  001D4A  6F99               	movwf	D_UART_Init@interrupts& (0+255),b
  1173  001D4C  EC65  F00B         	call	_D_UART_Init	;wreg free
  1174                           
  1175                           ;main.c: 51: D_UART_Enable(1);
  1176  001D50  0E01               	movlw	1
  1177  001D52  EC5D  F010         	call	_D_UART_Enable
  1178                           
  1179                           ;main.c: 54: D_PWM_Init();
  1180  001D56  ECFD  F00F         	call	_D_PWM_Init	;wreg free
  1181                           
  1182                           ;main.c: 55: D_PWM_Enable(1);
  1183  001D5A  0E01               	movlw	1
  1184  001D5C  ECE3  F010         	call	_D_PWM_Enable
  1185                           
  1186                           ;main.c: 58: r = 255;
  1187  001D60  0100               	movlb	0	; () banked
  1188  001D62  69D1               	setf	_r& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 59: g = 0;
  1192  001D64  0E00               	movlw	0
  1193  001D66  0100               	movlb	0	; () banked
  1194  001D68  6FD0               	movwf	_g& (0+255),b
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 60: b = 0;
  1198  001D6A  0E00               	movlw	0
  1199  001D6C  0100               	movlb	0	; () banked
  1200  001D6E  6FCF               	movwf	_b& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;main.c: 62: D_UART_Write("I", "init");
  1204  001D70  0E57               	movlw	low STR_13
  1205  001D72  0100               	movlb	0	; () banked
  1206  001D74  6FA3               	movwf	D_UART_Write@command& (0+255),b
  1207  001D76  0E08               	movlw	high STR_13
  1208  001D78  0100               	movlb	0	; () banked
  1209  001D7A  6FA4               	movwf	(D_UART_Write@command+1)& (0+255),b
  1210  001D7C  0E24               	movlw	low STR_14
  1211  001D7E  0100               	movlb	0	; () banked
  1212  001D80  6FA5               	movwf	D_UART_Write@data& (0+255),b
  1213  001D82  0E08               	movlw	high STR_14
  1214  001D84  0100               	movlb	0	; () banked
  1215  001D86  6FA6               	movwf	(D_UART_Write@data+1)& (0+255),b
  1216  001D88  ECFB  F00A         	call	_D_UART_Write	;wreg free
  1217  001D8C  0012               	return		;funcret
  1218  001D8E                     __end_of_initialize:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           plusw0	equ	0xFEB
  1226                           fsr0h	equ	0xFEA
  1227                           fsr0l	equ	0xFE9
  1228                           wreg	equ	0xFE8
  1229                           postdec1	equ	0xFE5
  1230                           fsr1l	equ	0xFE1
  1231                           plusw2	equ	0xFDB
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _D_UART_Write *****************
  1237 ;; Defined at:
  1238 ;;		line 271 in file "Drivers/UART_Driver.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  command         2   67[BANK0 ] PTR const unsigned char 
  1241 ;;		 -> STR_13(2), 
  1242 ;;  data            2   69[BANK0 ] PTR const unsigned char 
  1243 ;;		 -> STR_14(5), 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1255 ;;      Params:         0       4       0       0       0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1257 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1258 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1259 ;;Total ram usage:        5 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:   16
  1262 ;; This function calls:
  1263 ;;		_printf
  1264 ;; This function is called by:
  1265 ;;		_initialize
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text2
  1270  0015F6                     __ptext2:
  1271                           	opt stack 0
  1272  0015F6                     _D_UART_Write:
  1273                           	opt stack 13
  1274                           
  1275                           ;UART_Driver.c: 272: printf(startCharacter);
  1276                           
  1277                           ;incstack = 0
  1278  0015F6  C03F  F093         	movff	_startCharacter,printf@f
  1279  0015FA  C040  F094         	movff	_startCharacter+1,printf@f+1
  1280  0015FE  0100               	movlb	0	; () banked
  1281  001600  5193               	movf	printf@f& (0+255),w,b
  1282  001602  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1283  001604  A4D8               	btfss	status,2,c
  1284  001606  0E00               	movlw	low (__mediumconst shr (0+16))
  1285  001608  6F95               	movwf	(printf@f+2)& (0+255),b
  1286  00160A  EC29  F007         	call	_printf	;wreg free
  1287                           
  1288                           ;UART_Driver.c: 274: printf(messageCharacter);
  1289  00160E  C0D7  F093         	movff	_messageCharacter,printf@f
  1290  001612  C0D8  F094         	movff	_messageCharacter+1,printf@f+1
  1291  001616  0100               	movlb	0	; () banked
  1292  001618  5193               	movf	printf@f& (0+255),w,b
  1293  00161A  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1294  00161C  A4D8               	btfss	status,2,c
  1295  00161E  0E00               	movlw	low (__mediumconst shr (0+16))
  1296  001620  6F95               	movwf	(printf@f+2)& (0+255),b
  1297  001622  EC29  F007         	call	_printf	;wreg free
  1298                           
  1299                           ;UART_Driver.c: 275: printf(deviceName);
  1300  001626  C0D4  F093         	movff	_deviceName,printf@f
  1301  00162A  C0D5  F094         	movff	_deviceName+1,printf@f+1
  1302  00162E  C0D6  F095         	movff	_deviceName+2,printf@f+2
  1303  001632  EC29  F007         	call	_printf	;wreg free
  1304                           
  1305                           ;UART_Driver.c: 277: printf(":");printf(command);
  1306  001636  0E65               	movlw	low STR_7
  1307  001638  0100               	movlb	0	; () banked
  1308  00163A  6F93               	movwf	printf@f& (0+255),b
  1309  00163C  0E08               	movlw	high STR_7
  1310  00163E  0100               	movlb	0	; () banked
  1311  001640  6F94               	movwf	(printf@f+1)& (0+255),b
  1312  001642  0100               	movlb	0	; () banked
  1313  001644  5193               	movf	printf@f& (0+255),w,b
  1314  001646  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1315  001648  A4D8               	btfss	status,2,c
  1316  00164A  0E00               	movlw	low (__mediumconst shr (0+16))
  1317  00164C  6F95               	movwf	(printf@f+2)& (0+255),b
  1318  00164E  EC29  F007         	call	_printf	;wreg free
  1319  001652  C0A3  F093         	movff	D_UART_Write@command,printf@f
  1320  001656  C0A4  F094         	movff	D_UART_Write@command+1,printf@f+1
  1321  00165A  0100               	movlb	0	; () banked
  1322  00165C  5193               	movf	printf@f& (0+255),w,b
  1323  00165E  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1324  001660  A4D8               	btfss	status,2,c
  1325  001662  0E00               	movlw	low (__mediumconst shr (0+16))
  1326  001664  6F95               	movwf	(printf@f+2)& (0+255),b
  1327  001666  EC29  F007         	call	_printf	;wreg free
  1328                           
  1329                           ;UART_Driver.c: 279: printf(":");printf(data);
  1330  00166A  0E65               	movlw	low STR_7
  1331  00166C  0100               	movlb	0	; () banked
  1332  00166E  6F93               	movwf	printf@f& (0+255),b
  1333  001670  0E08               	movlw	high STR_7
  1334  001672  0100               	movlb	0	; () banked
  1335  001674  6F94               	movwf	(printf@f+1)& (0+255),b
  1336  001676  0100               	movlb	0	; () banked
  1337  001678  5193               	movf	printf@f& (0+255),w,b
  1338  00167A  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1339  00167C  A4D8               	btfss	status,2,c
  1340  00167E  0E00               	movlw	low (__mediumconst shr (0+16))
  1341  001680  6F95               	movwf	(printf@f+2)& (0+255),b
  1342  001682  EC29  F007         	call	_printf	;wreg free
  1343  001686  C0A5  F093         	movff	D_UART_Write@data,printf@f
  1344  00168A  C0A6  F094         	movff	D_UART_Write@data+1,printf@f+1
  1345  00168E  0100               	movlb	0	; () banked
  1346  001690  5193               	movf	printf@f& (0+255),w,b
  1347  001692  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1348  001694  A4D8               	btfss	status,2,c
  1349  001696  0E00               	movlw	low (__mediumconst shr (0+16))
  1350  001698  6F95               	movwf	(printf@f+2)& (0+255),b
  1351  00169A  EC29  F007         	call	_printf	;wreg free
  1352                           
  1353                           ;UART_Driver.c: 281: printf(stopCharacter);
  1354  00169E  C041  F093         	movff	_stopCharacter,printf@f
  1355  0016A2  C042  F094         	movff	_stopCharacter+1,printf@f+1
  1356  0016A6  0100               	movlb	0	; () banked
  1357  0016A8  5193               	movf	printf@f& (0+255),w,b
  1358  0016AA  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1359  0016AC  A4D8               	btfss	status,2,c
  1360  0016AE  0E00               	movlw	low (__mediumconst shr (0+16))
  1361  0016B0  6F95               	movwf	(printf@f+2)& (0+255),b
  1362  0016B2  EC29  F007         	call	_printf	;wreg free
  1363                           
  1364                           ;UART_Driver.c: 282: _delay((unsigned long)((1)*(48000000/4000.0)));
  1365  0016B6  0E10               	movlw	16
  1366  0016B8  0100               	movlb	0	; () banked
  1367  0016BA  6FA7               	movwf	??_D_UART_Write& (0+255),b
  1368  0016BC  0E94               	movlw	148
  1369  0016BE                     u2997:
  1370  0016BE  2EE8               	decfsz	wreg,f,c
  1371  0016C0  D7FE               	bra	u2997
  1372  0016C2  2FA7               	decfsz	??_D_UART_Write& (0+255),f,b
  1373  0016C4  D7FC               	bra	u2997
  1374  0016C6  F000               	nop	
  1375  0016C8  0012               	return		;funcret
  1376  0016CA                     __end_of_D_UART_Write:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           plusw0	equ	0xFEB
  1384                           fsr0h	equ	0xFEA
  1385                           fsr0l	equ	0xFE9
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           plusw2	equ	0xFDB
  1390                           fsr2h	equ	0xFDA
  1391                           fsr2l	equ	0xFD9
  1392                           status	equ	0xFD8
  1393                           
  1394 ;; *************** function _D_UART_Init *****************
  1395 ;; Defined at:
  1396 ;;		line 233 in file "Drivers/UART_Driver.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  name            2   53[BANK0 ] PTR const unsigned char 
  1399 ;;		 -> STR_12(2), 
  1400 ;;  baud            2   55[BANK0 ] unsigned int 
  1401 ;;  interrupts      1   57[BANK0 ] unsigned char 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1413 ;;      Params:         0       5       0       0       0       0       0       0       0
  1414 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1416 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1417 ;;Total ram usage:        9 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:   13
  1420 ;; This function calls:
  1421 ;;		_D_UART_Enable
  1422 ;;		___aldiv
  1423 ;; This function is called by:
  1424 ;;		_initialize
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text3
  1429  0016CA                     __ptext3:
  1430                           	opt stack 0
  1431  0016CA                     _D_UART_Init:
  1432                           	opt stack 16
  1433                           
  1434                           ;UART_Driver.c: 235: TRISCbits.TRISC6 = 0;
  1435                           
  1436                           ;incstack = 0
  1437  0016CA  9C94               	bcf	3988,6,c	;volatile
  1438                           
  1439                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 1;
  1440  0016CC  8E94               	bsf	3988,7,c	;volatile
  1441                           
  1442                           ;UART_Driver.c: 239: deviceName = name;
  1443  0016CE  C095  F0D4         	movff	D_UART_Init@name,_deviceName
  1444  0016D2  C096  F0D5         	movff	D_UART_Init@name+1,_deviceName+1
  1445  0016D6  0100               	movlb	0	; () banked
  1446  0016D8  51D4               	movf	_deviceName& (0+255),w,b
  1447  0016DA  11D5               	iorwf	(_deviceName+1)& (0+255),w,b
  1448  0016DC  A4D8               	btfss	status,2,c
  1449  0016DE  0E00               	movlw	low (__mediumconst shr (0+16))
  1450  0016E0  6FD6               	movwf	(_deviceName+2)& (0+255),b
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;UART_Driver.c: 240: D_UART_ReadFlag = 0;
  1454  0016E2  0E00               	movlw	0
  1455  0016E4  0100               	movlb	0	; () banked
  1456  0016E6  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;UART_Driver.c: 243: D_UART_Enable(0);
  1460  0016E8  0E00               	movlw	0
  1461  0016EA  EC5D  F010         	call	_D_UART_Enable
  1462                           
  1463                           ;UART_Driver.c: 246: TXSTAbits.TX9 = 0;
  1464  0016EE  9CAC               	bcf	4012,6,c	;volatile
  1465                           
  1466                           ;UART_Driver.c: 247: TXSTAbits.SYNC = 0;
  1467  0016F0  98AC               	bcf	4012,4,c	;volatile
  1468                           
  1469                           ;UART_Driver.c: 248: TXSTAbits.BRGH = 0;
  1470  0016F2  94AC               	bcf	4012,2,c	;volatile
  1471                           
  1472                           ;UART_Driver.c: 251: RCSTAbits.RX9 = 0;
  1473  0016F4  9CAB               	bcf	4011,6,c	;volatile
  1474                           
  1475                           ;UART_Driver.c: 254: BAUDCONbits.RXDTP = 0;
  1476  0016F6  9AB8               	bcf	4024,5,c	;volatile
  1477                           
  1478                           ;UART_Driver.c: 255: BAUDCONbits.TXCKP = 0;
  1479  0016F8  98B8               	bcf	4024,4,c	;volatile
  1480                           
  1481                           ;UART_Driver.c: 256: BAUDCONbits.BRG16 = 0;
  1482  0016FA  96B8               	bcf	4024,3,c	;volatile
  1483                           
  1484                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1485  0016FC  C097  F08B         	movff	D_UART_Init@baud,___aldiv@divisor
  1486  001700  C098  F08C         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1487  001704  0100               	movlb	0	; () banked
  1488  001706  6B8D               	clrf	(___aldiv@divisor+2)& (0+255),b
  1489  001708  6B8E               	clrf	(___aldiv@divisor+3)& (0+255),b
  1490  00170A  0E00               	movlw	0
  1491  00170C  0100               	movlb	0	; () banked
  1492  00170E  6F87               	movwf	___aldiv@dividend& (0+255),b
  1493  001710  0E6C               	movlw	108
  1494  001712  6F88               	movwf	(___aldiv@dividend+1)& (0+255),b
  1495  001714  0EDC               	movlw	220
  1496  001716  6F89               	movwf	(___aldiv@dividend+2)& (0+255),b
  1497  001718  0E02               	movlw	2
  1498  00171A  6F8A               	movwf	(___aldiv@dividend+3)& (0+255),b
  1499  00171C  EC92  F009         	call	___aldiv	;wreg free
  1500  001720  C087  F09A         	movff	?___aldiv,_D_UART_Init$1756
  1501  001724  C088  F09B         	movff	?___aldiv+1,_D_UART_Init$1756+1
  1502  001728  C089  F09C         	movff	?___aldiv+2,_D_UART_Init$1756+2
  1503  00172C  C08A  F09D         	movff	?___aldiv+3,_D_UART_Init$1756+3
  1504                           
  1505                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1506  001730  C09A  F087         	movff	_D_UART_Init$1756,___aldiv@dividend
  1507  001734  C09B  F088         	movff	_D_UART_Init$1756+1,___aldiv@dividend+1
  1508  001738  C09C  F089         	movff	_D_UART_Init$1756+2,___aldiv@dividend+2
  1509  00173C  C09D  F08A         	movff	_D_UART_Init$1756+3,___aldiv@dividend+3
  1510  001740  0E40               	movlw	64
  1511  001742  0100               	movlb	0	; () banked
  1512  001744  6F8B               	movwf	___aldiv@divisor& (0+255),b
  1513  001746  0E00               	movlw	0
  1514  001748  6F8C               	movwf	(___aldiv@divisor+1)& (0+255),b
  1515  00174A  0E00               	movlw	0
  1516  00174C  6F8D               	movwf	(___aldiv@divisor+2)& (0+255),b
  1517  00174E  0E00               	movlw	0
  1518  001750  6F8E               	movwf	(___aldiv@divisor+3)& (0+255),b
  1519  001752  EC92  F009         	call	___aldiv	;wreg free
  1520  001756  0100               	movlb	0	; () banked
  1521  001758  0587               	decf	?___aldiv& (0+255),w,b
  1522  00175A  6EAF               	movwf	4015,c	;volatile
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;UART_Driver.c: 261: if (interrupts) {
  1526  00175C  0100               	movlb	0	; () banked
  1527  00175E  5199               	movf	D_UART_Init@interrupts& (0+255),w,b
  1528  001760  0100               	movlb	0	; () banked
  1529  001762  B4D8               	btfsc	status,2,c
  1530  001764  0012               	return	
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;UART_Driver.c: 262: RCONbits.IPEN = 1;
  1534  001766  8ED0               	bsf	4048,7,c	;volatile
  1535                           
  1536                           ;UART_Driver.c: 263: INTCONbits.GIEH = 1;
  1537  001768  8EF2               	bsf	intcon,7,c	;volatile
  1538                           
  1539                           ;UART_Driver.c: 264: INTCONbits.GIEL = 1;
  1540  00176A  8CF2               	bsf	intcon,6,c	;volatile
  1541                           
  1542                           ;UART_Driver.c: 265: PIR1bits.RCIF = 0;
  1543  00176C  9A9E               	bcf	3998,5,c	;volatile
  1544                           
  1545                           ;UART_Driver.c: 266: IPR1bits.RCIP = 0;
  1546  00176E  9A9F               	bcf	3999,5,c	;volatile
  1547                           
  1548                           ;UART_Driver.c: 267: PIE1bits.RCIE = 1;
  1549  001770  8A9D               	bsf	3997,5,c	;volatile
  1550  001772  0012               	return	
  1551  001774                     __end_of_D_UART_Init:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           plusw0	equ	0xFEB
  1560                           fsr0h	equ	0xFEA
  1561                           fsr0l	equ	0xFE9
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           plusw2	equ	0xFDB
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function ___aldiv *****************
  1571 ;; Defined at:
  1572 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/aldiv.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  dividend        4   39[BANK0 ] long 
  1575 ;;  divisor         4   43[BANK0 ] long 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  quotient        4   49[BANK0 ] long 
  1578 ;;  sign            1   48[BANK0 ] unsigned char 
  1579 ;;  counter         1   47[BANK0 ] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  4   39[BANK0 ] long 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1589 ;;      Params:         0       8       0       0       0       0       0       0       0
  1590 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1592 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1593 ;;Total ram usage:       14 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:   12
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		_D_UART_Init
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text4
  1604  001324                     __ptext4:
  1605                           	opt stack 0
  1606  001324                     ___aldiv:
  1607                           	opt stack 16
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;incstack = 0
  1611  001324  0E00               	movlw	0
  1612  001326  0100               	movlb	0	; () banked
  1613  001328  6F90               	movwf	___aldiv@sign& (0+255),b
  1614                           
  1615                           ; BSR set to: 0
  1616  00132A  0100               	movlb	0	; () banked
  1617  00132C  AF8E               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1618  00132E  D00C               	goto	l2398
  1619                           
  1620                           ; BSR set to: 0
  1621  001330  0100               	movlb	0	; () banked
  1622  001332  1F8E               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1623  001334  1F8D               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1624  001336  1F8C               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1625  001338  6D8B               	negf	___aldiv@divisor& (0+255),b
  1626  00133A  0E00               	movlw	0
  1627  00133C  238C               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1628  00133E  238D               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1629  001340  238E               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632  001342  0E01               	movlw	1
  1633  001344  0100               	movlb	0	; () banked
  1634  001346  6F90               	movwf	___aldiv@sign& (0+255),b
  1635  001348                     l2398:
  1636                           
  1637                           ; BSR set to: 0
  1638  001348  0100               	movlb	0	; () banked
  1639  00134A  AF8A               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1640  00134C  D00C               	goto	l2404
  1641                           
  1642                           ; BSR set to: 0
  1643  00134E  0100               	movlb	0	; () banked
  1644  001350  1F8A               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1645  001352  1F89               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1646  001354  1F88               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1647  001356  6D87               	negf	___aldiv@dividend& (0+255),b
  1648  001358  0E00               	movlw	0
  1649  00135A  2388               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1650  00135C  2389               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1651  00135E  238A               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1652                           
  1653                           ; BSR set to: 0
  1654  001360  0E01               	movlw	1
  1655  001362  0100               	movlb	0	; () banked
  1656  001364  1B90               	xorwf	___aldiv@sign& (0+255),f,b
  1657  001366                     l2404:
  1658                           
  1659                           ; BSR set to: 0
  1660  001366  0E00               	movlw	0
  1661  001368  0100               	movlb	0	; () banked
  1662  00136A  6F91               	movwf	___aldiv@quotient& (0+255),b
  1663  00136C  0E00               	movlw	0
  1664  00136E  6F92               	movwf	(___aldiv@quotient+1)& (0+255),b
  1665  001370  0E00               	movlw	0
  1666  001372  6F93               	movwf	(___aldiv@quotient+2)& (0+255),b
  1667  001374  0E00               	movlw	0
  1668  001376  6F94               	movwf	(___aldiv@quotient+3)& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671  001378  0100               	movlb	0	; () banked
  1672  00137A  518B               	movf	___aldiv@divisor& (0+255),w,b
  1673  00137C  0100               	movlb	0	; () banked
  1674  00137E  118C               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1675  001380  0100               	movlb	0	; () banked
  1676  001382  118D               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1677  001384  0100               	movlb	0	; () banked
  1678  001386  118E               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1679  001388  B4D8               	btfsc	status,2,c
  1680  00138A  D042               	goto	l2426
  1681                           
  1682                           ; BSR set to: 0
  1683  00138C  0E01               	movlw	1
  1684  00138E  0100               	movlb	0	; () banked
  1685  001390  6F8F               	movwf	___aldiv@counter& (0+255),b
  1686  001392  D008               	goto	l2412
  1687  001394                     l2410:
  1688                           
  1689                           ; BSR set to: 0
  1690  001394  0100               	movlb	0	; () banked
  1691  001396  90D8               	bcf	status,0,c
  1692  001398  378B               	rlcf	___aldiv@divisor& (0+255),f,b
  1693  00139A  378C               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1694  00139C  378D               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1695  00139E  378E               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1696  0013A0  0100               	movlb	0	; () banked
  1697  0013A2  2B8F               	incf	___aldiv@counter& (0+255),f,b
  1698  0013A4                     l2412:
  1699                           
  1700                           ; BSR set to: 0
  1701  0013A4  0100               	movlb	0	; () banked
  1702  0013A6  AF8E               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1703  0013A8  D7F5               	goto	l2410
  1704  0013AA                     l2414:
  1705                           
  1706                           ; BSR set to: 0
  1707  0013AA  0100               	movlb	0	; () banked
  1708  0013AC  90D8               	bcf	status,0,c
  1709  0013AE  3791               	rlcf	___aldiv@quotient& (0+255),f,b
  1710  0013B0  3792               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1711  0013B2  3793               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1712  0013B4  3794               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1713                           
  1714                           ; BSR set to: 0
  1715  0013B6  0100               	movlb	0	; () banked
  1716  0013B8  518B               	movf	___aldiv@divisor& (0+255),w,b
  1717  0013BA  0100               	movlb	0	; () banked
  1718  0013BC  5D87               	subwf	___aldiv@dividend& (0+255),w,b
  1719  0013BE  0100               	movlb	0	; () banked
  1720  0013C0  518C               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1721  0013C2  0100               	movlb	0	; () banked
  1722  0013C4  5988               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1723  0013C6  0100               	movlb	0	; () banked
  1724  0013C8  518D               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1725  0013CA  0100               	movlb	0	; () banked
  1726  0013CC  5989               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1727  0013CE  0100               	movlb	0	; () banked
  1728  0013D0  518E               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1729  0013D2  0100               	movlb	0	; () banked
  1730  0013D4  598A               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1731  0013D6  A0D8               	btfss	status,0,c
  1732  0013D8  D012               	goto	l2422
  1733                           
  1734                           ; BSR set to: 0
  1735  0013DA  0100               	movlb	0	; () banked
  1736  0013DC  518B               	movf	___aldiv@divisor& (0+255),w,b
  1737  0013DE  0100               	movlb	0	; () banked
  1738  0013E0  5F87               	subwf	___aldiv@dividend& (0+255),f,b
  1739  0013E2  0100               	movlb	0	; () banked
  1740  0013E4  518C               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1741  0013E6  0100               	movlb	0	; () banked
  1742  0013E8  5B88               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1743  0013EA  0100               	movlb	0	; () banked
  1744  0013EC  518D               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1745  0013EE  0100               	movlb	0	; () banked
  1746  0013F0  5B89               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1747  0013F2  0100               	movlb	0	; () banked
  1748  0013F4  518E               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1749  0013F6  0100               	movlb	0	; () banked
  1750  0013F8  5B8A               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1751                           
  1752                           ; BSR set to: 0
  1753  0013FA  0100               	movlb	0	; () banked
  1754  0013FC  8191               	bsf	___aldiv@quotient& (0+255),0,b
  1755  0013FE                     l2422:
  1756                           
  1757                           ; BSR set to: 0
  1758  0013FE  0100               	movlb	0	; () banked
  1759  001400  90D8               	bcf	status,0,c
  1760  001402  338E               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1761  001404  338D               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1762  001406  338C               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1763  001408  338B               	rrcf	___aldiv@divisor& (0+255),f,b
  1764                           
  1765                           ; BSR set to: 0
  1766  00140A  0100               	movlb	0	; () banked
  1767  00140C  2F8F               	decfsz	___aldiv@counter& (0+255),f,b
  1768  00140E  D7CD               	goto	l2414
  1769  001410                     l2426:
  1770                           
  1771                           ; BSR set to: 0
  1772  001410  0100               	movlb	0	; () banked
  1773  001412  5190               	movf	___aldiv@sign& (0+255),w,b
  1774  001414  0100               	movlb	0	; () banked
  1775  001416  B4D8               	btfsc	status,2,c
  1776  001418  D009               	goto	l2430
  1777                           
  1778                           ; BSR set to: 0
  1779  00141A  0100               	movlb	0	; () banked
  1780  00141C  1F94               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1781  00141E  1F93               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1782  001420  1F92               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1783  001422  6D91               	negf	___aldiv@quotient& (0+255),b
  1784  001424  0E00               	movlw	0
  1785  001426  2392               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1786  001428  2393               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1787  00142A  2394               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1788  00142C                     l2430:
  1789                           
  1790                           ; BSR set to: 0
  1791  00142C  C091  F087         	movff	___aldiv@quotient,?___aldiv
  1792  001430  C092  F088         	movff	___aldiv@quotient+1,?___aldiv+1
  1793  001434  C093  F089         	movff	___aldiv@quotient+2,?___aldiv+2
  1794  001438  C094  F08A         	movff	___aldiv@quotient+3,?___aldiv+3
  1795  00143C  0012               	return	
  1796  00143E                     __end_of___aldiv:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           postinc0	equ	0xFEE
  1804                           plusw0	equ	0xFEB
  1805                           fsr0h	equ	0xFEA
  1806                           fsr0l	equ	0xFE9
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1l	equ	0xFE1
  1810                           plusw2	equ	0xFDB
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _D_PWM_Init *****************
  1816 ;; Defined at:
  1817 ;;		line 287 in file "Drivers/PWM_Driver.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:   14
  1838 ;; This function calls:
  1839 ;;		_D_TIMER0_Enable
  1840 ;;		_D_TIMER0_Init
  1841 ;; This function is called by:
  1842 ;;		_initialize
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text5
  1847  001FFA                     __ptext5:
  1848                           	opt stack 0
  1849  001FFA                     _D_PWM_Init:
  1850                           	opt stack 15
  1851                           
  1852                           ;PWM_Driver.c: 289: PWM_Red.duty_cnt = 0;
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;incstack = 0
  1856  001FFA  0E00               	movlw	0
  1857  001FFC  0100               	movlb	0	; () banked
  1858  001FFE  6FCC               	movwf	_PWM_Red& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;PWM_Driver.c: 290: PWM_Red.duty_val = 0xFF;
  1862  002000  0100               	movlb	0	; () banked
  1863  002002  69CD               	setf	(_PWM_Red+1)& (0+255),b
  1864                           
  1865                           ;PWM_Driver.c: 292: PWM_Green.duty_cnt = 0;
  1866  002004  0E00               	movlw	0
  1867  002006  0100               	movlb	0	; () banked
  1868  002008  6FCA               	movwf	_PWM_Green& (0+255),b
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;PWM_Driver.c: 293: PWM_Green.duty_val = 0xFF;
  1872  00200A  0100               	movlb	0	; () banked
  1873  00200C  69CB               	setf	(_PWM_Green+1)& (0+255),b
  1874                           
  1875                           ;PWM_Driver.c: 295: PWM_Blue.duty_cnt = 0;
  1876  00200E  0E00               	movlw	0
  1877  002010  0100               	movlb	0	; () banked
  1878  002012  6FC8               	movwf	_PWM_Blue& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;PWM_Driver.c: 296: PWM_Blue.duty_val = 0xFF;
  1882  002014  0100               	movlb	0	; () banked
  1883  002016  69C9               	setf	(_PWM_Blue+1)& (0+255),b
  1884                           
  1885                           ;PWM_Driver.c: 298: scale = 0;
  1886  002018  0E00               	movlw	0
  1887  00201A  6E2C               	movwf	_scale,c
  1888                           
  1889                           ;PWM_Driver.c: 299: state = Color;
  1890  00201C  0E00               	movlw	0
  1891  00201E  6E2D               	movwf	_state,c
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;PWM_Driver.c: 302: D_TIMER0_Init(0);
  1895  002020  0E00               	movlw	0
  1896  002022  EC0E  F00C         	call	_D_TIMER0_Init
  1897                           
  1898                           ;PWM_Driver.c: 303: D_TIMER0_Enable(0);
  1899  002026  0E00               	movlw	0
  1900  002028  EC82  F010         	call	_D_TIMER0_Enable
  1901                           
  1902                           ;PWM_Driver.c: 306: TRISBbits.TRISB0 = 0;
  1903  00202C  9093               	bcf	3987,0,c	;volatile
  1904                           
  1905                           ;PWM_Driver.c: 307: TRISBbits.TRISB1 = 0;
  1906  00202E  9293               	bcf	3987,1,c	;volatile
  1907                           
  1908                           ;PWM_Driver.c: 308: TRISBbits.TRISB2 = 0;
  1909  002030  9493               	bcf	3987,2,c	;volatile
  1910  002032  0012               	return		;funcret
  1911  002034                     __end_of_D_PWM_Init:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           intcon	equ	0xFF2
  1918                           postinc0	equ	0xFEE
  1919                           plusw0	equ	0xFEB
  1920                           fsr0h	equ	0xFEA
  1921                           fsr0l	equ	0xFE9
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           fsr1l	equ	0xFE1
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _D_TIMER0_Init *****************
  1931 ;; Defined at:
  1932 ;;		line 30 in file "Drivers/TIMER0_Driver.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  prescale        1    wreg     unsigned char 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  prescale        1   40[BANK0 ] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0
  1947 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1949 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1950 ;;Total ram usage:        1 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:   13
  1953 ;; This function calls:
  1954 ;;		_D_TIMER0_Enable
  1955 ;; This function is called by:
  1956 ;;		_D_PWM_Init
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text6
  1961  00181C                     __ptext6:
  1962                           	opt stack 0
  1963  00181C                     _D_TIMER0_Init:
  1964                           	opt stack 15
  1965                           
  1966                           ;incstack = 0
  1967                           ;D_TIMER0_Init@prescale stored from wreg
  1968  00181C  0100               	movlb	0	; () banked
  1969  00181E  6F88               	movwf	D_TIMER0_Init@prescale& (0+255),b
  1970                           
  1971                           ;TIMER0_Driver.c: 31: D_TIMER0_Enable(0);
  1972  001820  0E00               	movlw	0
  1973  001822  EC82  F010         	call	_D_TIMER0_Enable
  1974                           
  1975                           ;TIMER0_Driver.c: 34: T0CONbits.T08BIT = 1;
  1976  001826  8CD5               	bsf	4053,6,c	;volatile
  1977                           
  1978                           ;TIMER0_Driver.c: 35: T0CONbits.T0CS = 0;
  1979  001828  9AD5               	bcf	4053,5,c	;volatile
  1980                           
  1981                           ;TIMER0_Driver.c: 36: T0CONbits.PSA = 1;
  1982  00182A  86D5               	bsf	4053,3,c	;volatile
  1983                           
  1984                           ;TIMER0_Driver.c: 37: switch(prescale) {
  1985  00182C  D021               	goto	l2288
  1986  00182E                     l39:
  1987                           
  1988                           ; BSR set to: 0
  1989  00182E  90D5               	bcf	4053,0,c	;volatile
  1990  001830  92D5               	bcf	4053,1,c	;volatile
  1991  001832  94D5               	bcf	4053,2,c	;volatile
  1992  001834  D038               	goto	l2290
  1993  001836                     l2274:
  1994                           
  1995                           ; BSR set to: 0
  1996  001836  50D5               	movf	4053,w,c	;volatile
  1997  001838  0BF8               	andlw	-8
  1998  00183A  0901               	iorlw	1
  1999  00183C  D013               	goto	L5
  2000  00183E                     l2276:
  2001                           
  2002                           ; BSR set to: 0
  2003  00183E  50D5               	movf	4053,w,c	;volatile
  2004  001840  0BF8               	andlw	-8
  2005  001842  0902               	iorlw	2
  2006  001844  D00F               	goto	L5
  2007  001846                     l2278:
  2008                           
  2009                           ; BSR set to: 0
  2010  001846  50D5               	movf	4053,w,c	;volatile
  2011  001848  0BF8               	andlw	-8
  2012  00184A  0903               	iorlw	3
  2013  00184C  D00B               	goto	L5
  2014  00184E                     l2280:
  2015                           
  2016                           ; BSR set to: 0
  2017  00184E  50D5               	movf	4053,w,c	;volatile
  2018  001850  0BF8               	andlw	-8
  2019  001852  0904               	iorlw	4
  2020  001854  D007               	goto	L5
  2021  001856                     l2282:
  2022                           
  2023                           ; BSR set to: 0
  2024  001856  50D5               	movf	4053,w,c	;volatile
  2025  001858  0BF8               	andlw	-8
  2026  00185A  0905               	iorlw	5
  2027  00185C  D003               	goto	L5
  2028  00185E                     l2284:
  2029                           
  2030                           ; BSR set to: 0
  2031  00185E  50D5               	movf	4053,w,c	;volatile
  2032  001860  0BF8               	andlw	-8
  2033  001862  0906               	iorlw	6
  2034  001864                     L5:
  2035  001864  6ED5               	movwf	4053,c	;volatile
  2036  001866  D01F               	goto	l2290
  2037  001868                     l46:
  2038                           
  2039                           ; BSR set to: 0
  2040  001868  80D5               	bsf	4053,0,c	;volatile
  2041  00186A  82D5               	bsf	4053,1,c	;volatile
  2042  00186C  84D5               	bsf	4053,2,c	;volatile
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;TIMER0_Driver.c: 48: }
  2046  00186E  D01B               	goto	l2290
  2047  001870                     l2288:
  2048  001870  0100               	movlb	0	; () banked
  2049  001872  5188               	movf	D_TIMER0_Init@prescale& (0+255),w,b
  2050                           
  2051                           ; Switch size 1, requested type "space"
  2052                           ; Number of cases is 8, Range of values is 0 to 128
  2053                           ; switch strategies available:
  2054                           ; Name         Instructions Cycles
  2055                           ; simple_byte           25    13 (average)
  2056                           ;	Chosen strategy is simple_byte
  2057  001874  0A00               	xorlw	0	; case 0
  2058  001876  B4D8               	btfsc	status,2,c
  2059  001878  D7F7               	goto	l46
  2060  00187A  0A02               	xorlw	2	; case 2
  2061  00187C  B4D8               	btfsc	status,2,c
  2062  00187E  D7D7               	goto	l39
  2063  001880  0A06               	xorlw	6	; case 4
  2064  001882  B4D8               	btfsc	status,2,c
  2065  001884  D7D8               	goto	l2274
  2066  001886  0A0C               	xorlw	12	; case 8
  2067  001888  B4D8               	btfsc	status,2,c
  2068  00188A  D7D9               	goto	l2276
  2069  00188C  0A18               	xorlw	24	; case 16
  2070  00188E  B4D8               	btfsc	status,2,c
  2071  001890  D7DA               	goto	l2278
  2072  001892  0A30               	xorlw	48	; case 32
  2073  001894  B4D8               	btfsc	status,2,c
  2074  001896  D7DB               	goto	l2280
  2075  001898  0A60               	xorlw	96	; case 64
  2076  00189A  B4D8               	btfsc	status,2,c
  2077  00189C  D7DC               	goto	l2282
  2078  00189E  0AC0               	xorlw	192	; case 128
  2079  0018A0  B4D8               	btfsc	status,2,c
  2080  0018A2  D7DD               	goto	l2284
  2081  0018A4  D7C4               	goto	l39
  2082  0018A6                     l2290:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;TIMER0_Driver.c: 49: TMR0L = 0;
  2086  0018A6  0E00               	movlw	0
  2087  0018A8  6ED6               	movwf	4054,c	;volatile
  2088                           
  2089                           ;TIMER0_Driver.c: 50: TMR0H = 0;
  2090  0018AA  0E00               	movlw	0
  2091  0018AC  6ED7               	movwf	4055,c	;volatile
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;TIMER0_Driver.c: 53: RCONbits.IPEN = 1;
  2095  0018AE  8ED0               	bsf	4048,7,c	;volatile
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;TIMER0_Driver.c: 54: INTCONbits.GIEH = 1;
  2099  0018B0  8EF2               	bsf	intcon,7,c	;volatile
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;TIMER0_Driver.c: 55: INTCONbits.GIEL = 1;
  2103  0018B2  8CF2               	bsf	intcon,6,c	;volatile
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;TIMER0_Driver.c: 56: INTCONbits.TMR0IE = 0;
  2107  0018B4  9AF2               	bcf	intcon,5,c	;volatile
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;TIMER0_Driver.c: 57: INTCONbits.TMR0IF = 0;
  2111  0018B6  94F2               	bcf	intcon,2,c	;volatile
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;TIMER0_Driver.c: 58: INTCON2bits.TMR0IP = 1;
  2115  0018B8  84F1               	bsf	intcon2,2,c	;volatile
  2116                           
  2117                           ; BSR set to: 0
  2118  0018BA  0012               	return		;funcret
  2119  0018BC                     __end_of_D_TIMER0_Init:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           intcon	equ	0xFF2
  2126                           intcon2	equ	0xFF1
  2127                           postinc0	equ	0xFEE
  2128                           plusw0	equ	0xFEB
  2129                           fsr0h	equ	0xFEA
  2130                           fsr0l	equ	0xFE9
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           plusw2	equ	0xFDB
  2135                           fsr2h	equ	0xFDA
  2136                           fsr2l	equ	0xFD9
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _D_PWM_Enable *****************
  2140 ;; Defined at:
  2141 ;;		line 311 in file "Drivers/PWM_Driver.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  enable          1    wreg     unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  enable          1   40[BANK0 ] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0
  2156 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2158 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2159 ;;Total ram usage:        1 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:   13
  2162 ;; This function calls:
  2163 ;;		_D_TIMER0_Enable
  2164 ;; This function is called by:
  2165 ;;		_initialize
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  0021C6                     __ptext7:
  2171                           	opt stack 0
  2172  0021C6                     _D_PWM_Enable:
  2173                           	opt stack 16
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;incstack = 0
  2177                           ;D_PWM_Enable@enable stored from wreg
  2178  0021C6  0100               	movlb	0	; () banked
  2179  0021C8  6F88               	movwf	D_PWM_Enable@enable& (0+255),b
  2180                           
  2181                           ;PWM_Driver.c: 312: D_TIMER0_Enable(enable);
  2182  0021CA  0100               	movlb	0	; () banked
  2183  0021CC  5188               	movf	D_PWM_Enable@enable& (0+255),w,b
  2184  0021CE  EC82  F010         	call	_D_TIMER0_Enable
  2185  0021D2  0012               	return		;funcret
  2186  0021D4                     __end_of_D_PWM_Enable:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           intcon	equ	0xFF2
  2193                           intcon2	equ	0xFF1
  2194                           postinc0	equ	0xFEE
  2195                           plusw0	equ	0xFEB
  2196                           fsr0h	equ	0xFEA
  2197                           fsr0l	equ	0xFE9
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1l	equ	0xFE1
  2201                           plusw2	equ	0xFDB
  2202                           fsr2h	equ	0xFDA
  2203                           fsr2l	equ	0xFD9
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _D_TIMER0_Enable *****************
  2207 ;; Defined at:
  2208 ;;		line 61 in file "Drivers/TIMER0_Driver.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  enable          1    wreg     unsigned char 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  enable          1   39[BANK0 ] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, status,2
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0
  2223 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2225 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2226 ;;Total ram usage:        1 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:   12
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_D_TIMER0_Init
  2233 ;;		_D_PWM_Init
  2234 ;;		_D_PWM_Enable
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text8
  2239  002104                     __ptext8:
  2240                           	opt stack 0
  2241  002104                     _D_TIMER0_Enable:
  2242                           	opt stack 15
  2243                           
  2244                           ;incstack = 0
  2245                           ;D_TIMER0_Enable@enable stored from wreg
  2246  002104  0100               	movlb	0	; () banked
  2247  002106  6F87               	movwf	D_TIMER0_Enable@enable& (0+255),b
  2248                           
  2249                           ;TIMER0_Driver.c: 62: if (enable) {
  2250  002108  0100               	movlb	0	; () banked
  2251  00210A  5187               	movf	D_TIMER0_Enable@enable& (0+255),w,b
  2252  00210C  0100               	movlb	0	; () banked
  2253  00210E  B4D8               	btfsc	status,2,c
  2254  002110  D005               	goto	l50
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;TIMER0_Driver.c: 63: T0CONbits.TMR0ON = 1;
  2258  002112  8ED5               	bsf	4053,7,c	;volatile
  2259                           
  2260                           ;TIMER0_Driver.c: 64: INTCONbits.TMR0IE = 1;
  2261  002114  8AF2               	bsf	intcon,5,c	;volatile
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;TIMER0_Driver.c: 65: D_TIMER0_Flag = 0;
  2265  002116  0E00               	movlw	0
  2266  002118  6E28               	movwf	_D_TIMER0_Flag,c
  2267                           
  2268                           ;TIMER0_Driver.c: 66: } else {
  2269  00211A  0012               	return	
  2270  00211C                     l50:
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;TIMER0_Driver.c: 67: T0CONbits.TMR0ON = 0;
  2274  00211C  9ED5               	bcf	4053,7,c	;volatile
  2275                           
  2276                           ;TIMER0_Driver.c: 68: INTCONbits.TMR0IE = 0;
  2277  00211E  9AF2               	bcf	intcon,5,c	;volatile
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;TIMER0_Driver.c: 69: D_TIMER0_Flag = 0;
  2281  002120  0E00               	movlw	0
  2282  002122  6E28               	movwf	_D_TIMER0_Flag,c
  2283  002124  0012               	return	
  2284  002126                     __end_of_D_TIMER0_Enable:
  2285                           	opt stack 0
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           intcon	equ	0xFF2
  2291                           intcon2	equ	0xFF1
  2292                           postinc0	equ	0xFEE
  2293                           plusw0	equ	0xFEB
  2294                           fsr0h	equ	0xFEA
  2295                           fsr0l	equ	0xFE9
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1l	equ	0xFE1
  2299                           plusw2	equ	0xFDB
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _D_PORT_Init *****************
  2305 ;; Defined at:
  2306 ;;		line 31 in file "Drivers/PORT_Driver.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2323 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2324 ;;Total ram usage:        0 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:   12
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_initialize
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text9
  2335  002168                     __ptext9:
  2336                           	opt stack 0
  2337  002168                     _D_PORT_Init:
  2338                           	opt stack 17
  2339                           
  2340                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;incstack = 0
  2344  002168  0E00               	movlw	0
  2345  00216A  6E92               	movwf	3986,c	;volatile
  2346  00216C  0E00               	movlw	0
  2347  00216E  6E80               	movwf	3968,c	;volatile
  2348                           
  2349                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  2350  002170  0E00               	movlw	0
  2351  002172  6E93               	movwf	3987,c	;volatile
  2352  002174  0E00               	movlw	0
  2353  002176  6E81               	movwf	3969,c	;volatile
  2354                           
  2355                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  2356  002178  0E00               	movlw	0
  2357  00217A  6E94               	movwf	3988,c	;volatile
  2358  00217C  0E00               	movlw	0
  2359  00217E  6E82               	movwf	3970,c	;volatile
  2360                           
  2361                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  2362  002180  0E0F               	movlw	15
  2363  002182  6EC1               	movwf	4033,c	;volatile
  2364  002184  0012               	return		;funcret
  2365  002186                     __end_of_D_PORT_Init:
  2366                           	opt stack 0
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           plusw0	equ	0xFEB
  2375                           fsr0h	equ	0xFEA
  2376                           fsr0l	equ	0xFE9
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1l	equ	0xFE1
  2380                           plusw2	equ	0xFDB
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _handle_message *****************
  2386 ;; Defined at:
  2387 ;;		line 90 in file "main.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  msg             6   72[BANK0 ] struct .
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2401 ;;      Params:         0       6       0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2403 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2404 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2405 ;;Total ram usage:        7 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:   17
  2408 ;; This function calls:
  2409 ;;		_D_PWM_Fade
  2410 ;;		_D_PWM_Flash
  2411 ;;		_D_PWM_GetBlue
  2412 ;;		_D_PWM_GetGreen
  2413 ;;		_D_PWM_GetRed
  2414 ;;		_D_PWM_GetScale
  2415 ;;		_D_PWM_GetState
  2416 ;;		_D_PWM_ScaleDown
  2417 ;;		_D_PWM_ScaleUp
  2418 ;;		_D_PWM_SetRGB
  2419 ;;		_D_PWM_Smooth
  2420 ;;		_D_PWM_Strobe
  2421 ;;		_D_UART_WriteInt
  2422 ;;		_strToInt
  2423 ;;		_strcmp
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text10
  2430  000868                     __ptext10:
  2431                           	opt stack 0
  2432  000868                     _handle_message:
  2433                           	opt stack 13
  2434                           
  2435                           ;main.c: 91: if (strcmp(msg.command, "R") == 0) {
  2436                           
  2437                           ;incstack = 0
  2438  000868  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2439  00086C  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2440  000870  0E5B               	movlw	low STR_15
  2441  000872  0100               	movlb	0	; () banked
  2442  000874  6F89               	movwf	strcmp@s2& (0+255),b
  2443  000876  0E08               	movlw	high STR_15
  2444  000878  0100               	movlb	0	; () banked
  2445  00087A  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2446  00087C  EC83  F00F         	call	_strcmp	;wreg free
  2447  000880  0100               	movlb	0	; () banked
  2448  000882  5187               	movf	?_strcmp& (0+255),w,b
  2449  000884  0100               	movlb	0	; () banked
  2450  000886  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2451  000888  A4D8               	btfss	status,2,c
  2452  00088A  D011               	goto	l3008
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;main.c: 92: r = strToInt(msg.message);
  2456  00088C  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2457  000890  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2458  000894  ECF8  F00E         	call	_strToInt	;wreg free
  2459  000898  0100               	movlb	0	; () banked
  2460  00089A  6FD1               	movwf	_r& (0+255),b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;main.c: 93: D_PWM_SetRGB(r, g, b);
  2464  00089C  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2465  0008A0  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2466  0008A4  0100               	movlb	0	; () banked
  2467  0008A6  51D1               	movf	_r& (0+255),w,b
  2468  0008A8  ECC3  F010         	call	_D_PWM_SetRGB
  2469                           
  2470                           ;main.c: 94: return;
  2471  0008AC  0012               	return	
  2472  0008AE                     l3008:
  2473                           
  2474                           ;main.c: 95: }
  2475                           ;main.c: 97: if (strcmp(msg.command, "G") == 0) {
  2476  0008AE  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2477  0008B2  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2478  0008B6  0E55               	movlw	low STR_16
  2479  0008B8  0100               	movlb	0	; () banked
  2480  0008BA  6F89               	movwf	strcmp@s2& (0+255),b
  2481  0008BC  0E08               	movlw	high STR_16
  2482  0008BE  0100               	movlb	0	; () banked
  2483  0008C0  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2484  0008C2  EC83  F00F         	call	_strcmp	;wreg free
  2485  0008C6  0100               	movlb	0	; () banked
  2486  0008C8  5187               	movf	?_strcmp& (0+255),w,b
  2487  0008CA  0100               	movlb	0	; () banked
  2488  0008CC  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2489  0008CE  A4D8               	btfss	status,2,c
  2490  0008D0  D011               	goto	l3016
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;main.c: 98: g = strToInt(msg.message);
  2494  0008D2  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2495  0008D6  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2496  0008DA  ECF8  F00E         	call	_strToInt	;wreg free
  2497  0008DE  0100               	movlb	0	; () banked
  2498  0008E0  6FD0               	movwf	_g& (0+255),b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 99: D_PWM_SetRGB(r, g, b);
  2502  0008E2  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2503  0008E6  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2504  0008EA  0100               	movlb	0	; () banked
  2505  0008EC  51D1               	movf	_r& (0+255),w,b
  2506  0008EE  ECC3  F010         	call	_D_PWM_SetRGB
  2507                           
  2508                           ;main.c: 100: return;
  2509  0008F2  0012               	return	
  2510  0008F4                     l3016:
  2511                           
  2512                           ;main.c: 101: }
  2513                           ;main.c: 103: if (strcmp(msg.command, "B") == 0) {
  2514  0008F4  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2515  0008F8  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2516  0008FC  0E33               	movlw	low (STR_25+2)
  2517  0008FE  0100               	movlb	0	; () banked
  2518  000900  6F89               	movwf	strcmp@s2& (0+255),b
  2519  000902  0E08               	movlw	high (STR_25+2)
  2520  000904  0100               	movlb	0	; () banked
  2521  000906  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2522  000908  EC83  F00F         	call	_strcmp	;wreg free
  2523  00090C  0100               	movlb	0	; () banked
  2524  00090E  5187               	movf	?_strcmp& (0+255),w,b
  2525  000910  0100               	movlb	0	; () banked
  2526  000912  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2527  000914  A4D8               	btfss	status,2,c
  2528  000916  D011               	goto	l3024
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 104: b = strToInt(msg.message);
  2532  000918  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2533  00091C  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2534  000920  ECF8  F00E         	call	_strToInt	;wreg free
  2535  000924  0100               	movlb	0	; () banked
  2536  000926  6FCF               	movwf	_b& (0+255),b
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 105: D_PWM_SetRGB(r, g, b);
  2540  000928  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2541  00092C  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2542  000930  0100               	movlb	0	; () banked
  2543  000932  51D1               	movf	_r& (0+255),w,b
  2544  000934  ECC3  F010         	call	_D_PWM_SetRGB
  2545                           
  2546                           ;main.c: 106: return;
  2547  000938  0012               	return	
  2548  00093A                     l3024:
  2549                           
  2550                           ;main.c: 107: }
  2551                           ;main.c: 109: if (strcmp(msg.command, "S") == 0) {
  2552  00093A  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2553  00093E  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2554  000942  0E5D               	movlw	low STR_18
  2555  000944  0100               	movlb	0	; () banked
  2556  000946  6F89               	movwf	strcmp@s2& (0+255),b
  2557  000948  0E08               	movlw	high STR_18
  2558  00094A  0100               	movlb	0	; () banked
  2559  00094C  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2560  00094E  EC83  F00F         	call	_strcmp	;wreg free
  2561  000952  0100               	movlb	0	; () banked
  2562  000954  5187               	movf	?_strcmp& (0+255),w,b
  2563  000956  0100               	movlb	0	; () banked
  2564  000958  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2565  00095A  A4D8               	btfss	status,2,c
  2566  00095C  D028               	goto	l3036
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 110: if (strcmp(msg.message, "D") == 0) {
  2570  00095E  C0AC  F087         	movff	handle_message@msg+4,strcmp@s1
  2571  000962  C0AD  F088         	movff	handle_message@msg+5,strcmp@s1+1
  2572  000966  0E53               	movlw	low STR_19
  2573  000968  0100               	movlb	0	; () banked
  2574  00096A  6F89               	movwf	strcmp@s2& (0+255),b
  2575  00096C  0E08               	movlw	high STR_19
  2576  00096E  0100               	movlb	0	; () banked
  2577  000970  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2578  000972  EC83  F00F         	call	_strcmp	;wreg free
  2579  000976  0100               	movlb	0	; () banked
  2580  000978  5187               	movf	?_strcmp& (0+255),w,b
  2581  00097A  0100               	movlb	0	; () banked
  2582  00097C  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2583  00097E  B4D8               	btfsc	status,2,c
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 111: D_PWM_ScaleDown();
  2587  000980  ECFB  F010         	call	_D_PWM_ScaleDown	;wreg free
  2588                           
  2589                           ;main.c: 112: }
  2590                           ;main.c: 113: if (strcmp(msg.message, "U") == 0) {
  2591  000984  C0AC  F087         	movff	handle_message@msg+4,strcmp@s1
  2592  000988  C0AD  F088         	movff	handle_message@msg+5,strcmp@s1+1
  2593  00098C  0E5F               	movlw	low STR_20
  2594  00098E  0100               	movlb	0	; () banked
  2595  000990  6F89               	movwf	strcmp@s2& (0+255),b
  2596  000992  0E08               	movlw	high STR_20
  2597  000994  0100               	movlb	0	; () banked
  2598  000996  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2599  000998  EC83  F00F         	call	_strcmp	;wreg free
  2600  00099C  0100               	movlb	0	; () banked
  2601  00099E  5187               	movf	?_strcmp& (0+255),w,b
  2602  0009A0  0100               	movlb	0	; () banked
  2603  0009A2  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2604  0009A4  A4D8               	btfss	status,2,c
  2605  0009A6  0012               	return	
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 114: D_PWM_ScaleUp();
  2609  0009A8  ECF6  F010         	call	_D_PWM_ScaleUp	;wreg free
  2610                           
  2611                           ;main.c: 115: }
  2612                           ;main.c: 116: return;
  2613  0009AC  0012               	return	
  2614  0009AE                     l3036:
  2615                           
  2616                           ;main.c: 117: }
  2617                           ;main.c: 119: if (strcmp(msg.command, "FL") == 0) {
  2618  0009AE  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2619  0009B2  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2620  0009B6  0E44               	movlw	low STR_21
  2621  0009B8  0100               	movlb	0	; () banked
  2622  0009BA  6F89               	movwf	strcmp@s2& (0+255),b
  2623  0009BC  0E08               	movlw	high STR_21
  2624  0009BE  0100               	movlb	0	; () banked
  2625  0009C0  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2626  0009C2  EC83  F00F         	call	_strcmp	;wreg free
  2627  0009C6  0100               	movlb	0	; () banked
  2628  0009C8  5187               	movf	?_strcmp& (0+255),w,b
  2629  0009CA  0100               	movlb	0	; () banked
  2630  0009CC  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2631  0009CE  A4D8               	btfss	status,2,c
  2632  0009D0  D003               	goto	l3042
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 120: D_PWM_Flash();
  2636  0009D2  EC14  F011         	call	_D_PWM_Flash	;wreg free
  2637                           
  2638                           ;main.c: 121: return;
  2639  0009D6  0012               	return	
  2640  0009D8                     l3042:
  2641                           
  2642                           ;main.c: 122: }
  2643                           ;main.c: 124: if (strcmp(msg.command, "ST") == 0) {
  2644  0009D8  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2645  0009DC  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2646  0009E0  0E4A               	movlw	low STR_22
  2647  0009E2  0100               	movlb	0	; () banked
  2648  0009E4  6F89               	movwf	strcmp@s2& (0+255),b
  2649  0009E6  0E08               	movlw	high STR_22
  2650  0009E8  0100               	movlb	0	; () banked
  2651  0009EA  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2652  0009EC  EC83  F00F         	call	_strcmp	;wreg free
  2653  0009F0  0100               	movlb	0	; () banked
  2654  0009F2  5187               	movf	?_strcmp& (0+255),w,b
  2655  0009F4  0100               	movlb	0	; () banked
  2656  0009F6  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2657  0009F8  A4D8               	btfss	status,2,c
  2658  0009FA  D003               	goto	l3048
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 125: D_PWM_Strobe();
  2662  0009FC  EC05  F011         	call	_D_PWM_Strobe	;wreg free
  2663                           
  2664                           ;main.c: 126: return;
  2665  000A00  0012               	return	
  2666  000A02                     l3048:
  2667                           
  2668                           ;main.c: 127: }
  2669                           ;main.c: 129: if (strcmp(msg.command, "FA") == 0) {
  2670  000A02  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2671  000A06  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2672  000A0A  0E41               	movlw	low STR_23
  2673  000A0C  0100               	movlb	0	; () banked
  2674  000A0E  6F89               	movwf	strcmp@s2& (0+255),b
  2675  000A10  0E08               	movlw	high STR_23
  2676  000A12  0100               	movlb	0	; () banked
  2677  000A14  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2678  000A16  EC83  F00F         	call	_strcmp	;wreg free
  2679  000A1A  0100               	movlb	0	; () banked
  2680  000A1C  5187               	movf	?_strcmp& (0+255),w,b
  2681  000A1E  0100               	movlb	0	; () banked
  2682  000A20  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2683  000A22  A4D8               	btfss	status,2,c
  2684  000A24  D003               	goto	l3054
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 130: D_PWM_Fade();
  2688  000A26  EC17  F011         	call	_D_PWM_Fade	;wreg free
  2689                           
  2690                           ;main.c: 131: return;
  2691  000A2A  0012               	return	
  2692  000A2C                     l3054:
  2693                           
  2694                           ;main.c: 132: }
  2695                           ;main.c: 134: if (strcmp(msg.command, "SM") == 0) {
  2696  000A2C  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2697  000A30  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2698  000A34  0E47               	movlw	low STR_24
  2699  000A36  0100               	movlb	0	; () banked
  2700  000A38  6F89               	movwf	strcmp@s2& (0+255),b
  2701  000A3A  0E08               	movlw	high STR_24
  2702  000A3C  0100               	movlb	0	; () banked
  2703  000A3E  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2704  000A40  EC83  F00F         	call	_strcmp	;wreg free
  2705  000A44  0100               	movlb	0	; () banked
  2706  000A46  5187               	movf	?_strcmp& (0+255),w,b
  2707  000A48  0100               	movlb	0	; () banked
  2708  000A4A  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2709  000A4C  A4D8               	btfss	status,2,c
  2710  000A4E  D003               	goto	l3060
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 135: D_PWM_Smooth();
  2714  000A50  EC08  F011         	call	_D_PWM_Smooth	;wreg free
  2715                           
  2716                           ;main.c: 136: return;
  2717  000A54  0012               	return	
  2718  000A56                     l3060:
  2719                           
  2720                           ;main.c: 137: }
  2721                           ;main.c: 139: if(strcmp(msg.command, "RGB") == 0) {
  2722  000A56  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2723  000A5A  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2724  000A5E  0E31               	movlw	low STR_25
  2725  000A60  0100               	movlb	0	; () banked
  2726  000A62  6F89               	movwf	strcmp@s2& (0+255),b
  2727  000A64  0E08               	movlw	high STR_25
  2728  000A66  0100               	movlb	0	; () banked
  2729  000A68  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2730  000A6A  EC83  F00F         	call	_strcmp	;wreg free
  2731  000A6E  0100               	movlb	0	; () banked
  2732  000A70  5187               	movf	?_strcmp& (0+255),w,b
  2733  000A72  0100               	movlb	0	; () banked
  2734  000A74  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2735  000A76  A4D8               	btfss	status,2,c
  2736  000A78  D03D               	goto	l3074
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 140: D_UART_WriteInt("R", D_PWM_GetRed());
  2740  000A7A  0E5B               	movlw	low STR_15
  2741  000A7C  0100               	movlb	0	; () banked
  2742  000A7E  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2743  000A80  0E08               	movlw	high STR_15
  2744  000A82  0100               	movlb	0	; () banked
  2745  000A84  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2746  000A86  EC0B  F011         	call	_D_PWM_GetRed	;wreg free
  2747  000A8A  0100               	movlb	0	; () banked
  2748  000A8C  6FAE               	movwf	??_handle_message& (0+255),b
  2749  000A8E  0100               	movlb	0	; () banked
  2750  000A90  51AE               	movf	??_handle_message& (0+255),w,b
  2751  000A92  0100               	movlb	0	; () banked
  2752  000A94  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2753  000A96  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2754  000A98  EC1F  F00A         	call	_D_UART_WriteInt	;wreg free
  2755                           
  2756                           ;main.c: 141: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2757  000A9C  0E28               	movlw	40
  2758  000A9E                     u3007:
  2759  000A9E  2EE8               	decfsz	wreg,f,c
  2760  000AA0  D7FE               	bra	u3007
  2761                           
  2762                           ;main.c: 142: D_UART_WriteInt("G", D_PWM_GetGreen());
  2763  000AA2  0E55               	movlw	low STR_16
  2764  000AA4  0100               	movlb	0	; () banked
  2765  000AA6  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2766  000AA8  0E08               	movlw	high STR_16
  2767  000AAA  0100               	movlb	0	; () banked
  2768  000AAC  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2769  000AAE  EC0E  F011         	call	_D_PWM_GetGreen	;wreg free
  2770  000AB2  0100               	movlb	0	; () banked
  2771  000AB4  6FAE               	movwf	??_handle_message& (0+255),b
  2772  000AB6  0100               	movlb	0	; () banked
  2773  000AB8  51AE               	movf	??_handle_message& (0+255),w,b
  2774  000ABA  0100               	movlb	0	; () banked
  2775  000ABC  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2776  000ABE  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2777  000AC0  EC1F  F00A         	call	_D_UART_WriteInt	;wreg free
  2778                           
  2779                           ;main.c: 143: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2780  000AC4  0E28               	movlw	40
  2781  000AC6                     u3017:
  2782  000AC6  2EE8               	decfsz	wreg,f,c
  2783  000AC8  D7FE               	bra	u3017
  2784                           
  2785                           ;main.c: 144: D_UART_WriteInt("B", D_PWM_GetBlue());
  2786  000ACA  0E33               	movlw	low (STR_25+2)
  2787  000ACC  0100               	movlb	0	; () banked
  2788  000ACE  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2789  000AD0  0E08               	movlw	high (STR_25+2)
  2790  000AD2  0100               	movlb	0	; () banked
  2791  000AD4  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2792  000AD6  EC11  F011         	call	_D_PWM_GetBlue	;wreg free
  2793  000ADA  0100               	movlb	0	; () banked
  2794  000ADC  6FAE               	movwf	??_handle_message& (0+255),b
  2795  000ADE  0100               	movlb	0	; () banked
  2796  000AE0  51AE               	movf	??_handle_message& (0+255),w,b
  2797  000AE2  0100               	movlb	0	; () banked
  2798  000AE4  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2799  000AE6  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2800  000AE8  EC1F  F00A         	call	_D_UART_WriteInt	;wreg free
  2801                           
  2802                           ;main.c: 145: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2803  000AEC  0E28               	movlw	40
  2804  000AEE                     u3027:
  2805  000AEE  2EE8               	decfsz	wreg,f,c
  2806  000AF0  D7FE               	bra	u3027
  2807                           
  2808                           ;main.c: 146: return;
  2809  000AF2  0012               	return	
  2810  000AF4                     l3074:
  2811                           
  2812                           ;main.c: 147: }
  2813                           ;main.c: 149: if(strcmp(msg.command, "SCA") == 0) {
  2814  000AF4  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2815  000AF8  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2816  000AFC  0E29               	movlw	low STR_29
  2817  000AFE  0100               	movlb	0	; () banked
  2818  000B00  6F89               	movwf	strcmp@s2& (0+255),b
  2819  000B02  0E08               	movlw	high STR_29
  2820  000B04  0100               	movlb	0	; () banked
  2821  000B06  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2822  000B08  EC83  F00F         	call	_strcmp	;wreg free
  2823  000B0C  0100               	movlb	0	; () banked
  2824  000B0E  5187               	movf	?_strcmp& (0+255),w,b
  2825  000B10  0100               	movlb	0	; () banked
  2826  000B12  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2827  000B14  A4D8               	btfss	status,2,c
  2828  000B16  D012               	goto	l3080
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 150: D_UART_WriteInt("SCA", D_PWM_GetScale());
  2832  000B18  0E29               	movlw	low STR_29
  2833  000B1A  0100               	movlb	0	; () banked
  2834  000B1C  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2835  000B1E  0E08               	movlw	high STR_29
  2836  000B20  0100               	movlb	0	; () banked
  2837  000B22  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2838  000B24  EC1F  F011         	call	_D_PWM_GetScale	;wreg free
  2839  000B28  0100               	movlb	0	; () banked
  2840  000B2A  6FAE               	movwf	??_handle_message& (0+255),b
  2841  000B2C  0100               	movlb	0	; () banked
  2842  000B2E  51AE               	movf	??_handle_message& (0+255),w,b
  2843  000B30  0100               	movlb	0	; () banked
  2844  000B32  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2845  000B34  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2846  000B36  EC1F  F00A         	call	_D_UART_WriteInt	;wreg free
  2847                           
  2848                           ;main.c: 151: return;
  2849  000B3A  0012               	return	
  2850  000B3C                     l3080:
  2851                           
  2852                           ;main.c: 152: }
  2853                           ;main.c: 154: if(strcmp(msg.command, "STA") == 0) {
  2854  000B3C  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2855  000B40  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2856  000B44  0E2D               	movlw	low STR_31
  2857  000B46  0100               	movlb	0	; () banked
  2858  000B48  6F89               	movwf	strcmp@s2& (0+255),b
  2859  000B4A  0E08               	movlw	high STR_31
  2860  000B4C  0100               	movlb	0	; () banked
  2861  000B4E  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2862  000B50  EC83  F00F         	call	_strcmp	;wreg free
  2863  000B54  0100               	movlb	0	; () banked
  2864  000B56  5187               	movf	?_strcmp& (0+255),w,b
  2865  000B58  0100               	movlb	0	; () banked
  2866  000B5A  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2867  000B5C  A4D8               	btfss	status,2,c
  2868  000B5E  0012               	return	
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 155: D_UART_WriteInt("STA", D_PWM_GetState());
  2872  000B60  0E2D               	movlw	low STR_31
  2873  000B62  0100               	movlb	0	; () banked
  2874  000B64  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2875  000B66  0E08               	movlw	high STR_31
  2876  000B68  0100               	movlb	0	; () banked
  2877  000B6A  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2878  000B6C  EC1D  F011         	call	_D_PWM_GetState	;wreg free
  2879  000B70  0100               	movlb	0	; () banked
  2880  000B72  6FAE               	movwf	??_handle_message& (0+255),b
  2881  000B74  0100               	movlb	0	; () banked
  2882  000B76  51AE               	movf	??_handle_message& (0+255),w,b
  2883  000B78  0100               	movlb	0	; () banked
  2884  000B7A  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2885  000B7C  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2886  000B7E  EC1F  F00A         	call	_D_UART_WriteInt	;wreg free
  2887                           
  2888                           ;main.c: 156: return;
  2889  000B82  0012               	return	
  2890  000B84                     __end_of_handle_message:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           intcon	equ	0xFF2
  2897                           intcon2	equ	0xFF1
  2898                           postinc0	equ	0xFEE
  2899                           plusw0	equ	0xFEB
  2900                           fsr0h	equ	0xFEA
  2901                           fsr0l	equ	0xFE9
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           plusw2	equ	0xFDB
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _strcmp *****************
  2911 ;; Defined at:
  2912 ;;		line 33 in file "/opt/microchip/xc8/v1.40/sources/common/strcmp.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  s1              2   39[BANK0 ] PTR const unsigned char 
  2915 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  2916 ;;  s2              2   41[BANK0 ] PTR const unsigned char 
  2917 ;;		 -> STR_31(4), STR_29(4), STR_25(4), STR_24(3), 
  2918 ;;		 -> STR_23(3), STR_22(3), STR_21(3), STR_20(2), 
  2919 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2920 ;;		 -> STR_15(2), 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  r               1   44[BANK0 ] char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  2   39[BANK0 ] int 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2932 ;;      Params:         0       4       0       0       0       0       0       0       0
  2933 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2934 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2935 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2936 ;;Total ram usage:        6 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:   12
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_handle_message
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text11
  2947  001F06                     __ptext11:
  2948                           	opt stack 0
  2949  001F06                     _strcmp:
  2950                           	opt stack 17
  2951                           
  2952                           ;incstack = 0
  2953  001F06  D006               	goto	l2764
  2954  001F08                     l2762:
  2955  001F08  0100               	movlb	0	; () banked
  2956  001F0A  4B87               	infsnz	strcmp@s1& (0+255),f,b
  2957  001F0C  2B88               	incf	(strcmp@s1+1)& (0+255),f,b
  2958  001F0E  0100               	movlb	0	; () banked
  2959  001F10  4B89               	infsnz	strcmp@s2& (0+255),f,b
  2960  001F12  2B8A               	incf	(strcmp@s2+1)& (0+255),f,b
  2961  001F14                     l2764:
  2962  001F14  C087  FFD9         	movff	strcmp@s1,fsr2l
  2963  001F18  C088  FFDA         	movff	strcmp@s1+1,fsr2h
  2964  001F1C  50DF               	movf	indf2,w,c
  2965  001F1E  0100               	movlb	0	; () banked
  2966  001F20  6F8B               	movwf	??_strcmp& (0+255),b
  2967  001F22  C089  FFF6         	movff	strcmp@s2,tblptrl
  2968  001F26  C08A  FFF7         	movff	strcmp@s2+1,tblptrh
  2969  001F2A                     	if	0	;tblptru may be non-zero
  2970  001F2A                     	endif
  2971  001F2A                     	if	0	;tblptru may be non-zero
  2972  001F2A                     	endif
  2973  001F2A  0008               	tblrd		*
  2974  001F2C  50F5               	movf	tablat,w,c
  2975  001F2E  0800               	sublw	0
  2976  001F30  0100               	movlb	0	; () banked
  2977  001F32  258B               	addwf	??_strcmp& (0+255),w,b
  2978  001F34  0100               	movlb	0	; () banked
  2979  001F36  6F8C               	movwf	strcmp@r& (0+255),b
  2980  001F38  0100               	movlb	0	; () banked
  2981  001F3A  518C               	movf	strcmp@r& (0+255),w,b
  2982  001F3C  A4D8               	btfss	status,2,c
  2983  001F3E  D007               	goto	l2768
  2984                           
  2985                           ; BSR set to: 0
  2986  001F40  C087  FFD9         	movff	strcmp@s1,fsr2l
  2987  001F44  C088  FFDA         	movff	strcmp@s1+1,fsr2h
  2988  001F48  50DF               	movf	indf2,w,c
  2989  001F4A  A4D8               	btfss	status,2,c
  2990  001F4C  D7DD               	goto	l2762
  2991  001F4E                     l2768:
  2992                           
  2993                           ; BSR set to: 0
  2994  001F4E  0100               	movlb	0	; () banked
  2995  001F50  518C               	movf	strcmp@r& (0+255),w,b
  2996  001F52  0100               	movlb	0	; () banked
  2997  001F54  6F87               	movwf	?_strcmp& (0+255),b
  2998  001F56  6B88               	clrf	(?_strcmp+1)& (0+255),b
  2999  001F58  BF87               	btfsc	?_strcmp& (0+255),7,b
  3000  001F5A  0788               	decf	(?_strcmp+1)& (0+255),f,b
  3001  001F5C  0012               	return	
  3002  001F5E                     __end_of_strcmp:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           intcon	equ	0xFF2
  3009                           intcon2	equ	0xFF1
  3010                           postinc0	equ	0xFEE
  3011                           plusw0	equ	0xFEB
  3012                           fsr0h	equ	0xFEA
  3013                           fsr0l	equ	0xFE9
  3014                           wreg	equ	0xFE8
  3015                           postdec1	equ	0xFE5
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           plusw2	equ	0xFDB
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function _strToInt *****************
  3024 ;; Defined at:
  3025 ;;		line 160 in file "main.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  str             2   39[BANK0 ] PTR const unsigned char 
  3028 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  val             1   43[BANK0 ] unsigned char 
  3031 ;;  shift           1   42[BANK0 ] unsigned char 
  3032 ;;  tmp             1   41[BANK0 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3042 ;;      Params:         0       2       0       0       0       0       0       0       0
  3043 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3045 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:   12
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_handle_message
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text12
  3057  001DF0                     __ptext12:
  3058                           	opt stack 0
  3059  001DF0                     _strToInt:
  3060                           	opt stack 17
  3061                           
  3062                           ;main.c: 161: uint8_t val = 0;
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  001DF0  0E00               	movlw	0
  3067  001DF2  0100               	movlb	0	; () banked
  3068  001DF4  6F8B               	movwf	strToInt@val& (0+255),b
  3069                           
  3070                           ;main.c: 162: uint8_t tmp = 0;
  3071  001DF6  0E00               	movlw	0
  3072  001DF8  0100               	movlb	0	; () banked
  3073  001DFA  6F89               	movwf	strToInt@tmp& (0+255),b
  3074                           
  3075                           ;main.c: 163: uint8_t shift = 0;
  3076  001DFC  0E00               	movlw	0
  3077  001DFE  0100               	movlb	0	; () banked
  3078  001E00  6F8A               	movwf	strToInt@shift& (0+255),b
  3079                           
  3080                           ;main.c: 164: while(*str != '\0') {
  3081  001E02  D01B               	goto	l2786
  3082  001E04                     l2774:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 165: tmp = *str - 0x30;
  3086  001E04  C087  FFD9         	movff	strToInt@str,fsr2l
  3087  001E08  C088  FFDA         	movff	strToInt@str+1,fsr2h
  3088  001E0C  50DF               	movf	indf2,w,c
  3089  001E0E  0FD0               	addlw	208
  3090  001E10  0100               	movlb	0	; () banked
  3091  001E12  6F89               	movwf	strToInt@tmp& (0+255),b
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;main.c: 166: if (shift != 0) {
  3095  001E14  0100               	movlb	0	; () banked
  3096  001E16  518A               	movf	strToInt@shift& (0+255),w,b
  3097  001E18  0100               	movlb	0	; () banked
  3098  001E1A  B4D8               	btfsc	status,2,c
  3099  001E1C  D005               	goto	l2780
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;main.c: 167: val *= 10;
  3103  001E1E  0E0A               	movlw	10
  3104  001E20  0100               	movlb	0	; () banked
  3105  001E22  038B               	mulwf	strToInt@val& (0+255),b
  3106  001E24  50F3               	movf	prodl,w,c
  3107  001E26  6F8B               	movwf	strToInt@val& (0+255),b
  3108  001E28                     l2780:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 168: }
  3112                           ;main.c: 169: val += tmp;
  3113  001E28  0100               	movlb	0	; () banked
  3114  001E2A  5189               	movf	strToInt@tmp& (0+255),w,b
  3115  001E2C  0100               	movlb	0	; () banked
  3116  001E2E  278B               	addwf	strToInt@val& (0+255),f,b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 170: shift++;
  3120  001E30  0100               	movlb	0	; () banked
  3121  001E32  2B8A               	incf	strToInt@shift& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 171: str++;
  3125  001E34  0100               	movlb	0	; () banked
  3126  001E36  4B87               	infsnz	strToInt@str& (0+255),f,b
  3127  001E38  2B88               	incf	(strToInt@str+1)& (0+255),f,b
  3128  001E3A                     l2786:
  3129                           
  3130                           ; BSR set to: 0
  3131  001E3A  C087  FFD9         	movff	strToInt@str,fsr2l
  3132  001E3E  C088  FFDA         	movff	strToInt@str+1,fsr2h
  3133  001E42  50DF               	movf	indf2,w,c
  3134  001E44  A4D8               	btfss	status,2,c
  3135  001E46  D7DE               	goto	l2774
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 172: }
  3139                           ;main.c: 173: return val;
  3140                           
  3141                           ; BSR set to: 0
  3142  001E48  0100               	movlb	0	; () banked
  3143  001E4A  518B               	movf	strToInt@val& (0+255),w,b
  3144  001E4C  0012               	return	
  3145  001E4E                     __end_of_strToInt:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           intcon2	equ	0xFF1
  3154                           postinc0	equ	0xFEE
  3155                           plusw0	equ	0xFEB
  3156                           fsr0h	equ	0xFEA
  3157                           fsr0l	equ	0xFE9
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           plusw2	equ	0xFDB
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _D_UART_WriteInt *****************
  3168 ;; Defined at:
  3169 ;;		line 285 in file "Drivers/UART_Driver.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  command         2   67[BANK0 ] PTR const unsigned char 
  3172 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3173 ;;		 -> STR_26(2), 
  3174 ;;  data            2   69[BANK0 ] int 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3186 ;;      Params:         0       4       0       0       0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3188 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3189 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3190 ;;Total ram usage:        5 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:   16
  3193 ;; This function calls:
  3194 ;;		_printf
  3195 ;; This function is called by:
  3196 ;;		_handle_message
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text13
  3201  00143E                     __ptext13:
  3202                           	opt stack 0
  3203  00143E                     _D_UART_WriteInt:
  3204                           	opt stack 13
  3205                           
  3206                           ;UART_Driver.c: 286: printf(startCharacter);
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;incstack = 0
  3210  00143E  C03F  F093         	movff	_startCharacter,printf@f
  3211  001442  C040  F094         	movff	_startCharacter+1,printf@f+1
  3212  001446  0100               	movlb	0	; () banked
  3213  001448  5193               	movf	printf@f& (0+255),w,b
  3214  00144A  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3215  00144C  A4D8               	btfss	status,2,c
  3216  00144E  0E00               	movlw	low (__mediumconst shr (0+16))
  3217  001450  6F95               	movwf	(printf@f+2)& (0+255),b
  3218  001452  EC29  F007         	call	_printf	;wreg free
  3219                           
  3220                           ;UART_Driver.c: 288: printf(messageCharacter);
  3221  001456  C0D7  F093         	movff	_messageCharacter,printf@f
  3222  00145A  C0D8  F094         	movff	_messageCharacter+1,printf@f+1
  3223  00145E  0100               	movlb	0	; () banked
  3224  001460  5193               	movf	printf@f& (0+255),w,b
  3225  001462  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3226  001464  A4D8               	btfss	status,2,c
  3227  001466  0E00               	movlw	low (__mediumconst shr (0+16))
  3228  001468  6F95               	movwf	(printf@f+2)& (0+255),b
  3229  00146A  EC29  F007         	call	_printf	;wreg free
  3230                           
  3231                           ;UART_Driver.c: 289: printf(deviceName);
  3232  00146E  C0D4  F093         	movff	_deviceName,printf@f
  3233  001472  C0D5  F094         	movff	_deviceName+1,printf@f+1
  3234  001476  C0D6  F095         	movff	_deviceName+2,printf@f+2
  3235  00147A  EC29  F007         	call	_printf	;wreg free
  3236                           
  3237                           ;UART_Driver.c: 291: printf(":");printf(command);
  3238  00147E  0E65               	movlw	low STR_7
  3239  001480  0100               	movlb	0	; () banked
  3240  001482  6F93               	movwf	printf@f& (0+255),b
  3241  001484  0E08               	movlw	high STR_7
  3242  001486  0100               	movlb	0	; () banked
  3243  001488  6F94               	movwf	(printf@f+1)& (0+255),b
  3244  00148A  0100               	movlb	0	; () banked
  3245  00148C  5193               	movf	printf@f& (0+255),w,b
  3246  00148E  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3247  001490  A4D8               	btfss	status,2,c
  3248  001492  0E00               	movlw	low (__mediumconst shr (0+16))
  3249  001494  6F95               	movwf	(printf@f+2)& (0+255),b
  3250  001496  EC29  F007         	call	_printf	;wreg free
  3251  00149A  C0A3  F093         	movff	D_UART_WriteInt@command,printf@f
  3252  00149E  C0A4  F094         	movff	D_UART_WriteInt@command+1,printf@f+1
  3253  0014A2  0100               	movlb	0	; () banked
  3254  0014A4  5193               	movf	printf@f& (0+255),w,b
  3255  0014A6  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3256  0014A8  A4D8               	btfss	status,2,c
  3257  0014AA  0E00               	movlw	low (__mediumconst shr (0+16))
  3258  0014AC  6F95               	movwf	(printf@f+2)& (0+255),b
  3259  0014AE  EC29  F007         	call	_printf	;wreg free
  3260                           
  3261                           ;UART_Driver.c: 293: printf(":");printf("%d",data);
  3262  0014B2  0E65               	movlw	low STR_7
  3263  0014B4  0100               	movlb	0	; () banked
  3264  0014B6  6F93               	movwf	printf@f& (0+255),b
  3265  0014B8  0E08               	movlw	high STR_7
  3266  0014BA  0100               	movlb	0	; () banked
  3267  0014BC  6F94               	movwf	(printf@f+1)& (0+255),b
  3268  0014BE  0100               	movlb	0	; () banked
  3269  0014C0  5193               	movf	printf@f& (0+255),w,b
  3270  0014C2  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3271  0014C4  A4D8               	btfss	status,2,c
  3272  0014C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3273  0014C8  6F95               	movwf	(printf@f+2)& (0+255),b
  3274  0014CA  EC29  F007         	call	_printf	;wreg free
  3275  0014CE  0E4D               	movlw	low STR_11
  3276  0014D0  0100               	movlb	0	; () banked
  3277  0014D2  6F93               	movwf	printf@f& (0+255),b
  3278  0014D4  0E08               	movlw	high STR_11
  3279  0014D6  0100               	movlb	0	; () banked
  3280  0014D8  6F94               	movwf	(printf@f+1)& (0+255),b
  3281  0014DA  0100               	movlb	0	; () banked
  3282  0014DC  5193               	movf	printf@f& (0+255),w,b
  3283  0014DE  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3284  0014E0  A4D8               	btfss	status,2,c
  3285  0014E2  0E00               	movlw	low (__mediumconst shr (0+16))
  3286  0014E4  6F95               	movwf	(printf@f+2)& (0+255),b
  3287  0014E6  C0A5  F096         	movff	D_UART_WriteInt@data,?_printf+3
  3288  0014EA  C0A6  F097         	movff	D_UART_WriteInt@data+1,?_printf+4
  3289  0014EE  EC29  F007         	call	_printf	;wreg free
  3290                           
  3291                           ;UART_Driver.c: 295: printf(stopCharacter);
  3292  0014F2  C041  F093         	movff	_stopCharacter,printf@f
  3293  0014F6  C042  F094         	movff	_stopCharacter+1,printf@f+1
  3294  0014FA  0100               	movlb	0	; () banked
  3295  0014FC  5193               	movf	printf@f& (0+255),w,b
  3296  0014FE  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3297  001500  A4D8               	btfss	status,2,c
  3298  001502  0E00               	movlw	low (__mediumconst shr (0+16))
  3299  001504  6F95               	movwf	(printf@f+2)& (0+255),b
  3300  001506  EC29  F007         	call	_printf	;wreg free
  3301                           
  3302                           ;UART_Driver.c: 296: _delay((unsigned long)((1)*(48000000/4000.0)));
  3303  00150A  0E10               	movlw	16
  3304  00150C  0100               	movlb	0	; () banked
  3305  00150E  6FA7               	movwf	??_D_UART_WriteInt& (0+255),b
  3306  001510  0E94               	movlw	148
  3307  001512                     u3037:
  3308  001512  2EE8               	decfsz	wreg,f,c
  3309  001514  D7FE               	bra	u3037
  3310  001516  2FA7               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  3311  001518  D7FC               	bra	u3037
  3312  00151A  F000               	nop	
  3313  00151C  0012               	return		;funcret
  3314  00151E                     __end_of_D_UART_WriteInt:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           postinc0	equ	0xFEE
  3324                           plusw0	equ	0xFEB
  3325                           fsr0h	equ	0xFEA
  3326                           fsr0l	equ	0xFE9
  3327                           wreg	equ	0xFE8
  3328                           postdec1	equ	0xFE5
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           plusw2	equ	0xFDB
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _printf *****************
  3337 ;; Defined at:
  3338 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  f               3   51[BANK0 ] PTR const unsigned char 
  3341 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  3342 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  3343 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  3344 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  3345 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  idx             1   59[BANK0 ] unsigned char 
  3348 ;;  tmpval          4    0        struct .
  3349 ;;  cp              3    0        PTR const unsigned char 
  3350 ;;  val             2   64[BANK0 ] unsigned int 
  3351 ;;  ap              2   60[BANK0 ] PTR void [1]
  3352 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3353 ;;  len             2    0        unsigned int 
  3354 ;;  c               1   66[BANK0 ] char 
  3355 ;;  flag            1   63[BANK0 ] unsigned char 
  3356 ;;  prec            1   62[BANK0 ] char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  2   51[BANK0 ] int 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3366 ;;      Params:         0       5       0       0       0       0       0       0       0
  3367 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3368 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3369 ;;      Totals:         0      16       0       0       0       0       0       0       0
  3370 ;;Total ram usage:       16 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:   15
  3373 ;; This function calls:
  3374 ;;		___lwdiv
  3375 ;;		___lwmod
  3376 ;;		_putch
  3377 ;; This function is called by:
  3378 ;;		_D_UART_Write
  3379 ;;		_D_UART_WriteInt
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text14
  3384  000E52                     __ptext14:
  3385                           	opt stack 0
  3386  000E52                     _printf:
  3387                           	opt stack 13
  3388                           
  3389                           ;doprnt.c: 466: va_list ap;
  3390                           ;doprnt.c: 499: signed char c;
  3391                           ;doprnt.c: 506: signed char prec;
  3392                           ;doprnt.c: 508: unsigned char flag;
  3393                           ;doprnt.c: 523: union {
  3394                           ;doprnt.c: 524: unsigned long vd;
  3395                           ;doprnt.c: 525: double integ;
  3396                           ;doprnt.c: 526: } tmpval;
  3397                           ;doprnt.c: 528: unsigned int val;
  3398                           ;doprnt.c: 529: unsigned len;
  3399                           ;doprnt.c: 530: const char * cp;
  3400                           ;doprnt.c: 533: *ap = __va_start();
  3401                           
  3402                           ;incstack = 0
  3403  000E52  0E96               	movlw	low (?_printf+3)
  3404  000E54  0100               	movlb	0	; () banked
  3405  000E56  6F9C               	movwf	printf@ap& (0+255),b
  3406  000E58  0E00               	movlw	high (?_printf+3)
  3407  000E5A  0100               	movlb	0	; () banked
  3408  000E5C  6F9D               	movwf	(printf@ap+1)& (0+255),b
  3409                           
  3410                           ;doprnt.c: 536: while(c = *f++) {
  3411  000E5E  D115               	goto	l2386
  3412  000E60                     l2306:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 538: if(c != '%')
  3416  000E60  0E25               	movlw	37
  3417  000E62  0100               	movlb	0	; () banked
  3418  000E64  19A2               	xorwf	printf@c& (0+255),w,b
  3419  000E66  B4D8               	btfsc	status,2,c
  3420  000E68  D005               	goto	l2310
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;doprnt.c: 540: {
  3424                           ;doprnt.c: 541: (putch(c) );
  3425  000E6A  0100               	movlb	0	; () banked
  3426  000E6C  51A2               	movf	printf@c& (0+255),w,b
  3427  000E6E  ECEA  F010         	call	_putch
  3428                           
  3429                           ;doprnt.c: 542: continue;
  3430  000E72  D10B               	goto	l2386
  3431  000E74                     l2310:
  3432                           
  3433                           ;doprnt.c: 543: }
  3434                           ;doprnt.c: 548: flag = 0;
  3435  000E74  0E00               	movlw	0
  3436  000E76  0100               	movlb	0	; () banked
  3437  000E78  6F9F               	movwf	printf@flag& (0+255),b
  3438                           
  3439                           ;doprnt.c: 635: switch(c = *f++) {
  3440  000E7A  D008               	goto	l2318
  3441  000E7C                     l2312:
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;doprnt.c: 721: flag |= 0x80;
  3445  000E7C  0100               	movlb	0	; () banked
  3446  000E7E  8F9F               	bsf	printf@flag& (0+255),7,b
  3447                           
  3448                           ;doprnt.c: 723: break;
  3449  000E80  D028               	goto	l521
  3450  000E82                     l2314:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;doprnt.c: 809: (putch(c) );
  3454  000E82  0100               	movlb	0	; () banked
  3455  000E84  51A2               	movf	printf@c& (0+255),w,b
  3456  000E86  ECEA  F010         	call	_putch
  3457                           
  3458                           ;doprnt.c: 810: continue;
  3459  000E8A  D0FF               	goto	l2386
  3460  000E8C                     l2318:
  3461  000E8C  C093  F098         	movff	printf@f,??_printf
  3462  000E90  C094  F099         	movff	printf@f+1,??_printf+1
  3463  000E94  C095  F09A         	movff	printf@f+2,??_printf+2
  3464  000E98  0100               	movlb	0	; () banked
  3465  000E9A  2B93               	incf	printf@f& (0+255),f,b
  3466  000E9C  0E00               	movlw	0
  3467  000E9E  2394               	addwfc	(printf@f+1)& (0+255),f,b
  3468  000EA0  2395               	addwfc	(printf@f+2)& (0+255),f,b
  3469  000EA2  C098  FFF6         	movff	??_printf,tblptrl
  3470  000EA6  C099  FFF7         	movff	??_printf+1,tblptrh
  3471  000EAA  C09A  FFF8         	movff	??_printf+2,tblptru
  3472  000EAE  0008               	tblrd		*
  3473  000EB0  CFF5 F0A2          	movff	tablat,printf@c
  3474  000EB4  0100               	movlb	0	; () banked
  3475  000EB6  51A2               	movf	printf@c& (0+255),w,b
  3476                           
  3477                           ; Switch size 1, requested type "space"
  3478                           ; Number of cases is 4, Range of values is 0 to 120
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte           13     7 (average)
  3482                           ;	Chosen strategy is simple_byte
  3483  000EB8  0A00               	xorlw	0	; case 0
  3484  000EBA  B4D8               	btfsc	status,2,c
  3485  000EBC  0012               	return	
  3486  000EBE  0A64               	xorlw	100	; case 100
  3487  000EC0  B4D8               	btfsc	status,2,c
  3488  000EC2  D007               	goto	l521
  3489  000EC4  0A0D               	xorlw	13	; case 105
  3490  000EC6  B4D8               	btfsc	status,2,c
  3491  000EC8  D004               	goto	l521
  3492  000ECA  0A11               	xorlw	17	; case 120
  3493  000ECC  B4D8               	btfsc	status,2,c
  3494  000ECE  D7D6               	goto	l2312
  3495  000ED0  D7D8               	goto	l2314
  3496  000ED2                     l521:
  3497                           
  3498                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3499  000ED2  0100               	movlb	0	; () banked
  3500  000ED4  BF9F               	btfsc	printf@flag& (0+255),7,b
  3501  000ED6  D019               	goto	l2330
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;doprnt.c: 1253: {
  3505                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3506  000ED8  C09C  FFD9         	movff	printf@ap,fsr2l
  3507  000EDC  C09D  FFDA         	movff	printf@ap+1,fsr2h
  3508  000EE0  CFDE F0A0          	movff	postinc2,printf@val
  3509  000EE4  CFDD F0A1          	movff	postdec2,printf@val+1
  3510                           
  3511                           ; BSR set to: 0
  3512  000EE8  0E02               	movlw	2
  3513  000EEA  0100               	movlb	0	; () banked
  3514  000EEC  279C               	addwf	printf@ap& (0+255),f,b
  3515  000EEE  0E00               	movlw	0
  3516  000EF0  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1261: if((int)val < 0) {
  3520  000EF2  0100               	movlb	0	; () banked
  3521  000EF4  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  3522  000EF6  D053               	goto	l2364
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1262: flag |= 0x03;
  3526  000EF8  0E03               	movlw	3
  3527  000EFA  0100               	movlb	0	; () banked
  3528  000EFC  139F               	iorwf	printf@flag& (0+255),f,b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;doprnt.c: 1263: val = -val;
  3532  000EFE  0100               	movlb	0	; () banked
  3533  000F00  6DA0               	negf	printf@val& (0+255),b
  3534  000F02  1FA1               	comf	(printf@val+1)& (0+255),f,b
  3535  000F04  B0D8               	btfsc	status,0,c
  3536  000F06  2BA1               	incf	(printf@val+1)& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;doprnt.c: 1264: }
  3540                           ;doprnt.c: 1266: }
  3541  000F08  D04A               	goto	l2364
  3542  000F0A                     l2330:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;doprnt.c: 1268: else
  3546                           ;doprnt.c: 1273: {
  3547                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3548  000F0A  C09C  FFD9         	movff	printf@ap,fsr2l
  3549  000F0E  C09D  FFDA         	movff	printf@ap+1,fsr2h
  3550  000F12  CFDE F0A0          	movff	postinc2,printf@val
  3551  000F16  CFDD F0A1          	movff	postdec2,printf@val+1
  3552                           
  3553                           ; BSR set to: 0
  3554  000F1A  0E02               	movlw	2
  3555  000F1C  0100               	movlb	0	; () banked
  3556  000F1E  279C               	addwf	printf@ap& (0+255),f,b
  3557  000F20  0E00               	movlw	0
  3558  000F22  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;doprnt.c: 1287: }
  3562                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3563  000F24  D03C               	goto	l2364
  3564  000F26                     l2334:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3568  000F26  0E01               	movlw	1
  3569  000F28  0100               	movlb	0	; () banked
  3570  000F2A  6FA2               	movwf	printf@c& (0+255),b
  3571  000F2C                     l2336:
  3572                           
  3573                           ; BSR set to: 0
  3574  000F2C  0E05               	movlw	5
  3575  000F2E  0100               	movlb	0	; () banked
  3576  000F30  19A2               	xorwf	printf@c& (0+255),w,b
  3577  000F32  B4D8               	btfsc	status,2,c
  3578  000F34  D03D               	goto	l2366
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1306: if(val < dpowers[c])
  3582                           
  3583                           ; BSR set to: 0
  3584                           
  3585                           ; BSR set to: 0
  3586  000F36  0100               	movlb	0	; () banked
  3587  000F38  51A2               	movf	printf@c& (0+255),w,b
  3588  000F3A  0D02               	mullw	2
  3589  000F3C  0E01               	movlw	low _dpowers
  3590  000F3E  24F3               	addwf	prodl,w,c
  3591  000F40  6EF6               	movwf	tblptrl,c
  3592  000F42  0E08               	movlw	high _dpowers
  3593  000F44  20F4               	addwfc	prodh,w,c
  3594  000F46  6EF7               	movwf	tblptrh,c
  3595  000F48                     	if	0	;There are less than 3 active tblptr bytes
  3596  000F48                     	endif
  3597  000F48  0009               	tblrd		*+
  3598  000F4A  50F5               	movf	tablat,w,c
  3599  000F4C  0100               	movlb	0	; () banked
  3600  000F4E  5DA0               	subwf	printf@val& (0+255),w,b
  3601  000F50  0009               	tblrd		*+
  3602  000F52  50F5               	movf	tablat,w,c
  3603  000F54  0100               	movlb	0	; () banked
  3604  000F56  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  3605  000F58  A0D8               	btfss	status,0,c
  3606  000F5A  D02A               	goto	l2366
  3607                           
  3608                           ; BSR set to: 0
  3609                           
  3610                           ; BSR set to: 0
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 1307: break;
  3614  000F5C  0100               	movlb	0	; () banked
  3615  000F5E  2BA2               	incf	printf@c& (0+255),f,b
  3616  000F60  D7E5               	goto	l2336
  3617  000F62                     l2348:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3621  000F62  0E01               	movlw	1
  3622  000F64  0100               	movlb	0	; () banked
  3623  000F66  6FA2               	movwf	printf@c& (0+255),b
  3624  000F68                     l2350:
  3625                           
  3626                           ; BSR set to: 0
  3627  000F68  0E04               	movlw	4
  3628  000F6A  0100               	movlb	0	; () banked
  3629  000F6C  19A2               	xorwf	printf@c& (0+255),w,b
  3630  000F6E  B4D8               	btfsc	status,2,c
  3631  000F70  D01F               	goto	l2366
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3635                           
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  000F72  0100               	movlb	0	; () banked
  3640  000F74  51A2               	movf	printf@c& (0+255),w,b
  3641  000F76  0D02               	mullw	2
  3642  000F78  0E0B               	movlw	low _hexpowers
  3643  000F7A  24F3               	addwf	prodl,w,c
  3644  000F7C  6EF6               	movwf	tblptrl,c
  3645  000F7E  0E08               	movlw	high _hexpowers
  3646  000F80  20F4               	addwfc	prodh,w,c
  3647  000F82  6EF7               	movwf	tblptrh,c
  3648  000F84                     	if	0	;There are less than 3 active tblptr bytes
  3649  000F84                     	endif
  3650  000F84  0009               	tblrd		*+
  3651  000F86  50F5               	movf	tablat,w,c
  3652  000F88  0100               	movlb	0	; () banked
  3653  000F8A  5DA0               	subwf	printf@val& (0+255),w,b
  3654  000F8C  0009               	tblrd		*+
  3655  000F8E  50F5               	movf	tablat,w,c
  3656  000F90  0100               	movlb	0	; () banked
  3657  000F92  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  3658  000F94  A0D8               	btfss	status,0,c
  3659  000F96  D00C               	goto	l2366
  3660                           
  3661                           ; BSR set to: 0
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 1318: break;
  3667  000F98  0100               	movlb	0	; () banked
  3668  000F9A  2BA2               	incf	printf@c& (0+255),f,b
  3669  000F9C  D7E5               	goto	l2350
  3670  000F9E                     l2364:
  3671                           
  3672                           ; BSR set to: 0
  3673  000F9E  0100               	movlb	0	; () banked
  3674  000FA0  519F               	movf	printf@flag& (0+255),w,b
  3675  000FA2  0B80               	andlw	128
  3676                           
  3677                           ; Switch size 1, requested type "space"
  3678                           ; Number of cases is 2, Range of values is 0 to 128
  3679                           ; switch strategies available:
  3680                           ; Name         Instructions Cycles
  3681                           ; simple_byte            7     4 (average)
  3682                           ;	Chosen strategy is simple_byte
  3683  000FA4  0A00               	xorlw	0	; case 0
  3684  000FA6  B4D8               	btfsc	status,2,c
  3685  000FA8  D7BE               	goto	l2334
  3686  000FAA  0A80               	xorlw	128	; case 128
  3687  000FAC  B4D8               	btfsc	status,2,c
  3688  000FAE  D7D9               	goto	l2348
  3689  000FB0                     l2366:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 1422: {
  3693                           ;doprnt.c: 1438: if(flag & 0x03)
  3694  000FB0  C09F  F098         	movff	printf@flag,??_printf
  3695  000FB4  0E03               	movlw	3
  3696  000FB6  0100               	movlb	0	; () banked
  3697  000FB8  1798               	andwf	??_printf& (0+255),f,b
  3698  000FBA  B4D8               	btfsc	status,2,c
  3699  000FBC  D003               	goto	l2370
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 1439: (putch('-') );
  3703  000FBE  0E2D               	movlw	45
  3704  000FC0  ECEA  F010         	call	_putch
  3705  000FC4                     l2370:
  3706                           
  3707                           ;doprnt.c: 1469: }
  3708                           ;doprnt.c: 1472: prec = c;
  3709  000FC4  C0A2  F09E         	movff	printf@c,printf@prec
  3710                           
  3711                           ;doprnt.c: 1474: while(prec--) {
  3712  000FC8  D05A               	goto	l2384
  3713  000FCA                     l2372:
  3714                           
  3715                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3716  000FCA  0100               	movlb	0	; () banked
  3717  000FCC  519E               	movf	printf@prec& (0+255),w,b
  3718  000FCE  0D02               	mullw	2
  3719  000FD0  0E01               	movlw	low _dpowers
  3720  000FD2  24F3               	addwf	prodl,w,c
  3721  000FD4  6EF6               	movwf	tblptrl,c
  3722  000FD6  0E08               	movlw	high _dpowers
  3723  000FD8  20F4               	addwfc	prodh,w,c
  3724  000FDA  6EF7               	movwf	tblptrh,c
  3725  000FDC                     	if	0	;There are less than 3 active tblptr bytes
  3726  000FDC                     	endif
  3727  000FDC  0009               	tblrd		*+
  3728  000FDE  CFF5 F089          	movff	tablat,___lwdiv@divisor
  3729  000FE2  000A               	tblrd		*-
  3730  000FE4  CFF5 F08A          	movff	tablat,___lwdiv@divisor+1
  3731  000FE8  C0A0  F087         	movff	printf@val,___lwdiv@dividend
  3732  000FEC  C0A1  F088         	movff	printf@val+1,___lwdiv@dividend+1
  3733  000FF0  ECB7  F00D         	call	___lwdiv	;wreg free
  3734  000FF4  C087  F08E         	movff	?___lwdiv,___lwmod@dividend
  3735  000FF8  C088  F08F         	movff	?___lwdiv+1,___lwmod@dividend+1
  3736  000FFC  0E00               	movlw	0
  3737  000FFE  0100               	movlb	0	; () banked
  3738  001000  6F91               	movwf	(___lwmod@divisor+1)& (0+255),b
  3739  001002  0E0A               	movlw	10
  3740  001004  6F90               	movwf	___lwmod@divisor& (0+255),b
  3741  001006  ECC7  F00E         	call	___lwmod	;wreg free
  3742  00100A  0100               	movlb	0	; () banked
  3743  00100C  518E               	movf	?___lwmod& (0+255),w,b
  3744  00100E  0F30               	addlw	48
  3745  001010  0100               	movlb	0	; () banked
  3746  001012  6FA2               	movwf	printf@c& (0+255),b
  3747                           
  3748                           ;doprnt.c: 1491: break;
  3749  001014  D030               	goto	l2382
  3750  001016                     l2374:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;doprnt.c: 1499: {
  3754                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3755  001016  C0A0  F087         	movff	printf@val,___lwdiv@dividend
  3756  00101A  C0A1  F088         	movff	printf@val+1,___lwdiv@dividend+1
  3757  00101E  0100               	movlb	0	; () banked
  3758  001020  519E               	movf	printf@prec& (0+255),w,b
  3759  001022  0D02               	mullw	2
  3760  001024  0E0B               	movlw	low _hexpowers
  3761  001026  24F3               	addwf	prodl,w,c
  3762  001028  6EF6               	movwf	tblptrl,c
  3763  00102A  0E08               	movlw	high _hexpowers
  3764  00102C  20F4               	addwfc	prodh,w,c
  3765  00102E  6EF7               	movwf	tblptrh,c
  3766  001030                     	if	0	;There are less than 3 active tblptr bytes
  3767  001030                     	endif
  3768  001030  0009               	tblrd		*+
  3769  001032  CFF5 F089          	movff	tablat,___lwdiv@divisor
  3770  001036  000A               	tblrd		*-
  3771  001038  CFF5 F08A          	movff	tablat,___lwdiv@divisor+1
  3772  00103C  ECB7  F00D         	call	___lwdiv	;wreg free
  3773  001040  0100               	movlb	0	; () banked
  3774  001042  5187               	movf	?___lwdiv& (0+255),w,b
  3775  001044  0B0F               	andlw	15
  3776  001046  0100               	movlb	0	; () banked
  3777  001048  6F9B               	movwf	printf@idx& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3781  00104A  0100               	movlb	0	; () banked
  3782  00104C  519B               	movf	printf@idx& (0+255),w,b
  3783  00104E  0D01               	mullw	1
  3784  001050  0E13               	movlw	low STR_33
  3785  001052  24F3               	addwf	prodl,w,c
  3786  001054  6EF6               	movwf	tblptrl,c
  3787  001056  0E08               	movlw	high STR_33
  3788  001058  20F4               	addwfc	prodh,w,c
  3789  00105A  6EF7               	movwf	tblptrh,c
  3790  00105C                     	if	0	;There are less than 3 active tblptr bytes
  3791  00105C                     	endif
  3792  00105C  0008               	tblrd		*
  3793  00105E  CFF5 F0A2          	movff	tablat,printf@c
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1523: }
  3797                           
  3798                           ;doprnt.c: 1508: }
  3799                           ;doprnt.c: 1510: break;
  3800  001062  D009               	goto	l2382
  3801  001064                     l2380:
  3802  001064  0100               	movlb	0	; () banked
  3803  001066  519F               	movf	printf@flag& (0+255),w,b
  3804  001068  0B80               	andlw	128
  3805                           
  3806                           ; Switch size 1, requested type "space"
  3807                           ; Number of cases is 2, Range of values is 0 to 128
  3808                           ; switch strategies available:
  3809                           ; Name         Instructions Cycles
  3810                           ; simple_byte            7     4 (average)
  3811                           ;	Chosen strategy is simple_byte
  3812  00106A  0A00               	xorlw	0	; case 0
  3813  00106C  B4D8               	btfsc	status,2,c
  3814  00106E  D7AD               	goto	l2372
  3815  001070  0A80               	xorlw	128	; case 128
  3816  001072  B4D8               	btfsc	status,2,c
  3817  001074  D7D0               	goto	l2374
  3818  001076                     l2382:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1524: (putch(c) );
  3822  001076  0100               	movlb	0	; () banked
  3823  001078  51A2               	movf	printf@c& (0+255),w,b
  3824  00107A  ECEA  F010         	call	_putch
  3825  00107E                     l2384:
  3826  00107E  0100               	movlb	0	; () banked
  3827  001080  079E               	decf	printf@prec& (0+255),f,b
  3828  001082  0100               	movlb	0	; () banked
  3829  001084  299E               	incf	printf@prec& (0+255),w,b
  3830  001086  A4D8               	btfss	status,2,c
  3831  001088  D7ED               	goto	l2380
  3832  00108A                     l2386:
  3833  00108A  C093  F098         	movff	printf@f,??_printf
  3834  00108E  C094  F099         	movff	printf@f+1,??_printf+1
  3835  001092  C095  F09A         	movff	printf@f+2,??_printf+2
  3836  001096  0100               	movlb	0	; () banked
  3837  001098  2B93               	incf	printf@f& (0+255),f,b
  3838  00109A  0E00               	movlw	0
  3839  00109C  2394               	addwfc	(printf@f+1)& (0+255),f,b
  3840  00109E  2395               	addwfc	(printf@f+2)& (0+255),f,b
  3841  0010A0  C098  FFF6         	movff	??_printf,tblptrl
  3842  0010A4  C099  FFF7         	movff	??_printf+1,tblptrh
  3843  0010A8  C09A  FFF8         	movff	??_printf+2,tblptru
  3844  0010AC  0008               	tblrd		*
  3845  0010AE  CFF5 F0A2          	movff	tablat,printf@c
  3846  0010B2  0100               	movlb	0	; () banked
  3847  0010B4  51A2               	movf	printf@c& (0+255),w,b
  3848  0010B6  B4D8               	btfsc	status,2,c
  3849  0010B8  0012               	return	
  3850  0010BA  D6D2               	goto	l2306
  3851  0010BC                     __end_of_printf:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           intcon2	equ	0xFF1
  3861                           postinc0	equ	0xFEE
  3862                           plusw0	equ	0xFEB
  3863                           fsr0h	equ	0xFEA
  3864                           fsr0l	equ	0xFE9
  3865                           wreg	equ	0xFE8
  3866                           postdec1	equ	0xFE5
  3867                           fsr1l	equ	0xFE1
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           plusw2	equ	0xFDB
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _putch *****************
  3877 ;; Defined at:
  3878 ;;		line 353 in file "Drivers/UART_Driver.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  data            1    wreg     unsigned char 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  data            1   41[BANK0 ] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0
  3893 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3895 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3896 ;;Total ram usage:        1 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:   14
  3899 ;; This function calls:
  3900 ;;		_writeByte
  3901 ;; This function is called by:
  3902 ;;		_printf
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text15
  3907  0021D4                     __ptext15:
  3908                           	opt stack 0
  3909  0021D4                     _putch:
  3910                           	opt stack 13
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914                           ;putch@data stored from wreg
  3915  0021D4  0100               	movlb	0	; () banked
  3916  0021D6  6F89               	movwf	putch@data& (0+255),b
  3917                           
  3918                           ;UART_Driver.c: 354: writeByte(data);
  3919  0021D8  0100               	movlb	0	; () banked
  3920  0021DA  5189               	movf	putch@data& (0+255),w,b
  3921  0021DC  ECD0  F010         	call	_writeByte
  3922  0021E0  0012               	return		;funcret
  3923  0021E2                     __end_of_putch:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           postinc0	equ	0xFEE
  3934                           plusw0	equ	0xFEB
  3935                           fsr0h	equ	0xFEA
  3936                           fsr0l	equ	0xFE9
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           fsr1l	equ	0xFE1
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           plusw2	equ	0xFDB
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _writeByte *****************
  3949 ;; Defined at:
  3950 ;;		line 84 in file "Drivers/UART_Driver.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  data            1    wreg     unsigned char 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  data            1   40[BANK0 ] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0
  3965 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3967 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3968 ;;Total ram usage:        1 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:   13
  3971 ;; This function calls:
  3972 ;;		_D_UART_Enable
  3973 ;; This function is called by:
  3974 ;;		_putch
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text16
  3979  0021A0                     __ptext16:
  3980                           	opt stack 0
  3981  0021A0                     _writeByte:
  3982                           	opt stack 13
  3983                           
  3984                           ;incstack = 0
  3985                           ;writeByte@data stored from wreg
  3986  0021A0  0100               	movlb	0	; () banked
  3987  0021A2  6F88               	movwf	writeByte@data& (0+255),b
  3988                           
  3989                           ;UART_Driver.c: 85: D_UART_Enable(1);
  3990  0021A4  0E01               	movlw	1
  3991  0021A6  EC5D  F010         	call	_D_UART_Enable
  3992  0021AA                     l107:
  3993  0021AA  A2AC               	btfss	4012,1,c	;volatile
  3994  0021AC  D7FE               	goto	l107
  3995                           
  3996                           ;UART_Driver.c: 87: TXREG = data;
  3997  0021AE  C088  FFAD         	movff	writeByte@data,4013	;volatile
  3998  0021B2  0012               	return		;funcret
  3999  0021B4                     __end_of_writeByte:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           intcon2	equ	0xFF1
  4009                           postinc0	equ	0xFEE
  4010                           plusw0	equ	0xFEB
  4011                           fsr0h	equ	0xFEA
  4012                           fsr0l	equ	0xFE9
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1l	equ	0xFE1
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           plusw2	equ	0xFDB
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _D_UART_Enable *****************
  4025 ;; Defined at:
  4026 ;;		line 319 in file "Drivers/UART_Driver.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  enable          1    wreg     unsigned char 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  enable          1   39[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0
  4041 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4043 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4044 ;;Total ram usage:        1 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:   12
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_writeByte
  4051 ;;		_D_UART_Init
  4052 ;;		_initialize
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text17
  4057  0020BA                     __ptext17:
  4058                           	opt stack 0
  4059  0020BA                     _D_UART_Enable:
  4060                           	opt stack 13
  4061                           
  4062                           ;incstack = 0
  4063                           ;D_UART_Enable@enable stored from wreg
  4064  0020BA  0100               	movlb	0	; () banked
  4065  0020BC  6F87               	movwf	D_UART_Enable@enable& (0+255),b
  4066                           
  4067                           ;UART_Driver.c: 320: if(enable) {
  4068  0020BE  0100               	movlb	0	; () banked
  4069  0020C0  5187               	movf	D_UART_Enable@enable& (0+255),w,b
  4070  0020C2  0100               	movlb	0	; () banked
  4071  0020C4  B4D8               	btfsc	status,2,c
  4072  0020C6  D006               	goto	l185
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  4076  0020C8  9C94               	bcf	3988,6,c	;volatile
  4077                           
  4078                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  4079  0020CA  8E94               	bsf	3988,7,c	;volatile
  4080                           
  4081                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  4082  0020CC  8AAC               	bsf	4012,5,c	;volatile
  4083                           
  4084                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  4085  0020CE  88AB               	bsf	4011,4,c	;volatile
  4086                           
  4087                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  4088  0020D0  8EAB               	bsf	4011,7,c	;volatile
  4089                           
  4090                           ;UART_Driver.c: 326: } else {
  4091  0020D2  0012               	return	
  4092  0020D4                     l185:
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  4096  0020D4  9C94               	bcf	3988,6,c	;volatile
  4097                           
  4098                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  4099  0020D6  9E94               	bcf	3988,7,c	;volatile
  4100                           
  4101                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  4102  0020D8  9AAC               	bcf	4012,5,c	;volatile
  4103                           
  4104                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  4105  0020DA  98AB               	bcf	4011,4,c	;volatile
  4106                           
  4107                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  4108  0020DC  9EAB               	bcf	4011,7,c	;volatile
  4109  0020DE  0012               	return	
  4110  0020E0                     __end_of_D_UART_Enable:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon2	equ	0xFF1
  4120                           postinc0	equ	0xFEE
  4121                           plusw0	equ	0xFEB
  4122                           fsr0h	equ	0xFEA
  4123                           fsr0l	equ	0xFE9
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           plusw2	equ	0xFDB
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function ___lwmod *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  dividend        2   46[BANK0 ] unsigned int 
  4140 ;;  divisor         2   48[BANK0 ] unsigned int 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  counter         1   50[BANK0 ] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  2   46[BANK0 ] unsigned int 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4152 ;;      Params:         0       4       0       0       0       0       0       0       0
  4153 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4155 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        5 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:   12
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_printf
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text18
  4167  001D8E                     __ptext18:
  4168                           	opt stack 0
  4169  001D8E                     ___lwmod:
  4170                           	opt stack 15
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;incstack = 0
  4174  001D8E  0100               	movlb	0	; () banked
  4175  001D90  5190               	movf	___lwmod@divisor& (0+255),w,b
  4176  001D92  0100               	movlb	0	; () banked
  4177  001D94  1191               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4178  001D96  B4D8               	btfsc	status,2,c
  4179  001D98  D026               	goto	l959
  4180                           
  4181                           ; BSR set to: 0
  4182  001D9A  0E01               	movlw	1
  4183  001D9C  0100               	movlb	0	; () banked
  4184  001D9E  6F92               	movwf	___lwmod@counter& (0+255),b
  4185  001DA0  D006               	goto	l2210
  4186  001DA2                     l2208:
  4187                           
  4188                           ; BSR set to: 0
  4189  001DA2  0100               	movlb	0	; () banked
  4190  001DA4  90D8               	bcf	status,0,c
  4191  001DA6  3790               	rlcf	___lwmod@divisor& (0+255),f,b
  4192  001DA8  3791               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4193  001DAA  0100               	movlb	0	; () banked
  4194  001DAC  2B92               	incf	___lwmod@counter& (0+255),f,b
  4195  001DAE                     l2210:
  4196                           
  4197                           ; BSR set to: 0
  4198  001DAE  0100               	movlb	0	; () banked
  4199  001DB0  AF91               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4200  001DB2  D7F7               	goto	l2208
  4201  001DB4                     l2212:
  4202                           
  4203                           ; BSR set to: 0
  4204  001DB4  0100               	movlb	0	; () banked
  4205  001DB6  5190               	movf	___lwmod@divisor& (0+255),w,b
  4206  001DB8  0100               	movlb	0	; () banked
  4207  001DBA  5D8E               	subwf	___lwmod@dividend& (0+255),w,b
  4208  001DBC  0100               	movlb	0	; () banked
  4209  001DBE  5191               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4210  001DC0  0100               	movlb	0	; () banked
  4211  001DC2  598F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4212  001DC4  A0D8               	btfss	status,0,c
  4213  001DC6  D008               	goto	l2216
  4214                           
  4215                           ; BSR set to: 0
  4216  001DC8  0100               	movlb	0	; () banked
  4217  001DCA  5190               	movf	___lwmod@divisor& (0+255),w,b
  4218  001DCC  0100               	movlb	0	; () banked
  4219  001DCE  5F8E               	subwf	___lwmod@dividend& (0+255),f,b
  4220  001DD0  0100               	movlb	0	; () banked
  4221  001DD2  5191               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4222  001DD4  0100               	movlb	0	; () banked
  4223  001DD6  5B8F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4224  001DD8                     l2216:
  4225                           
  4226                           ; BSR set to: 0
  4227  001DD8  0100               	movlb	0	; () banked
  4228  001DDA  90D8               	bcf	status,0,c
  4229  001DDC  3391               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4230  001DDE  3390               	rrcf	___lwmod@divisor& (0+255),f,b
  4231                           
  4232                           ; BSR set to: 0
  4233  001DE0  0100               	movlb	0	; () banked
  4234  001DE2  2F92               	decfsz	___lwmod@counter& (0+255),f,b
  4235  001DE4  D7E7               	goto	l2212
  4236  001DE6                     l959:
  4237                           
  4238                           ; BSR set to: 0
  4239  001DE6  C08E  F08E         	movff	___lwmod@dividend,?___lwmod
  4240  001DEA  C08F  F08F         	movff	___lwmod@dividend+1,?___lwmod+1
  4241                           
  4242                           ; BSR set to: 0
  4243  001DEE  0012               	return		;funcret
  4244  001DF0                     __end_of___lwmod:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           intcon2	equ	0xFF1
  4254                           postinc0	equ	0xFEE
  4255                           plusw0	equ	0xFEB
  4256                           fsr0h	equ	0xFEA
  4257                           fsr0l	equ	0xFE9
  4258                           wreg	equ	0xFE8
  4259                           postdec1	equ	0xFE5
  4260                           fsr1l	equ	0xFE1
  4261                           indf2	equ	0xFDF
  4262                           postinc2	equ	0xFDE
  4263                           postdec2	equ	0xFDD
  4264                           plusw2	equ	0xFDB
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function ___lwdiv *****************
  4270 ;; Defined at:
  4271 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  dividend        2   39[BANK0 ] unsigned int 
  4274 ;;  divisor         2   41[BANK0 ] unsigned int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  quotient        2   43[BANK0 ] unsigned int 
  4277 ;;  counter         1   45[BANK0 ] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  2   39[BANK0 ] unsigned int 
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4287 ;;      Params:         0       4       0       0       0       0       0       0       0
  4288 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4290 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4291 ;;Total ram usage:        7 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:   12
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_printf
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text19
  4302  001B6E                     __ptext19:
  4303                           	opt stack 0
  4304  001B6E                     ___lwdiv:
  4305                           	opt stack 15
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;incstack = 0
  4309  001B6E  0E00               	movlw	0
  4310  001B70  0100               	movlb	0	; () banked
  4311  001B72  6F8C               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4312  001B74  0E00               	movlw	0
  4313  001B76  6F8B               	movwf	___lwdiv@quotient& (0+255),b
  4314                           
  4315                           ; BSR set to: 0
  4316  001B78  0100               	movlb	0	; () banked
  4317  001B7A  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4318  001B7C  0100               	movlb	0	; () banked
  4319  001B7E  118A               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4320  001B80  B4D8               	btfsc	status,2,c
  4321  001B82  D02C               	goto	l949
  4322                           
  4323                           ; BSR set to: 0
  4324  001B84  0E01               	movlw	1
  4325  001B86  0100               	movlb	0	; () banked
  4326  001B88  6F8D               	movwf	___lwdiv@counter& (0+255),b
  4327  001B8A  D006               	goto	l2190
  4328  001B8C                     l2188:
  4329                           
  4330                           ; BSR set to: 0
  4331  001B8C  0100               	movlb	0	; () banked
  4332  001B8E  90D8               	bcf	status,0,c
  4333  001B90  3789               	rlcf	___lwdiv@divisor& (0+255),f,b
  4334  001B92  378A               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4335  001B94  0100               	movlb	0	; () banked
  4336  001B96  2B8D               	incf	___lwdiv@counter& (0+255),f,b
  4337  001B98                     l2190:
  4338                           
  4339                           ; BSR set to: 0
  4340  001B98  0100               	movlb	0	; () banked
  4341  001B9A  AF8A               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4342  001B9C  D7F7               	goto	l2188
  4343  001B9E                     l2192:
  4344                           
  4345                           ; BSR set to: 0
  4346  001B9E  0100               	movlb	0	; () banked
  4347  001BA0  90D8               	bcf	status,0,c
  4348  001BA2  378B               	rlcf	___lwdiv@quotient& (0+255),f,b
  4349  001BA4  378C               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4350                           
  4351                           ; BSR set to: 0
  4352  001BA6  0100               	movlb	0	; () banked
  4353  001BA8  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4354  001BAA  0100               	movlb	0	; () banked
  4355  001BAC  5D87               	subwf	___lwdiv@dividend& (0+255),w,b
  4356  001BAE  0100               	movlb	0	; () banked
  4357  001BB0  518A               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4358  001BB2  0100               	movlb	0	; () banked
  4359  001BB4  5988               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4360  001BB6  A0D8               	btfss	status,0,c
  4361  001BB8  D00A               	goto	l2200
  4362                           
  4363                           ; BSR set to: 0
  4364  001BBA  0100               	movlb	0	; () banked
  4365  001BBC  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4366  001BBE  0100               	movlb	0	; () banked
  4367  001BC0  5F87               	subwf	___lwdiv@dividend& (0+255),f,b
  4368  001BC2  0100               	movlb	0	; () banked
  4369  001BC4  518A               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4370  001BC6  0100               	movlb	0	; () banked
  4371  001BC8  5B88               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4372                           
  4373                           ; BSR set to: 0
  4374  001BCA  0100               	movlb	0	; () banked
  4375  001BCC  818B               	bsf	___lwdiv@quotient& (0+255),0,b
  4376  001BCE                     l2200:
  4377                           
  4378                           ; BSR set to: 0
  4379  001BCE  0100               	movlb	0	; () banked
  4380  001BD0  90D8               	bcf	status,0,c
  4381  001BD2  338A               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4382  001BD4  3389               	rrcf	___lwdiv@divisor& (0+255),f,b
  4383                           
  4384                           ; BSR set to: 0
  4385  001BD6  0100               	movlb	0	; () banked
  4386  001BD8  2F8D               	decfsz	___lwdiv@counter& (0+255),f,b
  4387  001BDA  D7E1               	goto	l2192
  4388  001BDC                     l949:
  4389                           
  4390                           ; BSR set to: 0
  4391  001BDC  C08B  F087         	movff	___lwdiv@quotient,?___lwdiv
  4392  001BE0  C08C  F088         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4393                           
  4394                           ; BSR set to: 0
  4395  001BE4  0012               	return		;funcret
  4396  001BE6                     __end_of___lwdiv:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           postinc0	equ	0xFEE
  4407                           plusw0	equ	0xFEB
  4408                           fsr0h	equ	0xFEA
  4409                           fsr0l	equ	0xFE9
  4410                           wreg	equ	0xFE8
  4411                           postdec1	equ	0xFE5
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           plusw2	equ	0xFDB
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _D_PWM_Strobe *****************
  4422 ;; Defined at:
  4423 ;;		line 372 in file "Drivers/PWM_Driver.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4440 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4441 ;;Total ram usage:        0 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:   12
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		_handle_message
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text20
  4452  00220A                     __ptext20:
  4453                           	opt stack 0
  4454  00220A                     _D_PWM_Strobe:
  4455                           	opt stack 17
  4456                           
  4457                           ;PWM_Driver.c: 373: state = Strobe;
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;incstack = 0
  4461  00220A  0E02               	movlw	2
  4462  00220C  6E2D               	movwf	_state,c
  4463  00220E  0012               	return		;funcret
  4464  002210                     __end_of_D_PWM_Strobe:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           intcon2	equ	0xFF1
  4474                           postinc0	equ	0xFEE
  4475                           plusw0	equ	0xFEB
  4476                           fsr0h	equ	0xFEA
  4477                           fsr0l	equ	0xFE9
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           plusw2	equ	0xFDB
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _D_PWM_Smooth *****************
  4490 ;; Defined at:
  4491 ;;		line 380 in file "Drivers/PWM_Driver.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      void 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4509 ;;Total ram usage:        0 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:   12
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_handle_message
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text21
  4520  002210                     __ptext21:
  4521                           	opt stack 0
  4522  002210                     _D_PWM_Smooth:
  4523                           	opt stack 17
  4524                           
  4525                           ;PWM_Driver.c: 381: state = Smooth;
  4526                           
  4527                           ;incstack = 0
  4528  002210  0E04               	movlw	4
  4529  002212  6E2D               	movwf	_state,c
  4530  002214  0012               	return		;funcret
  4531  002216                     __end_of_D_PWM_Smooth:
  4532                           	opt stack 0
  4533                           tblptru	equ	0xFF8
  4534                           tblptrh	equ	0xFF7
  4535                           tblptrl	equ	0xFF6
  4536                           tablat	equ	0xFF5
  4537                           prodh	equ	0xFF4
  4538                           prodl	equ	0xFF3
  4539                           intcon	equ	0xFF2
  4540                           intcon2	equ	0xFF1
  4541                           postinc0	equ	0xFEE
  4542                           plusw0	equ	0xFEB
  4543                           fsr0h	equ	0xFEA
  4544                           fsr0l	equ	0xFE9
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1l	equ	0xFE1
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           plusw2	equ	0xFDB
  4552                           fsr2h	equ	0xFDA
  4553                           fsr2l	equ	0xFD9
  4554                           status	equ	0xFD8
  4555                           
  4556 ;; *************** function _D_PWM_SetRGB *****************
  4557 ;; Defined at:
  4558 ;;		line 331 in file "Drivers/PWM_Driver.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  r               1    wreg     unsigned char 
  4561 ;;  g               1   44[BANK0 ] unsigned char 
  4562 ;;  b               1   45[BANK0 ] unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  r               1   46[BANK0 ] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4574 ;;      Params:         0       2       0       0       0       0       0       0       0
  4575 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4577 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4578 ;;Total ram usage:        3 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:   14
  4581 ;; This function calls:
  4582 ;;		_setRGB
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;;		_handle_message
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text22
  4590  002186                     __ptext22:
  4591                           	opt stack 0
  4592  002186                     _D_PWM_SetRGB:
  4593                           	opt stack 15
  4594                           
  4595                           ;incstack = 0
  4596                           ;D_PWM_SetRGB@r stored from wreg
  4597  002186  0100               	movlb	0	; () banked
  4598  002188  6F8E               	movwf	D_PWM_SetRGB@r& (0+255),b
  4599                           
  4600                           ;PWM_Driver.c: 332: setRGB(r, g, b);
  4601  00218A  C08C  F089         	movff	D_PWM_SetRGB@g,setRGB@g
  4602  00218E  C08D  F08A         	movff	D_PWM_SetRGB@b,setRGB@b
  4603  002192  0100               	movlb	0	; () banked
  4604  002194  518E               	movf	D_PWM_SetRGB@r& (0+255),w,b
  4605  002196  EC70  F010         	call	_setRGB
  4606                           
  4607                           ;PWM_Driver.c: 333: state = Color;
  4608  00219A  0E00               	movlw	0
  4609  00219C  6E2D               	movwf	_state,c
  4610  00219E  0012               	return		;funcret
  4611  0021A0                     __end_of_D_PWM_SetRGB:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon2	equ	0xFF1
  4621                           postinc0	equ	0xFEE
  4622                           plusw0	equ	0xFEB
  4623                           fsr0h	equ	0xFEA
  4624                           fsr0l	equ	0xFE9
  4625                           wreg	equ	0xFE8
  4626                           postdec1	equ	0xFE5
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _setRGB *****************
  4637 ;; Defined at:
  4638 ;;		line 43 in file "Drivers/PWM_Driver.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  r               1    wreg     unsigned char 
  4641 ;;  g               1   41[BANK0 ] unsigned char 
  4642 ;;  b               1   42[BANK0 ] unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  r               1   43[BANK0 ] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4654 ;;      Params:         0       2       0       0       0       0       0       0       0
  4655 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4657 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4658 ;;Total ram usage:        3 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:   13
  4661 ;; This function calls:
  4662 ;;		_D_PWM_SetDuty
  4663 ;; This function is called by:
  4664 ;;		_D_PWM_SetRGB
  4665 ;;		_strobe
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text23
  4670  0020E0                     __ptext23:
  4671                           	opt stack 0
  4672  0020E0                     _setRGB:
  4673                           	opt stack 15
  4674                           
  4675                           ;incstack = 0
  4676                           ;setRGB@r stored from wreg
  4677  0020E0  0100               	movlb	0	; () banked
  4678  0020E2  6F8B               	movwf	setRGB@r& (0+255),b
  4679                           
  4680                           ;PWM_Driver.c: 44: D_PWM_SetDuty(0, r);
  4681  0020E4  C08B  F087         	movff	setRGB@r,D_PWM_SetDuty@duty
  4682  0020E8  0E00               	movlw	0
  4683  0020EA  EC1A  F010         	call	_D_PWM_SetDuty
  4684                           
  4685                           ;PWM_Driver.c: 45: D_PWM_SetDuty(1, g);
  4686  0020EE  C089  F087         	movff	setRGB@g,D_PWM_SetDuty@duty
  4687  0020F2  0E01               	movlw	1
  4688  0020F4  EC1A  F010         	call	_D_PWM_SetDuty
  4689                           
  4690                           ;PWM_Driver.c: 46: D_PWM_SetDuty(2, b);
  4691  0020F8  C08A  F087         	movff	setRGB@b,D_PWM_SetDuty@duty
  4692  0020FC  0E02               	movlw	2
  4693  0020FE  EC1A  F010         	call	_D_PWM_SetDuty
  4694  002102  0012               	return		;funcret
  4695  002104                     __end_of_setRGB:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           intcon	equ	0xFF2
  4704                           intcon2	equ	0xFF1
  4705                           postinc0	equ	0xFEE
  4706                           plusw0	equ	0xFEB
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _D_PWM_SetDuty *****************
  4721 ;; Defined at:
  4722 ;;		line 315 in file "Drivers/PWM_Driver.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  which           1    wreg     unsigned char 
  4725 ;;  duty            1   39[BANK0 ] unsigned char 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  which           1   40[BANK0 ] unsigned char 
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4737 ;;      Params:         0       1       0       0       0       0       0       0       0
  4738 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4740 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4741 ;;Total ram usage:        2 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:   12
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_setRGB
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text24
  4752  002034                     __ptext24:
  4753                           	opt stack 0
  4754  002034                     _D_PWM_SetDuty:
  4755                           	opt stack 15
  4756                           
  4757                           ;incstack = 0
  4758                           ;D_PWM_SetDuty@which stored from wreg
  4759  002034  0100               	movlb	0	; () banked
  4760  002036  6F88               	movwf	D_PWM_SetDuty@which& (0+255),b
  4761                           
  4762                           ;PWM_Driver.c: 316: switch(which) {
  4763  002038  D009               	goto	l2180
  4764  00203A                     l351:
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;PWM_Driver.c: 318: PWM_Red.duty_val = duty;
  4768  00203A  C087  F0CD         	movff	D_PWM_SetDuty@duty,_PWM_Red+1
  4769                           
  4770                           ;PWM_Driver.c: 319: break;
  4771  00203E  0012               	return	
  4772  002040                     l353:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;PWM_Driver.c: 322: PWM_Green.duty_val = duty;
  4776  002040  C087  F0CB         	movff	D_PWM_SetDuty@duty,_PWM_Green+1
  4777                           
  4778                           ;PWM_Driver.c: 323: break;
  4779  002044  0012               	return	
  4780  002046                     l354:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;PWM_Driver.c: 326: PWM_Blue.duty_val = duty;
  4784  002046  C087  F0C9         	movff	D_PWM_SetDuty@duty,_PWM_Blue+1
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;PWM_Driver.c: 328: }
  4788                           
  4789                           ;PWM_Driver.c: 327: break;
  4790  00204A  0012               	return	
  4791  00204C                     l2180:
  4792  00204C  0100               	movlb	0	; () banked
  4793  00204E  5188               	movf	D_PWM_SetDuty@which& (0+255),w,b
  4794                           
  4795                           ; Switch size 1, requested type "space"
  4796                           ; Number of cases is 3, Range of values is 0 to 2
  4797                           ; switch strategies available:
  4798                           ; Name         Instructions Cycles
  4799                           ; simple_byte           10     6 (average)
  4800                           ;	Chosen strategy is simple_byte
  4801  002050  0A00               	xorlw	0	; case 0
  4802  002052  B4D8               	btfsc	status,2,c
  4803  002054  D7F2               	goto	l351
  4804  002056  0A01               	xorlw	1	; case 1
  4805  002058  B4D8               	btfsc	status,2,c
  4806  00205A  D7F2               	goto	l353
  4807  00205C  0A03               	xorlw	3	; case 2
  4808  00205E  A4D8               	btfss	status,2,c
  4809  002060  0012               	return	
  4810  002062  D7F1               	goto	l354
  4811  002064                     __end_of_D_PWM_SetDuty:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           plusw0	equ	0xFEB
  4823                           fsr0h	equ	0xFEA
  4824                           fsr0l	equ	0xFE9
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           plusw2	equ	0xFDB
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _D_PWM_ScaleUp *****************
  4837 ;; Defined at:
  4838 ;;		line 354 in file "Drivers/PWM_Driver.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:   12
  4859 ;; This function calls:
  4860 ;;		Nothing
  4861 ;; This function is called by:
  4862 ;;		_handle_message
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text25
  4867  0021EC                     __ptext25:
  4868                           	opt stack 0
  4869  0021EC                     _D_PWM_ScaleUp:
  4870                           	opt stack 17
  4871                           
  4872                           ;PWM_Driver.c: 355: if (scale < 7) {
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  0021EC  0E07               	movlw	7
  4877  0021EE  602C               	cpfslt	_scale,c
  4878  0021F0  0012               	return	
  4879                           
  4880                           ;PWM_Driver.c: 356: scale++;
  4881  0021F2  2A2C               	incf	_scale,f,c
  4882  0021F4  0012               	return	
  4883  0021F6                     __end_of_D_PWM_ScaleUp:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           plusw0	equ	0xFEB
  4895                           fsr0h	equ	0xFEA
  4896                           fsr0l	equ	0xFE9
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           plusw2	equ	0xFDB
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _D_PWM_ScaleDown *****************
  4909 ;; Defined at:
  4910 ;;		line 348 in file "Drivers/PWM_Driver.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:   12
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_handle_message
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text26
  4939  0021F6                     __ptext26:
  4940                           	opt stack 0
  4941  0021F6                     _D_PWM_ScaleDown:
  4942                           	opt stack 17
  4943                           
  4944                           ;PWM_Driver.c: 349: if (scale > 0) {
  4945                           
  4946                           ;incstack = 0
  4947  0021F6  502C               	movf	_scale,w,c
  4948  0021F8  B4D8               	btfsc	status,2,c
  4949  0021FA  0012               	return	
  4950                           
  4951                           ;PWM_Driver.c: 350: scale--;
  4952  0021FC  062C               	decf	_scale,f,c
  4953  0021FE  0012               	return	
  4954  002200                     __end_of_D_PWM_ScaleDown:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           intcon2	equ	0xFF1
  4964                           postinc0	equ	0xFEE
  4965                           plusw0	equ	0xFEB
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           plusw2	equ	0xFDB
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _D_PWM_GetState *****************
  4980 ;; Defined at:
  4981 ;;		line 364 in file "Drivers/PWM_Driver.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      unsigned char 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4995 ;;      Params:         0       0       0       0       0       0       0       0       0
  4996 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4998 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4999 ;;Total ram usage:        0 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:   12
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_handle_message
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text27
  5010  00223A                     __ptext27:
  5011                           	opt stack 0
  5012  00223A                     _D_PWM_GetState:
  5013                           	opt stack 17
  5014                           
  5015                           ;PWM_Driver.c: 365: return state;
  5016                           
  5017                           ;incstack = 0
  5018  00223A  502D               	movf	_state,w,c
  5019  00223C  0012               	return	
  5020  00223E                     __end_of_D_PWM_GetState:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           intcon2	equ	0xFF1
  5030                           postinc0	equ	0xFEE
  5031                           plusw0	equ	0xFEB
  5032                           fsr0h	equ	0xFEA
  5033                           fsr0l	equ	0xFE9
  5034                           wreg	equ	0xFE8
  5035                           postdec1	equ	0xFE5
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           plusw2	equ	0xFDB
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function _D_PWM_GetScale *****************
  5046 ;; Defined at:
  5047 ;;		line 360 in file "Drivers/PWM_Driver.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:   12
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_handle_message
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text28
  5076  00223E                     __ptext28:
  5077                           	opt stack 0
  5078  00223E                     _D_PWM_GetScale:
  5079                           	opt stack 17
  5080                           
  5081                           ;PWM_Driver.c: 361: return scale;
  5082                           
  5083                           ;incstack = 0
  5084  00223E  502C               	movf	_scale,w,c
  5085  002240  0012               	return	
  5086  002242                     __end_of_D_PWM_GetScale:
  5087                           	opt stack 0
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           intcon	equ	0xFF2
  5095                           intcon2	equ	0xFF1
  5096                           postinc0	equ	0xFEE
  5097                           plusw0	equ	0xFEB
  5098                           fsr0h	equ	0xFEA
  5099                           fsr0l	equ	0xFE9
  5100                           wreg	equ	0xFE8
  5101                           postdec1	equ	0xFE5
  5102                           fsr1l	equ	0xFE1
  5103                           indf2	equ	0xFDF
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           plusw2	equ	0xFDB
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111 ;; *************** function _D_PWM_GetRed *****************
  5112 ;; Defined at:
  5113 ;;		line 336 in file "Drivers/PWM_Driver.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;		None
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      unsigned char 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5127 ;;      Params:         0       0       0       0       0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5130 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5131 ;;Total ram usage:        0 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:   12
  5134 ;; This function calls:
  5135 ;;		Nothing
  5136 ;; This function is called by:
  5137 ;;		_handle_message
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text29
  5142  002216                     __ptext29:
  5143                           	opt stack 0
  5144  002216                     _D_PWM_GetRed:
  5145                           	opt stack 17
  5146                           
  5147                           ;PWM_Driver.c: 337: return PWM_Red.duty_val;
  5148                           
  5149                           ;incstack = 0
  5150  002216  0100               	movlb	0	; () banked
  5151  002218  51CD               	movf	(_PWM_Red+1)& (0+255),w,b
  5152  00221A  0012               	return	
  5153  00221C                     __end_of_D_PWM_GetRed:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           postinc0	equ	0xFEE
  5164                           plusw0	equ	0xFEB
  5165                           fsr0h	equ	0xFEA
  5166                           fsr0l	equ	0xFE9
  5167                           wreg	equ	0xFE8
  5168                           postdec1	equ	0xFE5
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           plusw2	equ	0xFDB
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _D_PWM_GetGreen *****************
  5179 ;; Defined at:
  5180 ;;		line 340 in file "Drivers/PWM_Driver.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      unsigned char 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5194 ;;      Params:         0       0       0       0       0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5197 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5198 ;;Total ram usage:        0 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:   12
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_handle_message
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text30
  5209  00221C                     __ptext30:
  5210                           	opt stack 0
  5211  00221C                     _D_PWM_GetGreen:
  5212                           	opt stack 17
  5213                           
  5214                           ;PWM_Driver.c: 341: return PWM_Green.duty_val;
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;incstack = 0
  5218  00221C  0100               	movlb	0	; () banked
  5219  00221E  51CB               	movf	(_PWM_Green+1)& (0+255),w,b
  5220  002220  0012               	return	
  5221  002222                     __end_of_D_PWM_GetGreen:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           intcon2	equ	0xFF1
  5231                           postinc0	equ	0xFEE
  5232                           plusw0	equ	0xFEB
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           postdec1	equ	0xFE5
  5237                           fsr1l	equ	0xFE1
  5238                           indf2	equ	0xFDF
  5239                           postinc2	equ	0xFDE
  5240                           postdec2	equ	0xFDD
  5241                           plusw2	equ	0xFDB
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _D_PWM_GetBlue *****************
  5247 ;; Defined at:
  5248 ;;		line 344 in file "Drivers/PWM_Driver.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      unsigned char 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5265 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5266 ;;Total ram usage:        0 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:   12
  5269 ;; This function calls:
  5270 ;;		Nothing
  5271 ;; This function is called by:
  5272 ;;		_handle_message
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text31
  5277  002222                     __ptext31:
  5278                           	opt stack 0
  5279  002222                     _D_PWM_GetBlue:
  5280                           	opt stack 17
  5281                           
  5282                           ;PWM_Driver.c: 345: return PWM_Blue.duty_val;
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;incstack = 0
  5286  002222  0100               	movlb	0	; () banked
  5287  002224  51C9               	movf	(_PWM_Blue+1)& (0+255),w,b
  5288  002226  0012               	return	
  5289  002228                     __end_of_D_PWM_GetBlue:
  5290                           	opt stack 0
  5291                           tblptru	equ	0xFF8
  5292                           tblptrh	equ	0xFF7
  5293                           tblptrl	equ	0xFF6
  5294                           tablat	equ	0xFF5
  5295                           prodh	equ	0xFF4
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           postinc0	equ	0xFEE
  5300                           plusw0	equ	0xFEB
  5301                           fsr0h	equ	0xFEA
  5302                           fsr0l	equ	0xFE9
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           plusw2	equ	0xFDB
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _D_PWM_Flash *****************
  5315 ;; Defined at:
  5316 ;;		line 368 in file "Drivers/PWM_Driver.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:   12
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_handle_message
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text32
  5345  002228                     __ptext32:
  5346                           	opt stack 0
  5347  002228                     _D_PWM_Flash:
  5348                           	opt stack 17
  5349                           
  5350                           ;PWM_Driver.c: 369: state = Flash;
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;incstack = 0
  5354  002228  0E01               	movlw	1
  5355  00222A  6E2D               	movwf	_state,c
  5356  00222C  0012               	return		;funcret
  5357  00222E                     __end_of_D_PWM_Flash:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           intcon2	equ	0xFF1
  5367                           postinc0	equ	0xFEE
  5368                           plusw0	equ	0xFEB
  5369                           fsr0h	equ	0xFEA
  5370                           fsr0l	equ	0xFE9
  5371                           wreg	equ	0xFE8
  5372                           postdec1	equ	0xFE5
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           postinc2	equ	0xFDE
  5376                           postdec2	equ	0xFDD
  5377                           plusw2	equ	0xFDB
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function _D_PWM_Fade *****************
  5383 ;; Defined at:
  5384 ;;		line 376 in file "Drivers/PWM_Driver.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0
  5399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5401 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:   12
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_handle_message
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text33
  5413  00222E                     __ptext33:
  5414                           	opt stack 0
  5415  00222E                     _D_PWM_Fade:
  5416                           	opt stack 17
  5417                           
  5418                           ;PWM_Driver.c: 377: state = Fade;
  5419                           
  5420                           ;incstack = 0
  5421  00222E  0E03               	movlw	3
  5422  002230  6E2D               	movwf	_state,c
  5423  002232  0012               	return		;funcret
  5424  002234                     __end_of_D_PWM_Fade:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           plusw0	equ	0xFEB
  5436                           fsr0h	equ	0xFEA
  5437                           fsr0l	equ	0xFE9
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _D_UART_ReadBlock *****************
  5450 ;; Defined at:
  5451 ;;		line 307 in file "Drivers/UART_Driver.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  cnt             1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  cnt             1   46[BANK0 ] unsigned char 
  5456 ;;  cm             17   47[BANK0 ] struct .
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  6   39[BANK0 ] struct .
  5459 ;; Registers used:
  5460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5466 ;;      Params:         0       7       0       0       0       0       0       0       0
  5467 ;;      Locals:         0      18       0       0       0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5469 ;;      Totals:         0      25       0       0       0       0       0       0       0
  5470 ;;Total ram usage:       25 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   12
  5473 ;; This function calls:
  5474 ;;		Nothing
  5475 ;; This function is called by:
  5476 ;;		_main
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text34
  5481  001E4E                     __ptext34:
  5482                           	opt stack 0
  5483  001E4E                     _D_UART_ReadBlock:
  5484                           	opt stack 18
  5485                           
  5486                           ;incstack = 0
  5487                           ;D_UART_ReadBlock@cnt stored from wreg
  5488  001E4E  0100               	movlb	0	; () banked
  5489  001E50  6F8E               	movwf	D_UART_ReadBlock@cnt& (0+255),b
  5490                           
  5491                           ;UART_Driver.c: 308: READ_ComMes cm = readBuffer.comMes[cnt];
  5492  001E52  0100               	movlb	0	; () banked
  5493  001E54  518E               	movf	D_UART_ReadBlock@cnt& (0+255),w,b
  5494  001E56  0D11               	mullw	17
  5495  001E58  0E0A               	movlw	low (_readBuffer+10)
  5496  001E5A  24F3               	addwf	prodl,w,c
  5497  001E5C  6ED9               	movwf	fsr2l,c
  5498  001E5E  0E01               	movlw	high (_readBuffer+10)
  5499  001E60  20F4               	addwfc	prodh,w,c
  5500  001E62  6EDA               	movwf	fsr2h,c
  5501  001E64  EE10  F08F         	lfsr	1,D_UART_ReadBlock@cm
  5502  001E68  0E10               	movlw	16
  5503  001E6A                     u2311:
  5504  001E6A  CFDB FFE3          	movff	plusw2,plusw1
  5505  001E6E  06E8               	decf	wreg,f,c
  5506  001E70  E2FC               	bc	u2311
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;UART_Driver.c: 309: readData.sender = readBuffer.sender;
  5510  001E72  0E04               	movlw	low (_readBuffer+4)
  5511  001E74  0100               	movlb	0	; () banked
  5512  001E76  6FC2               	movwf	_readData& (0+255),b
  5513  001E78  0E01               	movlw	high (_readBuffer+4)
  5514  001E7A  0100               	movlb	0	; () banked
  5515  001E7C  6FC3               	movwf	(_readData+1)& (0+255),b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;UART_Driver.c: 310: readData.command = cm.command;
  5519  001E7E  0E8F               	movlw	low D_UART_ReadBlock@cm
  5520  001E80  0100               	movlb	0	; () banked
  5521  001E82  6FC4               	movwf	(_readData+2)& (0+255),b
  5522  001E84  0E00               	movlw	high D_UART_ReadBlock@cm
  5523  001E86  0100               	movlb	0	; () banked
  5524  001E88  6FC5               	movwf	(_readData+3)& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;UART_Driver.c: 311: readData.message = cm.message;
  5528  001E8A  0E95               	movlw	low (D_UART_ReadBlock@cm+6)
  5529  001E8C  0100               	movlb	0	; () banked
  5530  001E8E  6FC6               	movwf	(_readData+4)& (0+255),b
  5531  001E90  0E00               	movlw	high (D_UART_ReadBlock@cm+6)
  5532  001E92  0100               	movlb	0	; () banked
  5533  001E94  6FC7               	movwf	(_readData+5)& (0+255),b
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;UART_Driver.c: 312: return readData;
  5537  001E96  EE20  F0C2         	lfsr	2,_readData
  5538  001E9A  EE00  F087         	lfsr	0,?_D_UART_ReadBlock
  5539  001E9E  0E05               	movlw	5
  5540  001EA0                     u2321:
  5541  001EA0  CFDB FFEB          	movff	plusw2,plusw0
  5542  001EA4  06E8               	decf	wreg,f,c
  5543  001EA6  E2FC               	bc	u2321
  5544  001EA8  0012               	return	
  5545  001EAA                     __end_of_D_UART_ReadBlock:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           postinc0	equ	0xFEE
  5556                           plusw0	equ	0xFEB
  5557                           fsr0h	equ	0xFEA
  5558                           fsr0l	equ	0xFE9
  5559                           wreg	equ	0xFE8
  5560                           postdec1	equ	0xFE5
  5561                           plusw1	equ	0xFE3
  5562                           fsr1l	equ	0xFE1
  5563                           indf2	equ	0xFDF
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           plusw2	equ	0xFDB
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _D_UART_Read *****************
  5572 ;; Defined at:
  5573 ;;		line 299 in file "Drivers/UART_Driver.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  cm             17   45[BANK0 ] struct .
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  6   39[BANK0 ] struct .
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5587 ;;      Params:         0       6       0       0       0       0       0       0       0
  5588 ;;      Locals:         0      17       0       0       0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5590 ;;      Totals:         0      23       0       0       0       0       0       0       0
  5591 ;;Total ram usage:       23 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:   12
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text35
  5602  001FB0                     __ptext35:
  5603                           	opt stack 0
  5604  001FB0                     _D_UART_Read:
  5605                           	opt stack 18
  5606                           
  5607                           ;UART_Driver.c: 300: READ_ComMes cm = readBuffer.comMes[0];
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  001FB0  EE21  F00A         	lfsr	2,_readBuffer+10
  5612  001FB4  EE10  F08D         	lfsr	1,D_UART_Read@cm
  5613  001FB8  0E10               	movlw	16
  5614  001FBA                     u2291:
  5615  001FBA  CFDB FFE3          	movff	plusw2,plusw1
  5616  001FBE  06E8               	decf	wreg,f,c
  5617  001FC0  E2FC               	bc	u2291
  5618                           
  5619                           ;UART_Driver.c: 301: readData.sender = readBuffer.sender;
  5620  001FC2  0E04               	movlw	low (_readBuffer+4)
  5621  001FC4  0100               	movlb	0	; () banked
  5622  001FC6  6FC2               	movwf	_readData& (0+255),b
  5623  001FC8  0E01               	movlw	high (_readBuffer+4)
  5624  001FCA  0100               	movlb	0	; () banked
  5625  001FCC  6FC3               	movwf	(_readData+1)& (0+255),b
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;UART_Driver.c: 302: readData.command = cm.command;
  5629  001FCE  0E8D               	movlw	low D_UART_Read@cm
  5630  001FD0  0100               	movlb	0	; () banked
  5631  001FD2  6FC4               	movwf	(_readData+2)& (0+255),b
  5632  001FD4  0E00               	movlw	high D_UART_Read@cm
  5633  001FD6  0100               	movlb	0	; () banked
  5634  001FD8  6FC5               	movwf	(_readData+3)& (0+255),b
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;UART_Driver.c: 303: readData.message = cm.message;
  5638  001FDA  0E93               	movlw	low (D_UART_Read@cm+6)
  5639  001FDC  0100               	movlb	0	; () banked
  5640  001FDE  6FC6               	movwf	(_readData+4)& (0+255),b
  5641  001FE0  0E00               	movlw	high (D_UART_Read@cm+6)
  5642  001FE2  0100               	movlb	0	; () banked
  5643  001FE4  6FC7               	movwf	(_readData+5)& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;UART_Driver.c: 304: return readData;
  5647  001FE6  EE20  F0C2         	lfsr	2,_readData
  5648  001FEA  EE00  F087         	lfsr	0,?_D_UART_Read
  5649  001FEE  0E05               	movlw	5
  5650  001FF0                     u2301:
  5651  001FF0  CFDB FFEB          	movff	plusw2,plusw0
  5652  001FF4  06E8               	decf	wreg,f,c
  5653  001FF6  E2FC               	bc	u2301
  5654  001FF8  0012               	return	
  5655  001FFA                     __end_of_D_UART_Read:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           intcon2	equ	0xFF1
  5665                           postinc0	equ	0xFEE
  5666                           plusw0	equ	0xFEB
  5667                           fsr0h	equ	0xFEA
  5668                           fsr0l	equ	0xFE9
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           plusw1	equ	0xFE3
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           plusw2	equ	0xFDB
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function _D_UART_BlockLength *****************
  5682 ;; Defined at:
  5683 ;;		line 315 in file "Drivers/UART_Driver.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      unsigned char 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5700 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:   12
  5704 ;; This function calls:
  5705 ;;		Nothing
  5706 ;; This function is called by:
  5707 ;;		_main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text36
  5712  002234                     __ptext36:
  5713                           	opt stack 0
  5714  002234                     _D_UART_BlockLength:
  5715                           	opt stack 18
  5716                           
  5717                           ;UART_Driver.c: 316: return readBuffer.blockLength;
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;incstack = 0
  5721  002234  0101               	movlb	1	; () banked
  5722  002236  5103               	movf	(_readBuffer+3)& (0+255),w,b
  5723  002238  0012               	return	
  5724  00223A                     __end_of_D_UART_BlockLength:
  5725                           	opt stack 0
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           intcon	equ	0xFF2
  5733                           intcon2	equ	0xFF1
  5734                           postinc0	equ	0xFEE
  5735                           plusw0	equ	0xFEB
  5736                           fsr0h	equ	0xFEA
  5737                           fsr0l	equ	0xFE9
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           plusw1	equ	0xFE3
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           plusw2	equ	0xFDB
  5746                           fsr2h	equ	0xFDA
  5747                           fsr2l	equ	0xFD9
  5748                           status	equ	0xFD8
  5749                           
  5750 ;; *************** function _LowISR *****************
  5751 ;; Defined at:
  5752 ;;		line 361 in file "Drivers/UART_Driver.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0
  5767 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5768 ;;      Temps:          0      17       0       0       0       0       0       0       0
  5769 ;;      Totals:         0      17       0       0       0       0       0       0       0
  5770 ;;Total ram usage:       17 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:   11
  5773 ;; This function calls:
  5774 ;;		_fillDataBuffer
  5775 ;;		_readByte
  5776 ;; This function is called by:
  5777 ;;		Interrupt level 1
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	intcodelo
  5782  000018                     __pintcodelo:
  5783                           	opt stack 0
  5784  000018                     _LowISR:
  5785                           	opt stack 13
  5786                           
  5787                           ; BSR set to: 1
  5788                           ;incstack = 0
  5789  000018  8045               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5790  00001A  CFD8 F076          	movff	status,??_LowISR
  5791  00001E  CFE8 F077          	movff	wreg,??_LowISR+1
  5792  000022  CFE0 F078          	movff	bsr,??_LowISR+2
  5793  000026  CFFA F079          	movff	pclath,??_LowISR+3
  5794  00002A  CFFB F07A          	movff	pclatu,??_LowISR+4
  5795  00002E  CFE9 F07B          	movff	fsr0l,??_LowISR+5
  5796  000032  CFEA F07C          	movff	fsr0h,??_LowISR+6
  5797  000036  CFE1 F07D          	movff	fsr1l,??_LowISR+7
  5798  00003A  CFE2 F07E          	movff	fsr1h,??_LowISR+8
  5799  00003E  CFD9 F07F          	movff	fsr2l,??_LowISR+9
  5800  000042  CFDA F080          	movff	fsr2h,??_LowISR+10
  5801  000046  CFF3 F081          	movff	prodl,??_LowISR+11
  5802  00004A  CFF4 F082          	movff	prodh,??_LowISR+12
  5803  00004E  CFF6 F083          	movff	tblptrl,??_LowISR+13
  5804  000052  CFF7 F084          	movff	tblptrh,??_LowISR+14
  5805  000056  CFF8 F085          	movff	tblptru,??_LowISR+15
  5806  00005A  CFF5 F086          	movff	tablat,??_LowISR+16
  5807                           
  5808                           ;UART_Driver.c: 362: if (PIR1bits.RC1IF) {
  5809  00005E  AA9E               	btfss	3998,5,c	;volatile
  5810  000060  D005               	goto	i1l197
  5811                           
  5812                           ;UART_Driver.c: 363: fillDataBuffer(readByte());
  5813  000062  EC48  F010         	call	_readByte	;wreg free
  5814  000066  ECC2  F005         	call	_fillDataBuffer
  5815                           
  5816                           ;UART_Driver.c: 364: PIR1bits.RC1IF = 0;
  5817  00006A  9A9E               	bcf	3998,5,c	;volatile
  5818  00006C                     i1l197:
  5819  00006C  C086  FFF5         	movff	??_LowISR+16,tablat
  5820  000070  C085  FFF8         	movff	??_LowISR+15,tblptru
  5821  000074  C084  FFF7         	movff	??_LowISR+14,tblptrh
  5822  000078  C083  FFF6         	movff	??_LowISR+13,tblptrl
  5823  00007C  C082  FFF4         	movff	??_LowISR+12,prodh
  5824  000080  C081  FFF3         	movff	??_LowISR+11,prodl
  5825  000084  C080  FFDA         	movff	??_LowISR+10,fsr2h
  5826  000088  C07F  FFD9         	movff	??_LowISR+9,fsr2l
  5827  00008C  C07E  FFE2         	movff	??_LowISR+8,fsr1h
  5828  000090  C07D  FFE1         	movff	??_LowISR+7,fsr1l
  5829  000094  C07C  FFEA         	movff	??_LowISR+6,fsr0h
  5830  000098  C07B  FFE9         	movff	??_LowISR+5,fsr0l
  5831  00009C  C07A  FFFB         	movff	??_LowISR+4,pclatu
  5832  0000A0  C079  FFFA         	movff	??_LowISR+3,pclath
  5833  0000A4  C078  FFE0         	movff	??_LowISR+2,bsr
  5834  0000A8  C077  FFE8         	movff	??_LowISR+1,wreg
  5835  0000AC  C076  FFD8         	movff	??_LowISR,status
  5836  0000B0  9045               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5837  0000B2  0010               	retfie	
  5838  0000B4                     __end_of_LowISR:
  5839                           	opt stack 0
  5840                           pclatu	equ	0xFFB
  5841                           pclath	equ	0xFFA
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon2	equ	0xFF1
  5850                           postinc0	equ	0xFEE
  5851                           plusw0	equ	0xFEB
  5852                           fsr0h	equ	0xFEA
  5853                           fsr0l	equ	0xFE9
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           plusw1	equ	0xFE3
  5857                           fsr1h	equ	0xFE2
  5858                           fsr1l	equ	0xFE1
  5859                           bsr	equ	0xFE0
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           plusw2	equ	0xFDB
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function _readByte *****************
  5869 ;; Defined at:
  5870 ;;		line 90 in file "Drivers/UART_Driver.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  dum             1   26[COMRAM] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      unsigned char 
  5877 ;; Registers used:
  5878 ;;		wreg, status,2, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5884 ;;      Params:         0       0       0       0       0       0       0       0       0
  5885 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5887 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5888 ;;Total ram usage:        1 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    6
  5891 ;; This function calls:
  5892 ;;		i1_D_UART_Enable
  5893 ;; This function is called by:
  5894 ;;		_LowISR
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text38
  5899  002090                     __ptext38:
  5900                           	opt stack 0
  5901  002090                     _readByte:
  5902                           	opt stack 17
  5903                           
  5904                           ;UART_Driver.c: 91: if(RCSTAbits.FERR == 1) {
  5905                           
  5906                           ;incstack = 0
  5907  002090  A4AB               	btfss	4011,2,c	;volatile
  5908  002092  D004               	goto	i1l113
  5909                           
  5910                           ;UART_Driver.c: 92: uint8_t dum = RCREG;
  5911  002094  CFAE F01B          	movff	4014,readByte@dum	;volatile
  5912                           
  5913                           ;UART_Driver.c: 93: return 0;
  5914  002098  0E00               	movlw	0
  5915  00209A  0012               	return	
  5916  00209C                     i1l113:
  5917                           
  5918                           ;UART_Driver.c: 94: }
  5919                           ;UART_Driver.c: 95: if(RCSTAbits.OERR == 1) {
  5920  00209C  A2AB               	btfss	4011,1,c	;volatile
  5921  00209E  D00B               	goto	i1l3286
  5922                           
  5923                           ;UART_Driver.c: 96: D_UART_Enable(0);
  5924  0020A0  0E00               	movlw	0
  5925  0020A2  ECA4  F010         	call	i1_D_UART_Enable
  5926                           
  5927                           ;UART_Driver.c: 97: _delay((unsigned long)((10)*(48000000/4000000.0)));
  5928  0020A6  0E28               	movlw	40
  5929  0020A8                     i1u304_27:
  5930  0020A8  2EE8               	decfsz	wreg,f,c
  5931  0020AA  D7FE               	bra	i1u304_27
  5932                           
  5933                           ;UART_Driver.c: 98: D_UART_Enable(1);
  5934  0020AC  0E01               	movlw	1
  5935  0020AE  ECA4  F010         	call	i1_D_UART_Enable
  5936                           
  5937                           ;UART_Driver.c: 99: return 0;
  5938  0020B2  0E00               	movlw	0
  5939  0020B4  0012               	return	
  5940  0020B6                     i1l3286:
  5941                           
  5942                           ;UART_Driver.c: 100: }
  5943                           ;UART_Driver.c: 101: return RCREG;
  5944  0020B6  50AE               	movf	4014,w,c	;volatile
  5945  0020B8  0012               	return	
  5946  0020BA                     __end_of_readByte:
  5947                           	opt stack 0
  5948                           pclatu	equ	0xFFB
  5949                           pclath	equ	0xFFA
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           intcon2	equ	0xFF1
  5958                           postinc0	equ	0xFEE
  5959                           plusw0	equ	0xFEB
  5960                           fsr0h	equ	0xFEA
  5961                           fsr0l	equ	0xFE9
  5962                           wreg	equ	0xFE8
  5963                           postdec1	equ	0xFE5
  5964                           plusw1	equ	0xFE3
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           bsr	equ	0xFE0
  5968                           indf2	equ	0xFDF
  5969                           postinc2	equ	0xFDE
  5970                           postdec2	equ	0xFDD
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _fillDataBuffer *****************
  5977 ;; Defined at:
  5978 ;;		line 107 in file "Drivers/UART_Driver.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  data            1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  data            1   21[BANK0 ] unsigned char 
  5983 ;;  i               1   20[BANK0 ] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5993 ;;      Params:         0       0       0       0       0       0       0       0       0
  5994 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5996 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5997 ;;Total ram usage:        2 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:   10
  6000 ;; This function calls:
  6001 ;;		_acknowledge
  6002 ;; This function is called by:
  6003 ;;		_LowISR
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text39
  6008  000B84                     __ptext39:
  6009                           	opt stack 0
  6010  000B84                     _fillDataBuffer:
  6011                           	opt stack 13
  6012                           
  6013                           ;incstack = 0
  6014                           ;fillDataBuffer@data stored from wreg
  6015  000B84  0100               	movlb	0	; () banked
  6016  000B86  6F75               	movwf	fillDataBuffer@data& (0+255),b
  6017                           
  6018                           ;UART_Driver.c: 108: switch(readBuffer.state) {
  6019  000B88  D14C               	goto	i1l3406
  6020  000B8A                     i1l3292:
  6021                           
  6022                           ;UART_Driver.c: 110: if(data == 0x26) {
  6023  000B8A  0E26               	movlw	38
  6024  000B8C  0100               	movlb	0	; () banked
  6025  000B8E  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6026  000B90  A4D8               	btfss	status,2,c
  6027  000B92  D01A               	goto	i1l3296
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;UART_Driver.c: 111: readBuffer.typeCnt = 0;
  6031  000B94  0E00               	movlw	0
  6032  000B96  0101               	movlb	1	; () banked
  6033  000B98  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6034                           
  6035                           ;UART_Driver.c: 112: readBuffer.blockLength = 0;
  6036  000B9A  0E00               	movlw	0
  6037  000B9C  0101               	movlb	1	; () banked
  6038  000B9E  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6039                           
  6040                           ;UART_Driver.c: 113: blockLength = 0;
  6041  000BA0  0E00               	movlw	0
  6042  000BA2  6E2A               	movwf	_blockLength,c
  6043                           
  6044                           ;UART_Driver.c: 114: readBuffer.senderCnt = 0;
  6045  000BA4  0E00               	movlw	0
  6046  000BA6  0101               	movlb	1	; () banked
  6047  000BA8  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6048                           
  6049                           ;UART_Driver.c: 115: bufferCnt = 0;
  6050  000BAA  0E00               	movlw	0
  6051  000BAC  6E2B               	movwf	_bufferCnt,c
  6052                           
  6053                           ;UART_Driver.c: 116: comMes.commandCnt = 0;
  6054  000BAE  0E00               	movlw	0
  6055  000BB0  0100               	movlb	0	; () banked
  6056  000BB2  6FB6               	movwf	(_comMes+5)& (0+255),b
  6057                           
  6058                           ;UART_Driver.c: 117: comMes.messageCnt = 0;
  6059  000BB4  0E00               	movlw	0
  6060  000BB6  0100               	movlb	0	; () banked
  6061  000BB8  6FC1               	movwf	(_comMes+16)& (0+255),b
  6062                           
  6063                           ;UART_Driver.c: 118: D_UART_ReadFlag = 0;
  6064  000BBA  0E00               	movlw	0
  6065  000BBC  0100               	movlb	0	; () banked
  6066  000BBE  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  6067                           
  6068                           ;UART_Driver.c: 119: readBuffer.state = 0x01;
  6069  000BC0  0E01               	movlw	1
  6070  000BC2  0101               	movlb	1	; () banked
  6071  000BC4  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6072                           
  6073                           ;UART_Driver.c: 120: } else {
  6074  000BC6  0012               	return	
  6075  000BC8                     i1l3296:
  6076                           
  6077                           ;UART_Driver.c: 121: readBuffer.state = 0x00;
  6078  000BC8  0E00               	movlw	0
  6079  000BCA  0101               	movlb	1	; () banked
  6080  000BCC  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6081                           
  6082                           ; BSR set to: 1
  6083                           ;UART_Driver.c: 123: }
  6084                           ;UART_Driver.c: 124: break;
  6085                           
  6086                           ; BSR set to: 1
  6087                           ;UART_Driver.c: 122: return;
  6088  000BCE  0012               	return	
  6089  000BD0                     i1l3300:
  6090                           
  6091                           ; BSR set to: 1
  6092                           ;UART_Driver.c: 127: if (data == 0x3A) {
  6093  000BD0  0E3A               	movlw	58
  6094  000BD2  0100               	movlb	0	; () banked
  6095  000BD4  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6096  000BD6  A4D8               	btfss	status,2,c
  6097  000BD8  D00F               	goto	i1l3306
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;UART_Driver.c: 128: readBuffer.state = 0x02;
  6101  000BDA  0E02               	movlw	2
  6102  000BDC  0101               	movlb	1	; () banked
  6103  000BDE  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6104                           
  6105                           ; BSR set to: 1
  6106                           ;UART_Driver.c: 129: readBuffer.type[readBuffer.typeCnt] = '\0';
  6107  000BE0  0101               	movlb	1	; () banked
  6108  000BE2  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6109  000BE4  0D01               	mullw	1
  6110  000BE6  0E00               	movlw	low _readBuffer
  6111  000BE8  24F3               	addwf	prodl,w,c
  6112  000BEA  6ED9               	movwf	fsr2l,c
  6113  000BEC  0E01               	movlw	high _readBuffer
  6114  000BEE  20F4               	addwfc	prodh,w,c
  6115  000BF0  6EDA               	movwf	fsr2h,c
  6116  000BF2  0E00               	movlw	0
  6117  000BF4  6EDF               	movwf	indf2,c
  6118                           
  6119                           ;UART_Driver.c: 130: } else {
  6120  000BF6  0012               	return	
  6121  000BF8                     i1l3306:
  6122                           
  6123                           ;UART_Driver.c: 131: readBuffer.type[readBuffer.typeCnt] = data;
  6124  000BF8  0101               	movlb	1	; () banked
  6125  000BFA  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6126  000BFC  0D01               	mullw	1
  6127  000BFE  0E00               	movlw	low _readBuffer
  6128  000C00  24F3               	addwf	prodl,w,c
  6129  000C02  6ED9               	movwf	fsr2l,c
  6130  000C04  0E01               	movlw	high _readBuffer
  6131  000C06  20F4               	addwfc	prodh,w,c
  6132  000C08  6EDA               	movwf	fsr2h,c
  6133  000C0A  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6134                           
  6135                           ; BSR set to: 1
  6136                           ;UART_Driver.c: 132: readBuffer.typeCnt++;
  6137  000C0E  0101               	movlb	1	; () banked
  6138  000C10  2B02               	incf	(_readBuffer+2)& (0+255),f,b
  6139                           
  6140                           ; BSR set to: 1
  6141                           ;UART_Driver.c: 133: if(readBuffer.typeCnt > 10) {
  6142  000C12  0E0A               	movlw	10
  6143  000C14  0101               	movlb	1	; () banked
  6144  000C16  6502               	cpfsgt	(_readBuffer+2)& (0+255),b
  6145  000C18  0012               	return	
  6146                           
  6147                           ; BSR set to: 1
  6148                           ;UART_Driver.c: 134: readBuffer.typeCnt = 0;
  6149  000C1A  0E00               	movlw	0
  6150  000C1C  0101               	movlb	1	; () banked
  6151  000C1E  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6152                           
  6153                           ; BSR set to: 1
  6154                           ;UART_Driver.c: 135: }
  6155                           ;UART_Driver.c: 136: }
  6156                           ;UART_Driver.c: 137: break;
  6157                           
  6158                           ; BSR set to: 1
  6159  000C20  0012               	return	
  6160  000C22                     i1l3314:
  6161                           
  6162                           ; BSR set to: 1
  6163                           ;UART_Driver.c: 140: if (data == 0x3A) {
  6164  000C22  0E3A               	movlw	58
  6165  000C24  0100               	movlb	0	; () banked
  6166  000C26  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6167  000C28  A4D8               	btfss	status,2,c
  6168  000C2A  D00F               	goto	i1l3320
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;UART_Driver.c: 141: readBuffer.state = 0x03;
  6172  000C2C  0E03               	movlw	3
  6173  000C2E  0101               	movlb	1	; () banked
  6174  000C30  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6175                           
  6176                           ; BSR set to: 1
  6177                           ;UART_Driver.c: 142: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6178  000C32  0101               	movlb	1	; () banked
  6179  000C34  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6180  000C36  0D01               	mullw	1
  6181  000C38  0E04               	movlw	low (_readBuffer+4)
  6182  000C3A  24F3               	addwf	prodl,w,c
  6183  000C3C  6ED9               	movwf	fsr2l,c
  6184  000C3E  0E01               	movlw	high (_readBuffer+4)
  6185  000C40  20F4               	addwfc	prodh,w,c
  6186  000C42  6EDA               	movwf	fsr2h,c
  6187  000C44  0E00               	movlw	0
  6188  000C46  6EDF               	movwf	indf2,c
  6189                           
  6190                           ;UART_Driver.c: 143: } else {
  6191  000C48  0012               	return	
  6192  000C4A                     i1l3320:
  6193                           
  6194                           ;UART_Driver.c: 144: readBuffer.sender[readBuffer.senderCnt] = data;
  6195  000C4A  0101               	movlb	1	; () banked
  6196  000C4C  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6197  000C4E  0D01               	mullw	1
  6198  000C50  0E04               	movlw	low (_readBuffer+4)
  6199  000C52  24F3               	addwf	prodl,w,c
  6200  000C54  6ED9               	movwf	fsr2l,c
  6201  000C56  0E01               	movlw	high (_readBuffer+4)
  6202  000C58  20F4               	addwfc	prodh,w,c
  6203  000C5A  6EDA               	movwf	fsr2h,c
  6204  000C5C  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6205                           
  6206                           ; BSR set to: 1
  6207                           ;UART_Driver.c: 145: readBuffer.senderCnt++;
  6208  000C60  0101               	movlb	1	; () banked
  6209  000C62  2B09               	incf	(_readBuffer+9)& (0+255),f,b
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;UART_Driver.c: 146: if(readBuffer.senderCnt > 50) {
  6213  000C64  0E32               	movlw	50
  6214  000C66  0101               	movlb	1	; () banked
  6215  000C68  6509               	cpfsgt	(_readBuffer+9)& (0+255),b
  6216  000C6A  0012               	return	
  6217                           
  6218                           ; BSR set to: 1
  6219                           ;UART_Driver.c: 147: readBuffer.senderCnt = 0;
  6220  000C6C  0E00               	movlw	0
  6221  000C6E  0101               	movlb	1	; () banked
  6222  000C70  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;UART_Driver.c: 148: }
  6226                           ;UART_Driver.c: 149: }
  6227                           ;UART_Driver.c: 150: break;
  6228                           
  6229                           ; BSR set to: 1
  6230  000C72  0012               	return	
  6231  000C74                     i1l3328:
  6232                           
  6233                           ; BSR set to: 1
  6234                           ;UART_Driver.c: 153: if (data == 0x3A) {
  6235  000C74  0E3A               	movlw	58
  6236  000C76  0100               	movlb	0	; () banked
  6237  000C78  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6238  000C7A  A4D8               	btfss	status,2,c
  6239  000C7C  D00F               	goto	i1l3334
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;UART_Driver.c: 154: readBuffer.state = 0x04;
  6243  000C7E  0E04               	movlw	4
  6244  000C80  0101               	movlb	1	; () banked
  6245  000C82  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6246                           
  6247                           ; BSR set to: 1
  6248                           ;UART_Driver.c: 155: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6249  000C84  0101               	movlb	1	; () banked
  6250  000C86  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6251  000C88  0D01               	mullw	1
  6252  000C8A  0E04               	movlw	low (_readBuffer+4)
  6253  000C8C  24F3               	addwf	prodl,w,c
  6254  000C8E  6ED9               	movwf	fsr2l,c
  6255  000C90  0E01               	movlw	high (_readBuffer+4)
  6256  000C92  20F4               	addwfc	prodh,w,c
  6257  000C94  6EDA               	movwf	fsr2h,c
  6258  000C96  0E00               	movlw	0
  6259  000C98  6EDF               	movwf	indf2,c
  6260                           
  6261                           ;UART_Driver.c: 156: } else {
  6262  000C9A  0012               	return	
  6263  000C9C                     i1l3334:
  6264                           
  6265                           ;UART_Driver.c: 157: readBuffer.blockLength = (data - 0x30);
  6266  000C9C  0100               	movlb	0	; () banked
  6267  000C9E  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6268  000CA0  0FD0               	addlw	208
  6269  000CA2  0101               	movlb	1	; () banked
  6270  000CA4  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6271                           
  6272                           ;UART_Driver.c: 158: blockLength = (data - 0x30);
  6273  000CA6  0100               	movlb	0	; () banked
  6274  000CA8  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6275  000CAA  0FD0               	addlw	208
  6276  000CAC  6E2A               	movwf	_blockLength,c
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;UART_Driver.c: 159: }
  6280                           ;UART_Driver.c: 160: break;
  6281  000CAE  0012               	return	
  6282  000CB0                     i1l3336:
  6283                           
  6284                           ;UART_Driver.c: 163: if (data == 0x3A) {
  6285  000CB0  0E3A               	movlw	58
  6286  000CB2  0100               	movlb	0	; () banked
  6287  000CB4  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6288  000CB6  A4D8               	btfss	status,2,c
  6289  000CB8  D00F               	goto	i1l3342
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;UART_Driver.c: 164: readBuffer.state = 0x05;
  6293  000CBA  0E05               	movlw	5
  6294  000CBC  0101               	movlb	1	; () banked
  6295  000CBE  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6296                           
  6297                           ; BSR set to: 1
  6298                           ;UART_Driver.c: 165: comMes.command[comMes.commandCnt] = '\0';
  6299  000CC0  0100               	movlb	0	; () banked
  6300  000CC2  51B6               	movf	(_comMes+5)& (0+255),w,b
  6301  000CC4  0D01               	mullw	1
  6302  000CC6  0EB1               	movlw	low _comMes
  6303  000CC8  24F3               	addwf	prodl,w,c
  6304  000CCA  6ED9               	movwf	fsr2l,c
  6305  000CCC  0E00               	movlw	high _comMes
  6306  000CCE  20F4               	addwfc	prodh,w,c
  6307  000CD0  6EDA               	movwf	fsr2h,c
  6308  000CD2  0E00               	movlw	0
  6309  000CD4  6EDF               	movwf	indf2,c
  6310                           
  6311                           ;UART_Driver.c: 166: } else {
  6312  000CD6  0012               	return	
  6313  000CD8                     i1l3342:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;UART_Driver.c: 167: comMes.command[comMes.commandCnt] = data;
  6317  000CD8  0100               	movlb	0	; () banked
  6318  000CDA  51B6               	movf	(_comMes+5)& (0+255),w,b
  6319  000CDC  0D01               	mullw	1
  6320  000CDE  0EB1               	movlw	low _comMes
  6321  000CE0  24F3               	addwf	prodl,w,c
  6322  000CE2  6ED9               	movwf	fsr2l,c
  6323  000CE4  0E00               	movlw	high _comMes
  6324  000CE6  20F4               	addwfc	prodh,w,c
  6325  000CE8  6EDA               	movwf	fsr2h,c
  6326  000CEA  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;UART_Driver.c: 168: comMes.commandCnt++;
  6330  000CEE  0100               	movlb	0	; () banked
  6331  000CF0  2BB6               	incf	(_comMes+5)& (0+255),f,b
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;UART_Driver.c: 169: if(comMes.commandCnt > 50) {
  6335  000CF2  0E32               	movlw	50
  6336  000CF4  0100               	movlb	0	; () banked
  6337  000CF6  65B6               	cpfsgt	(_comMes+5)& (0+255),b
  6338  000CF8  0012               	return	
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;UART_Driver.c: 170: comMes.commandCnt = 0;
  6342  000CFA  0E00               	movlw	0
  6343  000CFC  0100               	movlb	0	; () banked
  6344  000CFE  6FB6               	movwf	(_comMes+5)& (0+255),b
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;UART_Driver.c: 171: }
  6348                           ;UART_Driver.c: 172: }
  6349                           ;UART_Driver.c: 173: break;
  6350                           
  6351                           ; BSR set to: 0
  6352  000D00  0012               	return	
  6353  000D02                     i1l3350:
  6354                           
  6355                           ;UART_Driver.c: 176: if (data == 0x3A) {
  6356  000D02  0E3A               	movlw	58
  6357  000D04  0100               	movlb	0	; () banked
  6358  000D06  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6359  000D08  A4D8               	btfss	status,2,c
  6360  000D0A  D05E               	goto	i1l3384
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;UART_Driver.c: 177: comMes.message[comMes.messageCnt] = '\0';
  6364  000D0C  0100               	movlb	0	; () banked
  6365  000D0E  51C1               	movf	(_comMes+16)& (0+255),w,b
  6366  000D10  0D01               	mullw	1
  6367  000D12  0EB7               	movlw	low (_comMes+6)
  6368  000D14  24F3               	addwf	prodl,w,c
  6369  000D16  6ED9               	movwf	fsr2l,c
  6370  000D18  0E00               	movlw	high (_comMes+6)
  6371  000D1A  20F4               	addwfc	prodh,w,c
  6372  000D1C  6EDA               	movwf	fsr2h,c
  6373  000D1E  0E00               	movlw	0
  6374  000D20  6EDF               	movwf	indf2,c
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;UART_Driver.c: 178: readBuffer.comMes[bufferCnt] = comMes;
  6378  000D22  EE20  F0B1         	lfsr	2,_comMes
  6379  000D26  502B               	movf	_bufferCnt,w,c
  6380  000D28  0D11               	mullw	17
  6381  000D2A  0E0A               	movlw	low (_readBuffer+10)
  6382  000D2C  24F3               	addwf	prodl,w,c
  6383  000D2E  6EE1               	movwf	fsr1l,c
  6384  000D30  0E01               	movlw	high (_readBuffer+10)
  6385  000D32  20F4               	addwfc	prodh,w,c
  6386  000D34  6EE2               	movwf	fsr1h,c
  6387  000D36  0E10               	movlw	16
  6388  000D38                     i1u292_21:
  6389  000D38  CFDB FFE3          	movff	plusw2,plusw1
  6390  000D3C  06E8               	decf	wreg,f,c
  6391  000D3E  E2FC               	bc	i1u292_21
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;UART_Driver.c: 179: uint8_t i = 0;
  6395  000D40  0E00               	movlw	0
  6396  000D42  0100               	movlb	0	; () banked
  6397  000D44  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;UART_Driver.c: 180: for (i=0; i < comMes.commandCnt; i++) {
  6401  000D46  0E00               	movlw	0
  6402  000D48  0100               	movlb	0	; () banked
  6403  000D4A  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6404  000D4C  D00D               	goto	i1l3364
  6405  000D4E                     i1l3360:
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;UART_Driver.c: 181: comMes.command[i] = 0;
  6409  000D4E  0100               	movlb	0	; () banked
  6410  000D50  5174               	movf	fillDataBuffer@i& (0+255),w,b
  6411  000D52  0D01               	mullw	1
  6412  000D54  0EB1               	movlw	low _comMes
  6413  000D56  24F3               	addwf	prodl,w,c
  6414  000D58  6ED9               	movwf	fsr2l,c
  6415  000D5A  0E00               	movlw	high _comMes
  6416  000D5C  20F4               	addwfc	prodh,w,c
  6417  000D5E  6EDA               	movwf	fsr2h,c
  6418  000D60  0E00               	movlw	0
  6419  000D62  6EDF               	movwf	indf2,c
  6420                           
  6421                           ; BSR set to: 0
  6422  000D64  0100               	movlb	0	; () banked
  6423  000D66  2B74               	incf	fillDataBuffer@i& (0+255),f,b
  6424  000D68                     i1l3364:
  6425                           
  6426                           ; BSR set to: 0
  6427  000D68  0100               	movlb	0	; () banked
  6428  000D6A  51B6               	movf	(_comMes+5)& (0+255),w,b
  6429  000D6C  0100               	movlb	0	; () banked
  6430  000D6E  5D74               	subwf	fillDataBuffer@i& (0+255),w,b
  6431  000D70  A0D8               	btfss	status,0,c
  6432  000D72  D7ED               	goto	i1l3360
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;UART_Driver.c: 182: }
  6436                           ;UART_Driver.c: 183: for (i=0; i < comMes.messageCnt; i++) {
  6437                           
  6438                           ; BSR set to: 0
  6439  000D74  0E00               	movlw	0
  6440  000D76  0100               	movlb	0	; () banked
  6441  000D78  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6442  000D7A  D00D               	goto	i1l3372
  6443  000D7C                     i1l3368:
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;UART_Driver.c: 184: comMes.message[i] = 0;
  6447  000D7C  0100               	movlb	0	; () banked
  6448  000D7E  5174               	movf	fillDataBuffer@i& (0+255),w,b
  6449  000D80  0D01               	mullw	1
  6450  000D82  0EB7               	movlw	low (_comMes+6)
  6451  000D84  24F3               	addwf	prodl,w,c
  6452  000D86  6ED9               	movwf	fsr2l,c
  6453  000D88  0E00               	movlw	high (_comMes+6)
  6454  000D8A  20F4               	addwfc	prodh,w,c
  6455  000D8C  6EDA               	movwf	fsr2h,c
  6456  000D8E  0E00               	movlw	0
  6457  000D90  6EDF               	movwf	indf2,c
  6458                           
  6459                           ; BSR set to: 0
  6460  000D92  0100               	movlb	0	; () banked
  6461  000D94  2B74               	incf	fillDataBuffer@i& (0+255),f,b
  6462  000D96                     i1l3372:
  6463                           
  6464                           ; BSR set to: 0
  6465  000D96  0100               	movlb	0	; () banked
  6466  000D98  51C1               	movf	(_comMes+16)& (0+255),w,b
  6467  000D9A  0100               	movlb	0	; () banked
  6468  000D9C  5D74               	subwf	fillDataBuffer@i& (0+255),w,b
  6469  000D9E  A0D8               	btfss	status,0,c
  6470  000DA0  D7ED               	goto	i1l3368
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;UART_Driver.c: 185: }
  6474                           ;UART_Driver.c: 186: comMes.commandCnt = 0;
  6475                           
  6476                           ; BSR set to: 0
  6477  000DA2  0E00               	movlw	0
  6478  000DA4  0100               	movlb	0	; () banked
  6479  000DA6  6FB6               	movwf	(_comMes+5)& (0+255),b
  6480                           
  6481                           ;UART_Driver.c: 187: comMes.messageCnt = 0;
  6482  000DA8  0E00               	movlw	0
  6483  000DAA  0100               	movlb	0	; () banked
  6484  000DAC  6FC1               	movwf	(_comMes+16)& (0+255),b
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;UART_Driver.c: 188: blockLength--;
  6488  000DAE  062A               	decf	_blockLength,f,c
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;UART_Driver.c: 189: bufferCnt++;
  6492  000DB0  2A2B               	incf	_bufferCnt,f,c
  6493                           
  6494                           ;UART_Driver.c: 190: if (blockLength == 0) {
  6495  000DB2  502A               	movf	_blockLength,w,c
  6496  000DB4  A4D8               	btfss	status,2,c
  6497  000DB6  D004               	goto	i1l3382
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;UART_Driver.c: 191: readBuffer.state = 0x06;
  6501  000DB8  0E06               	movlw	6
  6502  000DBA  0101               	movlb	1	; () banked
  6503  000DBC  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6504                           
  6505                           ;UART_Driver.c: 192: } else {
  6506  000DBE  0012               	return	
  6507  000DC0                     i1l3382:
  6508                           
  6509                           ;UART_Driver.c: 193: readBuffer.state = 0x04;
  6510  000DC0  0E04               	movlw	4
  6511  000DC2  0101               	movlb	1	; () banked
  6512  000DC4  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6513                           
  6514                           ; BSR set to: 1
  6515                           ;UART_Driver.c: 194: }
  6516                           ;UART_Driver.c: 195: } else {
  6517  000DC6  0012               	return	
  6518  000DC8                     i1l3384:
  6519                           
  6520                           ;UART_Driver.c: 196: comMes.message[comMes.messageCnt] = data;
  6521  000DC8  0100               	movlb	0	; () banked
  6522  000DCA  51C1               	movf	(_comMes+16)& (0+255),w,b
  6523  000DCC  0D01               	mullw	1
  6524  000DCE  0EB7               	movlw	low (_comMes+6)
  6525  000DD0  24F3               	addwf	prodl,w,c
  6526  000DD2  6ED9               	movwf	fsr2l,c
  6527  000DD4  0E00               	movlw	high (_comMes+6)
  6528  000DD6  20F4               	addwfc	prodh,w,c
  6529  000DD8  6EDA               	movwf	fsr2h,c
  6530  000DDA  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;UART_Driver.c: 197: comMes.messageCnt++;
  6534  000DDE  0100               	movlb	0	; () banked
  6535  000DE0  2BC1               	incf	(_comMes+16)& (0+255),f,b
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;UART_Driver.c: 198: if(comMes.messageCnt > 50) {
  6539  000DE2  0E32               	movlw	50
  6540  000DE4  0100               	movlb	0	; () banked
  6541  000DE6  65C1               	cpfsgt	(_comMes+16)& (0+255),b
  6542  000DE8  0012               	return	
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;UART_Driver.c: 199: comMes.messageCnt = 0;
  6546  000DEA  0E00               	movlw	0
  6547  000DEC  0100               	movlb	0	; () banked
  6548  000DEE  6FC1               	movwf	(_comMes+16)& (0+255),b
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;UART_Driver.c: 200: }
  6552                           ;UART_Driver.c: 201: }
  6553                           ;UART_Driver.c: 202: break;
  6554                           
  6555                           ; BSR set to: 0
  6556  000DF0  0012               	return	
  6557  000DF2                     i1l3392:
  6558                           
  6559                           ;UART_Driver.c: 205: if (data == 0x24) {
  6560  000DF2  0E24               	movlw	36
  6561  000DF4  0100               	movlb	0	; () banked
  6562  000DF6  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6563  000DF8  A4D8               	btfss	status,2,c
  6564  000DFA  D009               	goto	i1l3400
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;UART_Driver.c: 206: acknowledge();
  6568  000DFC  ECF3  F00D         	call	_acknowledge	;wreg free
  6569                           
  6570                           ;UART_Driver.c: 207: readBuffer.state = 0x00;
  6571  000E00  0E00               	movlw	0
  6572  000E02  0101               	movlb	1	; () banked
  6573  000E04  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6574                           
  6575                           ; BSR set to: 1
  6576                           ;UART_Driver.c: 208: D_UART_ReadFlag = 1;
  6577  000E06  0E01               	movlw	1
  6578  000E08  0100               	movlb	0	; () banked
  6579  000E0A  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  6580                           
  6581                           ;UART_Driver.c: 209: } else {
  6582  000E0C  0012               	return	
  6583  000E0E                     i1l3400:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;UART_Driver.c: 210: readBuffer.readId = (data - 0x30);
  6587  000E0E  0100               	movlb	0	; () banked
  6588  000E10  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6589  000E12  0FD0               	addlw	208
  6590  000E14  0101               	movlb	1	; () banked
  6591  000E16  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  6592                           
  6593                           ; BSR set to: 1
  6594                           ;UART_Driver.c: 211: }
  6595                           ;UART_Driver.c: 212: break;
  6596  000E18  0012               	return	
  6597  000E1A                     i1l3402:
  6598                           
  6599                           ; BSR set to: 1
  6600                           ;UART_Driver.c: 215: readBuffer.state = 0x00;
  6601  000E1A  0E00               	movlw	0
  6602  000E1C  0101               	movlb	1	; () banked
  6603  000E1E  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6604                           
  6605                           ; BSR set to: 1
  6606                           ;UART_Driver.c: 217: }
  6607                           
  6608                           ;UART_Driver.c: 216: break;
  6609  000E20  0012               	return	
  6610  000E22                     i1l3406:
  6611  000E22  0101               	movlb	1	; () banked
  6612  000E24  513E               	movf	(_readBuffer+62)& (0+255),w,b
  6613                           
  6614                           ; Switch size 1, requested type "space"
  6615                           ; Number of cases is 7, Range of values is 0 to 6
  6616                           ; switch strategies available:
  6617                           ; Name         Instructions Cycles
  6618                           ; simple_byte           22    12 (average)
  6619                           ;	Chosen strategy is simple_byte
  6620  000E26  0A00               	xorlw	0	; case 0
  6621  000E28  B4D8               	btfsc	status,2,c
  6622  000E2A  D6AF               	goto	i1l3292
  6623  000E2C  0A01               	xorlw	1	; case 1
  6624  000E2E  B4D8               	btfsc	status,2,c
  6625  000E30  D6CF               	goto	i1l3300
  6626  000E32  0A03               	xorlw	3	; case 2
  6627  000E34  B4D8               	btfsc	status,2,c
  6628  000E36  D6F5               	goto	i1l3314
  6629  000E38  0A01               	xorlw	1	; case 3
  6630  000E3A  B4D8               	btfsc	status,2,c
  6631  000E3C  D71B               	goto	i1l3328
  6632  000E3E  0A07               	xorlw	7	; case 4
  6633  000E40  B4D8               	btfsc	status,2,c
  6634  000E42  D736               	goto	i1l3336
  6635  000E44  0A01               	xorlw	1	; case 5
  6636  000E46  B4D8               	btfsc	status,2,c
  6637  000E48  D75C               	goto	i1l3350
  6638  000E4A  0A03               	xorlw	3	; case 6
  6639  000E4C  B4D8               	btfsc	status,2,c
  6640  000E4E  D7D1               	goto	i1l3392
  6641  000E50  D7E4               	goto	i1l3402
  6642  000E52                     __end_of_fillDataBuffer:
  6643                           	opt stack 0
  6644                           pclatu	equ	0xFFB
  6645                           pclath	equ	0xFFA
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           intcon2	equ	0xFF1
  6654                           postinc0	equ	0xFEE
  6655                           plusw0	equ	0xFEB
  6656                           fsr0h	equ	0xFEA
  6657                           fsr0l	equ	0xFE9
  6658                           wreg	equ	0xFE8
  6659                           postdec1	equ	0xFE5
  6660                           plusw1	equ	0xFE3
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           bsr	equ	0xFE0
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           plusw2	equ	0xFDB
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function _acknowledge *****************
  6673 ;; Defined at:
  6674 ;;		line 220 in file "Drivers/UART_Driver.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;		None
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6691 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6692 ;;Total ram usage:        0 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    9
  6695 ;; This function calls:
  6696 ;;		i1_printf
  6697 ;; This function is called by:
  6698 ;;		_fillDataBuffer
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text40
  6703  001BE6                     __ptext40:
  6704                           	opt stack 0
  6705  001BE6                     _acknowledge:
  6706                           	opt stack 13
  6707                           
  6708                           ;UART_Driver.c: 221: printf(startCharacter);
  6709                           
  6710                           ;incstack = 0
  6711  001BE6  C03F  F064         	movff	_startCharacter,i1printf@f
  6712  001BEA  C040  F065         	movff	_startCharacter+1,i1printf@f+1
  6713  001BEE  0100               	movlb	0	; () banked
  6714  001BF0  5164               	movf	i1printf@f& (0+255),w,b
  6715  001BF2  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6716  001BF4  A4D8               	btfss	status,2,c
  6717  001BF6  0E00               	movlw	low (__mediumconst shr (0+16))
  6718  001BF8  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6719  001BFA  EC5E  F008         	call	i1_printf	;wreg free
  6720                           
  6721                           ;UART_Driver.c: 223: printf(ackCharacter);
  6722  001BFE  C03B  F064         	movff	_ackCharacter,i1printf@f
  6723  001C02  C03C  F065         	movff	_ackCharacter+1,i1printf@f+1
  6724  001C06  0100               	movlb	0	; () banked
  6725  001C08  5164               	movf	i1printf@f& (0+255),w,b
  6726  001C0A  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6727  001C0C  A4D8               	btfss	status,2,c
  6728  001C0E  0E00               	movlw	low (__mediumconst shr (0+16))
  6729  001C10  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6730  001C12  EC5E  F008         	call	i1_printf	;wreg free
  6731                           
  6732                           ;UART_Driver.c: 225: printf("%x",readBuffer.readId);
  6733  001C16  0E50               	movlw	low STR_6
  6734  001C18  0100               	movlb	0	; () banked
  6735  001C1A  6F64               	movwf	i1printf@f& (0+255),b
  6736  001C1C  0E08               	movlw	high STR_6
  6737  001C1E  0100               	movlb	0	; () banked
  6738  001C20  6F65               	movwf	(i1printf@f+1)& (0+255),b
  6739  001C22  0100               	movlb	0	; () banked
  6740  001C24  5164               	movf	i1printf@f& (0+255),w,b
  6741  001C26  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6742  001C28  A4D8               	btfss	status,2,c
  6743  001C2A  0E00               	movlw	low (__mediumconst shr (0+16))
  6744  001C2C  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6745  001C2E  C13D  F067         	movff	_readBuffer+61,?i1_printf+3
  6746  001C32  0100               	movlb	0	; () banked
  6747  001C34  6B68               	clrf	(?i1_printf+4)& (0+255),b
  6748  001C36  EC5E  F008         	call	i1_printf	;wreg free
  6749                           
  6750                           ;UART_Driver.c: 227: printf(stopCharacter);
  6751  001C3A  C041  F064         	movff	_stopCharacter,i1printf@f
  6752  001C3E  C042  F065         	movff	_stopCharacter+1,i1printf@f+1
  6753  001C42  0100               	movlb	0	; () banked
  6754  001C44  5164               	movf	i1printf@f& (0+255),w,b
  6755  001C46  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  6756  001C48  A4D8               	btfss	status,2,c
  6757  001C4A  0E00               	movlw	low (__mediumconst shr (0+16))
  6758  001C4C  6F66               	movwf	(i1printf@f+2)& (0+255),b
  6759  001C4E  EC5E  F008         	call	i1_printf	;wreg free
  6760  001C52  0012               	return		;funcret
  6761  001C54                     __end_of_acknowledge:
  6762                           	opt stack 0
  6763                           pclatu	equ	0xFFB
  6764                           pclath	equ	0xFFA
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           intcon	equ	0xFF2
  6772                           intcon2	equ	0xFF1
  6773                           postinc0	equ	0xFEE
  6774                           plusw0	equ	0xFEB
  6775                           fsr0h	equ	0xFEA
  6776                           fsr0l	equ	0xFE9
  6777                           wreg	equ	0xFE8
  6778                           postdec1	equ	0xFE5
  6779                           plusw1	equ	0xFE3
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           bsr	equ	0xFE0
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           plusw2	equ	0xFDB
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function i1_printf *****************
  6792 ;; Defined at:
  6793 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  f               3    4[BANK0 ] PTR const unsigned char 
  6796 ;;		 -> STR_32(4), STR_30(4), STR_28(2), STR_27(2), 
  6797 ;;		 -> STR_26(2), STR_14(5), STR_13(2), STR_12(2), 
  6798 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  6799 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  6800 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  printf          4    0        struct .
  6803 ;;  printf          3    0        PTR const unsigned char 
  6804 ;;  printf          2   17[BANK0 ] unsigned int 
  6805 ;;  printf          2   13[BANK0 ] PTR void [1]
  6806 ;;		 -> ?i1_printf(2), ?_printf(2), 
  6807 ;;  printf          2    0        unsigned int 
  6808 ;;  printf          1   19[BANK0 ] char 
  6809 ;;  printf          1   16[BANK0 ] unsigned char 
  6810 ;;  printf          1   15[BANK0 ] char 
  6811 ;;  printf          1   12[BANK0 ] unsigned char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  2    4[BANK0 ] int 
  6814 ;; Registers used:
  6815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6821 ;;      Params:         0       5       0       0       0       0       0       0       0
  6822 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6823 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6824 ;;      Totals:         0      16       0       0       0       0       0       0       0
  6825 ;;Total ram usage:       16 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    8
  6828 ;; This function calls:
  6829 ;;		i1___lwdiv
  6830 ;;		i1___lwmod
  6831 ;;		i1_putch
  6832 ;; This function is called by:
  6833 ;;		_acknowledge
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           	psect	text41
  6838  0010BC                     __ptext41:
  6839                           	opt stack 0
  6840  0010BC                     i1_printf:
  6841                           	opt stack 13
  6842                           
  6843                           ;doprnt.c: 466: va_list ap;
  6844                           ;doprnt.c: 499: signed char c;
  6845                           ;doprnt.c: 506: signed char prec;
  6846                           ;doprnt.c: 508: unsigned char flag;
  6847                           ;doprnt.c: 523: union {
  6848                           ;doprnt.c: 524: unsigned long vd;
  6849                           ;doprnt.c: 525: double integ;
  6850                           ;doprnt.c: 526: } tmpval;
  6851                           ;doprnt.c: 528: unsigned int val;
  6852                           ;doprnt.c: 529: unsigned len;
  6853                           ;doprnt.c: 530: const char * cp;
  6854                           ;doprnt.c: 533: *ap = __va_start();
  6855                           
  6856                           ;incstack = 0
  6857  0010BC  0E67               	movlw	low (?i1_printf+3)
  6858  0010BE  0100               	movlb	0	; () banked
  6859  0010C0  6F6D               	movwf	i1printf@ap& (0+255),b
  6860  0010C2  0E00               	movlw	high (?i1_printf+3)
  6861  0010C4  0100               	movlb	0	; () banked
  6862  0010C6  6F6E               	movwf	(i1printf@ap+1)& (0+255),b
  6863                           
  6864                           ;doprnt.c: 536: while(c = *f++) {
  6865  0010C8  D114               	goto	i1l3266
  6866  0010CA                     i1l3186:
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;doprnt.c: 538: if(c != '%')
  6870  0010CA  0E25               	movlw	37
  6871  0010CC  0100               	movlb	0	; () banked
  6872  0010CE  1973               	xorwf	i1printf@c& (0+255),w,b
  6873  0010D0  B4D8               	btfsc	status,2,c
  6874  0010D2  D005               	goto	i1l3190
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;doprnt.c: 540: {
  6878                           ;doprnt.c: 541: (putch(c) );
  6879  0010D4  0100               	movlb	0	; () banked
  6880  0010D6  5173               	movf	i1printf@c& (0+255),w,b
  6881  0010D8  EC00  F011         	call	i1_putch
  6882                           
  6883                           ;doprnt.c: 542: continue;
  6884  0010DC  D10A               	goto	i1l3266
  6885  0010DE                     i1l3190:
  6886                           
  6887                           ;doprnt.c: 543: }
  6888                           ;doprnt.c: 548: flag = 0;
  6889  0010DE  0E00               	movlw	0
  6890  0010E0  0100               	movlb	0	; () banked
  6891  0010E2  6F70               	movwf	i1printf@flag& (0+255),b
  6892                           
  6893                           ;doprnt.c: 635: switch(c = *f++) {
  6894  0010E4  D008               	goto	i1l3198
  6895  0010E6                     i1l3192:
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;doprnt.c: 721: flag |= 0x80;
  6899  0010E6  0100               	movlb	0	; () banked
  6900  0010E8  8F70               	bsf	i1printf@flag& (0+255),7,b
  6901                           
  6902                           ;doprnt.c: 723: break;
  6903  0010EA  D028               	goto	i1l521
  6904  0010EC                     i1l3194:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;doprnt.c: 809: (putch(c) );
  6908  0010EC  0100               	movlb	0	; () banked
  6909  0010EE  5173               	movf	i1printf@c& (0+255),w,b
  6910  0010F0  EC00  F011         	call	i1_putch
  6911                           
  6912                           ;doprnt.c: 810: continue;
  6913  0010F4  D0FE               	goto	i1l3266
  6914  0010F6                     i1l3198:
  6915  0010F6  C064  F069         	movff	i1printf@f,??i1_printf
  6916  0010FA  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  6917  0010FE  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  6918  001102  0100               	movlb	0	; () banked
  6919  001104  2B64               	incf	i1printf@f& (0+255),f,b
  6920  001106  0E00               	movlw	0
  6921  001108  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  6922  00110A  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  6923  00110C  C069  FFF6         	movff	??i1_printf,tblptrl
  6924  001110  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  6925  001114  C06B  FFF8         	movff	??i1_printf+2,tblptru
  6926  001118  0008               	tblrd		*
  6927  00111A  CFF5 F073          	movff	tablat,i1printf@c
  6928  00111E  0100               	movlb	0	; () banked
  6929  001120  5173               	movf	i1printf@c& (0+255),w,b
  6930                           
  6931                           ; Switch size 1, requested type "space"
  6932                           ; Number of cases is 4, Range of values is 0 to 120
  6933                           ; switch strategies available:
  6934                           ; Name         Instructions Cycles
  6935                           ; simple_byte           13     7 (average)
  6936                           ;	Chosen strategy is simple_byte
  6937  001122  0A00               	xorlw	0	; case 0
  6938  001124  B4D8               	btfsc	status,2,c
  6939  001126  0012               	return	
  6940  001128  0A64               	xorlw	100	; case 100
  6941  00112A  B4D8               	btfsc	status,2,c
  6942  00112C  D007               	goto	i1l521
  6943  00112E  0A0D               	xorlw	13	; case 105
  6944  001130  B4D8               	btfsc	status,2,c
  6945  001132  D004               	goto	i1l521
  6946  001134  0A11               	xorlw	17	; case 120
  6947  001136  B4D8               	btfsc	status,2,c
  6948  001138  D7D6               	goto	i1l3192
  6949  00113A  D7D8               	goto	i1l3194
  6950  00113C                     i1l521:
  6951                           
  6952                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6953  00113C  0100               	movlb	0	; () banked
  6954  00113E  BF70               	btfsc	i1printf@flag& (0+255),7,b
  6955  001140  D019               	goto	i1l3210
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;doprnt.c: 1253: {
  6959                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6960  001142  C06D  FFD9         	movff	i1printf@ap,fsr2l
  6961  001146  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  6962  00114A  CFDE F071          	movff	postinc2,i1printf@val
  6963  00114E  CFDD F072          	movff	postdec2,i1printf@val+1
  6964                           
  6965                           ; BSR set to: 0
  6966  001152  0E02               	movlw	2
  6967  001154  0100               	movlb	0	; () banked
  6968  001156  276D               	addwf	i1printf@ap& (0+255),f,b
  6969  001158  0E00               	movlw	0
  6970  00115A  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1261: if((int)val < 0) {
  6974  00115C  0100               	movlb	0	; () banked
  6975  00115E  AF72               	btfss	(i1printf@val+1)& (0+255),7,b
  6976  001160  D053               	goto	i1l3244
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;doprnt.c: 1262: flag |= 0x03;
  6980  001162  0E03               	movlw	3
  6981  001164  0100               	movlb	0	; () banked
  6982  001166  1370               	iorwf	i1printf@flag& (0+255),f,b
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;doprnt.c: 1263: val = -val;
  6986  001168  0100               	movlb	0	; () banked
  6987  00116A  6D71               	negf	i1printf@val& (0+255),b
  6988  00116C  1F72               	comf	(i1printf@val+1)& (0+255),f,b
  6989  00116E  B0D8               	btfsc	status,0,c
  6990  001170  2B72               	incf	(i1printf@val+1)& (0+255),f,b
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;doprnt.c: 1264: }
  6994                           ;doprnt.c: 1266: }
  6995  001172  D04A               	goto	i1l3244
  6996  001174                     i1l3210:
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;doprnt.c: 1268: else
  7000                           ;doprnt.c: 1273: {
  7001                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7002  001174  C06D  FFD9         	movff	i1printf@ap,fsr2l
  7003  001178  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  7004  00117C  CFDE F071          	movff	postinc2,i1printf@val
  7005  001180  CFDD F072          	movff	postdec2,i1printf@val+1
  7006                           
  7007                           ; BSR set to: 0
  7008  001184  0E02               	movlw	2
  7009  001186  0100               	movlb	0	; () banked
  7010  001188  276D               	addwf	i1printf@ap& (0+255),f,b
  7011  00118A  0E00               	movlw	0
  7012  00118C  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 1287: }
  7016                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7017  00118E  D03C               	goto	i1l3244
  7018  001190                     i1l3214:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7022  001190  0E01               	movlw	1
  7023  001192  0100               	movlb	0	; () banked
  7024  001194  6F73               	movwf	i1printf@c& (0+255),b
  7025  001196                     i1l3216:
  7026                           
  7027                           ; BSR set to: 0
  7028  001196  0E05               	movlw	5
  7029  001198  0100               	movlb	0	; () banked
  7030  00119A  1973               	xorwf	i1printf@c& (0+255),w,b
  7031  00119C  B4D8               	btfsc	status,2,c
  7032  00119E  D03D               	goto	i1l3246
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;doprnt.c: 1306: if(val < dpowers[c])
  7036                           
  7037                           ; BSR set to: 0
  7038                           
  7039                           ; BSR set to: 0
  7040  0011A0  0100               	movlb	0	; () banked
  7041  0011A2  5173               	movf	i1printf@c& (0+255),w,b
  7042  0011A4  0D02               	mullw	2
  7043  0011A6  0E01               	movlw	low _dpowers
  7044  0011A8  24F3               	addwf	prodl,w,c
  7045  0011AA  6EF6               	movwf	tblptrl,c
  7046  0011AC  0E08               	movlw	high _dpowers
  7047  0011AE  20F4               	addwfc	prodh,w,c
  7048  0011B0  6EF7               	movwf	tblptrh,c
  7049  0011B2                     	if	0	;There are less than 3 active tblptr bytes
  7050  0011B2                     	endif
  7051  0011B2  0009               	tblrd		*+
  7052  0011B4  50F5               	movf	tablat,w,c
  7053  0011B6  0100               	movlb	0	; () banked
  7054  0011B8  5D71               	subwf	i1printf@val& (0+255),w,b
  7055  0011BA  0009               	tblrd		*+
  7056  0011BC  50F5               	movf	tablat,w,c
  7057  0011BE  0100               	movlb	0	; () banked
  7058  0011C0  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7059  0011C2  A0D8               	btfss	status,0,c
  7060  0011C4  D02A               	goto	i1l3246
  7061                           
  7062                           ; BSR set to: 0
  7063                           
  7064                           ; BSR set to: 0
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;doprnt.c: 1307: break;
  7068  0011C6  0100               	movlb	0	; () banked
  7069  0011C8  2B73               	incf	i1printf@c& (0+255),f,b
  7070  0011CA  D7E5               	goto	i1l3216
  7071  0011CC                     i1l3228:
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7075  0011CC  0E01               	movlw	1
  7076  0011CE  0100               	movlb	0	; () banked
  7077  0011D0  6F73               	movwf	i1printf@c& (0+255),b
  7078  0011D2                     i1l3230:
  7079                           
  7080                           ; BSR set to: 0
  7081  0011D2  0E04               	movlw	4
  7082  0011D4  0100               	movlb	0	; () banked
  7083  0011D6  1973               	xorwf	i1printf@c& (0+255),w,b
  7084  0011D8  B4D8               	btfsc	status,2,c
  7085  0011DA  D01F               	goto	i1l3246
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7089                           
  7090                           ; BSR set to: 0
  7091                           
  7092                           ; BSR set to: 0
  7093  0011DC  0100               	movlb	0	; () banked
  7094  0011DE  5173               	movf	i1printf@c& (0+255),w,b
  7095  0011E0  0D02               	mullw	2
  7096  0011E2  0E0B               	movlw	low _hexpowers
  7097  0011E4  24F3               	addwf	prodl,w,c
  7098  0011E6  6EF6               	movwf	tblptrl,c
  7099  0011E8  0E08               	movlw	high _hexpowers
  7100  0011EA  20F4               	addwfc	prodh,w,c
  7101  0011EC  6EF7               	movwf	tblptrh,c
  7102  0011EE                     	if	0	;There are less than 3 active tblptr bytes
  7103  0011EE                     	endif
  7104  0011EE  0009               	tblrd		*+
  7105  0011F0  50F5               	movf	tablat,w,c
  7106  0011F2  0100               	movlb	0	; () banked
  7107  0011F4  5D71               	subwf	i1printf@val& (0+255),w,b
  7108  0011F6  0009               	tblrd		*+
  7109  0011F8  50F5               	movf	tablat,w,c
  7110  0011FA  0100               	movlb	0	; () banked
  7111  0011FC  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7112  0011FE  A0D8               	btfss	status,0,c
  7113  001200  D00C               	goto	i1l3246
  7114                           
  7115                           ; BSR set to: 0
  7116                           
  7117                           ; BSR set to: 0
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;doprnt.c: 1318: break;
  7121  001202  0100               	movlb	0	; () banked
  7122  001204  2B73               	incf	i1printf@c& (0+255),f,b
  7123  001206  D7E5               	goto	i1l3230
  7124  001208                     i1l3244:
  7125                           
  7126                           ; BSR set to: 0
  7127  001208  0100               	movlb	0	; () banked
  7128  00120A  5170               	movf	i1printf@flag& (0+255),w,b
  7129  00120C  0B80               	andlw	128
  7130                           
  7131                           ; Switch size 1, requested type "space"
  7132                           ; Number of cases is 2, Range of values is 0 to 128
  7133                           ; switch strategies available:
  7134                           ; Name         Instructions Cycles
  7135                           ; simple_byte            7     4 (average)
  7136                           ;	Chosen strategy is simple_byte
  7137  00120E  0A00               	xorlw	0	; case 0
  7138  001210  B4D8               	btfsc	status,2,c
  7139  001212  D7BE               	goto	i1l3214
  7140  001214  0A80               	xorlw	128	; case 128
  7141  001216  B4D8               	btfsc	status,2,c
  7142  001218  D7D9               	goto	i1l3228
  7143  00121A                     i1l3246:
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;doprnt.c: 1422: {
  7147                           ;doprnt.c: 1438: if(flag & 0x03)
  7148  00121A  C070  F069         	movff	i1printf@flag,??i1_printf
  7149  00121E  0E03               	movlw	3
  7150  001220  0100               	movlb	0	; () banked
  7151  001222  1769               	andwf	??i1_printf& (0+255),f,b
  7152  001224  B4D8               	btfsc	status,2,c
  7153  001226  D003               	goto	i1l3250
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;doprnt.c: 1439: (putch('-') );
  7157  001228  0E2D               	movlw	45
  7158  00122A  EC00  F011         	call	i1_putch
  7159  00122E                     i1l3250:
  7160                           
  7161                           ;doprnt.c: 1469: }
  7162                           ;doprnt.c: 1472: prec = c;
  7163  00122E  C073  F06F         	movff	i1printf@c,i1printf@prec
  7164                           
  7165                           ;doprnt.c: 1474: while(prec--) {
  7166  001232  D059               	goto	i1l3264
  7167  001234                     i1l3252:
  7168                           
  7169                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7170  001234  0100               	movlb	0	; () banked
  7171  001236  516F               	movf	i1printf@prec& (0+255),w,b
  7172  001238  0D02               	mullw	2
  7173  00123A  0E01               	movlw	low _dpowers
  7174  00123C  24F3               	addwf	prodl,w,c
  7175  00123E  6EF6               	movwf	tblptrl,c
  7176  001240  0E08               	movlw	high _dpowers
  7177  001242  20F4               	addwfc	prodh,w,c
  7178  001244  6EF7               	movwf	tblptrh,c
  7179  001246                     	if	0	;There are less than 3 active tblptr bytes
  7180  001246                     	endif
  7181  001246  0009               	tblrd		*+
  7182  001248  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7183  00124C  000A               	tblrd		*-
  7184  00124E  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7185  001252  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7186  001256  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7187  00125A  ECAF  F00F         	call	i1___lwdiv	;wreg free
  7188  00125E  C01A  F060         	movff	?i1___lwdiv,i1___lwmod@dividend
  7189  001262  C01B  F061         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7190  001266  0E00               	movlw	0
  7191  001268  0100               	movlb	0	; () banked
  7192  00126A  6F63               	movwf	(i1___lwmod@divisor+1)& (0+255),b
  7193  00126C  0E0A               	movlw	10
  7194  00126E  6F62               	movwf	i1___lwmod@divisor& (0+255),b
  7195  001270  EC55  F00F         	call	i1___lwmod	;wreg free
  7196  001274  0100               	movlb	0	; () banked
  7197  001276  5160               	movf	?i1___lwmod& (0+255),w,b
  7198  001278  0F30               	addlw	48
  7199  00127A  0100               	movlb	0	; () banked
  7200  00127C  6F73               	movwf	i1printf@c& (0+255),b
  7201                           
  7202                           ;doprnt.c: 1491: break;
  7203  00127E  D02F               	goto	i1l3262
  7204  001280                     i1l3254:
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;doprnt.c: 1499: {
  7208                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7209  001280  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7210  001284  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7211  001288  0100               	movlb	0	; () banked
  7212  00128A  516F               	movf	i1printf@prec& (0+255),w,b
  7213  00128C  0D02               	mullw	2
  7214  00128E  0E0B               	movlw	low _hexpowers
  7215  001290  24F3               	addwf	prodl,w,c
  7216  001292  6EF6               	movwf	tblptrl,c
  7217  001294  0E08               	movlw	high _hexpowers
  7218  001296  20F4               	addwfc	prodh,w,c
  7219  001298  6EF7               	movwf	tblptrh,c
  7220  00129A                     	if	0	;There are less than 3 active tblptr bytes
  7221  00129A                     	endif
  7222  00129A  0009               	tblrd		*+
  7223  00129C  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7224  0012A0  000A               	tblrd		*-
  7225  0012A2  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7226  0012A6  ECAF  F00F         	call	i1___lwdiv	;wreg free
  7227  0012AA  501A               	movf	?i1___lwdiv,w,c
  7228  0012AC  0B0F               	andlw	15
  7229  0012AE  0100               	movlb	0	; () banked
  7230  0012B0  6F6C               	movwf	i1printf@idx& (0+255),b
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7234  0012B2  0100               	movlb	0	; () banked
  7235  0012B4  516C               	movf	i1printf@idx& (0+255),w,b
  7236  0012B6  0D01               	mullw	1
  7237  0012B8  0E13               	movlw	low STR_33
  7238  0012BA  24F3               	addwf	prodl,w,c
  7239  0012BC  6EF6               	movwf	tblptrl,c
  7240  0012BE  0E08               	movlw	high STR_33
  7241  0012C0  20F4               	addwfc	prodh,w,c
  7242  0012C2  6EF7               	movwf	tblptrh,c
  7243  0012C4                     	if	0	;There are less than 3 active tblptr bytes
  7244  0012C4                     	endif
  7245  0012C4  0008               	tblrd		*
  7246  0012C6  CFF5 F073          	movff	tablat,i1printf@c
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;doprnt.c: 1523: }
  7250                           
  7251                           ;doprnt.c: 1508: }
  7252                           ;doprnt.c: 1510: break;
  7253  0012CA  D009               	goto	i1l3262
  7254  0012CC                     i1l3260:
  7255  0012CC  0100               	movlb	0	; () banked
  7256  0012CE  5170               	movf	i1printf@flag& (0+255),w,b
  7257  0012D0  0B80               	andlw	128
  7258                           
  7259                           ; Switch size 1, requested type "space"
  7260                           ; Number of cases is 2, Range of values is 0 to 128
  7261                           ; switch strategies available:
  7262                           ; Name         Instructions Cycles
  7263                           ; simple_byte            7     4 (average)
  7264                           ;	Chosen strategy is simple_byte
  7265  0012D2  0A00               	xorlw	0	; case 0
  7266  0012D4  B4D8               	btfsc	status,2,c
  7267  0012D6  D7AE               	goto	i1l3252
  7268  0012D8  0A80               	xorlw	128	; case 128
  7269  0012DA  B4D8               	btfsc	status,2,c
  7270  0012DC  D7D1               	goto	i1l3254
  7271  0012DE                     i1l3262:
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;doprnt.c: 1524: (putch(c) );
  7275  0012DE  0100               	movlb	0	; () banked
  7276  0012E0  5173               	movf	i1printf@c& (0+255),w,b
  7277  0012E2  EC00  F011         	call	i1_putch
  7278  0012E6                     i1l3264:
  7279  0012E6  0100               	movlb	0	; () banked
  7280  0012E8  076F               	decf	i1printf@prec& (0+255),f,b
  7281  0012EA  0100               	movlb	0	; () banked
  7282  0012EC  296F               	incf	i1printf@prec& (0+255),w,b
  7283  0012EE  A4D8               	btfss	status,2,c
  7284  0012F0  D7ED               	goto	i1l3260
  7285  0012F2                     i1l3266:
  7286  0012F2  C064  F069         	movff	i1printf@f,??i1_printf
  7287  0012F6  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  7288  0012FA  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  7289  0012FE  0100               	movlb	0	; () banked
  7290  001300  2B64               	incf	i1printf@f& (0+255),f,b
  7291  001302  0E00               	movlw	0
  7292  001304  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  7293  001306  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  7294  001308  C069  FFF6         	movff	??i1_printf,tblptrl
  7295  00130C  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  7296  001310  C06B  FFF8         	movff	??i1_printf+2,tblptru
  7297  001314  0008               	tblrd		*
  7298  001316  CFF5 F073          	movff	tablat,i1printf@c
  7299  00131A  0100               	movlb	0	; () banked
  7300  00131C  5173               	movf	i1printf@c& (0+255),w,b
  7301  00131E  B4D8               	btfsc	status,2,c
  7302  001320  0012               	return	
  7303  001322  D6D3               	goto	i1l3186
  7304  001324                     __end_ofi1_printf:
  7305                           	opt stack 0
  7306                           pclatu	equ	0xFFB
  7307                           pclath	equ	0xFFA
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           postinc0	equ	0xFEE
  7317                           plusw0	equ	0xFEB
  7318                           fsr0h	equ	0xFEA
  7319                           fsr0l	equ	0xFE9
  7320                           wreg	equ	0xFE8
  7321                           postdec1	equ	0xFE5
  7322                           plusw1	equ	0xFE3
  7323                           fsr1h	equ	0xFE2
  7324                           fsr1l	equ	0xFE1
  7325                           bsr	equ	0xFE0
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           plusw2	equ	0xFDB
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function i1_putch *****************
  7335 ;; Defined at:
  7336 ;;		line 353 in file "Drivers/UART_Driver.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  data            1    wreg     unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  data            1   27[COMRAM] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7350 ;;      Params:         0       0       0       0       0       0       0       0       0
  7351 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7353 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7354 ;;Total ram usage:        1 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    7
  7357 ;; This function calls:
  7358 ;;		i1_writeByte
  7359 ;; This function is called by:
  7360 ;;		i1_printf
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text42
  7365  002200                     __ptext42:
  7366                           	opt stack 0
  7367  002200                     i1_putch:
  7368                           	opt stack 13
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;incstack = 0
  7372                           ;i1putch@data stored from wreg
  7373  002200  6E1C               	movwf	i1putch@data,c
  7374                           
  7375                           ;UART_Driver.c: 354: writeByte(data);
  7376  002202  501C               	movf	i1putch@data,w,c
  7377  002204  ECDA  F010         	call	i1_writeByte
  7378  002208  0012               	return		;funcret
  7379  00220A                     __end_ofi1_putch:
  7380                           	opt stack 0
  7381                           pclatu	equ	0xFFB
  7382                           pclath	equ	0xFFA
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           intcon2	equ	0xFF1
  7391                           postinc0	equ	0xFEE
  7392                           plusw0	equ	0xFEB
  7393                           fsr0h	equ	0xFEA
  7394                           fsr0l	equ	0xFE9
  7395                           wreg	equ	0xFE8
  7396                           postdec1	equ	0xFE5
  7397                           plusw1	equ	0xFE3
  7398                           fsr1h	equ	0xFE2
  7399                           fsr1l	equ	0xFE1
  7400                           bsr	equ	0xFE0
  7401                           indf2	equ	0xFDF
  7402                           postinc2	equ	0xFDE
  7403                           postdec2	equ	0xFDD
  7404                           plusw2	equ	0xFDB
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function i1_writeByte *****************
  7410 ;; Defined at:
  7411 ;;		line 84 in file "Drivers/UART_Driver.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  data            1    wreg     unsigned char 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  data            1   26[COMRAM] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0
  7426 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7428 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    6
  7432 ;; This function calls:
  7433 ;;		i1_D_UART_Enable
  7434 ;; This function is called by:
  7435 ;;		i1_putch
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           	psect	text43
  7440  0021B4                     __ptext43:
  7441                           	opt stack 0
  7442  0021B4                     i1_writeByte:
  7443                           	opt stack 13
  7444                           
  7445                           ;incstack = 0
  7446                           ;i1writeByte@data stored from wreg
  7447  0021B4  6E1B               	movwf	i1writeByte@data,c
  7448                           
  7449                           ;UART_Driver.c: 85: D_UART_Enable(1);
  7450  0021B6  0E01               	movlw	1
  7451  0021B8  ECA4  F010         	call	i1_D_UART_Enable
  7452  0021BC                     i1l107:
  7453  0021BC  A2AC               	btfss	4012,1,c	;volatile
  7454  0021BE  D7FE               	goto	i1l107
  7455                           
  7456                           ;UART_Driver.c: 87: TXREG = data;
  7457  0021C0  C01B  FFAD         	movff	i1writeByte@data,4013	;volatile
  7458  0021C4  0012               	return		;funcret
  7459  0021C6                     __end_ofi1_writeByte:
  7460                           	opt stack 0
  7461                           pclatu	equ	0xFFB
  7462                           pclath	equ	0xFFA
  7463                           tblptru	equ	0xFF8
  7464                           tblptrh	equ	0xFF7
  7465                           tblptrl	equ	0xFF6
  7466                           tablat	equ	0xFF5
  7467                           prodh	equ	0xFF4
  7468                           prodl	equ	0xFF3
  7469                           intcon	equ	0xFF2
  7470                           intcon2	equ	0xFF1
  7471                           postinc0	equ	0xFEE
  7472                           plusw0	equ	0xFEB
  7473                           fsr0h	equ	0xFEA
  7474                           fsr0l	equ	0xFE9
  7475                           wreg	equ	0xFE8
  7476                           postdec1	equ	0xFE5
  7477                           plusw1	equ	0xFE3
  7478                           fsr1h	equ	0xFE2
  7479                           fsr1l	equ	0xFE1
  7480                           bsr	equ	0xFE0
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           postdec2	equ	0xFDD
  7484                           plusw2	equ	0xFDB
  7485                           fsr2h	equ	0xFDA
  7486                           fsr2l	equ	0xFD9
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function i1_D_UART_Enable *****************
  7490 ;; Defined at:
  7491 ;;		line 319 in file "Drivers/UART_Driver.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;  enable          1    wreg     unsigned char 
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  enable          1   25[COMRAM] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7505 ;;      Params:         0       0       0       0       0       0       0       0       0
  7506 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7508 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7509 ;;Total ram usage:        1 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    5
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_readByte
  7516 ;;		i1_writeByte
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text44
  7521  002148                     __ptext44:
  7522                           	opt stack 0
  7523  002148                     i1_D_UART_Enable:
  7524                           	opt stack 17
  7525                           
  7526                           ;incstack = 0
  7527                           ;i1D_UART_Enable@enable stored from wreg
  7528  002148  6E1A               	movwf	i1D_UART_Enable@enable,c
  7529                           
  7530                           ;UART_Driver.c: 320: if(enable) {
  7531  00214A  501A               	movf	i1D_UART_Enable@enable,w,c
  7532  00214C  B4D8               	btfsc	status,2,c
  7533  00214E  D006               	goto	i1l185
  7534                           
  7535                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  7536  002150  9C94               	bcf	3988,6,c	;volatile
  7537                           
  7538                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  7539  002152  8E94               	bsf	3988,7,c	;volatile
  7540                           
  7541                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  7542  002154  8AAC               	bsf	4012,5,c	;volatile
  7543                           
  7544                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  7545  002156  88AB               	bsf	4011,4,c	;volatile
  7546                           
  7547                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  7548  002158  8EAB               	bsf	4011,7,c	;volatile
  7549                           
  7550                           ;UART_Driver.c: 326: } else {
  7551  00215A  0012               	return	
  7552  00215C                     i1l185:
  7553                           
  7554                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  7555  00215C  9C94               	bcf	3988,6,c	;volatile
  7556                           
  7557                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  7558  00215E  9E94               	bcf	3988,7,c	;volatile
  7559                           
  7560                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  7561  002160  9AAC               	bcf	4012,5,c	;volatile
  7562                           
  7563                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  7564  002162  98AB               	bcf	4011,4,c	;volatile
  7565                           
  7566                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  7567  002164  9EAB               	bcf	4011,7,c	;volatile
  7568  002166  0012               	return	
  7569  002168                     __end_ofi1_D_UART_Enable:
  7570                           	opt stack 0
  7571                           pclatu	equ	0xFFB
  7572                           pclath	equ	0xFFA
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           intcon2	equ	0xFF1
  7581                           postinc0	equ	0xFEE
  7582                           plusw0	equ	0xFEB
  7583                           fsr0h	equ	0xFEA
  7584                           fsr0l	equ	0xFE9
  7585                           wreg	equ	0xFE8
  7586                           postdec1	equ	0xFE5
  7587                           plusw1	equ	0xFE3
  7588                           fsr1h	equ	0xFE2
  7589                           fsr1l	equ	0xFE1
  7590                           bsr	equ	0xFE0
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function i1___lwmod *****************
  7600 ;; Defined at:
  7601 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  dividend        2    0[BANK0 ] unsigned int 
  7604 ;;  divisor         2    2[BANK0 ] unsigned int 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  __lwmod         1   32[COMRAM] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  2    0[BANK0 ] unsigned int 
  7609 ;; Registers used:
  7610 ;;		wreg, status,2, status,0
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7616 ;;      Params:         0       4       0       0       0       0       0       0       0
  7617 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7619 ;;      Totals:         1       4       0       0       0       0       0       0       0
  7620 ;;Total ram usage:        5 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    5
  7623 ;; This function calls:
  7624 ;;		Nothing
  7625 ;; This function is called by:
  7626 ;;		i1_printf
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text45
  7631  001EAA                     __ptext45:
  7632                           	opt stack 0
  7633  001EAA                     i1___lwmod:
  7634                           	opt stack 15
  7635                           
  7636                           ;incstack = 0
  7637  001EAA  0100               	movlb	0	; () banked
  7638  001EAC  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7639  001EAE  0100               	movlb	0	; () banked
  7640  001EB0  1163               	iorwf	(i1___lwmod@divisor+1)& (0+255),w,b
  7641  001EB2  B4D8               	btfsc	status,2,c
  7642  001EB4  D023               	goto	i1l959
  7643                           
  7644                           ; BSR set to: 0
  7645  001EB6  0E01               	movlw	1
  7646  001EB8  6E21               	movwf	i1___lwmod@counter,c
  7647  001EBA  D005               	goto	i1l3174
  7648  001EBC                     i1l3172:
  7649                           
  7650                           ; BSR set to: 0
  7651  001EBC  0100               	movlb	0	; () banked
  7652  001EBE  90D8               	bcf	status,0,c
  7653  001EC0  3762               	rlcf	i1___lwmod@divisor& (0+255),f,b
  7654  001EC2  3763               	rlcf	(i1___lwmod@divisor+1)& (0+255),f,b
  7655  001EC4  2A21               	incf	i1___lwmod@counter,f,c
  7656  001EC6                     i1l3174:
  7657                           
  7658                           ; BSR set to: 0
  7659  001EC6  0100               	movlb	0	; () banked
  7660  001EC8  AF63               	btfss	(i1___lwmod@divisor+1)& (0+255),7,b
  7661  001ECA  D7F8               	goto	i1l3172
  7662  001ECC                     i1l3176:
  7663                           
  7664                           ; BSR set to: 0
  7665  001ECC  0100               	movlb	0	; () banked
  7666  001ECE  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7667  001ED0  0100               	movlb	0	; () banked
  7668  001ED2  5D60               	subwf	i1___lwmod@dividend& (0+255),w,b
  7669  001ED4  0100               	movlb	0	; () banked
  7670  001ED6  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  7671  001ED8  0100               	movlb	0	; () banked
  7672  001EDA  5961               	subwfb	(i1___lwmod@dividend+1)& (0+255),w,b
  7673  001EDC  A0D8               	btfss	status,0,c
  7674  001EDE  D008               	goto	i1l3180
  7675                           
  7676                           ; BSR set to: 0
  7677  001EE0  0100               	movlb	0	; () banked
  7678  001EE2  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  7679  001EE4  0100               	movlb	0	; () banked
  7680  001EE6  5F60               	subwf	i1___lwmod@dividend& (0+255),f,b
  7681  001EE8  0100               	movlb	0	; () banked
  7682  001EEA  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  7683  001EEC  0100               	movlb	0	; () banked
  7684  001EEE  5B61               	subwfb	(i1___lwmod@dividend+1)& (0+255),f,b
  7685  001EF0                     i1l3180:
  7686                           
  7687                           ; BSR set to: 0
  7688  001EF0  0100               	movlb	0	; () banked
  7689  001EF2  90D8               	bcf	status,0,c
  7690  001EF4  3363               	rrcf	(i1___lwmod@divisor+1)& (0+255),f,b
  7691  001EF6  3362               	rrcf	i1___lwmod@divisor& (0+255),f,b
  7692                           
  7693                           ; BSR set to: 0
  7694  001EF8  2E21               	decfsz	i1___lwmod@counter,f,c
  7695  001EFA  D7E8               	goto	i1l3176
  7696  001EFC                     i1l959:
  7697                           
  7698                           ; BSR set to: 0
  7699  001EFC  C060  F060         	movff	i1___lwmod@dividend,?i1___lwmod
  7700  001F00  C061  F061         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  7701                           
  7702                           ; BSR set to: 0
  7703  001F04  0012               	return		;funcret
  7704  001F06                     __end_ofi1___lwmod:
  7705                           	opt stack 0
  7706                           pclatu	equ	0xFFB
  7707                           pclath	equ	0xFFA
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           intcon	equ	0xFF2
  7715                           intcon2	equ	0xFF1
  7716                           postinc0	equ	0xFEE
  7717                           plusw0	equ	0xFEB
  7718                           fsr0h	equ	0xFEA
  7719                           fsr0l	equ	0xFE9
  7720                           wreg	equ	0xFE8
  7721                           postdec1	equ	0xFE5
  7722                           plusw1	equ	0xFE3
  7723                           fsr1h	equ	0xFE2
  7724                           fsr1l	equ	0xFE1
  7725                           bsr	equ	0xFE0
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function i1___lwdiv *****************
  7735 ;; Defined at:
  7736 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  dividend        2   25[COMRAM] unsigned int 
  7739 ;;  divisor         2   27[COMRAM] unsigned int 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  __lwdiv         2   30[COMRAM] unsigned int 
  7742 ;;  __lwdiv         1   29[COMRAM] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  2   25[COMRAM] unsigned int 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7752 ;;      Params:         4       0       0       0       0       0       0       0       0
  7753 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7755 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7756 ;;Total ram usage:        7 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    5
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		i1_printf
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text46
  7767  001F5E                     __ptext46:
  7768                           	opt stack 0
  7769  001F5E                     i1___lwdiv:
  7770                           	opt stack 15
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;incstack = 0
  7774  001F5E  0E00               	movlw	0
  7775  001F60  6E20               	movwf	i1___lwdiv@quotient+1,c
  7776  001F62  0E00               	movlw	0
  7777  001F64  6E1F               	movwf	i1___lwdiv@quotient,c
  7778  001F66  501C               	movf	i1___lwdiv@divisor,w,c
  7779  001F68  101D               	iorwf	i1___lwdiv@divisor+1,w,c
  7780  001F6A  B4D8               	btfsc	status,2,c
  7781  001F6C  D01C               	goto	i1l949
  7782  001F6E  0E01               	movlw	1
  7783  001F70  6E1E               	movwf	i1___lwdiv@counter,c
  7784  001F72  D004               	goto	i1l3154
  7785  001F74                     i1l3152:
  7786  001F74  90D8               	bcf	status,0,c
  7787  001F76  361C               	rlcf	i1___lwdiv@divisor,f,c
  7788  001F78  361D               	rlcf	i1___lwdiv@divisor+1,f,c
  7789  001F7A  2A1E               	incf	i1___lwdiv@counter,f,c
  7790  001F7C                     i1l3154:
  7791  001F7C  AE1D               	btfss	i1___lwdiv@divisor+1,7,c
  7792  001F7E  D7FA               	goto	i1l3152
  7793  001F80                     i1l3156:
  7794  001F80  90D8               	bcf	status,0,c
  7795  001F82  361F               	rlcf	i1___lwdiv@quotient,f,c
  7796  001F84  3620               	rlcf	i1___lwdiv@quotient+1,f,c
  7797  001F86  501C               	movf	i1___lwdiv@divisor,w,c
  7798  001F88  5C1A               	subwf	i1___lwdiv@dividend,w,c
  7799  001F8A  501D               	movf	i1___lwdiv@divisor+1,w,c
  7800  001F8C  581B               	subwfb	i1___lwdiv@dividend+1,w,c
  7801  001F8E  A0D8               	btfss	status,0,c
  7802  001F90  D005               	goto	i1l3164
  7803  001F92  501C               	movf	i1___lwdiv@divisor,w,c
  7804  001F94  5E1A               	subwf	i1___lwdiv@dividend,f,c
  7805  001F96  501D               	movf	i1___lwdiv@divisor+1,w,c
  7806  001F98  5A1B               	subwfb	i1___lwdiv@dividend+1,f,c
  7807  001F9A  801F               	bsf	i1___lwdiv@quotient,0,c
  7808  001F9C                     i1l3164:
  7809  001F9C  90D8               	bcf	status,0,c
  7810  001F9E  321D               	rrcf	i1___lwdiv@divisor+1,f,c
  7811  001FA0  321C               	rrcf	i1___lwdiv@divisor,f,c
  7812  001FA2  2E1E               	decfsz	i1___lwdiv@counter,f,c
  7813  001FA4  D7ED               	goto	i1l3156
  7814  001FA6                     i1l949:
  7815  001FA6  C01F  F01A         	movff	i1___lwdiv@quotient,?i1___lwdiv
  7816  001FAA  C020  F01B         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  7817  001FAE  0012               	return		;funcret
  7818  001FB0                     __end_ofi1___lwdiv:
  7819                           	opt stack 0
  7820                           pclatu	equ	0xFFB
  7821                           pclath	equ	0xFFA
  7822                           tblptru	equ	0xFF8
  7823                           tblptrh	equ	0xFF7
  7824                           tblptrl	equ	0xFF6
  7825                           tablat	equ	0xFF5
  7826                           prodh	equ	0xFF4
  7827                           prodl	equ	0xFF3
  7828                           intcon	equ	0xFF2
  7829                           intcon2	equ	0xFF1
  7830                           postinc0	equ	0xFEE
  7831                           plusw0	equ	0xFEB
  7832                           fsr0h	equ	0xFEA
  7833                           fsr0l	equ	0xFE9
  7834                           wreg	equ	0xFE8
  7835                           postdec1	equ	0xFE5
  7836                           plusw1	equ	0xFE3
  7837                           fsr1h	equ	0xFE2
  7838                           fsr1l	equ	0xFE1
  7839                           bsr	equ	0xFE0
  7840                           indf2	equ	0xFDF
  7841                           postinc2	equ	0xFDE
  7842                           postdec2	equ	0xFDD
  7843                           plusw2	equ	0xFDB
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848 ;; *************** function _HighISR *****************
  7849 ;; Defined at:
  7850 ;;		line 387 in file "Drivers/PWM_Driver.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7864 ;;      Params:         0       0       0       0       0       0       0       0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7866 ;;      Temps:         14       0       0       0       0       0       0       0       0
  7867 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7868 ;;Total ram usage:       14 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    4
  7871 ;; This function calls:
  7872 ;;		_handleState
  7873 ;; This function is called by:
  7874 ;;		Interrupt level 2
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	intcode
  7879  000008                     __pintcode:
  7880                           	opt stack 0
  7881  000008                     _HighISR:
  7882                           	opt stack 13
  7883                           
  7884                           ;incstack = 0
  7885  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7886  00000A  ED36  F00D         	call	int_func,f	;refresh shadow registers
  7887                           pclatu	equ	0xFFB
  7888                           pclath	equ	0xFFA
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           prodh	equ	0xFF4
  7894                           prodl	equ	0xFF3
  7895                           intcon	equ	0xFF2
  7896                           intcon2	equ	0xFF1
  7897                           postinc0	equ	0xFEE
  7898                           plusw0	equ	0xFEB
  7899                           fsr0h	equ	0xFEA
  7900                           fsr0l	equ	0xFE9
  7901                           wreg	equ	0xFE8
  7902                           postdec1	equ	0xFE5
  7903                           plusw1	equ	0xFE3
  7904                           fsr1h	equ	0xFE2
  7905                           fsr1l	equ	0xFE1
  7906                           bsr	equ	0xFE0
  7907                           indf2	equ	0xFDF
  7908                           postinc2	equ	0xFDE
  7909                           postdec2	equ	0xFDD
  7910                           plusw2	equ	0xFDB
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915                           	psect	intcode_body
  7916  001A6C                     __pintcode_body:
  7917                           	opt stack 13
  7918  001A6C                     int_func:
  7919                           	opt stack 13
  7920  001A6C  0006               	pop		; remove dummy address from shadow register refresh
  7921  001A6E  CFFA F00C          	movff	pclath,??_HighISR
  7922  001A72  CFFB F00D          	movff	pclatu,??_HighISR+1
  7923  001A76  CFE9 F00E          	movff	fsr0l,??_HighISR+2
  7924  001A7A  CFEA F00F          	movff	fsr0h,??_HighISR+3
  7925  001A7E  CFE1 F010          	movff	fsr1l,??_HighISR+4
  7926  001A82  CFE2 F011          	movff	fsr1h,??_HighISR+5
  7927  001A86  CFD9 F012          	movff	fsr2l,??_HighISR+6
  7928  001A8A  CFDA F013          	movff	fsr2h,??_HighISR+7
  7929  001A8E  CFF3 F014          	movff	prodl,??_HighISR+8
  7930  001A92  CFF4 F015          	movff	prodh,??_HighISR+9
  7931  001A96  CFF6 F016          	movff	tblptrl,??_HighISR+10
  7932  001A9A  CFF7 F017          	movff	tblptrh,??_HighISR+11
  7933  001A9E  CFF8 F018          	movff	tblptru,??_HighISR+12
  7934  001AA2  CFF5 F019          	movff	tablat,??_HighISR+13
  7935                           
  7936                           ;PWM_Driver.c: 388: if (INTCONbits.TMR0IF) {
  7937  001AA6  A4F2               	btfss	intcon,2,c	;volatile
  7938  001AA8  D007               	goto	i2l397
  7939                           
  7940                           ;PWM_Driver.c: 389: TMR0L = 0;
  7941  001AAA  0E00               	movlw	0
  7942  001AAC  6ED6               	movwf	4054,c	;volatile
  7943                           
  7944                           ;PWM_Driver.c: 390: TMR0H = 0;
  7945  001AAE  0E00               	movlw	0
  7946  001AB0  6ED7               	movwf	4055,c	;volatile
  7947                           
  7948                           ;PWM_Driver.c: 391: INTCONbits.TMR0IF = 0;
  7949  001AB2  94F2               	bcf	intcon,2,c	;volatile
  7950                           
  7951                           ;PWM_Driver.c: 392: handleState();
  7952  001AB4  EC2A  F00E         	call	_handleState	;wreg free
  7953  001AB8                     i2l397:
  7954  001AB8  C019  FFF5         	movff	??_HighISR+13,tablat
  7955  001ABC  C018  FFF8         	movff	??_HighISR+12,tblptru
  7956  001AC0  C017  FFF7         	movff	??_HighISR+11,tblptrh
  7957  001AC4  C016  FFF6         	movff	??_HighISR+10,tblptrl
  7958  001AC8  C015  FFF4         	movff	??_HighISR+9,prodh
  7959  001ACC  C014  FFF3         	movff	??_HighISR+8,prodl
  7960  001AD0  C013  FFDA         	movff	??_HighISR+7,fsr2h
  7961  001AD4  C012  FFD9         	movff	??_HighISR+6,fsr2l
  7962  001AD8  C011  FFE2         	movff	??_HighISR+5,fsr1h
  7963  001ADC  C010  FFE1         	movff	??_HighISR+4,fsr1l
  7964  001AE0  C00F  FFEA         	movff	??_HighISR+3,fsr0h
  7965  001AE4  C00E  FFE9         	movff	??_HighISR+2,fsr0l
  7966  001AE8  C00D  FFFB         	movff	??_HighISR+1,pclatu
  7967  001AEC  C00C  FFFA         	movff	??_HighISR,pclath
  7968  001AF0  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7969  001AF2  0011               	retfie		f
  7970  001AF4                     __end_of_HighISR:
  7971                           	opt stack 0
  7972                           pclatu	equ	0xFFB
  7973                           pclath	equ	0xFFA
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           intcon	equ	0xFF2
  7981                           intcon2	equ	0xFF1
  7982                           postinc0	equ	0xFEE
  7983                           plusw0	equ	0xFEB
  7984                           fsr0h	equ	0xFEA
  7985                           fsr0l	equ	0xFE9
  7986                           wreg	equ	0xFE8
  7987                           postdec1	equ	0xFE5
  7988                           plusw1	equ	0xFE3
  7989                           fsr1h	equ	0xFE2
  7990                           fsr1l	equ	0xFE1
  7991                           bsr	equ	0xFE0
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           plusw2	equ	0xFDB
  7996                           fsr2h	equ	0xFDA
  7997                           fsr2l	equ	0xFD9
  7998                           status	equ	0xFD8
  7999                           
  8000 ;; *************** function _handleState *****************
  8001 ;; Defined at:
  8002 ;;		line 242 in file "Drivers/PWM_Driver.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;		None
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;		None
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      void 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0, cstack
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8016 ;;      Params:         0       0       0       0       0       0       0       0       0
  8017 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8019 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8020 ;;Total ram usage:        0 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    3
  8023 ;; This function calls:
  8024 ;;		_fade
  8025 ;;		_flash
  8026 ;;		_pwmColors
  8027 ;;		_smooth
  8028 ;;		_strobe2
  8029 ;; This function is called by:
  8030 ;;		_HighISR
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text48
  8035  001C54                     __ptext48:
  8036                           	opt stack 0
  8037  001C54                     _handleState:
  8038                           	opt stack 13
  8039                           
  8040                           ;PWM_Driver.c: 243: static uint8_t cnt;
  8041                           ;PWM_Driver.c: 245: switch(state) {
  8042                           
  8043                           ;incstack = 0
  8044  001C54  D024               	goto	i2l2980
  8045  001C56                     i2l2960:
  8046                           
  8047                           ;PWM_Driver.c: 247: pwmColors(scale);
  8048  001C56  502C               	movf	_scale,w,c
  8049  001C58  ECA9  F00C         	call	_pwmColors
  8050                           
  8051                           ;PWM_Driver.c: 248: break;
  8052  001C5C  D030               	goto	i2l2982
  8053  001C5E                     i2l2962:
  8054                           
  8055                           ;PWM_Driver.c: 251: if (cnt == 0) {
  8056  001C5E  5035               	movf	handleState@cnt,w,c
  8057  001C60  B4D8               	btfsc	status,2,c
  8058                           
  8059                           ;PWM_Driver.c: 252: flash();
  8060  001C62  ECBA  F00B         	call	_flash	;wreg free
  8061                           
  8062                           ;PWM_Driver.c: 253: }
  8063                           ;PWM_Driver.c: 254: pwmColors(7);
  8064  001C66  0E07               	movlw	7
  8065  001C68  ECA9  F00C         	call	_pwmColors
  8066                           
  8067                           ;PWM_Driver.c: 255: break;
  8068  001C6C  D028               	goto	i2l2982
  8069  001C6E                     i2l2966:
  8070                           
  8071                           ;PWM_Driver.c: 258: if (cnt == 0) {
  8072  001C6E  5035               	movf	handleState@cnt,w,c
  8073  001C70  B4D8               	btfsc	status,2,c
  8074                           
  8075                           ;PWM_Driver.c: 259: strobe2();
  8076  001C72  EC7A  F00D         	call	_strobe2	;wreg free
  8077                           
  8078                           ;PWM_Driver.c: 260: }
  8079                           ;PWM_Driver.c: 261: pwmColors(7);
  8080  001C76  0E07               	movlw	7
  8081  001C78  ECA9  F00C         	call	_pwmColors
  8082                           
  8083                           ;PWM_Driver.c: 262: break;
  8084  001C7C  D020               	goto	i2l2982
  8085  001C7E                     i2l2970:
  8086                           
  8087                           ;PWM_Driver.c: 265: if (cnt == 0) {
  8088  001C7E  5035               	movf	handleState@cnt,w,c
  8089  001C80  B4D8               	btfsc	status,2,c
  8090                           
  8091                           ;PWM_Driver.c: 266: fade();
  8092  001C82  ECF0  F00C         	call	_fade	;wreg free
  8093                           
  8094                           ;PWM_Driver.c: 267: }
  8095                           ;PWM_Driver.c: 268: pwmColors(7);
  8096  001C86  0E07               	movlw	7
  8097  001C88  ECA9  F00C         	call	_pwmColors
  8098                           
  8099                           ;PWM_Driver.c: 269: break;
  8100  001C8C  D018               	goto	i2l2982
  8101  001C8E                     i2l2974:
  8102                           
  8103                           ;PWM_Driver.c: 272: if (cnt == 0) {
  8104  001C8E  5035               	movf	handleState@cnt,w,c
  8105  001C90  B4D8               	btfsc	status,2,c
  8106                           
  8107                           ;PWM_Driver.c: 273: smooth();
  8108  001C92  EC8F  F00A         	call	_smooth	;wreg free
  8109                           
  8110                           ;PWM_Driver.c: 274: }
  8111                           ;PWM_Driver.c: 275: pwmColors(7);
  8112  001C96  0E07               	movlw	7
  8113  001C98  ECA9  F00C         	call	_pwmColors
  8114                           
  8115                           ;PWM_Driver.c: 280: }
  8116                           
  8117                           ;PWM_Driver.c: 279: break;
  8118                           
  8119                           ;PWM_Driver.c: 278: default:
  8120                           
  8121                           ;PWM_Driver.c: 276: break;
  8122  001C9C  D010               	goto	i2l2982
  8123  001C9E                     i2l2980:
  8124  001C9E  502D               	movf	_state,w,c
  8125                           
  8126                           ; Switch size 1, requested type "space"
  8127                           ; Number of cases is 5, Range of values is 0 to 4
  8128                           ; switch strategies available:
  8129                           ; Name         Instructions Cycles
  8130                           ; simple_byte           16     9 (average)
  8131                           ;	Chosen strategy is simple_byte
  8132  001CA0  0A00               	xorlw	0	; case 0
  8133  001CA2  B4D8               	btfsc	status,2,c
  8134  001CA4  D7D8               	goto	i2l2960
  8135  001CA6  0A01               	xorlw	1	; case 1
  8136  001CA8  B4D8               	btfsc	status,2,c
  8137  001CAA  D7D9               	goto	i2l2962
  8138  001CAC  0A03               	xorlw	3	; case 2
  8139  001CAE  B4D8               	btfsc	status,2,c
  8140  001CB0  D7DE               	goto	i2l2966
  8141  001CB2  0A01               	xorlw	1	; case 3
  8142  001CB4  B4D8               	btfsc	status,2,c
  8143  001CB6  D7E3               	goto	i2l2970
  8144  001CB8  0A07               	xorlw	7	; case 4
  8145  001CBA  B4D8               	btfsc	status,2,c
  8146  001CBC  D7E8               	goto	i2l2974
  8147  001CBE                     i2l2982:
  8148                           
  8149                           ;PWM_Driver.c: 281: cnt++;
  8150  001CBE  2A35               	incf	handleState@cnt,f,c
  8151  001CC0  0012               	return		;funcret
  8152  001CC2                     __end_of_handleState:
  8153                           	opt stack 0
  8154                           pclatu	equ	0xFFB
  8155                           pclath	equ	0xFFA
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           intcon	equ	0xFF2
  8163                           intcon2	equ	0xFF1
  8164                           postinc0	equ	0xFEE
  8165                           plusw0	equ	0xFEB
  8166                           fsr0h	equ	0xFEA
  8167                           fsr0l	equ	0xFE9
  8168                           wreg	equ	0xFE8
  8169                           postdec1	equ	0xFE5
  8170                           plusw1	equ	0xFE3
  8171                           fsr1h	equ	0xFE2
  8172                           fsr1l	equ	0xFE1
  8173                           bsr	equ	0xFE0
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           plusw2	equ	0xFDB
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _strobe2 *****************
  8183 ;; Defined at:
  8184 ;;		line 126 in file "Drivers/PWM_Driver.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;		None
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, status,2, status,0, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0
  8199 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8200 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8201 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8202 ;;Total ram usage:        5 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    2
  8205 ;; This function calls:
  8206 ;;		i2_setRGB
  8207 ;; This function is called by:
  8208 ;;		_handleState
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text49
  8213  001AF4                     __ptext49:
  8214                           	opt stack 0
  8215  001AF4                     _strobe2:
  8216                           	opt stack 13
  8217                           
  8218                           ;PWM_Driver.c: 127: static uint8_t cnt;
  8219                           ;PWM_Driver.c: 128: static uint8_t on_cnt;
  8220                           ;PWM_Driver.c: 129: static bool on;
  8221                           ;PWM_Driver.c: 131: if (cnt < ((scale<<6)+1)) {
  8222                           
  8223                           ;incstack = 0
  8224  001AF4  502C               	movf	_scale,w,c
  8225  001AF6  6E06               	movwf	??_strobe2& (0+255),c
  8226  001AF8  6A07               	clrf	(??_strobe2+1)& (0+255),c
  8227  001AFA  0E06               	movlw	6
  8228  001AFC                     i2u188_45:
  8229  001AFC  90D8               	bcf	status,0,c
  8230  001AFE  3606               	rlcf	??_strobe2,f,c
  8231  001B00  3607               	rlcf	??_strobe2+1,f,c
  8232  001B02  2EE8               	decfsz	wreg,f,c
  8233  001B04  D7FB               	goto	i2u188_45
  8234  001B06  0E01               	movlw	1
  8235  001B08  2606               	addwf	??_strobe2,f,c
  8236  001B0A  0E00               	movlw	0
  8237  001B0C  2207               	addwfc	??_strobe2+1,f,c
  8238  001B0E  5038               	movf	strobe2@cnt,w,c
  8239  001B10  6E08               	movwf	(??_strobe2+2)& (0+255),c
  8240  001B12  6A09               	clrf	(??_strobe2+3)& (0+255),c
  8241  001B14  5006               	movf	??_strobe2,w,c
  8242  001B16  5C08               	subwf	??_strobe2+2,w,c
  8243  001B18  5009               	movf	??_strobe2+3,w,c
  8244  001B1A  0A80               	xorlw	128
  8245  001B1C  6E0A               	movwf	(??_strobe2+4)& (0+255),c
  8246  001B1E  5007               	movf	??_strobe2+1,w,c
  8247  001B20  0A80               	xorlw	128
  8248  001B22  580A               	subwfb	(??_strobe2+4)& (0+255),w,c
  8249  001B24  B0D8               	btfsc	status,0,c
  8250  001B26  D018               	goto	i2l2614
  8251                           
  8252                           ;PWM_Driver.c: 132: if (on_cnt < 2) {
  8253  001B28  0E02               	movlw	2
  8254  001B2A  603A               	cpfslt	strobe2@on_cnt,c
  8255  001B2C  D008               	goto	i2l2606
  8256                           
  8257                           ;PWM_Driver.c: 133: setRGB(255,255,255);
  8258  001B2E  0EFF               	movlw	255
  8259  001B30  6E03               	movwf	i2setRGB@g,c
  8260  001B32  0EFF               	movlw	255
  8261  001B34  6E04               	movwf	i2setRGB@b,c
  8262  001B36  0EFF               	movlw	255
  8263  001B38  EC93  F010         	call	i2_setRGB
  8264                           
  8265                           ;PWM_Driver.c: 134: } else {
  8266  001B3C  D007               	goto	i2l2608
  8267  001B3E                     i2l2606:
  8268                           
  8269                           ;PWM_Driver.c: 135: setRGB(0,0,0);
  8270  001B3E  0E00               	movlw	0
  8271  001B40  6E03               	movwf	i2setRGB@g,c
  8272  001B42  0E00               	movlw	0
  8273  001B44  6E04               	movwf	i2setRGB@b,c
  8274  001B46  0E00               	movlw	0
  8275  001B48  EC93  F010         	call	i2_setRGB
  8276  001B4C                     i2l2608:
  8277                           
  8278                           ;PWM_Driver.c: 136: }
  8279                           ;PWM_Driver.c: 138: on_cnt++;
  8280  001B4C  2A3A               	incf	strobe2@on_cnt,f,c
  8281                           
  8282                           ;PWM_Driver.c: 139: if (on_cnt >= 20) {
  8283  001B4E  0E13               	movlw	19
  8284  001B50  643A               	cpfsgt	strobe2@on_cnt,c
  8285  001B52  D002               	goto	i2l2614
  8286                           
  8287                           ;PWM_Driver.c: 140: on_cnt = 0;
  8288  001B54  0E00               	movlw	0
  8289  001B56  6E3A               	movwf	strobe2@on_cnt,c
  8290  001B58                     i2l2614:
  8291                           
  8292                           ;PWM_Driver.c: 141: }
  8293                           ;PWM_Driver.c: 142: }
  8294                           ;PWM_Driver.c: 143: cnt += ((scale<<6) + 1);
  8295  001B58  C02C  F006         	movff	_scale,??_strobe2
  8296  001B5C  0E06               	movlw	6
  8297  001B5E  6E07               	movwf	(??_strobe2+1)& (0+255),c
  8298  001B60                     i2u192_45:
  8299  001B60  90D8               	bcf	status,0,c
  8300  001B62  3606               	rlcf	??_strobe2,f,c
  8301  001B64  2E07               	decfsz	(??_strobe2+1)& (0+255),f,c
  8302  001B66  D7FC               	goto	i2u192_45
  8303  001B68  2806               	incf	??_strobe2,w,c
  8304  001B6A  2638               	addwf	strobe2@cnt,f,c
  8305  001B6C  0012               	return		;funcret
  8306  001B6E                     __end_of_strobe2:
  8307                           	opt stack 0
  8308                           pclatu	equ	0xFFB
  8309                           pclath	equ	0xFFA
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           intcon2	equ	0xFF1
  8318                           postinc0	equ	0xFEE
  8319                           plusw0	equ	0xFEB
  8320                           fsr0h	equ	0xFEA
  8321                           fsr0l	equ	0xFE9
  8322                           wreg	equ	0xFE8
  8323                           postdec1	equ	0xFE5
  8324                           plusw1	equ	0xFE3
  8325                           fsr1h	equ	0xFE2
  8326                           fsr1l	equ	0xFE1
  8327                           bsr	equ	0xFE0
  8328                           indf2	equ	0xFDF
  8329                           postinc2	equ	0xFDE
  8330                           postdec2	equ	0xFDD
  8331                           plusw2	equ	0xFDB
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function _smooth *****************
  8337 ;; Defined at:
  8338 ;;		line 203 in file "Drivers/PWM_Driver.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;		None
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      void 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8352 ;;      Params:         0       0       0       0       0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8354 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8355 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8356 ;;Total ram usage:        6 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    2
  8359 ;; This function calls:
  8360 ;;		i2_setRGB
  8361 ;; This function is called by:
  8362 ;;		_handleState
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text50
  8367  00151E                     __ptext50:
  8368                           	opt stack 0
  8369  00151E                     _smooth:
  8370                           	opt stack 13
  8371                           
  8372                           ;PWM_Driver.c: 204: static uint8_t count;
  8373                           ;PWM_Driver.c: 205: static uint8_t color;
  8374                           ;PWM_Driver.c: 207: if (count >= (0xFF >> scale)) {
  8375                           
  8376                           ;incstack = 0
  8377  00151E  C02C  F006         	movff	_scale,??_smooth
  8378  001522  0EFF               	movlw	255
  8379  001524  6E07               	movwf	(??_smooth+1)& (0+255),c
  8380  001526  0E00               	movlw	0
  8381  001528  6E08               	movwf	(??_smooth+2)& (0+255),c
  8382  00152A  2A06               	incf	??_smooth,f,c
  8383  00152C  D003               	goto	i2u203_44
  8384  00152E                     i2u203_45:
  8385  00152E  3408               	rlcf	??_smooth+2,w,c
  8386  001530  3208               	rrcf	??_smooth+2,f,c
  8387  001532  3207               	rrcf	??_smooth+1,f,c
  8388  001534                     i2u203_44:
  8389  001534  2E06               	decfsz	??_smooth,f,c
  8390  001536  D7FB               	goto	i2u203_45
  8391  001538  5037               	movf	smooth@count,w,c
  8392  00153A  6E09               	movwf	(??_smooth+3)& (0+255),c
  8393  00153C  6A0A               	clrf	(??_smooth+4)& (0+255),c
  8394  00153E  5007               	movf	??_smooth+1,w,c
  8395  001540  5C09               	subwf	??_smooth+3,w,c
  8396  001542  500A               	movf	??_smooth+4,w,c
  8397  001544  0A80               	xorlw	128
  8398  001546  6E0B               	movwf	(??_smooth+5)& (0+255),c
  8399  001548  5008               	movf	??_smooth+2,w,c
  8400  00154A  0A80               	xorlw	128
  8401  00154C  580B               	subwfb	(??_smooth+5)& (0+255),w,c
  8402  00154E  A0D8               	btfss	status,0,c
  8403  001550  D002               	goto	i2l314
  8404                           
  8405                           ;PWM_Driver.c: 208: count = 0;
  8406  001552  0E00               	movlw	0
  8407  001554  6E37               	movwf	smooth@count,c
  8408  001556                     i2l314:
  8409                           
  8410                           ;PWM_Driver.c: 209: }
  8411                           ;PWM_Driver.c: 210: if (count == 0) {
  8412  001556  5037               	movf	smooth@count,w,c
  8413  001558  B4D8               	btfsc	status,2,c
  8414  00155A  D038               	goto	i2l2696
  8415  00155C  D04A               	goto	i2l2698
  8416  00155E                     i2l2670:
  8417                           
  8418                           ;PWM_Driver.c: 213: setRGB(255, 0, 0);
  8419  00155E  0E00               	movlw	0
  8420  001560  6E03               	movwf	i2setRGB@g,c
  8421  001562  0E00               	movlw	0
  8422  001564  6E04               	movwf	i2setRGB@b,c
  8423  001566  0EFF               	movlw	255
  8424  001568  EC93  F010         	call	i2_setRGB
  8425                           
  8426                           ;PWM_Driver.c: 214: color = 1;
  8427  00156C  0E01               	movlw	1
  8428  00156E  D02C               	goto	L10
  8429  001570                     i2l2674:
  8430                           
  8431                           ;PWM_Driver.c: 217: setRGB(255, 255, 0);
  8432  001570  0EFF               	movlw	255
  8433  001572  6E03               	movwf	i2setRGB@g,c
  8434  001574  0E00               	movlw	0
  8435  001576  6E04               	movwf	i2setRGB@b,c
  8436  001578  0EFF               	movlw	255
  8437  00157A  EC93  F010         	call	i2_setRGB
  8438                           
  8439                           ;PWM_Driver.c: 218: color = 2;
  8440  00157E  0E02               	movlw	2
  8441  001580  D023               	goto	L10
  8442  001582                     i2l2678:
  8443                           
  8444                           ;PWM_Driver.c: 221: setRGB(0, 255, 0);
  8445  001582  0EFF               	movlw	255
  8446  001584  6E03               	movwf	i2setRGB@g,c
  8447  001586  0E00               	movlw	0
  8448  001588  6E04               	movwf	i2setRGB@b,c
  8449  00158A  0E00               	movlw	0
  8450  00158C  EC93  F010         	call	i2_setRGB
  8451                           
  8452                           ;PWM_Driver.c: 222: color = 3;
  8453  001590  0E03               	movlw	3
  8454  001592  D01A               	goto	L10
  8455  001594                     i2l2682:
  8456                           
  8457                           ;PWM_Driver.c: 225: setRGB(0, 255, 255);
  8458  001594  0EFF               	movlw	255
  8459  001596  6E03               	movwf	i2setRGB@g,c
  8460  001598  0EFF               	movlw	255
  8461  00159A  6E04               	movwf	i2setRGB@b,c
  8462  00159C  0E00               	movlw	0
  8463  00159E  EC93  F010         	call	i2_setRGB
  8464                           
  8465                           ;PWM_Driver.c: 226: color = 4;
  8466  0015A2  0E04               	movlw	4
  8467  0015A4  D011               	goto	L10
  8468  0015A6                     i2l2686:
  8469                           
  8470                           ;PWM_Driver.c: 229: setRGB(0, 0, 255);
  8471  0015A6  0E00               	movlw	0
  8472  0015A8  6E03               	movwf	i2setRGB@g,c
  8473  0015AA  0EFF               	movlw	255
  8474  0015AC  6E04               	movwf	i2setRGB@b,c
  8475  0015AE  0E00               	movlw	0
  8476  0015B0  EC93  F010         	call	i2_setRGB
  8477                           
  8478                           ;PWM_Driver.c: 230: color = 5;
  8479  0015B4  0E05               	movlw	5
  8480  0015B6  D008               	goto	L10
  8481  0015B8                     i2l2690:
  8482                           
  8483                           ;PWM_Driver.c: 233: setRGB(255, 0, 255);
  8484  0015B8  0E00               	movlw	0
  8485  0015BA  6E03               	movwf	i2setRGB@g,c
  8486  0015BC  0EFF               	movlw	255
  8487  0015BE  6E04               	movwf	i2setRGB@b,c
  8488  0015C0  0EFF               	movlw	255
  8489  0015C2  EC93  F010         	call	i2_setRGB
  8490                           
  8491                           ;PWM_Driver.c: 234: color = 0;
  8492  0015C6  0E00               	movlw	0
  8493  0015C8                     L10:
  8494  0015C8  6E36               	movwf	smooth@color,c
  8495                           
  8496                           ;PWM_Driver.c: 236: }
  8497                           
  8498                           ;PWM_Driver.c: 235: break;
  8499  0015CA  D013               	goto	i2l2698
  8500  0015CC                     i2l2696:
  8501  0015CC  5036               	movf	smooth@color,w,c
  8502                           
  8503                           ; Switch size 1, requested type "space"
  8504                           ; Number of cases is 6, Range of values is 0 to 5
  8505                           ; switch strategies available:
  8506                           ; Name         Instructions Cycles
  8507                           ; simple_byte           19    10 (average)
  8508                           ;	Chosen strategy is simple_byte
  8509  0015CE  0A00               	xorlw	0	; case 0
  8510  0015D0  B4D8               	btfsc	status,2,c
  8511  0015D2  D7C5               	goto	i2l2670
  8512  0015D4  0A01               	xorlw	1	; case 1
  8513  0015D6  B4D8               	btfsc	status,2,c
  8514  0015D8  D7CB               	goto	i2l2674
  8515  0015DA  0A03               	xorlw	3	; case 2
  8516  0015DC  B4D8               	btfsc	status,2,c
  8517  0015DE  D7D1               	goto	i2l2678
  8518  0015E0  0A01               	xorlw	1	; case 3
  8519  0015E2  B4D8               	btfsc	status,2,c
  8520  0015E4  D7D7               	goto	i2l2682
  8521  0015E6  0A07               	xorlw	7	; case 4
  8522  0015E8  B4D8               	btfsc	status,2,c
  8523  0015EA  D7DD               	goto	i2l2686
  8524  0015EC  0A01               	xorlw	1	; case 5
  8525  0015EE  B4D8               	btfsc	status,2,c
  8526  0015F0  D7E3               	goto	i2l2690
  8527  0015F2                     i2l2698:
  8528                           
  8529                           ;PWM_Driver.c: 237: }
  8530                           ;PWM_Driver.c: 239: count++;
  8531  0015F2  2A37               	incf	smooth@count,f,c
  8532  0015F4  0012               	return		;funcret
  8533  0015F6                     __end_of_smooth:
  8534                           	opt stack 0
  8535                           pclatu	equ	0xFFB
  8536                           pclath	equ	0xFFA
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           prodh	equ	0xFF4
  8542                           prodl	equ	0xFF3
  8543                           intcon	equ	0xFF2
  8544                           intcon2	equ	0xFF1
  8545                           postinc0	equ	0xFEE
  8546                           plusw0	equ	0xFEB
  8547                           fsr0h	equ	0xFEA
  8548                           fsr0l	equ	0xFE9
  8549                           wreg	equ	0xFE8
  8550                           postdec1	equ	0xFE5
  8551                           plusw1	equ	0xFE3
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           bsr	equ	0xFE0
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           postdec2	equ	0xFDD
  8558                           plusw2	equ	0xFDB
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function _pwmColors *****************
  8564 ;; Defined at:
  8565 ;;		line 49 in file "Drivers/PWM_Driver.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  birghtness      1    wreg     unsigned char 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  birghtness      1    2[COMRAM] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0
  8580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8581 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8582 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8583 ;;Total ram usage:        3 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_handleState
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text51
  8593  001952                     __ptext51:
  8594                           	opt stack 0
  8595  001952                     _pwmColors:
  8596                           	opt stack 15
  8597                           
  8598                           ;incstack = 0
  8599                           ;pwmColors@birghtness stored from wreg
  8600  001952  6E03               	movwf	pwmColors@birghtness,c
  8601                           
  8602                           ;PWM_Driver.c: 51: if (PWM_Red.duty_cnt >= (PWM_Red.duty_val >> (7-birghtness))) {
  8603  001954  5003               	movf	pwmColors@birghtness,w,c
  8604  001956  0800               	sublw	0
  8605  001958  6E01               	movwf	??_pwmColors& (0+255),c
  8606  00195A  0E07               	movlw	7
  8607  00195C  2601               	addwf	??_pwmColors,f,c
  8608  00195E  C0CD  F002         	movff	_PWM_Red+1,??_pwmColors+1
  8609  001962  2A01               	incf	??_pwmColors,f,c
  8610  001964  D002               	goto	i2u179_44
  8611  001966                     i2u179_45:
  8612  001966  90D8               	bcf	status,0,c
  8613  001968  3202               	rrcf	??_pwmColors+1,f,c
  8614  00196A                     i2u179_44:
  8615  00196A  2E01               	decfsz	??_pwmColors,f,c
  8616  00196C  D7FC               	goto	i2u179_45
  8617  00196E  5002               	movf	??_pwmColors+1,w,c
  8618  001970  0100               	movlb	0	; () banked
  8619  001972  5DCC               	subwf	_PWM_Red& (0+255),w,b
  8620  001974  A0D8               	btfss	status,0,c
  8621  001976  D002               	goto	i2l231
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;PWM_Driver.c: 52: PORTBbits.RB2 = 0;
  8625  001978  9481               	bcf	3969,2,c	;volatile
  8626                           
  8627                           ;PWM_Driver.c: 53: } else {
  8628  00197A  D001               	goto	i2l2562
  8629  00197C                     i2l231:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;PWM_Driver.c: 54: PORTBbits.RB2 = 1;
  8633  00197C  8481               	bsf	3969,2,c	;volatile
  8634  00197E                     i2l2562:
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;PWM_Driver.c: 55: }
  8638                           ;PWM_Driver.c: 57: if (PWM_Green.duty_cnt >= (PWM_Green.duty_val >> (7-birghtness))) {
  8639  00197E  5003               	movf	pwmColors@birghtness,w,c
  8640  001980  0800               	sublw	0
  8641  001982  6E01               	movwf	??_pwmColors& (0+255),c
  8642  001984  0E07               	movlw	7
  8643  001986  2601               	addwf	??_pwmColors,f,c
  8644  001988  C0CB  F002         	movff	_PWM_Green+1,??_pwmColors+1
  8645  00198C  2A01               	incf	??_pwmColors,f,c
  8646  00198E  D002               	goto	i2u181_44
  8647  001990                     i2u181_45:
  8648  001990  90D8               	bcf	status,0,c
  8649  001992  3202               	rrcf	??_pwmColors+1,f,c
  8650  001994                     i2u181_44:
  8651  001994  2E01               	decfsz	??_pwmColors,f,c
  8652  001996  D7FC               	goto	i2u181_45
  8653  001998  5002               	movf	??_pwmColors+1,w,c
  8654  00199A  0100               	movlb	0	; () banked
  8655  00199C  5DCA               	subwf	_PWM_Green& (0+255),w,b
  8656  00199E  A0D8               	btfss	status,0,c
  8657  0019A0  D002               	goto	i2l233
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;PWM_Driver.c: 58: PORTBbits.RB3 = 0;
  8661  0019A2  9681               	bcf	3969,3,c	;volatile
  8662                           
  8663                           ;PWM_Driver.c: 59: } else {
  8664  0019A4  D001               	goto	i2l2566
  8665  0019A6                     i2l233:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;PWM_Driver.c: 60: PORTBbits.RB3 = 1;
  8669  0019A6  8681               	bsf	3969,3,c	;volatile
  8670  0019A8                     i2l2566:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;PWM_Driver.c: 61: }
  8674                           ;PWM_Driver.c: 63: if (PWM_Blue.duty_cnt >= (PWM_Blue.duty_val >> (7-birghtness))) {
  8675  0019A8  5003               	movf	pwmColors@birghtness,w,c
  8676  0019AA  0800               	sublw	0
  8677  0019AC  6E01               	movwf	??_pwmColors& (0+255),c
  8678  0019AE  0E07               	movlw	7
  8679  0019B0  2601               	addwf	??_pwmColors,f,c
  8680  0019B2  C0C9  F002         	movff	_PWM_Blue+1,??_pwmColors+1
  8681  0019B6  2A01               	incf	??_pwmColors,f,c
  8682  0019B8  D002               	goto	i2u183_44
  8683  0019BA                     i2u183_45:
  8684  0019BA  90D8               	bcf	status,0,c
  8685  0019BC  3202               	rrcf	??_pwmColors+1,f,c
  8686  0019BE                     i2u183_44:
  8687  0019BE  2E01               	decfsz	??_pwmColors,f,c
  8688  0019C0  D7FC               	goto	i2u183_45
  8689  0019C2  5002               	movf	??_pwmColors+1,w,c
  8690  0019C4  0100               	movlb	0	; () banked
  8691  0019C6  5DC8               	subwf	_PWM_Blue& (0+255),w,b
  8692  0019C8  A0D8               	btfss	status,0,c
  8693  0019CA  D002               	goto	i2l235
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;PWM_Driver.c: 64: PORTBbits.RB1 = 0;
  8697  0019CC  9281               	bcf	3969,1,c	;volatile
  8698                           
  8699                           ;PWM_Driver.c: 65: } else {
  8700  0019CE  D001               	goto	i2l2570
  8701  0019D0                     i2l235:
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;PWM_Driver.c: 66: PORTBbits.RB1 = 1;
  8705  0019D0  8281               	bsf	3969,1,c	;volatile
  8706  0019D2                     i2l2570:
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;PWM_Driver.c: 67: }
  8710                           ;PWM_Driver.c: 70: PWM_Red.duty_cnt++;
  8711  0019D2  0100               	movlb	0	; () banked
  8712  0019D4  2BCC               	incf	_PWM_Red& (0+255),f,b
  8713                           
  8714                           ;PWM_Driver.c: 71: PWM_Green.duty_cnt++;
  8715  0019D6  0100               	movlb	0	; () banked
  8716  0019D8  2BCA               	incf	_PWM_Green& (0+255),f,b
  8717                           
  8718                           ;PWM_Driver.c: 72: PWM_Blue.duty_cnt++;
  8719  0019DA  0100               	movlb	0	; () banked
  8720  0019DC  2BC8               	incf	_PWM_Blue& (0+255),f,b
  8721                           
  8722                           ; BSR set to: 0
  8723  0019DE  0012               	return		;funcret
  8724  0019E0                     __end_of_pwmColors:
  8725                           	opt stack 0
  8726                           pclatu	equ	0xFFB
  8727                           pclath	equ	0xFFA
  8728                           tblptru	equ	0xFF8
  8729                           tblptrh	equ	0xFF7
  8730                           tblptrl	equ	0xFF6
  8731                           tablat	equ	0xFF5
  8732                           prodh	equ	0xFF4
  8733                           prodl	equ	0xFF3
  8734                           intcon	equ	0xFF2
  8735                           intcon2	equ	0xFF1
  8736                           postinc0	equ	0xFEE
  8737                           plusw0	equ	0xFEB
  8738                           fsr0h	equ	0xFEA
  8739                           fsr0l	equ	0xFE9
  8740                           wreg	equ	0xFE8
  8741                           postdec1	equ	0xFE5
  8742                           plusw1	equ	0xFE3
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           bsr	equ	0xFE0
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           plusw2	equ	0xFDB
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function _flash *****************
  8755 ;; Defined at:
  8756 ;;		line 75 in file "Drivers/PWM_Driver.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;		None
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;		None
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  1    wreg      void 
  8763 ;; Registers used:
  8764 ;;		wreg, status,2, status,0, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8770 ;;      Params:         0       0       0       0       0       0       0       0       0
  8771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8772 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8773 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8774 ;;Total ram usage:        6 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    2
  8777 ;; This function calls:
  8778 ;;		i2_setRGB
  8779 ;; This function is called by:
  8780 ;;		_handleState
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           	psect	text52
  8785  001774                     __ptext52:
  8786                           	opt stack 0
  8787  001774                     _flash:
  8788                           	opt stack 13
  8789                           
  8790                           ;PWM_Driver.c: 76: static uint8_t count;
  8791                           ;PWM_Driver.c: 77: static uint8_t color;
  8792                           ;PWM_Driver.c: 79: if (count >= (0xFF >> scale)) {
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;incstack = 0
  8796  001774  C02C  F006         	movff	_scale,??_flash
  8797  001778  0EFF               	movlw	255
  8798  00177A  6E07               	movwf	(??_flash+1)& (0+255),c
  8799  00177C  0E00               	movlw	0
  8800  00177E  6E08               	movwf	(??_flash+2)& (0+255),c
  8801  001780  2A06               	incf	??_flash,f,c
  8802  001782  D003               	goto	i2u185_44
  8803  001784                     i2u185_45:
  8804  001784  3408               	rlcf	??_flash+2,w,c
  8805  001786  3208               	rrcf	??_flash+2,f,c
  8806  001788  3207               	rrcf	??_flash+1,f,c
  8807  00178A                     i2u185_44:
  8808  00178A  2E06               	decfsz	??_flash,f,c
  8809  00178C  D7FB               	goto	i2u185_45
  8810  00178E  5034               	movf	flash@count,w,c
  8811  001790  6E09               	movwf	(??_flash+3)& (0+255),c
  8812  001792  6A0A               	clrf	(??_flash+4)& (0+255),c
  8813  001794  5007               	movf	??_flash+1,w,c
  8814  001796  5C09               	subwf	??_flash+3,w,c
  8815  001798  500A               	movf	??_flash+4,w,c
  8816  00179A  0A80               	xorlw	128
  8817  00179C  6E0B               	movwf	(??_flash+5)& (0+255),c
  8818  00179E  5008               	movf	??_flash+2,w,c
  8819  0017A0  0A80               	xorlw	128
  8820  0017A2  580B               	subwfb	(??_flash+5)& (0+255),w,c
  8821  0017A4  A0D8               	btfss	status,0,c
  8822  0017A6  D002               	goto	i2l244
  8823                           
  8824                           ;PWM_Driver.c: 80: count = 0;
  8825  0017A8  0E00               	movlw	0
  8826  0017AA  6E34               	movwf	flash@count,c
  8827  0017AC                     i2l244:
  8828                           
  8829                           ;PWM_Driver.c: 81: }
  8830                           ;PWM_Driver.c: 82: if (count == 0) {
  8831  0017AC  5034               	movf	flash@count,w,c
  8832  0017AE  B4D8               	btfsc	status,2,c
  8833  0017B0  D026               	goto	i2l2596
  8834  0017B2  D032               	goto	i2l2598
  8835  0017B4                     i2l2578:
  8836                           
  8837                           ;PWM_Driver.c: 85: setRGB(255, 0, 0);
  8838  0017B4  0E00               	movlw	0
  8839  0017B6  6E03               	movwf	i2setRGB@g,c
  8840  0017B8  0E00               	movlw	0
  8841  0017BA  6E04               	movwf	i2setRGB@b,c
  8842  0017BC  0EFF               	movlw	255
  8843  0017BE  EC93  F010         	call	i2_setRGB
  8844                           
  8845                           ;PWM_Driver.c: 86: color = 1;
  8846  0017C2  0E01               	movlw	1
  8847  0017C4  D01A               	goto	L13
  8848  0017C6                     i2l2582:
  8849                           
  8850                           ;PWM_Driver.c: 89: setRGB(0, 255, 0);
  8851  0017C6  0EFF               	movlw	255
  8852  0017C8  6E03               	movwf	i2setRGB@g,c
  8853  0017CA  0E00               	movlw	0
  8854  0017CC  6E04               	movwf	i2setRGB@b,c
  8855  0017CE  0E00               	movlw	0
  8856  0017D0  EC93  F010         	call	i2_setRGB
  8857                           
  8858                           ;PWM_Driver.c: 90: color = 2;
  8859  0017D4  0E02               	movlw	2
  8860  0017D6  D011               	goto	L13
  8861  0017D8                     i2l2586:
  8862                           
  8863                           ;PWM_Driver.c: 93: setRGB(0, 0, 255);
  8864  0017D8  0E00               	movlw	0
  8865  0017DA  6E03               	movwf	i2setRGB@g,c
  8866  0017DC  0EFF               	movlw	255
  8867  0017DE  6E04               	movwf	i2setRGB@b,c
  8868  0017E0  0E00               	movlw	0
  8869  0017E2  EC93  F010         	call	i2_setRGB
  8870                           
  8871                           ;PWM_Driver.c: 94: color = 3;
  8872  0017E6  0E03               	movlw	3
  8873  0017E8  D008               	goto	L13
  8874  0017EA                     i2l2590:
  8875                           
  8876                           ;PWM_Driver.c: 97: setRGB(255, 255, 255);
  8877  0017EA  0EFF               	movlw	255
  8878  0017EC  6E03               	movwf	i2setRGB@g,c
  8879  0017EE  0EFF               	movlw	255
  8880  0017F0  6E04               	movwf	i2setRGB@b,c
  8881  0017F2  0EFF               	movlw	255
  8882  0017F4  EC93  F010         	call	i2_setRGB
  8883                           
  8884                           ;PWM_Driver.c: 98: color = 0;
  8885  0017F8  0E00               	movlw	0
  8886  0017FA                     L13:
  8887  0017FA  6E33               	movwf	flash@color,c
  8888                           
  8889                           ;PWM_Driver.c: 100: }
  8890                           
  8891                           ;PWM_Driver.c: 99: break;
  8892  0017FC  D00D               	goto	i2l2598
  8893  0017FE                     i2l2596:
  8894  0017FE  5033               	movf	flash@color,w,c
  8895                           
  8896                           ; Switch size 1, requested type "space"
  8897                           ; Number of cases is 4, Range of values is 0 to 3
  8898                           ; switch strategies available:
  8899                           ; Name         Instructions Cycles
  8900                           ; simple_byte           13     7 (average)
  8901                           ;	Chosen strategy is simple_byte
  8902  001800  0A00               	xorlw	0	; case 0
  8903  001802  B4D8               	btfsc	status,2,c
  8904  001804  D7D7               	goto	i2l2578
  8905  001806  0A01               	xorlw	1	; case 1
  8906  001808  B4D8               	btfsc	status,2,c
  8907  00180A  D7DD               	goto	i2l2582
  8908  00180C  0A03               	xorlw	3	; case 2
  8909  00180E  B4D8               	btfsc	status,2,c
  8910  001810  D7E3               	goto	i2l2586
  8911  001812  0A01               	xorlw	1	; case 3
  8912  001814  B4D8               	btfsc	status,2,c
  8913  001816  D7E9               	goto	i2l2590
  8914  001818                     i2l2598:
  8915                           
  8916                           ;PWM_Driver.c: 101: }
  8917                           ;PWM_Driver.c: 103: count++;
  8918  001818  2A34               	incf	flash@count,f,c
  8919  00181A  0012               	return		;funcret
  8920  00181C                     __end_of_flash:
  8921                           	opt stack 0
  8922                           pclatu	equ	0xFFB
  8923                           pclath	equ	0xFFA
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           prodh	equ	0xFF4
  8929                           prodl	equ	0xFF3
  8930                           intcon	equ	0xFF2
  8931                           intcon2	equ	0xFF1
  8932                           postinc0	equ	0xFEE
  8933                           plusw0	equ	0xFEB
  8934                           fsr0h	equ	0xFEA
  8935                           fsr0l	equ	0xFE9
  8936                           wreg	equ	0xFE8
  8937                           postdec1	equ	0xFE5
  8938                           plusw1	equ	0xFE3
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           bsr	equ	0xFE0
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           plusw2	equ	0xFDB
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _fade *****************
  8951 ;; Defined at:
  8952 ;;		line 146 in file "Drivers/PWM_Driver.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;		None
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;		None
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      void 
  8959 ;; Registers used:
  8960 ;;		wreg, status,2, status,0, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8966 ;;      Params:         0       0       0       0       0       0       0       0       0
  8967 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8969 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8970 ;;Total ram usage:        0 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    2
  8973 ;; This function calls:
  8974 ;;		i2_setRGB
  8975 ;; This function is called by:
  8976 ;;		_handleState
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text53
  8981  0019E0                     __ptext53:
  8982                           	opt stack 0
  8983  0019E0                     _fade:
  8984                           	opt stack 13
  8985                           
  8986                           ;PWM_Driver.c: 147: static uint8_t r_cnt = 0x00;
  8987                           ;PWM_Driver.c: 148: static uint8_t g_cnt = 0x80;
  8988                           ;PWM_Driver.c: 149: static uint8_t b_cnt = 0xFF;
  8989                           ;PWM_Driver.c: 150: static bool r_up;
  8990                           ;PWM_Driver.c: 151: static bool g_up;
  8991                           ;PWM_Driver.c: 152: static bool b_up;
  8992                           ;PWM_Driver.c: 153: static bool fade;
  8993                           ;PWM_Driver.c: 155: if (fade) {
  8994                           
  8995                           ;incstack = 0
  8996  0019E0  502F               	movf	fade@fade,w,c
  8997  0019E2  B4D8               	btfsc	status,2,c
  8998  0019E4  D039               	goto	i2l2660
  8999                           
  9000                           ;PWM_Driver.c: 156: fade = 0;
  9001  0019E6  0E00               	movlw	0
  9002  0019E8  6E2F               	movwf	fade@fade,c
  9003                           
  9004                           ;PWM_Driver.c: 158: if (r_cnt > 0xF7) {
  9005  0019EA  0EF7               	movlw	247
  9006  0019EC  6431               	cpfsgt	fade@r_cnt,c
  9007  0019EE  D002               	goto	i2l2624
  9008                           
  9009                           ;PWM_Driver.c: 159: r_up = 0;
  9010  0019F0  0E00               	movlw	0
  9011  0019F2  6E32               	movwf	fade@r_up,c
  9012  0019F4                     i2l2624:
  9013                           
  9014                           ;PWM_Driver.c: 160: }
  9015                           ;PWM_Driver.c: 161: if (r_cnt < 8) {
  9016  0019F4  0E08               	movlw	8
  9017  0019F6  6031               	cpfslt	fade@r_cnt,c
  9018  0019F8  D002               	goto	i2l2628
  9019                           
  9020                           ;PWM_Driver.c: 162: r_up = 1;
  9021  0019FA  0E01               	movlw	1
  9022  0019FC  6E32               	movwf	fade@r_up,c
  9023  0019FE                     i2l2628:
  9024                           
  9025                           ;PWM_Driver.c: 163: }
  9026                           ;PWM_Driver.c: 165: if (g_cnt > 0xF7) {
  9027  0019FE  0EF7               	movlw	247
  9028  001A00  6444               	cpfsgt	fade@g_cnt,c
  9029  001A02  D002               	goto	i2l2632
  9030                           
  9031                           ;PWM_Driver.c: 166: g_up = 0;
  9032  001A04  0E00               	movlw	0
  9033  001A06  6E30               	movwf	fade@g_up,c
  9034  001A08                     i2l2632:
  9035                           
  9036                           ;PWM_Driver.c: 167: }
  9037                           ;PWM_Driver.c: 168: if (g_cnt < 8) {
  9038  001A08  0E08               	movlw	8
  9039  001A0A  6044               	cpfslt	fade@g_cnt,c
  9040  001A0C  D002               	goto	i2l2636
  9041                           
  9042                           ;PWM_Driver.c: 169: g_up = 1;
  9043  001A0E  0E01               	movlw	1
  9044  001A10  6E30               	movwf	fade@g_up,c
  9045  001A12                     i2l2636:
  9046                           
  9047                           ;PWM_Driver.c: 170: }
  9048                           ;PWM_Driver.c: 172: if (b_cnt > 0xF7) {
  9049  001A12  0EF7               	movlw	247
  9050  001A14  6443               	cpfsgt	fade@b_cnt,c
  9051  001A16  D002               	goto	i2l2640
  9052                           
  9053                           ;PWM_Driver.c: 173: b_up = 0;
  9054  001A18  0E00               	movlw	0
  9055  001A1A  6E2E               	movwf	fade@b_up,c
  9056  001A1C                     i2l2640:
  9057                           
  9058                           ;PWM_Driver.c: 174: }
  9059                           ;PWM_Driver.c: 175: if (b_cnt < 8) {
  9060  001A1C  0E08               	movlw	8
  9061  001A1E  6043               	cpfslt	fade@b_cnt,c
  9062  001A20  D002               	goto	i2l299
  9063                           
  9064                           ;PWM_Driver.c: 176: b_up = 1;
  9065  001A22  0E01               	movlw	1
  9066  001A24  6E2E               	movwf	fade@b_up,c
  9067  001A26                     i2l299:
  9068                           
  9069                           ;PWM_Driver.c: 177: }
  9070                           ;PWM_Driver.c: 179: if (r_up) {
  9071  001A26  5032               	movf	fade@r_up,w,c
  9072  001A28  B4D8               	btfsc	status,2,c
  9073  001A2A  D003               	goto	i2l2646
  9074                           
  9075                           ;PWM_Driver.c: 180: r_cnt+=(scale+1);
  9076  001A2C  282C               	incf	_scale,w,c
  9077  001A2E  2631               	addwf	fade@r_cnt,f,c
  9078                           
  9079                           ;PWM_Driver.c: 181: } else {
  9080  001A30  D002               	goto	i2l2648
  9081  001A32                     i2l2646:
  9082                           
  9083                           ;PWM_Driver.c: 182: r_cnt-=(scale+1);
  9084  001A32  282C               	incf	_scale,w,c
  9085  001A34  5E31               	subwf	fade@r_cnt,f,c
  9086  001A36                     i2l2648:
  9087                           
  9088                           ;PWM_Driver.c: 183: }
  9089                           ;PWM_Driver.c: 185: if (g_up) {
  9090  001A36  5030               	movf	fade@g_up,w,c
  9091  001A38  B4D8               	btfsc	status,2,c
  9092  001A3A  D003               	goto	i2l2652
  9093                           
  9094                           ;PWM_Driver.c: 186: g_cnt+=(scale+1);
  9095  001A3C  282C               	incf	_scale,w,c
  9096  001A3E  2644               	addwf	fade@g_cnt,f,c
  9097                           
  9098                           ;PWM_Driver.c: 187: } else {
  9099  001A40  D002               	goto	i2l2654
  9100  001A42                     i2l2652:
  9101                           
  9102                           ;PWM_Driver.c: 188: g_cnt-=(scale+1);
  9103  001A42  282C               	incf	_scale,w,c
  9104  001A44  5E44               	subwf	fade@g_cnt,f,c
  9105  001A46                     i2l2654:
  9106                           
  9107                           ;PWM_Driver.c: 189: }
  9108                           ;PWM_Driver.c: 191: if (b_up) {
  9109  001A46  502E               	movf	fade@b_up,w,c
  9110  001A48  B4D8               	btfsc	status,2,c
  9111  001A4A  D003               	goto	i2l2658
  9112                           
  9113                           ;PWM_Driver.c: 192: b_cnt+=(scale+1);
  9114  001A4C  282C               	incf	_scale,w,c
  9115  001A4E  2643               	addwf	fade@b_cnt,f,c
  9116                           
  9117                           ;PWM_Driver.c: 193: } else {
  9118  001A50  D005               	goto	i2l2662
  9119  001A52                     i2l2658:
  9120                           
  9121                           ;PWM_Driver.c: 194: b_cnt-=(scale+1);
  9122  001A52  282C               	incf	_scale,w,c
  9123  001A54  5E43               	subwf	fade@b_cnt,f,c
  9124                           
  9125                           ;PWM_Driver.c: 195: }
  9126                           ;PWM_Driver.c: 196: } else {
  9127  001A56  D002               	goto	i2l2662
  9128  001A58                     i2l2660:
  9129                           
  9130                           ;PWM_Driver.c: 197: fade = 1;
  9131  001A58  0E01               	movlw	1
  9132  001A5A  6E2F               	movwf	fade@fade,c
  9133  001A5C                     i2l2662:
  9134                           
  9135                           ;PWM_Driver.c: 198: }
  9136                           ;PWM_Driver.c: 200: setRGB(r_cnt, g_cnt, b_cnt);
  9137  001A5C  C044  F003         	movff	fade@g_cnt,i2setRGB@g
  9138  001A60  C043  F004         	movff	fade@b_cnt,i2setRGB@b
  9139  001A64  5031               	movf	fade@r_cnt,w,c
  9140  001A66  EC93  F010         	call	i2_setRGB
  9141  001A6A  0012               	return		;funcret
  9142  001A6C                     __end_of_fade:
  9143                           	opt stack 0
  9144                           pclatu	equ	0xFFB
  9145                           pclath	equ	0xFFA
  9146                           tblptru	equ	0xFF8
  9147                           tblptrh	equ	0xFF7
  9148                           tblptrl	equ	0xFF6
  9149                           tablat	equ	0xFF5
  9150                           prodh	equ	0xFF4
  9151                           prodl	equ	0xFF3
  9152                           intcon	equ	0xFF2
  9153                           intcon2	equ	0xFF1
  9154                           postinc0	equ	0xFEE
  9155                           plusw0	equ	0xFEB
  9156                           fsr0h	equ	0xFEA
  9157                           fsr0l	equ	0xFE9
  9158                           wreg	equ	0xFE8
  9159                           postdec1	equ	0xFE5
  9160                           plusw1	equ	0xFE3
  9161                           fsr1h	equ	0xFE2
  9162                           fsr1l	equ	0xFE1
  9163                           bsr	equ	0xFE0
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function i2_setRGB *****************
  9173 ;; Defined at:
  9174 ;;		line 43 in file "Drivers/PWM_Driver.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  r               1    wreg     unsigned char 
  9177 ;;  g               1    2[COMRAM] unsigned char 
  9178 ;;  b               1    3[COMRAM] unsigned char 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;  r               1    4[COMRAM] unsigned char 
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  1    wreg      void 
  9183 ;; Registers used:
  9184 ;;		wreg, status,2, status,0, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9190 ;;      Params:         2       0       0       0       0       0       0       0       0
  9191 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9193 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9194 ;;Total ram usage:        3 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    1
  9197 ;; This function calls:
  9198 ;;		i2_D_PWM_SetDuty
  9199 ;; This function is called by:
  9200 ;;		_flash
  9201 ;;		_strobe2
  9202 ;;		_fade
  9203 ;;		_smooth
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text54
  9208  002126                     __ptext54:
  9209                           	opt stack 0
  9210  002126                     i2_setRGB:
  9211                           	opt stack 13
  9212                           
  9213                           ;incstack = 0
  9214                           ;i2setRGB@r stored from wreg
  9215  002126  6E05               	movwf	i2setRGB@r,c
  9216                           
  9217                           ;PWM_Driver.c: 44: D_PWM_SetDuty(0, r);
  9218  002128  C005  F001         	movff	i2setRGB@r,i2D_PWM_SetDuty@duty
  9219  00212C  0E00               	movlw	0
  9220  00212E  EC32  F010         	call	i2_D_PWM_SetDuty
  9221                           
  9222                           ;PWM_Driver.c: 45: D_PWM_SetDuty(1, g);
  9223  002132  C003  F001         	movff	i2setRGB@g,i2D_PWM_SetDuty@duty
  9224  002136  0E01               	movlw	1
  9225  002138  EC32  F010         	call	i2_D_PWM_SetDuty
  9226                           
  9227                           ;PWM_Driver.c: 46: D_PWM_SetDuty(2, b);
  9228  00213C  C004  F001         	movff	i2setRGB@b,i2D_PWM_SetDuty@duty
  9229  002140  0E02               	movlw	2
  9230  002142  EC32  F010         	call	i2_D_PWM_SetDuty
  9231  002146  0012               	return		;funcret
  9232  002148                     __end_ofi2_setRGB:
  9233                           	opt stack 0
  9234                           pclatu	equ	0xFFB
  9235                           pclath	equ	0xFFA
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           intcon2	equ	0xFF1
  9244                           postinc0	equ	0xFEE
  9245                           plusw0	equ	0xFEB
  9246                           fsr0h	equ	0xFEA
  9247                           fsr0l	equ	0xFE9
  9248                           wreg	equ	0xFE8
  9249                           postdec1	equ	0xFE5
  9250                           plusw1	equ	0xFE3
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           bsr	equ	0xFE0
  9254                           indf2	equ	0xFDF
  9255                           postinc2	equ	0xFDE
  9256                           postdec2	equ	0xFDD
  9257                           plusw2	equ	0xFDB
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function i2_D_PWM_SetDuty *****************
  9263 ;; Defined at:
  9264 ;;		line 315 in file "Drivers/PWM_Driver.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  which           1    wreg     unsigned char 
  9267 ;;  duty            1    0[COMRAM] unsigned char 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  which           1    1[COMRAM] unsigned char 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      void 
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9279 ;;      Params:         1       0       0       0       0       0       0       0       0
  9280 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9282 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9283 ;;Total ram usage:        2 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; This function calls:
  9286 ;;		Nothing
  9287 ;; This function is called by:
  9288 ;;		i2_setRGB
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           	psect	text55
  9293  002064                     __ptext55:
  9294                           	opt stack 0
  9295  002064                     i2_D_PWM_SetDuty:
  9296                           	opt stack 13
  9297                           
  9298                           ;incstack = 0
  9299                           ;i2D_PWM_SetDuty@which stored from wreg
  9300  002064  6E02               	movwf	i2D_PWM_SetDuty@which,c
  9301                           
  9302                           ;PWM_Driver.c: 316: switch(which) {
  9303  002066  D009               	goto	i2l2226
  9304  002068                     i2l351:
  9305                           
  9306                           ;PWM_Driver.c: 318: PWM_Red.duty_val = duty;
  9307  002068  C001  F0CD         	movff	i2D_PWM_SetDuty@duty,_PWM_Red+1
  9308                           
  9309                           ;PWM_Driver.c: 319: break;
  9310  00206C  0012               	return	
  9311  00206E                     i2l353:
  9312                           
  9313                           ;PWM_Driver.c: 322: PWM_Green.duty_val = duty;
  9314  00206E  C001  F0CB         	movff	i2D_PWM_SetDuty@duty,_PWM_Green+1
  9315                           
  9316                           ;PWM_Driver.c: 323: break;
  9317  002072  0012               	return	
  9318  002074                     i2l354:
  9319                           
  9320                           ;PWM_Driver.c: 326: PWM_Blue.duty_val = duty;
  9321  002074  C001  F0C9         	movff	i2D_PWM_SetDuty@duty,_PWM_Blue+1
  9322                           
  9323                           ;PWM_Driver.c: 328: }
  9324                           
  9325                           ;PWM_Driver.c: 327: break;
  9326  002078  0012               	return	
  9327  00207A                     i2l2226:
  9328  00207A  5002               	movf	i2D_PWM_SetDuty@which,w,c
  9329                           
  9330                           ; Switch size 1, requested type "space"
  9331                           ; Number of cases is 3, Range of values is 0 to 2
  9332                           ; switch strategies available:
  9333                           ; Name         Instructions Cycles
  9334                           ; simple_byte           10     6 (average)
  9335                           ;	Chosen strategy is simple_byte
  9336  00207C  0A00               	xorlw	0	; case 0
  9337  00207E  B4D8               	btfsc	status,2,c
  9338  002080  D7F3               	goto	i2l351
  9339  002082  0A01               	xorlw	1	; case 1
  9340  002084  B4D8               	btfsc	status,2,c
  9341  002086  D7F3               	goto	i2l353
  9342  002088  0A03               	xorlw	3	; case 2
  9343  00208A  A4D8               	btfss	status,2,c
  9344  00208C  0012               	return	
  9345  00208E  D7F2               	goto	i2l354
  9346  002090                     __end_ofi2_D_PWM_SetDuty:
  9347                           	opt stack 0
  9348                           pclatu	equ	0xFFB
  9349                           pclath	equ	0xFFA
  9350                           tblptru	equ	0xFF8
  9351                           tblptrh	equ	0xFF7
  9352                           tblptrl	equ	0xFF6
  9353                           tablat	equ	0xFF5
  9354                           prodh	equ	0xFF4
  9355                           prodl	equ	0xFF3
  9356                           intcon	equ	0xFF2
  9357                           intcon2	equ	0xFF1
  9358                           postinc0	equ	0xFEE
  9359                           plusw0	equ	0xFEB
  9360                           fsr0h	equ	0xFEA
  9361                           fsr0l	equ	0xFE9
  9362                           wreg	equ	0xFE8
  9363                           postdec1	equ	0xFE5
  9364                           plusw1	equ	0xFE3
  9365                           fsr1h	equ	0xFE2
  9366                           fsr1l	equ	0xFE1
  9367                           bsr	equ	0xFE0
  9368                           indf2	equ	0xFDF
  9369                           postinc2	equ	0xFDE
  9370                           postdec2	equ	0xFDD
  9371                           plusw2	equ	0xFDB
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           pclatu	equ	0xFFB
  9376                           pclath	equ	0xFFA
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           intcon2	equ	0xFF1
  9385                           postinc0	equ	0xFEE
  9386                           plusw0	equ	0xFEB
  9387                           fsr0h	equ	0xFEA
  9388                           fsr0l	equ	0xFE9
  9389                           wreg	equ	0xFE8
  9390                           postdec1	equ	0xFE5
  9391                           plusw1	equ	0xFE3
  9392                           fsr1h	equ	0xFE2
  9393                           fsr1l	equ	0xFE1
  9394                           bsr	equ	0xFE0
  9395                           indf2	equ	0xFDF
  9396                           postinc2	equ	0xFDE
  9397                           postdec2	equ	0xFDD
  9398                           plusw2	equ	0xFDB
  9399                           fsr2h	equ	0xFDA
  9400                           fsr2l	equ	0xFD9
  9401                           status	equ	0xFD8
  9402                           
  9403                           	psect	rparam
  9404  0000                     pclatu	equ	0xFFB
  9405                           pclath	equ	0xFFA
  9406                           tblptru	equ	0xFF8
  9407                           tblptrh	equ	0xFF7
  9408                           tblptrl	equ	0xFF6
  9409                           tablat	equ	0xFF5
  9410                           prodh	equ	0xFF4
  9411                           prodl	equ	0xFF3
  9412                           intcon	equ	0xFF2
  9413                           intcon2	equ	0xFF1
  9414                           postinc0	equ	0xFEE
  9415                           plusw0	equ	0xFEB
  9416                           fsr0h	equ	0xFEA
  9417                           fsr0l	equ	0xFE9
  9418                           wreg	equ	0xFE8
  9419                           postdec1	equ	0xFE5
  9420                           plusw1	equ	0xFE3
  9421                           fsr1h	equ	0xFE2
  9422                           fsr1l	equ	0xFE1
  9423                           bsr	equ	0xFE0
  9424                           indf2	equ	0xFDF
  9425                           postinc2	equ	0xFDE
  9426                           postdec2	equ	0xFDD
  9427                           plusw2	equ	0xFDB
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432                           	psect	temp
  9433  000045                     btemp:
  9434                           	opt stack 0
  9435  000045                     	ds	1
  9436  0000                     int$flags	set	btemp
  9437                           pclatu	equ	0xFFB
  9438                           pclath	equ	0xFFA
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           intcon	equ	0xFF2
  9446                           intcon2	equ	0xFF1
  9447                           postinc0	equ	0xFEE
  9448                           plusw0	equ	0xFEB
  9449                           fsr0h	equ	0xFEA
  9450                           fsr0l	equ	0xFE9
  9451                           wreg	equ	0xFE8
  9452                           postdec1	equ	0xFE5
  9453                           plusw1	equ	0xFE3
  9454                           fsr1h	equ	0xFE2
  9455                           fsr1l	equ	0xFE1
  9456                           bsr	equ	0xFE0
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           plusw2	equ	0xFDB
  9461                           fsr2h	equ	0xFDA
  9462                           fsr2l	equ	0xFD9
  9463                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    18
    Data        12
    BSS         123
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      68
    BANK0           160     81     121
    BANK1           256      0      63
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_ReadBlock.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_25(CODE[4]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_14(CODE[5]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(BANK0[2]), ?_printf(BANK0[2]), 

    strToInt@str	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    sp__D_UART_GetDeviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_30(CODE[4]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    S280$message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.message(COMRAM[10]), D_UART_ReadBlock@cm(BANK0[17]), cm.message(COMRAM[10]), D_UART_Read@cm(BANK0[17]), 

    S280$command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.command(COMRAM[5]), D_UART_ReadBlock@cm(BANK0[17]), cm.command(COMRAM[5]), D_UART_Read@cm(BANK0[17]), 

    S280$sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer.sender(BANK1[5]), readBuffer(BANK1[63]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    blockCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _readByte->i1_D_UART_Enable
    i1_printf->i1___lwmod
    i1_putch->i1_writeByte
    i1_writeByte->i1_D_UART_Enable
    i1___lwmod->i1___lwdiv

Critical Paths under _HighISR in COMRAM

    _handleState->_flash
    _handleState->_smooth
    _strobe2->i2_setRGB
    _smooth->i2_setRGB
    _flash->i2_setRGB
    _fade->i2_setRGB
    i2_setRGB->i2_D_PWM_SetDuty

Critical Paths under _main in BANK0

    _main->_handle_message
    _initialize->_D_UART_Write
    _D_UART_Write->_printf
    _D_UART_Init->___aldiv
    _D_PWM_Init->_D_TIMER0_Init
    _D_TIMER0_Init->_D_TIMER0_Enable
    _D_PWM_Enable->_D_TIMER0_Enable
    _handle_message->_D_UART_WriteInt
    _D_UART_WriteInt->_printf
    _printf->___lwmod
    _putch->_writeByte
    _writeByte->_D_UART_Enable
    ___lwmod->___lwdiv
    _D_PWM_SetRGB->_setRGB
    _setRGB->_D_PWM_SetDuty

Critical Paths under _LowISR in BANK0

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwmod

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14185
                                             79 BANK0      2     2      0
                       _D_PWM_SetRGB
                 _D_UART_BlockLength
                        _D_UART_Read
                   _D_UART_ReadBlock
                     _handle_message
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    3767
                        _D_PORT_Init
                       _D_PWM_Enable
                         _D_PWM_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    2776
                                             67 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Init                                          9     4      5     859
                                             53 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                             39 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Init                                           0     0      0      66
                    _D_TIMER0_Enable
                      _D_TIMER0_Init
 ---------------------------------------------------------------------------------
 (3) _D_TIMER0_Init                                        1     1      0      44
                                             40 BANK0      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Enable                                         1     1      0      44
                                             40 BANK0      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (4) _D_TIMER0_Enable                                      1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_message                                       7     1      6    8017
                                             72 BANK0      7     1      6
                         _D_PWM_Fade
                        _D_PWM_Flash
                      _D_PWM_GetBlue
                     _D_PWM_GetGreen
                       _D_PWM_GetRed
                     _D_PWM_GetScale
                     _D_PWM_GetState
                    _D_PWM_ScaleDown
                      _D_PWM_ScaleUp
                       _D_PWM_SetRGB
                       _D_PWM_Smooth
                       _D_PWM_Strobe
                        _D_UART_Read (ARG)
                   _D_UART_ReadBlock (ARG)
                    _D_UART_WriteInt
                           _strToInt
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1755
                                             39 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strToInt                                             5     3      2     310
                                             39 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    3288
                                             67 BANK0      5     1      4
                      _D_PWM_GetBlue (ARG)
                     _D_PWM_GetGreen (ARG)
                       _D_PWM_GetRed (ARG)
                     _D_PWM_GetScale (ARG)
                     _D_PWM_GetState (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              25    20      5    2604
                                             51 BANK0     16    11      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                             41 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            1     1      0      44
                                             40 BANK0      1     1      0
                      _D_UART_Enable
 ---------------------------------------------------------------------------------
 (6) _D_UART_Enable                                        1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                             46 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                             39 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Strobe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Smooth                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetRGB                                         3     1      2    2168
                                             44 BANK0      3     1      2
                             _setRGB
 ---------------------------------------------------------------------------------
 (3) _setRGB                                               3     1      2    1590
                                             41 BANK0      3     1      2
                      _D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (4) _D_PWM_SetDuty                                        2     1      1     280
                                             39 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleUp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetScale                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetRed                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetGreen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetBlue                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Flash                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Fade                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_UART_ReadBlock                                    25    18      7      71
                                             39 BANK0     25    18      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                         23    17      6      49
                                             39 BANK0     23    17      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_BlockLength                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowISR                                              17    17      0    2479
                                             22 BANK0     17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (8) _readByte                                             1     1      0      34
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       2     2      0    2445
                                             20 BANK0      2     2      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (9) _acknowledge                                          0     0      0    1872
                           i1_printf
 ---------------------------------------------------------------------------------
 (10) i1_printf                                           25    20      5    1872
                                              4 BANK0     16    11      5
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (11) i1_putch                                             1     1      0      93
                                             27 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (12) i1_writeByte                                         1     1      0      62
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (9) i1_D_UART_Enable                                      1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           5     1      4     302
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           7     3      4     381
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _HighISR                                            14    14      0    3698
                                             11 COMRAM    14    14      0
                        _handleState
 ---------------------------------------------------------------------------------
 (15) _handleState                                         0     0      0    3698
                               _fade
                              _flash
                          _pwmColors
                             _smooth
                            _strobe2
 ---------------------------------------------------------------------------------
 (16) _strobe2                                             5     5      0     908
                                              5 COMRAM     5     5      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _smooth                                              6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _pwmColors                                           3     3      0      66
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (16) _flash                                               6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _fade                                                0     0      0     908
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (17) i2_setRGB                                            3     1      2     908
                                              2 COMRAM     3     1      2
                    i2_D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (18) i2_D_PWM_SetDuty                                     2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PWM_SetRGB
     _setRGB
       _D_PWM_SetDuty
   _D_UART_BlockLength
   _D_UART_Read
   _D_UART_ReadBlock
   _handle_message
     _D_PWM_Fade
     _D_PWM_Flash
     _D_PWM_GetBlue
     _D_PWM_GetGreen
     _D_PWM_GetRed
     _D_PWM_GetScale
     _D_PWM_GetState
     _D_PWM_ScaleDown
     _D_PWM_ScaleUp
     _D_PWM_SetRGB
       _setRGB
         _D_PWM_SetDuty
     _D_PWM_Smooth
     _D_PWM_Strobe
     _D_UART_Read (ARG)
     _D_UART_ReadBlock (ARG)
     _D_UART_WriteInt (ARG)
       _D_PWM_GetBlue (ARG)
       _D_PWM_GetGreen (ARG)
       _D_PWM_GetRed (ARG)
       _D_PWM_GetScale (ARG)
       _D_PWM_GetState (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _strToInt (ARG)
     _strcmp (ARG)
   _initialize
     _D_PORT_Init
     _D_PWM_Enable
       _D_TIMER0_Enable
     _D_PWM_Init
       _D_TIMER0_Enable
       _D_TIMER0_Init
         _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_Init
       _D_UART_Enable
       ___aldiv
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1___lwmod
           i1___lwdiv (ARG)
         i1_putch
           i1_writeByte
             i1_D_UART_Enable
   _readByte
     i1_D_UART_Enable

 _HighISR (ROOT)
   _handleState
     _fade
       i2_setRGB
         i2_D_PWM_SetDuty
     _flash
       i2_setRGB
         i2_D_PWM_SetDuty
     _pwmColors
     _smooth
       i2_setRGB
         i2_D_PWM_SetDuty
     _strobe2
       i2_setRGB
         i2_D_PWM_SetDuty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3F       7       24.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      44       1       72.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FC      20        0.0%
DATA                 0      0      FC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 21:04:27 2017

                          _b 00CF                            _g 00D0                            _r 00D1  
                         l50 211C                           l46 1868                           l39 182E  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
      __end_of_D_PWM_GetBlue 2228                 _ackCharacter 003B                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l107 21AA                          l351 203A                          l353 2040  
                        l185 20D4                          l521 0ED2                          l354 2046  
                        l949 1BDC                          l959 1DE6                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000        __end_of_D_PWM_ScaleUp 21F6        __end_of_D_PWM_SetDuty 2064  
                        prod 000FF3                          wreg 000FE8       __end_of_D_PWM_GetGreen 2222  
     __end_of_D_PWM_GetScale 2242       __end_of_D_PWM_GetState 223E     __size_of_D_TIMER0_Enable 0022  
    __end_ofi2_D_PWM_SetDuty 2090          __end_ofi1_writeByte 21C6                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2200 1BCE                         l2210 1DAE  
                       l2212 1DB4                         l2310 0E74                         l2216 1DD8  
                       l2208 1DA2                         l2312 0E7C                         l3024 093A  
                       l3016 08F4                         l3008 08AE                         l2330 0F0A  
                       l2314 0E82                         l2306 0E60                         l3042 09D8  
                       l2410 1394                         l2180 204C                         l3060 0A56  
                       l3036 09AE                         l2412 13A4                         l2404 1366  
                       l3132 191E                         l2190 1B98                         l2350 0F68  
                       l2334 0F26                         l2318 0E8C                         l3054 0A2C  
                       l2430 142C                         l2422 13FE                         l2414 13AA  
                       l3118 18D0                         l2192 1B9E                         l2336 0F2C  
                       l3080 0B3C                         l3048 0A02                         l2280 184E  
                       l3136 1944                         l3128 190E                         l2370 0FC4  
                       l3074 0AF4                         l2282 1856                         l2274 1836  
                       l2290 18A6                         l2426 1410                         l2188 1B8C  
                       l2372 0FCA                         l2380 1064                         l2348 0F62  
                       l2364 0F9E                         l2284 185E                         l2276 183E  
                       l2374 1016                         l2382 1076                         l2366 0FB0  
                       l2278 1846                         l2384 107E                         l2288 1870  
                       l2386 108A                         l2398 1348                         l2762 1F08  
                       l2780 1E28                         l2764 1F14                         l2774 1E04  
                       l2768 1F4E                         l2786 1E3A                         STR_1 0863  
                       STR_2 0861                         STR_3 083D                         STR_4 0839  
                       STR_5 0835                         STR_6 0850                         STR_7 0865  
                       STR_8 0865                         STR_9 0865                         u2301 1FF0  
                       u2311 1E6A                         u3007 0A9E                         u2321 1EA0  
                       u3017 0AC6                         u3027 0AEE                         u3037 1512  
                       u2291 1FBA                         u2571 1900                         u2591 1934  
                       u2997 16BE                         _fade 19E0                         _baud 0029  
                       _main 18BC                         _read 0022                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0045                         prodh 000FF4                         prodl 000FF3  
                       start 00B4                D_UART_Read@cm 008D                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 220A              __end_of_HighISR 1AF4                __CFG_MCLRE$ON 000000  
                ?_D_PWM_Fade 0001                 ___param_bank 000000        D_TIMER0_Enable@enable 0087  
                ?_D_PWM_Init 0001               _startCharacter 003F                __CFG_PLLDIV$4 000000  
                      ?_fade 0001              __end_of___aldiv 143E                        ?_main 0001  
                      STR_10 0865                        STR_11 084D                        STR_20 085F  
                      STR_12 0859                        STR_13 0857                        STR_21 0844  
                      STR_30 0829                        STR_22 084A                        STR_14 0824  
                      STR_15 085B                        STR_23 0841                        STR_31 082D  
                      STR_32 082D                        STR_16 0855                        STR_24 0847  
                      STR_17 0833                        STR_25 0831                        STR_33 0813  
                      STR_26 085B                        STR_18 085D                        STR_27 0855  
                      STR_19 0853                        STR_28 0833                        STR_29 0829  
            __end_of___lwdiv 1BE6                        i1l113 209C                        i1l107 21BC  
                      i1l185 215C                        i1l521 113C              __end_of___lwmod 1DF0  
                      i1l197 006C                        i2l231 197C                        i2l233 19A6  
                      i2l314 1556                        i2l235 19D0                        i2l244 17AC  
                      i2l351 2068                        i2l353 206E                        i2l354 2074  
                      i2l299 1A26                        i2l397 1AB8                        i1l949 1FA6  
                      i1l959 1EFC                        _RCREG 000FAE                        _TMR0H 000FD7  
                      _TMR0L 000FD6         __size_of_acknowledge 006E                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              ?_D_PWM_GetGreen 0001              ?_D_PWM_GetScale 0001  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000      __end_of_D_PWM_ScaleDown 2200               __CFG_EBTR3$OFF 000000  
            ?_D_PWM_GetState 0001                __CFG_WRTB$OFF 000000           i1___lwmod@dividend 0060  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
                      _flash 1774              __end_of_dpowers 080B                        _scale 002C  
                      _state 002D                        _putch 21D4                        main@i 00AF  
            i1writeByte@data 001B                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 0095                 ?_D_UART_Read 0087                        plusw0 000FEB  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
            __end_of_strobe2 1B6E                 ?_D_PORT_Init 0001             __end_ofi2_setRGB 2148  
         __size_ofi1___lwdiv 0052           __size_ofi1___lwmod 005C                _stopCharacter 0041  
           __end_ofi1_printf 1324                   i1printf@ap 006D              __initialization 1CC2  
           _D_UART_Init$1756 009A                 __end_of_fade 1A6C                 ?_D_PWM_Flash 0001  
               __end_of_main 1952     __size_ofi1_D_UART_Enable 0020                       ??_fade 0006  
                     ??_main 00AF                  i1_writeByte 21B4                __activetblptr 000002  
           _D_UART_ReadBlock 1E4E              __CFG_CCP2MX$OFF 000000         __size_of_handleState 006E  
           ?i2_D_PWM_SetDuty 0001                       ?_flash 0001                       _ADCON1 000FC1  
        __size_of_D_PWM_Fade 0006          __size_of_D_PWM_Init 003A                       ?_putch 0001  
                     i1l3210 1174                       i1l3300 0BD0                       i1l3230 11D2  
                     i1l3214 1190                       i1l3152 1F74                       i1l3216 1196  
                     i1l3400 0E0E                       i1l3320 0C4A                       i1l3154 1F7C  
                     i1l3250 122E                       i1l3402 0E1A                       i1l3314 0C22  
                     i1l3306 0BF8                       i1l3164 1F9C                       i1l3156 1F80  
                     i1l3180 1EF0                       i1l3172 1EBC                       i1l3252 1234  
                     i1l3260 12CC                       i1l3228 11CC                       i1l3244 1208  
                     i1l3174 1EC6                       i1l3254 1280                       i1l3262 12DE  
                     i1l3246 121A                       i1l3190 10DE                       i1l3350 0D02  
                     i1l3342 0CD8                       i1l3334 0C9C                       i1l3406 0E22  
                     i1l3176 1ECC                       i1l3264 12E6                       i1l3192 10E6  
                     i1l3360 0D4E                       i1l3336 0CB0                       i1l3328 0C74  
                     i1l3194 10EC                       i1l3186 10CA                       i1l3266 12F2  
                     i1l3372 0D96                       i1l3364 0D68                       i1l3292 0B8A  
                     i1l3198 10F6                       i1l3382 0DC0                       i1l3286 20B6  
                     i1l3392 0DF2                       i1l3368 0D7C                       i1l3384 0DC8  
                     i1l3296 0BC8                       i2l2226 207A                       i2l2606 1B3E  
                     i2l2614 1B58                       i2l2640 1A1C                       i2l2632 1A08  
                     i2l2624 19F4                       i2l2608 1B4C                       i2l2570 19D2  
                     i2l2562 197E                       i2l2652 1A42                       i2l2636 1A12  
                     i2l2628 19FE                       i2l2660 1A58                       i2l2662 1A5C  
                     i2l2654 1A46                       i2l2646 1A32                       i2l2590 17EA  
                     i2l2582 17C6                       i2l2566 19A8                       i2l2670 155E  
                     i2l2648 1A36                       i2l2658 1A52                       i2l2586 17D8  
                     i2l2578 17B4                       i2l2690 15B8                       i2l2682 1594  
                     i2l2674 1570                       i2l2596 17FE                       i2l2598 1818  
                     i2l2686 15A6                       i2l2678 1582                       i2l2696 15CC  
                     i2l2960 1C56                       i2l2698 15F2                       i2l2970 1C7E  
                     i2l2962 1C5E                       i2l2980 1C9E                       i2l2974 1C8E  
                     i2l2966 1C6E                       i2l2982 1CBE                    ??i1_putch 001C  
                  ??_HighISR 000C            ??_D_TIMER0_Enable 0087                  readByte@dum 001B  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___aldiv 008F  
                     _comMes 00B1                    ??___lwdiv 008B                    ??___lwmod 0092  
           __end_of_readByte 20BA                       _setRGB 20E0                       clear_0 1D00  
                     clear_1 1D0C                       clear_2 1D18                       _printf 0E52  
 __end_of_D_UART_BlockLength 223A                       _smooth 151E     __size_of_D_UART_WriteInt 00E0  
                     _strcmp 1F06            __end_ofi1___lwdiv 1FB0                 __pdataCOMRAM 003B  
          __end_ofi1___lwmod 1F06        D_UART_Init@interrupts 0099                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
              ?_D_UART_Write 00A3             ?_D_PWM_ScaleDown 0001              D_UART_Init@baud 0097  
            D_UART_Init@name 0095             __end_of_strToInt 1E4E                    ??_strobe2 0006  
                 __accesstop 0060      __end_of__initialization 1D1E              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001       __size_of_D_TIMER0_Init 00A0                D_PWM_SetRGB@b 008D  
              D_PWM_SetRGB@g 008C                D_PWM_SetRGB@r 008E                  i1printf@idx 006C  
                i1printf@val 0071               __pcstackCOMRAM 0001                 __pidataBANK0 2242  
              ?_D_PWM_GetRed 0001                ?_D_PWM_Enable 0001                __end_of_flash 181C  
                i1putch@data 001C                ?_D_PWM_SetRGB 008C                __end_of_putch 21E2  
           _messageCharacter 00D7            D_PWM_SetDuty@duty 0087                ?_D_PWM_Smooth 0001  
              ?_D_PWM_Strobe 0001       __size_of_D_UART_Enable 0026            ??i1_D_UART_Enable 001A  
             ??_D_UART_Write 00A7                    ?i2_setRGB 0003                    ?i1_printf 0064  
                    ??_flash 0006                      ??_putch 0089                   __pbssBANK0 00B1  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 004A  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Fade 0087  
            fillDataBuffer@i 0074                 ??_D_PWM_Init 0089               ??_D_PWM_GetRed 0087  
             ??_D_PWM_Enable 0088               ??_D_PWM_SetRGB 008E                   _deviceName 00D4  
                    ?_setRGB 0089         __size_of_D_PWM_Flash 0006               ??_D_PWM_Smooth 0087  
             ??_D_PWM_Strobe 0087             ??_D_PWM_GetGreen 0087             ??_D_PWM_GetScale 0087  
                    ?_printf 0093                      ?_smooth 0001             ??_D_PWM_GetState 0087  
                    ?_strcmp 0087                _D_TIMER0_Flag 0028           __size_of_pwmColors 008E  
              _D_TIMER0_Init 181C                   ??i2_setRGB 0005                   ??i1_printf 0069  
    __size_of_fillDataBuffer 02CE          D_UART_Enable@enable 0087      __size_of_handle_message 031C  
          ??_D_UART_WriteInt 00A7               _blockCharacter 003D           __end_of_D_PWM_Fade 2234  
                    _PWM_Red 00CC           __end_of_D_PWM_Init 2034              __CFG_VREGEN$OFF 000000  
                    i1_putch 2200                      _HighISR 0008                    ?_readByte 0001  
     __size_of_D_PWM_GetBlue 0006           __size_of_writeByte 0014                _D_UART_Enable 20BA  
   __end_of_D_UART_ReadBlock 1EAA                      __Hparam 0000       __size_of_D_PWM_ScaleUp 000A  
                    __Lparam 0000              __size_of_LowISR 009C       __size_of_D_PWM_SetDuty 0030  
                 _readBuffer 0100                strToInt@shift 008A                      ___aldiv 1324  
                    ___lwdiv 1B6E                      ___lwmod 1D8E                    ?_strToInt 0087  
               __psmallconst 0800            handle_message@msg 00A8              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0022                      __pcinit 1CC2              __size_of_setRGB 0024  
                    __ramtop 0800                   _initialize 1D2C                      __ptext0 18BC  
                    __ptext1 1D2C                      __ptext2 15F6                      __ptext3 16CA  
                    __ptext4 1324                      __ptext5 1FFA                      __ptext6 181C  
                    __ptext7 21C6                      __ptext8 2104                      __ptext9 2168  
            __size_of_printf 026A               ?_D_TIMER0_Init 0001                    _T0CONbits 000FD5  
            __size_of_smooth 00D8                 ?i1_writeByte 0001              __size_of_strcmp 0058  
          __end_of_hexpowers 0813                      _dpowers 0801            i1___lwdiv@divisor 001C  
          i1___lwdiv@counter 001E              _D_TIMER0_Enable 2104             ___aldiv@dividend 0087  
                    _strobe2 1AF4               __pintcode_body 1A6C         end_of_initialization 1D1E  
                 ??_readByte 001B                      setRGB@b 008A                      setRGB@g 0089  
                    setRGB@r 008B                __Lmediumconst 0000                      int_func 1A6C  
             ?_D_UART_Enable 0001            __end_of_pwmColors 19E0         __end_of_D_UART_Write 16CA  
                  _RCSTAbits 000FAB                      printf@c 00A2                      printf@f 0093  
           ___aldiv@quotient 0091                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                   ??_strToInt 0089  
                    strcmp@r 008C                _D_PWM_GetBlue 2222                    _PORTBbits 000F81  
              ??_handleState 000C            __end_of_writeByte 21B4                   flash@color 0033  
                 flash@count 0034                _D_PWM_ScaleUp 21EC                    _TRISBbits 000F93  
              _D_PWM_SetDuty 2034                    _TRISCbits 000F94          __end_of_acknowledge 1C54  
                  _PWM_Green 00CA                    i1___lwdiv 1F5E                    i1___lwmod 1EAA  
       __end_of_D_PWM_GetRed 221C         __end_of_D_PWM_Enable 21D4           _D_UART_BlockLength 2234  
       __end_of_D_PWM_SetRGB 21A0         __end_of_D_PWM_Smooth 2216        D_TIMER0_Init@prescale 0088  
       __end_of_D_PWM_Strobe 2210                    _TXSTAbits 000FAC     __size_ofi2_D_PWM_SetDuty 002C  
                 main@length 00B0                 i1printf@flag 0070          ?_D_UART_BlockLength 0001  
               i1printf@prec 006F               __end_of_LowISR 00B4              i1_D_UART_Enable 2148  
    __end_of_D_TIMER0_Enable 2126              ??_D_TIMER0_Init 0088                  _BAUDCONbits 000FB8  
             ?_D_PWM_GetBlue 0001                __pidataCOMRAM 21E2                  ?_initialize 0001  
          i1___lwmod@divisor 0062                    i2setRGB@b 0004                    i2setRGB@g 0003  
                  i2setRGB@r 0005               __end_of_setRGB 2104            i1___lwmod@counter 0021  
             __end_of_printf 10BC               ?_D_PWM_ScaleUp 0001         ??_D_UART_BlockLength 0087  
             __end_of_smooth 15F6               __end_of_strcmp 1F5E               ?_D_PWM_SetDuty 0087  
        start_initialization 1CC2               _fillDataBuffer 0B84                    i1printf@c 0073  
                  i1printf@f 0064               _handle_message 0868           D_PWM_SetDuty@which 0088  
                 ?i1___lwdiv 001A                   ?i1___lwmod 0060            __size_ofi2_setRGB 0022  
        __end_of_handleState 1CC2            __size_ofi1_printf 0268              _D_UART_ReadFlag 00CE  
            ??_D_UART_Enable 0087     __size_of_D_PWM_ScaleDown 000A                  smooth@color 0036  
                smooth@count 0037                     ??_LowISR 0076                  strToInt@val 008B  
                strToInt@tmp 0089                  strToInt@str 0087                  __pdataBANK0 00D7  
           __CFG_LPT1OSC$OFF 000000                     ??_setRGB 008B              _D_UART_WriteInt 143E  
                _acknowledge 1BE6             D_UART_Write@data 00A5                     ??_printf 0098  
                   ??_smooth 0006                     ??_strcmp 008B       __end_of_fillDataBuffer 0E52  
     __end_of_handle_message 0B84                  __pbssCOMRAM 0022               handleState@cnt 0035  
       __size_ofi1_writeByte 0012                __pcstackBANK0 0060                ??_D_UART_Init 009A  
              ??_D_UART_Read 008D                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00D4                ??_D_PORT_Init 0087          __size_of_initialize 0062  
    __end_ofi1_D_UART_Enable 2168                    __pnvBANK0 00D4            __size_of_readByte 002A  
          ?_D_UART_ReadBlock 0087             ___lwdiv@dividend 0087                ??_D_PWM_Flash 0087  
                  __pintcode 0008                     ?___aldiv 0087           ??_D_UART_ReadBlock 008E  
          ??i2_D_PWM_SetDuty 0002              ??_D_PWM_GetBlue 0087                     ?___lwdiv 0087  
                   ?___lwmod 008E                  _blockLength 002A                    fade@b_cnt 0043  
                  fade@g_cnt 0044                  __pintcodelo 0018             ?_D_TIMER0_Enable 0001  
                  _bufferCnt 002B           fillDataBuffer@data 0075                    fade@r_cnt 0031  
            ??_D_PWM_ScaleUp 0087            __size_of_strToInt 005E              ??_D_PWM_SetDuty 0088  
            ?_fillDataBuffer 0001                  __smallconst 0800                  _handleState 1C54  
      __size_of_D_PWM_GetRed 0006        __size_of_D_PWM_Enable 000E              ?_handle_message 00A8  
      __size_of_D_PWM_SetRGB 001A                 _D_UART_Write 15F6                    _hexpowers 080B  
      __size_of_D_PWM_Smooth 0006             ___lwdiv@quotient 008B                  ??i1___lwdiv 001E  
                ??i1___lwmod 0021        __size_of_D_PWM_Strobe 0006               __size_of_flash 00A8  
                   ?_strobe2 0001                strobe2@on_cnt 003A               __size_of_putch 000E  
            ___aldiv@divisor 008B              ___aldiv@counter 008F                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D                     i1u304_27 20A8                     i2u203_44 1534  
                   i2u203_45 152E                     i1u292_21 0D38          __end_of_D_UART_Init 1774  
        __end_of_D_UART_Read 1FFA                     i2u181_44 1994                     i2u181_45 1990  
                   i2u183_44 19BE                     i2u183_45 19BA                     i2u192_45 1B60  
                   _PIR1bits 000F9E                     i2u185_44 178A                     i2u185_45 1784  
    __end_of_D_UART_WriteInt 151E                     i2u179_44 196A                     i2u179_45 1966  
                   i2u188_45 1AFC                     _RCONbits 000FD0             __CFG_WDTPS$32768 000000  
     D_UART_WriteInt@command 00A3            ??_D_PWM_ScaleDown 0087                    _pwmColors 1952  
        __end_of_D_PORT_Init 2186                 _D_PWM_GetRed 2216                 _D_PWM_Enable 21C6  
         D_PWM_Enable@enable 0088                 _D_PWM_SetRGB 2186                     _PWM_Blue 00C8  
               _D_PWM_Smooth 2210          __end_of_D_PWM_Flash 222E                 _D_PWM_Strobe 220A  
                 printf@flag 009F                   printf@prec 009E                     i2_setRGB 2126  
                   i1_printf 10BC                    _writeByte 21A0      __size_of_D_PWM_GetGreen 0006  
                _INTCON2bits 000FF1      __size_of_D_PWM_GetScale 0004                    copy_data0 1CEE  
    __size_of_D_PWM_GetState 0004             __size_ofi1_putch 000A             __size_of_HighISR 1AEC  
           ?i1_D_UART_Enable 0001                     __Hrparam 0000                     __Lrparam 0000  
                 ?_pwmColors 0001             __size_of___aldiv 011A             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 00A8        i1D_UART_Enable@enable 001A  
            ___lwdiv@divisor 0089              ___lwdiv@counter 008D                     __ptext10 0868  
                   __ptext11 1F06                     __ptext20 220A                     __ptext12 1DF0  
                   __ptext21 2210                     __ptext13 143E                     __ptext30 221C  
                   __ptext22 2186                     __ptext14 0E52                     __ptext31 2222  
                   __ptext23 20E0                     __ptext15 21D4                     __ptext40 1BE6  
                   __ptext32 2228                     __ptext24 2034                     __ptext16 21A0  
                   __ptext41 10BC                     __ptext33 222E                     __ptext25 21EC  
                   __ptext17 20BA                     __ptext50 151E                     __ptext42 2200  
                   __ptext34 1E4E                     __ptext26 21F6                     __ptext18 1D8E  
                   __ptext51 1952                     __ptext43 21B4                     __ptext35 1FB0  
                   __ptext27 223A                     __ptext19 1B6E                     __ptext52 1774  
                   __ptext44 2148                     __ptext36 2234                     __ptext28 223E  
                   __ptext53 19E0                     __ptext45 1EAA                     __ptext29 2216  
                   __ptext54 2126                     __ptext46 1F5E                     __ptext38 2090  
                   __ptext55 2064                     __ptext39 0B84                     __ptext48 1C54  
                   __ptext49 1AF4                   strobe2@cnt 0038                   ?_writeByte 0001  
                   fade@fade 002F                     fade@b_up 002E                     fade@g_up 0030  
        D_UART_ReadBlock@cnt 008E                     fade@r_up 0032             __size_of_strobe2 007A  
         i1___lwdiv@dividend 001A                  _D_UART_Init 16CA                  _D_UART_Read 1FB0  
                   _readData 00C2                     _readByte 2090                __size_of_fade 008C  
              __size_of_main 0096                  _D_PORT_Init 2168           __end_of_initialize 1D8E  
           ?_D_UART_WriteInt 00A3                  _D_PWM_Flash 2228                     int$flags 0045  
                   _strToInt 1DF0                    printf@idx 009B                    printf@val 00A0  
               ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000        __end_of_D_TIMER0_Init 18BC  
         i1___lwdiv@quotient 001F                    putch@data 0089                   _INTCONbits 000FF2  
__size_of_D_UART_BlockLength 0006                     intlevel1 0000                     intlevel2 0000  
            i2_D_PWM_SetDuty 2064             ___lwmod@dividend 008E                    strobe2@on 0039  
         D_UART_ReadBlock@cm 008F        __end_of_D_UART_Enable 20E0                    strobe@cnt 00D2  
                 _D_PWM_Fade 222E                   _D_PWM_Init 1FFA                  ??_pwmColors 0001  
                   printf@ap 009C             ??_fillDataBuffer 0022          D_UART_Write@command 00A3  
           ??_handle_message 00AE                ??i1_writeByte 001B                 ?_handleState 0001  
                   strcmp@s1 0087                     strcmp@s2 0089              ___lwmod@divisor 0090  
  __size_of_D_UART_ReadBlock 005C                     strobe@up 00D3                writeByte@data 0088  
            ___lwmod@counter 0092                 ___aldiv@sign 0090          D_UART_WriteInt@data 00A5  
       i2D_PWM_SetDuty@which 0002                  ??_writeByte 0088               _D_PWM_GetGreen 221C  
             _D_PWM_GetScale 223E               _D_PWM_GetState 223A           __CFG_FOSC$HSPLL_HS 000000  
        pwmColors@birghtness 0003              _D_PWM_ScaleDown 21F6          i2D_PWM_SetDuty@duty 0001  

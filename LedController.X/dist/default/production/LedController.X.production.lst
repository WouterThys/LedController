

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun May  7 12:06:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.40
    80                           ; Generated 01/12/2016 GMT
    81                           ; 
    82                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F2550 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002388                     __pidataCOMRAM:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _ackCharacter
   119  002388  39                 	db	low STR_5
   120  002389  08                 	db	high STR_5
   121                           
   122                           ;initializer for _blockCharacter
   123  00238A  3D                 	db	low STR_4
   124  00238B  08                 	db	high STR_4
   125                           
   126                           ;initializer for _startCharacter
   127  00238C  6A                 	db	low STR_1
   128  00238D  08                 	db	high STR_1
   129                           
   130                           ;initializer for _stopCharacter
   131  00238E  68                 	db	low STR_2
   132  00238F  08                 	db	high STR_2
   133                           
   134                           ;initializer for fade@b_cnt
   135  002390  FF                 	db	255
   136                           
   137                           ;initializer for fade@g_cnt
   138  002391  80                 	db	128
   139                           
   140                           	psect	idataBANK0
   141  0023D0                     __pidataBANK0:
   142                           	opt stack 0
   143                           
   144                           ;initializer for _messageCharacter
   145  0023D0  41                 	db	low STR_3
   146  0023D1  08                 	db	high STR_3
   147                           
   148                           	psect	smallconst
   149  000800                     __psmallconst:
   150                           	opt stack 0
   151  000800  00                 	db	0
   152  000801                     _dpowers:
   153                           	opt stack 0
   154  000801  0001               	dw	1
   155  000803  000A               	dw	10
   156  000805  0064               	dw	100
   157  000807  03E8               	dw	1000
   158  000809  2710               	dw	10000
   159  00080B                     __end_of_dpowers:
   160                           	opt stack 0
   161  00080B                     _hexpowers:
   162                           	opt stack 0
   163  00080B  0001               	dw	1
   164  00080D  0010               	dw	16
   165  00080F  0100               	dw	256
   166  000811  1000               	dw	4096
   167  000813                     __end_of_hexpowers:
   168                           	opt stack 0
   169  000813                     STR_35:
   170  000813  30                 	db	48	;'0'
   171  000814  31                 	db	49	;'1'
   172  000815  32                 	db	50	;'2'
   173  000816  33                 	db	51	;'3'
   174  000817  34                 	db	52	;'4'
   175  000818  35                 	db	53	;'5'
   176  000819  36                 	db	54	;'6'
   177  00081A  37                 	db	55	;'7'
   178  00081B  38                 	db	56	;'8'
   179  00081C  39                 	db	57	;'9'
   180  00081D  61                 	db	97	;'a'
   181  00081E  62                 	db	98	;'b'
   182  00081F  63                 	db	99	;'c'
   183  000820  64                 	db	100	;'d'
   184  000821  65                 	db	101	;'e'
   185  000822  66                 	db	102	;'f'
   186  000823  00                 	db	0
   187  000824                     STR_14:
   188  000824  69                 	db	105	;'i'
   189  000825  6E                 	db	110	;'n'
   190  000826  69                 	db	105	;'i'
   191  000827  74                 	db	116	;'t'
   192  000828  00                 	db	0
   193  000829                     STR_31:
   194  000829  53                 	db	83	;'S'
   195  00082A  43                 	db	67	;'C'
   196  00082B  41                 	db	65	;'A'
   197  00082C  00                 	db	0
   198  00082D                     STR_33:
   199  00082D  53                 	db	83	;'S'
   200  00082E  54                 	db	84	;'T'
   201  00082F  41                 	db	65	;'A'
   202  000830  00                 	db	0
   203  000831                     STR_27:
   204  000831  52                 	db	82	;'R'
   205  000832  47                 	db	71	;'G'
   206  000833  42                 	db	66	;'B'
   207  000834  00                 	db	0
   208  000835                     STR_25:
   209  000835  4F                 	db	79	;'O'
   210  000836  46                 	db	70	;'F'
   211  000837  46                 	db	70	;'F'
   212  000838  00                 	db	0
   213  000839                     STR_5:
   214  000839  5B                 	db	91	;'['
   215  00083A  41                 	db	65	;'A'
   216  00083B  5D                 	db	93	;']'
   217  00083C  00                 	db	0
   218  00083D                     STR_4:
   219  00083D  5B                 	db	91	;'['
   220  00083E  42                 	db	66	;'B'
   221  00083F  5D                 	db	93	;']'
   222  000840  00                 	db	0
   223  000841                     STR_3:
   224  000841  5B                 	db	91	;'['
   225  000842  4D                 	db	77	;'M'
   226  000843  5D                 	db	93	;']'
   227  000844  00                 	db	0
   228  000845                     STR_23:
   229  000845  46                 	db	70	;'F'
   230  000846  41                 	db	65	;'A'
   231  000847  00                 	db	0
   232  000848                     STR_21:
   233  000848  46                 	db	70	;'F'
   234  000849  4C                 	db	76	;'L'
   235  00084A  00                 	db	0
   236  00084B                     STR_24:
   237  00084B  53                 	db	83	;'S'
   238  00084C  4D                 	db	77	;'M'
   239  00084D  00                 	db	0
   240  00084E                     STR_26:
   241  00084E  4F                 	db	79	;'O'
   242  00084F  4E                 	db	78	;'N'
   243  000850  00                 	db	0
   244  000851                     STR_22:
   245  000851  53                 	db	83	;'S'
   246  000852  54                 	db	84	;'T'
   247  000853  00                 	db	0
   248  000854                     STR_11:
   249  000854  25                 	db	37
   250  000855  64                 	db	100	;'d'
   251  000856  00                 	db	0
   252  000857                     STR_6:
   253  000857  25                 	db	37
   254  000858  78                 	db	120	;'x'
   255  000859  00                 	db	0
   256  00085A                     STR_19:
   257  00085A  44                 	db	68	;'D'
   258  00085B  00                 	db	0
   259  00085C                     STR_16:
   260  00085C  47                 	db	71	;'G'
   261  00085D  00                 	db	0
   262  00085E                     STR_13:
   263  00085E  49                 	db	73	;'I'
   264  00085F  00                 	db	0
   265  000860                     STR_12:
   266  000860  50                 	db	80	;'P'
   267  000861  00                 	db	0
   268  000862                     STR_15:
   269  000862  52                 	db	82	;'R'
   270  000863  00                 	db	0
   271  000864                     STR_18:
   272  000864  53                 	db	83	;'S'
   273  000865  00                 	db	0
   274  000866                     STR_20:
   275  000866  55                 	db	85	;'U'
   276  000867  00                 	db	0
   277  000868                     STR_2:
   278  000868  24                 	db	36
   279  000869  00                 	db	0
   280  00086A                     STR_1:
   281  00086A  26                 	db	38
   282  00086B  00                 	db	0
   283  00086C                     STR_7:
   284  00086C  3A                 	db	58	;':'
   285  00086D  00                 	db	0
   286  0000                     
   287                           ; #config settings
   288  00086E  00                 	db	0	; dummy byte at the end
   289  0000                     
   290                           	psect	nvBANK0
   291  0000D4                     __pnvBANK0:
   292                           	opt stack 0
   293  0000D4                     _deviceName:
   294                           	opt stack 0
   295  0000D4                     	ds	3
   296  0000                     _ADCON1	set	4033
   297  0000                     _BAUDCONbits	set	4024
   298  0000                     _INTCON2bits	set	4081
   299  0000                     _INTCONbits	set	4082
   300  0000                     _IPR1bits	set	3999
   301  0000                     _PIE1bits	set	3997
   302  0000                     _PIR1bits	set	3998
   303  0000                     _PORTA	set	3968
   304  0000                     _PORTB	set	3969
   305  0000                     _PORTBbits	set	3969
   306  0000                     _PORTC	set	3970
   307  0000                     _RCONbits	set	4048
   308  0000                     _RCREG	set	4014
   309  0000                     _RCSTAbits	set	4011
   310  0000                     _SPBRG	set	4015
   311  0000                     _T0CONbits	set	4053
   312  0000                     _TMR0H	set	4055
   313  0000                     _TMR0L	set	4054
   314  0000                     _TRISA	set	3986
   315  0000                     _TRISB	set	3987
   316  0000                     _TRISBbits	set	3987
   317  0000                     _TRISC	set	3988
   318  0000                     _TRISCbits	set	3988
   319  0000                     _TXREG	set	4013
   320  0000                     _TXSTAbits	set	4012
   321                           
   322                           	psect	cinit
   323  001E06                     __pcinit:
   324                           	opt stack 0
   325  001E06                     start_initialization:
   326                           	opt stack 0
   327  001E06                     __initialization:
   328                           	opt stack 0
   329                           
   330                           ; Initialize objects allocated to BANK0 (2 bytes)
   331                           ; load TBLPTR registers with __pidataBANK0
   332  001E06  0ED0               	movlw	low __pidataBANK0
   333  001E08  6EF6               	movwf	tblptrl,c
   334  001E0A  0E23               	movlw	high __pidataBANK0
   335  001E0C  6EF7               	movwf	tblptrh,c
   336  001E0E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   337  001E10  6EF8               	movwf	tblptru,c
   338  001E12  0009               	tblrd		*+	;fetch initializer
   339  001E14  CFF5 F0D7          	movff	tablat,__pdataBANK0
   340  001E18  0009               	tblrd		*+	;fetch initializer
   341  001E1A  CFF5 F0D8          	movff	tablat,__pdataBANK0+1
   342                           
   343                           ; Initialize objects allocated to COMRAM (10 bytes)
   344                           ; load TBLPTR registers with __pidataCOMRAM
   345  001E1E  0E88               	movlw	low __pidataCOMRAM
   346  001E20  6EF6               	movwf	tblptrl,c
   347  001E22  0E23               	movlw	high __pidataCOMRAM
   348  001E24  6EF7               	movwf	tblptrh,c
   349  001E26  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   350  001E28  6EF8               	movwf	tblptru,c
   351  001E2A  EE00  F03C         	lfsr	0,__pdataCOMRAM
   352  001E2E  EE10 F00A          	lfsr	1,10
   353  001E32                     copy_data0:
   354  001E32  0009               	tblrd		*+
   355  001E34  CFF5 FFEE          	movff	tablat,postinc0
   356  001E38  50E5               	movf	postdec1,w,c
   357  001E3A  50E1               	movf	fsr1l,w,c
   358  001E3C  E1FA               	bnz	copy_data0
   359                           
   360                           ; Clear objects allocated to BANK1 (63 bytes)
   361  001E3E  EE01  F000         	lfsr	0,__pbssBANK1
   362  001E42  0E3F               	movlw	63
   363  001E44                     clear_0:
   364  001E44  6AEE               	clrf	postinc0,c
   365  001E46  06E8               	decf	wreg,f,c
   366  001E48  E1FD               	bnz	clear_0
   367                           
   368                           ; Clear objects allocated to BANK0 (35 bytes)
   369  001E4A  EE00  F0B1         	lfsr	0,__pbssBANK0
   370  001E4E  0E23               	movlw	35
   371  001E50                     clear_1:
   372  001E50  6AEE               	clrf	postinc0,c
   373  001E52  06E8               	decf	wreg,f,c
   374  001E54  E1FD               	bnz	clear_1
   375                           
   376                           ; Clear objects allocated to COMRAM (26 bytes)
   377  001E56  EE00  F022         	lfsr	0,__pbssCOMRAM
   378  001E5A  0E1A               	movlw	26
   379  001E5C                     clear_2:
   380  001E5C  6AEE               	clrf	postinc0,c
   381  001E5E  06E8               	decf	wreg,f,c
   382  001E60  E1FD               	bnz	clear_2
   383  001E62                     end_of_initialization:
   384                           	opt stack 0
   385  001E62                     __end_of__initialization:
   386                           	opt stack 0
   387  001E62  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   388  001E64  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   389  001E66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   390  001E68  6EF8               	movwf	tblptru,c
   391  001E6A  0100               	movlb	0
   392  001E6C  EF42  F00D         	goto	_main	;jump to C main() function
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1l	equ	0xFE1
   401                           
   402                           	psect	bssCOMRAM
   403  000022                     __pbssCOMRAM:
   404                           	opt stack 0
   405  000022                     _read:
   406                           	opt stack 0
   407  000022                     	ds	6
   408  000028                     _D_TIMER0_Flag:
   409                           	opt stack 0
   410  000028                     	ds	1
   411  000029                     _baud:
   412                           	opt stack 0
   413  000029                     	ds	1
   414  00002A                     _blockLength:
   415                           	opt stack 0
   416  00002A                     	ds	1
   417  00002B                     _bufferCnt:
   418                           	opt stack 0
   419  00002B                     	ds	1
   420  00002C                     _saved_state:
   421                           	opt stack 0
   422  00002C                     	ds	1
   423  00002D                     _scale:
   424                           	opt stack 0
   425  00002D                     	ds	1
   426  00002E                     _state:
   427                           	opt stack 0
   428  00002E                     	ds	1
   429  00002F                     fade@b_up:
   430                           	opt stack 0
   431  00002F                     	ds	1
   432  000030                     fade@fade:
   433                           	opt stack 0
   434  000030                     	ds	1
   435  000031                     fade@g_up:
   436                           	opt stack 0
   437  000031                     	ds	1
   438  000032                     fade@r_cnt:
   439                           	opt stack 0
   440  000032                     	ds	1
   441  000033                     fade@r_up:
   442                           	opt stack 0
   443  000033                     	ds	1
   444  000034                     flash@color:
   445                           	opt stack 0
   446  000034                     	ds	1
   447  000035                     flash@count:
   448                           	opt stack 0
   449  000035                     	ds	1
   450  000036                     handleState@cnt:
   451                           	opt stack 0
   452  000036                     	ds	1
   453  000037                     smooth@color:
   454                           	opt stack 0
   455  000037                     	ds	1
   456  000038                     smooth@count:
   457                           	opt stack 0
   458  000038                     	ds	1
   459  000039                     strobe2@cnt:
   460                           	opt stack 0
   461  000039                     	ds	1
   462  00003A                     	ds	1
   463  00003B                     strobe2@on_cnt:
   464                           	opt stack 0
   465  00003B                     	ds	1
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postdec1	equ	0xFE5
   473                           fsr1l	equ	0xFE1
   474                           
   475                           	psect	dataCOMRAM
   476  00003C                     __pdataCOMRAM:
   477                           	opt stack 0
   478  00003C                     _ackCharacter:
   479                           	opt stack 0
   480  00003C                     	ds	2
   481  00003E                     _blockCharacter:
   482                           	opt stack 0
   483  00003E                     	ds	2
   484  000040                     _startCharacter:
   485                           	opt stack 0
   486  000040                     	ds	2
   487  000042                     _stopCharacter:
   488                           	opt stack 0
   489  000042                     	ds	2
   490  000044                     fade@b_cnt:
   491                           	opt stack 0
   492  000044                     	ds	1
   493  000045                     fade@g_cnt:
   494                           	opt stack 0
   495  000045                     	ds	1
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	bssBANK0
   506  0000B1                     __pbssBANK0:
   507                           	opt stack 0
   508  0000B1                     _comMes:
   509                           	opt stack 0
   510  0000B1                     	ds	17
   511  0000C2                     _readData:
   512                           	opt stack 0
   513  0000C2                     	ds	6
   514  0000C8                     _PWM_Blue:
   515                           	opt stack 0
   516  0000C8                     	ds	2
   517  0000CA                     _PWM_Green:
   518                           	opt stack 0
   519  0000CA                     	ds	2
   520  0000CC                     _PWM_Red:
   521                           	opt stack 0
   522  0000CC                     	ds	2
   523  0000CE                     _D_UART_ReadFlag:
   524                           	opt stack 0
   525  0000CE                     	ds	1
   526  0000CF                     _b:
   527                           	opt stack 0
   528  0000CF                     	ds	1
   529  0000D0                     _g:
   530                           	opt stack 0
   531  0000D0                     	ds	1
   532  0000D1                     _r:
   533                           	opt stack 0
   534  0000D1                     	ds	1
   535  0000D2                     strobe@cnt:
   536                           	opt stack 0
   537  0000D2                     	ds	1
   538  0000D3                     strobe@up:
   539                           	opt stack 0
   540  0000D3                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	dataBANK0
   551  0000D7                     __pdataBANK0:
   552                           	opt stack 0
   553  0000D7                     _messageCharacter:
   554                           	opt stack 0
   555  0000D7                     	ds	2
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1l	equ	0xFE1
   564                           
   565                           	psect	bssBANK1
   566  000100                     __pbssBANK1:
   567                           	opt stack 0
   568  000100                     _readBuffer:
   569                           	opt stack 0
   570  000100                     	ds	63
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	cstackBANK0
   581  000060                     __pcstackBANK0:
   582                           	opt stack 0
   583  000060                     ?i1___lwmod:
   584                           	opt stack 0
   585  000060                     i1___lwmod@dividend:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x0
   589  000060                     	ds	2
   590  000062                     i1___lwmod@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x2
   594  000062                     	ds	2
   595  000064                     ?i1_printf:
   596                           	opt stack 0
   597  000064                     i1printf@f:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x4
   601  000064                     	ds	5
   602  000069                     ??i1_printf:
   603                           
   604                           ; 1 bytes @ 0x9
   605  000069                     	ds	3
   606  00006C                     i1printf@idx:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0xC
   610  00006C                     	ds	1
   611  00006D                     i1printf@ap:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0xD
   615  00006D                     	ds	2
   616  00006F                     i1printf@prec:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0xF
   620  00006F                     	ds	1
   621  000070                     i1printf@flag:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x10
   625  000070                     	ds	1
   626  000071                     i1printf@val:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x11
   630  000071                     	ds	2
   631  000073                     i1printf@c:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x13
   635  000073                     	ds	1
   636  000074                     fillDataBuffer@i:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x14
   640  000074                     	ds	1
   641  000075                     fillDataBuffer@data:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x15
   645  000075                     	ds	1
   646  000076                     ??_LowISR:
   647                           
   648                           ; 1 bytes @ 0x16
   649  000076                     	ds	17
   650  000087                     ??_pwmColors:
   651  000087                     ?_strcmp:
   652                           	opt stack 0
   653  000087                     ?___lwdiv:
   654                           	opt stack 0
   655  000087                     ?___aldiv:
   656                           	opt stack 0
   657  000087                     ?_D_UART_Read:
   658                           	opt stack 0
   659  000087                     ?_D_UART_ReadBlock:
   660                           	opt stack 0
   661  000087                     D_TIMER0_Enable@enable:
   662                           	opt stack 0
   663  000087                     D_UART_Enable@enable:
   664                           	opt stack 0
   665  000087                     D_PWM_SetDuty@duty:
   666                           	opt stack 0
   667  000087                     strToInt@str:
   668                           	opt stack 0
   669  000087                     ___lwdiv@dividend:
   670                           	opt stack 0
   671  000087                     strcmp@s1:
   672                           	opt stack 0
   673  000087                     ___aldiv@dividend:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x27
   677  000087                     	ds	1
   678  000088                     D_TIMER0_Init@prescale:
   679                           	opt stack 0
   680  000088                     writeByte@data:
   681                           	opt stack 0
   682  000088                     D_PWM_SetDuty@which:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x28
   686  000088                     	ds	1
   687  000089                     putch@data:
   688                           	opt stack 0
   689  000089                     setRGB@g:
   690                           	opt stack 0
   691  000089                     pwmColors@birghtness:
   692                           	opt stack 0
   693  000089                     strToInt@tmp:
   694                           	opt stack 0
   695  000089                     ___lwdiv@divisor:
   696                           	opt stack 0
   697  000089                     strcmp@s2:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x29
   701  000089                     	ds	1
   702  00008A                     setRGB@b:
   703                           	opt stack 0
   704  00008A                     D_PWM_Enable@enable:
   705                           	opt stack 0
   706  00008A                     strToInt@shift:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x2A
   710  00008A                     	ds	1
   711  00008B                     ??_strcmp:
   712  00008B                     setRGB@r:
   713                           	opt stack 0
   714  00008B                     strToInt@val:
   715                           	opt stack 0
   716  00008B                     ___lwdiv@quotient:
   717                           	opt stack 0
   718  00008B                     ___aldiv@divisor:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x2B
   722  00008B                     	ds	1
   723  00008C                     D_PWM_SetRGB@g:
   724                           	opt stack 0
   725  00008C                     strcmp@r:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x2C
   729  00008C                     	ds	1
   730  00008D                     D_PWM_SetRGB@b:
   731                           	opt stack 0
   732  00008D                     ___lwdiv@counter:
   733                           	opt stack 0
   734  00008D                     D_UART_Read@cm:
   735                           	opt stack 0
   736                           
   737                           ; 17 bytes @ 0x2D
   738  00008D                     	ds	1
   739  00008E                     ?___lwmod:
   740                           	opt stack 0
   741  00008E                     D_UART_ReadBlock@cnt:
   742                           	opt stack 0
   743  00008E                     D_PWM_SetRGB@r:
   744                           	opt stack 0
   745  00008E                     ___lwmod@dividend:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x2E
   749  00008E                     	ds	1
   750  00008F                     ___aldiv@counter:
   751                           	opt stack 0
   752  00008F                     D_UART_ReadBlock@cm:
   753                           	opt stack 0
   754                           
   755                           ; 17 bytes @ 0x2F
   756  00008F                     	ds	1
   757  000090                     ___aldiv@sign:
   758                           	opt stack 0
   759  000090                     ___lwmod@divisor:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x30
   763  000090                     	ds	1
   764  000091                     ___aldiv@quotient:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x31
   768  000091                     	ds	1
   769  000092                     ___lwmod@counter:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x32
   773  000092                     	ds	1
   774  000093                     ?_printf:
   775                           	opt stack 0
   776  000093                     printf@f:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x33
   780  000093                     	ds	2
   781  000095                     D_UART_Init@name:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x35
   785  000095                     	ds	2
   786  000097                     D_UART_Init@baud:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x37
   790  000097                     	ds	1
   791  000098                     ??_printf:
   792                           
   793                           ; 1 bytes @ 0x38
   794  000098                     	ds	1
   795  000099                     D_UART_Init@interrupts:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x39
   799  000099                     	ds	1
   800  00009A                     _D_UART_Init$1760:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x3A
   804  00009A                     	ds	1
   805  00009B                     printf@idx:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x3B
   809  00009B                     	ds	1
   810  00009C                     printf@ap:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x3C
   814  00009C                     	ds	2
   815  00009E                     printf@prec:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x3E
   819  00009E                     	ds	1
   820  00009F                     printf@flag:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x3F
   824  00009F                     	ds	1
   825  0000A0                     printf@val:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x40
   829  0000A0                     	ds	2
   830  0000A2                     printf@c:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x42
   834  0000A2                     	ds	1
   835  0000A3                     D_UART_Write@command:
   836                           	opt stack 0
   837  0000A3                     D_UART_WriteInt@command:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x43
   841  0000A3                     	ds	2
   842  0000A5                     D_UART_Write@data:
   843                           	opt stack 0
   844  0000A5                     D_UART_WriteInt@data:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x45
   848  0000A5                     	ds	2
   849  0000A7                     ??_D_UART_Write:
   850  0000A7                     ??_D_UART_WriteInt:
   851                           
   852                           ; 1 bytes @ 0x47
   853  0000A7                     	ds	1
   854  0000A8                     handle_message@msg:
   855                           	opt stack 0
   856                           
   857                           ; 6 bytes @ 0x48
   858  0000A8                     	ds	6
   859  0000AE                     ??_handle_message:
   860                           
   861                           ; 1 bytes @ 0x4E
   862  0000AE                     	ds	1
   863  0000AF                     main@i:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x4F
   867  0000AF                     	ds	1
   868  0000B0                     main@length:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x50
   872  0000B0                     	ds	1
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           postdec1	equ	0xFE5
   880                           fsr1l	equ	0xFE1
   881                           
   882                           	psect	cstackCOMRAM
   883  000001                     __pcstackCOMRAM:
   884                           	opt stack 0
   885  000001                     ??i2_pwmColors:
   886  000001                     i2D_PWM_SetDuty@duty:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x0
   890  000001                     	ds	1
   891  000002                     i2D_PWM_SetDuty@which:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x1
   895  000002                     	ds	1
   896  000003                     i2setRGB@g:
   897                           	opt stack 0
   898  000003                     i2pwmColors@birghtness:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x2
   902  000003                     	ds	1
   903  000004                     i2setRGB@b:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x3
   907  000004                     	ds	1
   908  000005                     i2setRGB@r:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x4
   912  000005                     	ds	1
   913  000006                     ??_flash:
   914  000006                     ??_strobe2:
   915  000006                     ??_smooth:
   916                           
   917                           ; 1 bytes @ 0x5
   918  000006                     	ds	6
   919  00000C                     ??_HighISR:
   920                           
   921                           ; 1 bytes @ 0xB
   922  00000C                     	ds	14
   923  00001A                     ?i1___lwdiv:
   924                           	opt stack 0
   925  00001A                     i1D_UART_Enable@enable:
   926                           	opt stack 0
   927  00001A                     i1___lwdiv@dividend:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x19
   931  00001A                     	ds	1
   932  00001B                     readByte@dum:
   933                           	opt stack 0
   934  00001B                     i1writeByte@data:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x1A
   938  00001B                     	ds	1
   939  00001C                     i1putch@data:
   940                           	opt stack 0
   941  00001C                     i1___lwdiv@divisor:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x1B
   945  00001C                     	ds	2
   946  00001E                     i1___lwdiv@counter:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x1D
   950  00001E                     	ds	1
   951  00001F                     i1___lwdiv@quotient:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x1E
   955  00001F                     	ds	2
   956  000021                     i1___lwmod@counter:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x20
   960  000021                     	ds	1
   961  000022                     tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           
   970                           ; 1 bytes @ 0x21
   971 ;;
   972 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   973 ;;
   974 ;; *************** function _main *****************
   975 ;; Defined at:
   976 ;;		line 67 in file "main.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  i               1   79[BANK0 ] unsigned char 
   981 ;;  length          1   80[BANK0 ] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   991 ;;      Params:         0       0       0       0       0       0       0       0       0
   992 ;;      Locals:         0       2       0       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0
   994 ;;      Totals:         0       2       0       0       0       0       0       0       0
   995 ;;Total ram usage:        2 bytes
   996 ;; Hardware stack levels required when called:   18
   997 ;; This function calls:
   998 ;;		_D_PWM_SetRGB
   999 ;;		_D_UART_BlockLength
  1000 ;;		_D_UART_Read
  1001 ;;		_D_UART_ReadBlock
  1002 ;;		_handle_message
  1003 ;;		_initialize
  1004 ;; This function is called by:
  1005 ;;		Startup code after reset
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text0
  1010  001A84                     __ptext0:
  1011                           	opt stack 0
  1012  001A84                     _main:
  1013                           	opt stack 13
  1014                           
  1015                           ;main.c: 69: initialize();
  1016                           
  1017                           ;incstack = 0
  1018  001A84  EC38  F00F         	call	_initialize	;wreg free
  1019                           
  1020                           ;main.c: 71: D_PWM_SetRGB(r, g, b);
  1021  001A88  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  1022  001A8C  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  1023  001A90  0100               	movlb	0	; () banked
  1024  001A92  51D1               	movf	_r& (0+255),w,b
  1025  001A94  EC3C  F011         	call	_D_PWM_SetRGB
  1026  001A98                     l3244:
  1027                           
  1028                           ;main.c: 75: if (D_UART_ReadFlag) {
  1029  001A98  0100               	movlb	0	; () banked
  1030  001A9A  51CE               	movf	_D_UART_ReadFlag& (0+255),w,b
  1031  001A9C  B4D8               	btfsc	status,2,c
  1032  001A9E  D7FC               	goto	l3244
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;main.c: 76: D_UART_ReadFlag = 0;
  1036  001AA0  0E00               	movlw	0
  1037  001AA2  0100               	movlb	0	; () banked
  1038  001AA4  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 77: uint8_t length = D_UART_BlockLength();
  1042  001AA6  ECE1  F011         	call	_D_UART_BlockLength	;wreg free
  1043  001AAA  0100               	movlb	0	; () banked
  1044  001AAC  6FB0               	movwf	main@length& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 78: if (length == 1) {
  1048  001AAE  0100               	movlb	0	; () banked
  1049  001AB0  05B0               	decf	main@length& (0+255),w,b
  1050  001AB2  A4D8               	btfss	status,2,c
  1051  001AB4  D010               	goto	l3254
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;main.c: 79: handle_message(D_UART_Read());
  1055  001AB6  EC7A  F010         	call	_D_UART_Read	;wreg free
  1056  001ABA  CFE9 FFD9          	movff	fsr0l,fsr2l
  1057  001ABE  CFEA FFDA          	movff	fsr0h,fsr2h
  1058  001AC2  EE00  F0A8         	lfsr	0,handle_message@msg
  1059  001AC6  0E05               	movlw	5
  1060  001AC8                     u2891:
  1061  001AC8  CFDB FFEB          	movff	plusw2,plusw0
  1062  001ACC  06E8               	decf	wreg,f,c
  1063  001ACE  E2FC               	bc	u2891
  1064  001AD0  EC38  F004         	call	_handle_message	;wreg free
  1065                           
  1066                           ;main.c: 80: } else if (length > 1) {
  1067  001AD4  D7E1               	goto	l3244
  1068  001AD6                     l3254:
  1069  001AD6  0E01               	movlw	1
  1070  001AD8  0100               	movlb	0	; () banked
  1071  001ADA  65B0               	cpfsgt	main@length& (0+255),b
  1072  001ADC  D7DD               	goto	l3244
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;main.c: 81: uint8_t i;
  1076                           ;main.c: 82: for (i=0; i < length; i++) {
  1077  001ADE  0E00               	movlw	0
  1078  001AE0  0100               	movlb	0	; () banked
  1079  001AE2  6FAF               	movwf	main@i& (0+255),b
  1080  001AE4  D013               	goto	l3262
  1081  001AE6                     l3258:
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;main.c: 83: handle_message(D_UART_ReadBlock(i));
  1085  001AE6  0100               	movlb	0	; () banked
  1086  001AE8  51AF               	movf	main@i& (0+255),w,b
  1087  001AEA  ECC9  F00F         	call	_D_UART_ReadBlock
  1088  001AEE  CFE9 FFD9          	movff	fsr0l,fsr2l
  1089  001AF2  CFEA FFDA          	movff	fsr0h,fsr2h
  1090  001AF6  EE00  F0A8         	lfsr	0,handle_message@msg
  1091  001AFA  0E05               	movlw	5
  1092  001AFC                     u2911:
  1093  001AFC  CFDB FFEB          	movff	plusw2,plusw0
  1094  001B00  06E8               	decf	wreg,f,c
  1095  001B02  E2FC               	bc	u2911
  1096  001B04  EC38  F004         	call	_handle_message	;wreg free
  1097  001B08  0100               	movlb	0	; () banked
  1098  001B0A  2BAF               	incf	main@i& (0+255),f,b
  1099  001B0C                     l3262:
  1100                           
  1101                           ; BSR set to: 0
  1102  001B0C  0100               	movlb	0	; () banked
  1103  001B0E  51B0               	movf	main@length& (0+255),w,b
  1104  001B10  0100               	movlb	0	; () banked
  1105  001B12  5DAF               	subwf	main@i& (0+255),w,b
  1106  001B14  B0D8               	btfsc	status,0,c
  1107  001B16  D7C0               	goto	l3244
  1108  001B18  D7E6               	goto	l3258
  1109  001B1A                     __end_of_main:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           postinc0	equ	0xFEE
  1116                           plusw0	equ	0xFEB
  1117                           fsr0h	equ	0xFEA
  1118                           fsr0l	equ	0xFE9
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           plusw2	equ	0xFDB
  1123                           fsr2h	equ	0xFDA
  1124                           fsr2l	equ	0xFD9
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _initialize *****************
  1128 ;; Defined at:
  1129 ;;		line 48 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0
  1144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1146 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1147 ;;Total ram usage:        0 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:   17
  1150 ;; This function calls:
  1151 ;;		_D_PORT_Init
  1152 ;;		_D_PWM_Enable
  1153 ;;		_D_PWM_Init
  1154 ;;		_D_UART_Enable
  1155 ;;		_D_UART_Init
  1156 ;;		_D_UART_Write
  1157 ;; This function is called by:
  1158 ;;		_main
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text1
  1163  001E70                     __ptext1:
  1164                           	opt stack 0
  1165  001E70                     _initialize:
  1166                           	opt stack 13
  1167                           
  1168                           ;main.c: 49: D_PORT_Init();
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;incstack = 0
  1172  001E70  EC7F  F011         	call	_D_PORT_Init	;wreg free
  1173                           
  1174                           ;main.c: 52: D_UART_Init("P", 19200, 1);
  1175  001E74  0E60               	movlw	low STR_12
  1176  001E76  0100               	movlb	0	; () banked
  1177  001E78  6F95               	movwf	D_UART_Init@name& (0+255),b
  1178  001E7A  0E08               	movlw	high STR_12
  1179  001E7C  0100               	movlb	0	; () banked
  1180  001E7E  6F96               	movwf	(D_UART_Init@name+1)& (0+255),b
  1181  001E80  0E4B               	movlw	75
  1182  001E82  0100               	movlb	0	; () banked
  1183  001E84  6F98               	movwf	(D_UART_Init@baud+1)& (0+255),b
  1184  001E86  0E00               	movlw	0
  1185  001E88  6F97               	movwf	D_UART_Init@baud& (0+255),b
  1186  001E8A  0E01               	movlw	1
  1187  001E8C  0100               	movlb	0	; () banked
  1188  001E8E  6F99               	movwf	D_UART_Init@interrupts& (0+255),b
  1189  001E90  ECFA  F00B         	call	_D_UART_Init	;wreg free
  1190                           
  1191                           ;main.c: 53: D_UART_Enable(1);
  1192  001E94  0E01               	movlw	1
  1193  001E96  EC17  F011         	call	_D_UART_Enable
  1194                           
  1195                           ;main.c: 56: D_PWM_Init();
  1196  001E9A  EC9F  F010         	call	_D_PWM_Init	;wreg free
  1197                           
  1198                           ;main.c: 57: D_PWM_Enable(1);
  1199  001E9E  0E01               	movlw	1
  1200  001EA0  ECD6  F010         	call	_D_PWM_Enable
  1201                           
  1202                           ;main.c: 60: r = 255;
  1203  001EA4  0100               	movlb	0	; () banked
  1204  001EA6  69D1               	setf	_r& (0+255),b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 61: g = 0;
  1208  001EA8  0E00               	movlw	0
  1209  001EAA  0100               	movlb	0	; () banked
  1210  001EAC  6FD0               	movwf	_g& (0+255),b
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;main.c: 62: b = 0;
  1214  001EAE  0E00               	movlw	0
  1215  001EB0  0100               	movlb	0	; () banked
  1216  001EB2  6FCF               	movwf	_b& (0+255),b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 64: D_UART_Write("I", "init");
  1220  001EB4  0E5E               	movlw	low STR_13
  1221  001EB6  0100               	movlb	0	; () banked
  1222  001EB8  6FA3               	movwf	D_UART_Write@command& (0+255),b
  1223  001EBA  0E08               	movlw	high STR_13
  1224  001EBC  0100               	movlb	0	; () banked
  1225  001EBE  6FA4               	movwf	(D_UART_Write@command+1)& (0+255),b
  1226  001EC0  0E24               	movlw	low STR_14
  1227  001EC2  0100               	movlb	0	; () banked
  1228  001EC4  6FA5               	movwf	D_UART_Write@data& (0+255),b
  1229  001EC6  0E08               	movlw	high STR_14
  1230  001EC8  0100               	movlb	0	; () banked
  1231  001ECA  6FA6               	movwf	(D_UART_Write@data+1)& (0+255),b
  1232  001ECC  EC2B  F00B         	call	_D_UART_Write	;wreg free
  1233  001ED0  0012               	return		;funcret
  1234  001ED2                     __end_of_initialize:
  1235                           	opt stack 0
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           plusw0	equ	0xFEB
  1242                           fsr0h	equ	0xFEA
  1243                           fsr0l	equ	0xFE9
  1244                           wreg	equ	0xFE8
  1245                           postdec1	equ	0xFE5
  1246                           fsr1l	equ	0xFE1
  1247                           plusw2	equ	0xFDB
  1248                           fsr2h	equ	0xFDA
  1249                           fsr2l	equ	0xFD9
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _D_UART_Write *****************
  1253 ;; Defined at:
  1254 ;;		line 271 in file "Drivers/UART_Driver.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  command         2   67[BANK0 ] PTR const unsigned char 
  1257 ;;		 -> STR_13(2), 
  1258 ;;  data            2   69[BANK0 ] PTR const unsigned char 
  1259 ;;		 -> STR_14(5), 
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1271 ;;      Params:         0       4       0       0       0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1273 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1274 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1275 ;;Total ram usage:        5 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:   16
  1278 ;; This function calls:
  1279 ;;		_printf
  1280 ;; This function is called by:
  1281 ;;		_initialize
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text2
  1286  001656                     __ptext2:
  1287                           	opt stack 0
  1288  001656                     _D_UART_Write:
  1289                           	opt stack 13
  1290                           
  1291                           ;UART_Driver.c: 272: printf(startCharacter);
  1292                           
  1293                           ;incstack = 0
  1294  001656  C040  F093         	movff	_startCharacter,printf@f
  1295  00165A  C041  F094         	movff	_startCharacter+1,printf@f+1
  1296  00165E  0100               	movlb	0	; () banked
  1297  001660  5193               	movf	printf@f& (0+255),w,b
  1298  001662  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1299  001664  A4D8               	btfss	status,2,c
  1300  001666  0E00               	movlw	low (__mediumconst shr (0+16))
  1301  001668  6F95               	movwf	(printf@f+2)& (0+255),b
  1302  00166A  EC59  F007         	call	_printf	;wreg free
  1303                           
  1304                           ;UART_Driver.c: 274: printf(messageCharacter);
  1305  00166E  C0D7  F093         	movff	_messageCharacter,printf@f
  1306  001672  C0D8  F094         	movff	_messageCharacter+1,printf@f+1
  1307  001676  0100               	movlb	0	; () banked
  1308  001678  5193               	movf	printf@f& (0+255),w,b
  1309  00167A  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1310  00167C  A4D8               	btfss	status,2,c
  1311  00167E  0E00               	movlw	low (__mediumconst shr (0+16))
  1312  001680  6F95               	movwf	(printf@f+2)& (0+255),b
  1313  001682  EC59  F007         	call	_printf	;wreg free
  1314                           
  1315                           ;UART_Driver.c: 275: printf(deviceName);
  1316  001686  C0D4  F093         	movff	_deviceName,printf@f
  1317  00168A  C0D5  F094         	movff	_deviceName+1,printf@f+1
  1318  00168E  C0D6  F095         	movff	_deviceName+2,printf@f+2
  1319  001692  EC59  F007         	call	_printf	;wreg free
  1320                           
  1321                           ;UART_Driver.c: 277: printf(":");printf(command);
  1322  001696  0E6C               	movlw	low STR_7
  1323  001698  0100               	movlb	0	; () banked
  1324  00169A  6F93               	movwf	printf@f& (0+255),b
  1325  00169C  0E08               	movlw	high STR_7
  1326  00169E  0100               	movlb	0	; () banked
  1327  0016A0  6F94               	movwf	(printf@f+1)& (0+255),b
  1328  0016A2  0100               	movlb	0	; () banked
  1329  0016A4  5193               	movf	printf@f& (0+255),w,b
  1330  0016A6  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1331  0016A8  A4D8               	btfss	status,2,c
  1332  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  1333  0016AC  6F95               	movwf	(printf@f+2)& (0+255),b
  1334  0016AE  EC59  F007         	call	_printf	;wreg free
  1335  0016B2  C0A3  F093         	movff	D_UART_Write@command,printf@f
  1336  0016B6  C0A4  F094         	movff	D_UART_Write@command+1,printf@f+1
  1337  0016BA  0100               	movlb	0	; () banked
  1338  0016BC  5193               	movf	printf@f& (0+255),w,b
  1339  0016BE  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1340  0016C0  A4D8               	btfss	status,2,c
  1341  0016C2  0E00               	movlw	low (__mediumconst shr (0+16))
  1342  0016C4  6F95               	movwf	(printf@f+2)& (0+255),b
  1343  0016C6  EC59  F007         	call	_printf	;wreg free
  1344                           
  1345                           ;UART_Driver.c: 279: printf(":");printf(data);
  1346  0016CA  0E6C               	movlw	low STR_7
  1347  0016CC  0100               	movlb	0	; () banked
  1348  0016CE  6F93               	movwf	printf@f& (0+255),b
  1349  0016D0  0E08               	movlw	high STR_7
  1350  0016D2  0100               	movlb	0	; () banked
  1351  0016D4  6F94               	movwf	(printf@f+1)& (0+255),b
  1352  0016D6  0100               	movlb	0	; () banked
  1353  0016D8  5193               	movf	printf@f& (0+255),w,b
  1354  0016DA  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1355  0016DC  A4D8               	btfss	status,2,c
  1356  0016DE  0E00               	movlw	low (__mediumconst shr (0+16))
  1357  0016E0  6F95               	movwf	(printf@f+2)& (0+255),b
  1358  0016E2  EC59  F007         	call	_printf	;wreg free
  1359  0016E6  C0A5  F093         	movff	D_UART_Write@data,printf@f
  1360  0016EA  C0A6  F094         	movff	D_UART_Write@data+1,printf@f+1
  1361  0016EE  0100               	movlb	0	; () banked
  1362  0016F0  5193               	movf	printf@f& (0+255),w,b
  1363  0016F2  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1364  0016F4  A4D8               	btfss	status,2,c
  1365  0016F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1366  0016F8  6F95               	movwf	(printf@f+2)& (0+255),b
  1367  0016FA  EC59  F007         	call	_printf	;wreg free
  1368                           
  1369                           ;UART_Driver.c: 281: printf(stopCharacter);
  1370  0016FE  C042  F093         	movff	_stopCharacter,printf@f
  1371  001702  C043  F094         	movff	_stopCharacter+1,printf@f+1
  1372  001706  0100               	movlb	0	; () banked
  1373  001708  5193               	movf	printf@f& (0+255),w,b
  1374  00170A  1194               	iorwf	(printf@f+1)& (0+255),w,b
  1375  00170C  A4D8               	btfss	status,2,c
  1376  00170E  0E00               	movlw	low (__mediumconst shr (0+16))
  1377  001710  6F95               	movwf	(printf@f+2)& (0+255),b
  1378  001712  EC59  F007         	call	_printf	;wreg free
  1379                           
  1380                           ;UART_Driver.c: 282: _delay((unsigned long)((1)*(48000000/4000.0)));
  1381  001716  0E10               	movlw	16
  1382  001718  0100               	movlb	0	; () banked
  1383  00171A  6FA7               	movwf	??_D_UART_Write& (0+255),b
  1384  00171C  0E94               	movlw	148
  1385  00171E                     u3317:
  1386  00171E  2EE8               	decfsz	wreg,f,c
  1387  001720  D7FE               	bra	u3317
  1388  001722  2FA7               	decfsz	??_D_UART_Write& (0+255),f,b
  1389  001724  D7FC               	bra	u3317
  1390  001726  F000               	nop	
  1391  001728  0012               	return		;funcret
  1392  00172A                     __end_of_D_UART_Write:
  1393                           	opt stack 0
  1394                           tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           postinc0	equ	0xFEE
  1399                           plusw0	equ	0xFEB
  1400                           fsr0h	equ	0xFEA
  1401                           fsr0l	equ	0xFE9
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1l	equ	0xFE1
  1405                           plusw2	equ	0xFDB
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _D_UART_Init *****************
  1411 ;; Defined at:
  1412 ;;		line 233 in file "Drivers/UART_Driver.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  name            2   53[BANK0 ] PTR const unsigned char 
  1415 ;;		 -> STR_12(2), 
  1416 ;;  baud            2   55[BANK0 ] unsigned int 
  1417 ;;  interrupts      1   57[BANK0 ] unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1429 ;;      Params:         0       5       0       0       0       0       0       0       0
  1430 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1432 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1433 ;;Total ram usage:        9 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:   13
  1436 ;; This function calls:
  1437 ;;		_D_UART_Enable
  1438 ;;		___aldiv
  1439 ;; This function is called by:
  1440 ;;		_initialize
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text3
  1445  0017F4                     __ptext3:
  1446                           	opt stack 0
  1447  0017F4                     _D_UART_Init:
  1448                           	opt stack 16
  1449                           
  1450                           ;UART_Driver.c: 235: TRISCbits.TRISC6 = 0;
  1451                           
  1452                           ;incstack = 0
  1453  0017F4  9C94               	bcf	3988,6,c	;volatile
  1454                           
  1455                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 1;
  1456  0017F6  8E94               	bsf	3988,7,c	;volatile
  1457                           
  1458                           ;UART_Driver.c: 239: deviceName = name;
  1459  0017F8  C095  F0D4         	movff	D_UART_Init@name,_deviceName
  1460  0017FC  C096  F0D5         	movff	D_UART_Init@name+1,_deviceName+1
  1461  001800  0100               	movlb	0	; () banked
  1462  001802  51D4               	movf	_deviceName& (0+255),w,b
  1463  001804  11D5               	iorwf	(_deviceName+1)& (0+255),w,b
  1464  001806  A4D8               	btfss	status,2,c
  1465  001808  0E00               	movlw	low (__mediumconst shr (0+16))
  1466  00180A  6FD6               	movwf	(_deviceName+2)& (0+255),b
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;UART_Driver.c: 240: D_UART_ReadFlag = 0;
  1470  00180C  0E00               	movlw	0
  1471  00180E  0100               	movlb	0	; () banked
  1472  001810  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;UART_Driver.c: 243: D_UART_Enable(0);
  1476  001812  0E00               	movlw	0
  1477  001814  EC17  F011         	call	_D_UART_Enable
  1478                           
  1479                           ;UART_Driver.c: 246: TXSTAbits.TX9 = 0;
  1480  001818  9CAC               	bcf	4012,6,c	;volatile
  1481                           
  1482                           ;UART_Driver.c: 247: TXSTAbits.SYNC = 0;
  1483  00181A  98AC               	bcf	4012,4,c	;volatile
  1484                           
  1485                           ;UART_Driver.c: 248: TXSTAbits.BRGH = 0;
  1486  00181C  94AC               	bcf	4012,2,c	;volatile
  1487                           
  1488                           ;UART_Driver.c: 251: RCSTAbits.RX9 = 0;
  1489  00181E  9CAB               	bcf	4011,6,c	;volatile
  1490                           
  1491                           ;UART_Driver.c: 254: BAUDCONbits.RXDTP = 0;
  1492  001820  9AB8               	bcf	4024,5,c	;volatile
  1493                           
  1494                           ;UART_Driver.c: 255: BAUDCONbits.TXCKP = 0;
  1495  001822  98B8               	bcf	4024,4,c	;volatile
  1496                           
  1497                           ;UART_Driver.c: 256: BAUDCONbits.BRG16 = 0;
  1498  001824  96B8               	bcf	4024,3,c	;volatile
  1499                           
  1500                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1501  001826  C097  F08B         	movff	D_UART_Init@baud,___aldiv@divisor
  1502  00182A  C098  F08C         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1503  00182E  0100               	movlb	0	; () banked
  1504  001830  6B8D               	clrf	(___aldiv@divisor+2)& (0+255),b
  1505  001832  6B8E               	clrf	(___aldiv@divisor+3)& (0+255),b
  1506  001834  0E00               	movlw	0
  1507  001836  0100               	movlb	0	; () banked
  1508  001838  6F87               	movwf	___aldiv@dividend& (0+255),b
  1509  00183A  0E6C               	movlw	108
  1510  00183C  6F88               	movwf	(___aldiv@dividend+1)& (0+255),b
  1511  00183E  0EDC               	movlw	220
  1512  001840  6F89               	movwf	(___aldiv@dividend+2)& (0+255),b
  1513  001842  0E02               	movlw	2
  1514  001844  6F8A               	movwf	(___aldiv@dividend+3)& (0+255),b
  1515  001846  ECC2  F009         	call	___aldiv	;wreg free
  1516  00184A  C087  F09A         	movff	?___aldiv,_D_UART_Init$1760
  1517  00184E  C088  F09B         	movff	?___aldiv+1,_D_UART_Init$1760+1
  1518  001852  C089  F09C         	movff	?___aldiv+2,_D_UART_Init$1760+2
  1519  001856  C08A  F09D         	movff	?___aldiv+3,_D_UART_Init$1760+3
  1520                           
  1521                           ;UART_Driver.c: 258: SPBRG = ((48000000/baud)/64)-1;
  1522  00185A  C09A  F087         	movff	_D_UART_Init$1760,___aldiv@dividend
  1523  00185E  C09B  F088         	movff	_D_UART_Init$1760+1,___aldiv@dividend+1
  1524  001862  C09C  F089         	movff	_D_UART_Init$1760+2,___aldiv@dividend+2
  1525  001866  C09D  F08A         	movff	_D_UART_Init$1760+3,___aldiv@dividend+3
  1526  00186A  0E40               	movlw	64
  1527  00186C  0100               	movlb	0	; () banked
  1528  00186E  6F8B               	movwf	___aldiv@divisor& (0+255),b
  1529  001870  0E00               	movlw	0
  1530  001872  6F8C               	movwf	(___aldiv@divisor+1)& (0+255),b
  1531  001874  0E00               	movlw	0
  1532  001876  6F8D               	movwf	(___aldiv@divisor+2)& (0+255),b
  1533  001878  0E00               	movlw	0
  1534  00187A  6F8E               	movwf	(___aldiv@divisor+3)& (0+255),b
  1535  00187C  ECC2  F009         	call	___aldiv	;wreg free
  1536  001880  0100               	movlb	0	; () banked
  1537  001882  0587               	decf	?___aldiv& (0+255),w,b
  1538  001884  6EAF               	movwf	4015,c	;volatile
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;UART_Driver.c: 261: if (interrupts) {
  1542  001886  0100               	movlb	0	; () banked
  1543  001888  5199               	movf	D_UART_Init@interrupts& (0+255),w,b
  1544  00188A  0100               	movlb	0	; () banked
  1545  00188C  B4D8               	btfsc	status,2,c
  1546  00188E  0012               	return	
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;UART_Driver.c: 262: RCONbits.IPEN = 1;
  1550  001890  8ED0               	bsf	4048,7,c	;volatile
  1551                           
  1552                           ;UART_Driver.c: 263: INTCONbits.GIEH = 1;
  1553  001892  8EF2               	bsf	intcon,7,c	;volatile
  1554                           
  1555                           ;UART_Driver.c: 264: INTCONbits.GIEL = 1;
  1556  001894  8CF2               	bsf	intcon,6,c	;volatile
  1557                           
  1558                           ;UART_Driver.c: 265: PIR1bits.RCIF = 0;
  1559  001896  9A9E               	bcf	3998,5,c	;volatile
  1560                           
  1561                           ;UART_Driver.c: 266: IPR1bits.RCIP = 0;
  1562  001898  9A9F               	bcf	3999,5,c	;volatile
  1563                           
  1564                           ;UART_Driver.c: 267: PIE1bits.RCIE = 1;
  1565  00189A  8A9D               	bsf	3997,5,c	;volatile
  1566  00189C  0012               	return	
  1567  00189E                     __end_of_D_UART_Init:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           intcon	equ	0xFF2
  1574                           postinc0	equ	0xFEE
  1575                           plusw0	equ	0xFEB
  1576                           fsr0h	equ	0xFEA
  1577                           fsr0l	equ	0xFE9
  1578                           wreg	equ	0xFE8
  1579                           postdec1	equ	0xFE5
  1580                           fsr1l	equ	0xFE1
  1581                           plusw2	equ	0xFDB
  1582                           fsr2h	equ	0xFDA
  1583                           fsr2l	equ	0xFD9
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function ___aldiv *****************
  1587 ;; Defined at:
  1588 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/aldiv.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  dividend        4   39[BANK0 ] long 
  1591 ;;  divisor         4   43[BANK0 ] long 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  quotient        4   49[BANK0 ] long 
  1594 ;;  sign            1   48[BANK0 ] unsigned char 
  1595 ;;  counter         1   47[BANK0 ] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  4   39[BANK0 ] long 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         0       8       0       0       0       0       0       0       0
  1606 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1609 ;;Total ram usage:       14 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:   12
  1612 ;; This function calls:
  1613 ;;		Nothing
  1614 ;; This function is called by:
  1615 ;;		_D_UART_Init
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text4
  1620  001384                     __ptext4:
  1621                           	opt stack 0
  1622  001384                     ___aldiv:
  1623                           	opt stack 16
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;incstack = 0
  1627  001384  0E00               	movlw	0
  1628  001386  0100               	movlb	0	; () banked
  1629  001388  6F90               	movwf	___aldiv@sign& (0+255),b
  1630                           
  1631                           ; BSR set to: 0
  1632  00138A  0100               	movlb	0	; () banked
  1633  00138C  AF8E               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1634  00138E  D00C               	goto	l2484
  1635                           
  1636                           ; BSR set to: 0
  1637  001390  0100               	movlb	0	; () banked
  1638  001392  1F8E               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1639  001394  1F8D               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1640  001396  1F8C               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1641  001398  6D8B               	negf	___aldiv@divisor& (0+255),b
  1642  00139A  0E00               	movlw	0
  1643  00139C  238C               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1644  00139E  238D               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1645  0013A0  238E               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1646                           
  1647                           ; BSR set to: 0
  1648  0013A2  0E01               	movlw	1
  1649  0013A4  0100               	movlb	0	; () banked
  1650  0013A6  6F90               	movwf	___aldiv@sign& (0+255),b
  1651  0013A8                     l2484:
  1652                           
  1653                           ; BSR set to: 0
  1654  0013A8  0100               	movlb	0	; () banked
  1655  0013AA  AF8A               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1656  0013AC  D00C               	goto	l2490
  1657                           
  1658                           ; BSR set to: 0
  1659  0013AE  0100               	movlb	0	; () banked
  1660  0013B0  1F8A               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1661  0013B2  1F89               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1662  0013B4  1F88               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1663  0013B6  6D87               	negf	___aldiv@dividend& (0+255),b
  1664  0013B8  0E00               	movlw	0
  1665  0013BA  2388               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1666  0013BC  2389               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1667  0013BE  238A               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1668                           
  1669                           ; BSR set to: 0
  1670  0013C0  0E01               	movlw	1
  1671  0013C2  0100               	movlb	0	; () banked
  1672  0013C4  1B90               	xorwf	___aldiv@sign& (0+255),f,b
  1673  0013C6                     l2490:
  1674                           
  1675                           ; BSR set to: 0
  1676  0013C6  0E00               	movlw	0
  1677  0013C8  0100               	movlb	0	; () banked
  1678  0013CA  6F91               	movwf	___aldiv@quotient& (0+255),b
  1679  0013CC  0E00               	movlw	0
  1680  0013CE  6F92               	movwf	(___aldiv@quotient+1)& (0+255),b
  1681  0013D0  0E00               	movlw	0
  1682  0013D2  6F93               	movwf	(___aldiv@quotient+2)& (0+255),b
  1683  0013D4  0E00               	movlw	0
  1684  0013D6  6F94               	movwf	(___aldiv@quotient+3)& (0+255),b
  1685                           
  1686                           ; BSR set to: 0
  1687  0013D8  0100               	movlb	0	; () banked
  1688  0013DA  518B               	movf	___aldiv@divisor& (0+255),w,b
  1689  0013DC  0100               	movlb	0	; () banked
  1690  0013DE  118C               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1691  0013E0  0100               	movlb	0	; () banked
  1692  0013E2  118D               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1693  0013E4  0100               	movlb	0	; () banked
  1694  0013E6  118E               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1695  0013E8  B4D8               	btfsc	status,2,c
  1696  0013EA  D042               	goto	l2512
  1697                           
  1698                           ; BSR set to: 0
  1699  0013EC  0E01               	movlw	1
  1700  0013EE  0100               	movlb	0	; () banked
  1701  0013F0  6F8F               	movwf	___aldiv@counter& (0+255),b
  1702  0013F2  D008               	goto	l2498
  1703  0013F4                     l2496:
  1704                           
  1705                           ; BSR set to: 0
  1706  0013F4  0100               	movlb	0	; () banked
  1707  0013F6  90D8               	bcf	status,0,c
  1708  0013F8  378B               	rlcf	___aldiv@divisor& (0+255),f,b
  1709  0013FA  378C               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1710  0013FC  378D               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1711  0013FE  378E               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1712  001400  0100               	movlb	0	; () banked
  1713  001402  2B8F               	incf	___aldiv@counter& (0+255),f,b
  1714  001404                     l2498:
  1715                           
  1716                           ; BSR set to: 0
  1717  001404  0100               	movlb	0	; () banked
  1718  001406  AF8E               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1719  001408  D7F5               	goto	l2496
  1720  00140A                     l2500:
  1721                           
  1722                           ; BSR set to: 0
  1723  00140A  0100               	movlb	0	; () banked
  1724  00140C  90D8               	bcf	status,0,c
  1725  00140E  3791               	rlcf	___aldiv@quotient& (0+255),f,b
  1726  001410  3792               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1727  001412  3793               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1728  001414  3794               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1729                           
  1730                           ; BSR set to: 0
  1731  001416  0100               	movlb	0	; () banked
  1732  001418  518B               	movf	___aldiv@divisor& (0+255),w,b
  1733  00141A  0100               	movlb	0	; () banked
  1734  00141C  5D87               	subwf	___aldiv@dividend& (0+255),w,b
  1735  00141E  0100               	movlb	0	; () banked
  1736  001420  518C               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1737  001422  0100               	movlb	0	; () banked
  1738  001424  5988               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1739  001426  0100               	movlb	0	; () banked
  1740  001428  518D               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1741  00142A  0100               	movlb	0	; () banked
  1742  00142C  5989               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1743  00142E  0100               	movlb	0	; () banked
  1744  001430  518E               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1745  001432  0100               	movlb	0	; () banked
  1746  001434  598A               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1747  001436  A0D8               	btfss	status,0,c
  1748  001438  D012               	goto	l2508
  1749                           
  1750                           ; BSR set to: 0
  1751  00143A  0100               	movlb	0	; () banked
  1752  00143C  518B               	movf	___aldiv@divisor& (0+255),w,b
  1753  00143E  0100               	movlb	0	; () banked
  1754  001440  5F87               	subwf	___aldiv@dividend& (0+255),f,b
  1755  001442  0100               	movlb	0	; () banked
  1756  001444  518C               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1757  001446  0100               	movlb	0	; () banked
  1758  001448  5B88               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1759  00144A  0100               	movlb	0	; () banked
  1760  00144C  518D               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1761  00144E  0100               	movlb	0	; () banked
  1762  001450  5B89               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1763  001452  0100               	movlb	0	; () banked
  1764  001454  518E               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1765  001456  0100               	movlb	0	; () banked
  1766  001458  5B8A               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1767                           
  1768                           ; BSR set to: 0
  1769  00145A  0100               	movlb	0	; () banked
  1770  00145C  8191               	bsf	___aldiv@quotient& (0+255),0,b
  1771  00145E                     l2508:
  1772                           
  1773                           ; BSR set to: 0
  1774  00145E  0100               	movlb	0	; () banked
  1775  001460  90D8               	bcf	status,0,c
  1776  001462  338E               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1777  001464  338D               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1778  001466  338C               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1779  001468  338B               	rrcf	___aldiv@divisor& (0+255),f,b
  1780                           
  1781                           ; BSR set to: 0
  1782  00146A  0100               	movlb	0	; () banked
  1783  00146C  2F8F               	decfsz	___aldiv@counter& (0+255),f,b
  1784  00146E  D7CD               	goto	l2500
  1785  001470                     l2512:
  1786                           
  1787                           ; BSR set to: 0
  1788  001470  0100               	movlb	0	; () banked
  1789  001472  5190               	movf	___aldiv@sign& (0+255),w,b
  1790  001474  0100               	movlb	0	; () banked
  1791  001476  B4D8               	btfsc	status,2,c
  1792  001478  D009               	goto	l2516
  1793                           
  1794                           ; BSR set to: 0
  1795  00147A  0100               	movlb	0	; () banked
  1796  00147C  1F94               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1797  00147E  1F93               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1798  001480  1F92               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1799  001482  6D91               	negf	___aldiv@quotient& (0+255),b
  1800  001484  0E00               	movlw	0
  1801  001486  2392               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1802  001488  2393               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1803  00148A  2394               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1804  00148C                     l2516:
  1805                           
  1806                           ; BSR set to: 0
  1807  00148C  C091  F087         	movff	___aldiv@quotient,?___aldiv
  1808  001490  C092  F088         	movff	___aldiv@quotient+1,?___aldiv+1
  1809  001494  C093  F089         	movff	___aldiv@quotient+2,?___aldiv+2
  1810  001498  C094  F08A         	movff	___aldiv@quotient+3,?___aldiv+3
  1811  00149C  0012               	return	
  1812  00149E                     __end_of___aldiv:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           plusw0	equ	0xFEB
  1821                           fsr0h	equ	0xFEA
  1822                           fsr0l	equ	0xFE9
  1823                           wreg	equ	0xFE8
  1824                           postdec1	equ	0xFE5
  1825                           fsr1l	equ	0xFE1
  1826                           plusw2	equ	0xFDB
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _D_PWM_Init *****************
  1832 ;; Defined at:
  1833 ;;		line 301 in file "Drivers/PWM_Driver.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;		None
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1847 ;;      Params:         0       0       0       0       0       0       0       0       0
  1848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1850 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:   14
  1854 ;; This function calls:
  1855 ;;		_D_TIMER0_Enable
  1856 ;;		_D_TIMER0_Init
  1857 ;; This function is called by:
  1858 ;;		_initialize
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text5
  1863  00213E                     __ptext5:
  1864                           	opt stack 0
  1865  00213E                     _D_PWM_Init:
  1866                           	opt stack 15
  1867                           
  1868                           ;PWM_Driver.c: 303: PWM_Red.duty_cnt = 0;
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;incstack = 0
  1872  00213E  0E00               	movlw	0
  1873  002140  0100               	movlb	0	; () banked
  1874  002142  6FCC               	movwf	_PWM_Red& (0+255),b
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;PWM_Driver.c: 304: PWM_Red.duty_val = 0xFF;
  1878  002144  0100               	movlb	0	; () banked
  1879  002146  69CD               	setf	(_PWM_Red+1)& (0+255),b
  1880                           
  1881                           ;PWM_Driver.c: 306: PWM_Green.duty_cnt = 0;
  1882  002148  0E00               	movlw	0
  1883  00214A  0100               	movlb	0	; () banked
  1884  00214C  6FCA               	movwf	_PWM_Green& (0+255),b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;PWM_Driver.c: 307: PWM_Green.duty_val = 0xFF;
  1888  00214E  0100               	movlb	0	; () banked
  1889  002150  69CB               	setf	(_PWM_Green+1)& (0+255),b
  1890                           
  1891                           ;PWM_Driver.c: 309: PWM_Blue.duty_cnt = 0;
  1892  002152  0E00               	movlw	0
  1893  002154  0100               	movlb	0	; () banked
  1894  002156  6FC8               	movwf	_PWM_Blue& (0+255),b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;PWM_Driver.c: 310: PWM_Blue.duty_val = 0xFF;
  1898  002158  0100               	movlb	0	; () banked
  1899  00215A  69C9               	setf	(_PWM_Blue+1)& (0+255),b
  1900                           
  1901                           ;PWM_Driver.c: 312: scale = 7;
  1902  00215C  0E07               	movlw	7
  1903  00215E  6E2D               	movwf	_scale,c
  1904                           
  1905                           ;PWM_Driver.c: 313: state = Color;
  1906  002160  0E00               	movlw	0
  1907  002162  6E2E               	movwf	_state,c
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;PWM_Driver.c: 314: saved_state = state;
  1911  002164  C02E  F02C         	movff	_state,_saved_state
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;PWM_Driver.c: 317: D_TIMER0_Init(0);
  1915  002168  0E00               	movlw	0
  1916  00216A  ECA3  F00C         	call	_D_TIMER0_Init
  1917                           
  1918                           ;PWM_Driver.c: 318: D_TIMER0_Enable(0);
  1919  00216E  0E00               	movlw	0
  1920  002170  EC4D  F011         	call	_D_TIMER0_Enable
  1921                           
  1922                           ;PWM_Driver.c: 321: TRISBbits.TRISB0 = 0;
  1923  002174  9093               	bcf	3987,0,c	;volatile
  1924                           
  1925                           ;PWM_Driver.c: 322: TRISBbits.TRISB1 = 0;
  1926  002176  9293               	bcf	3987,1,c	;volatile
  1927                           
  1928                           ;PWM_Driver.c: 323: TRISBbits.TRISB2 = 0;
  1929  002178  9493               	bcf	3987,2,c	;volatile
  1930  00217A  0012               	return		;funcret
  1931  00217C                     __end_of_D_PWM_Init:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           intcon	equ	0xFF2
  1938                           postinc0	equ	0xFEE
  1939                           plusw0	equ	0xFEB
  1940                           fsr0h	equ	0xFEA
  1941                           fsr0l	equ	0xFE9
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _D_TIMER0_Init *****************
  1951 ;; Defined at:
  1952 ;;		line 30 in file "Drivers/TIMER0_Driver.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  prescale        1    wreg     unsigned char 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  prescale        1   40[BANK0 ] unsigned char 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0
  1967 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1969 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        1 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:   13
  1973 ;; This function calls:
  1974 ;;		_D_TIMER0_Enable
  1975 ;; This function is called by:
  1976 ;;		_D_PWM_Init
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text6
  1981  001946                     __ptext6:
  1982                           	opt stack 0
  1983  001946                     _D_TIMER0_Init:
  1984                           	opt stack 15
  1985                           
  1986                           ;incstack = 0
  1987                           ;D_TIMER0_Init@prescale stored from wreg
  1988  001946  0100               	movlb	0	; () banked
  1989  001948  6F88               	movwf	D_TIMER0_Init@prescale& (0+255),b
  1990                           
  1991                           ;TIMER0_Driver.c: 31: D_TIMER0_Enable(0);
  1992  00194A  0E00               	movlw	0
  1993  00194C  EC4D  F011         	call	_D_TIMER0_Enable
  1994                           
  1995                           ;TIMER0_Driver.c: 34: T0CONbits.T08BIT = 1;
  1996  001950  8CD5               	bsf	4053,6,c	;volatile
  1997                           
  1998                           ;TIMER0_Driver.c: 35: T0CONbits.T0CS = 0;
  1999  001952  9AD5               	bcf	4053,5,c	;volatile
  2000                           
  2001                           ;TIMER0_Driver.c: 36: T0CONbits.PSA = 1;
  2002  001954  86D5               	bsf	4053,3,c	;volatile
  2003                           
  2004                           ;TIMER0_Driver.c: 37: switch(prescale) {
  2005  001956  D021               	goto	l2358
  2006  001958                     l39:
  2007                           
  2008                           ; BSR set to: 0
  2009  001958  90D5               	bcf	4053,0,c	;volatile
  2010  00195A  92D5               	bcf	4053,1,c	;volatile
  2011  00195C  94D5               	bcf	4053,2,c	;volatile
  2012  00195E  D038               	goto	l2360
  2013  001960                     l2344:
  2014                           
  2015                           ; BSR set to: 0
  2016  001960  50D5               	movf	4053,w,c	;volatile
  2017  001962  0BF8               	andlw	-8
  2018  001964  0901               	iorlw	1
  2019  001966  D013               	goto	L5
  2020  001968                     l2346:
  2021                           
  2022                           ; BSR set to: 0
  2023  001968  50D5               	movf	4053,w,c	;volatile
  2024  00196A  0BF8               	andlw	-8
  2025  00196C  0902               	iorlw	2
  2026  00196E  D00F               	goto	L5
  2027  001970                     l2348:
  2028                           
  2029                           ; BSR set to: 0
  2030  001970  50D5               	movf	4053,w,c	;volatile
  2031  001972  0BF8               	andlw	-8
  2032  001974  0903               	iorlw	3
  2033  001976  D00B               	goto	L5
  2034  001978                     l2350:
  2035                           
  2036                           ; BSR set to: 0
  2037  001978  50D5               	movf	4053,w,c	;volatile
  2038  00197A  0BF8               	andlw	-8
  2039  00197C  0904               	iorlw	4
  2040  00197E  D007               	goto	L5
  2041  001980                     l2352:
  2042                           
  2043                           ; BSR set to: 0
  2044  001980  50D5               	movf	4053,w,c	;volatile
  2045  001982  0BF8               	andlw	-8
  2046  001984  0905               	iorlw	5
  2047  001986  D003               	goto	L5
  2048  001988                     l2354:
  2049                           
  2050                           ; BSR set to: 0
  2051  001988  50D5               	movf	4053,w,c	;volatile
  2052  00198A  0BF8               	andlw	-8
  2053  00198C  0906               	iorlw	6
  2054  00198E                     L5:
  2055  00198E  6ED5               	movwf	4053,c	;volatile
  2056  001990  D01F               	goto	l2360
  2057  001992                     l46:
  2058                           
  2059                           ; BSR set to: 0
  2060  001992  80D5               	bsf	4053,0,c	;volatile
  2061  001994  82D5               	bsf	4053,1,c	;volatile
  2062  001996  84D5               	bsf	4053,2,c	;volatile
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;TIMER0_Driver.c: 48: }
  2066  001998  D01B               	goto	l2360
  2067  00199A                     l2358:
  2068  00199A  0100               	movlb	0	; () banked
  2069  00199C  5188               	movf	D_TIMER0_Init@prescale& (0+255),w,b
  2070                           
  2071                           ; Switch size 1, requested type "space"
  2072                           ; Number of cases is 8, Range of values is 0 to 128
  2073                           ; switch strategies available:
  2074                           ; Name         Instructions Cycles
  2075                           ; simple_byte           25    13 (average)
  2076                           ;	Chosen strategy is simple_byte
  2077  00199E  0A00               	xorlw	0	; case 0
  2078  0019A0  B4D8               	btfsc	status,2,c
  2079  0019A2  D7F7               	goto	l46
  2080  0019A4  0A02               	xorlw	2	; case 2
  2081  0019A6  B4D8               	btfsc	status,2,c
  2082  0019A8  D7D7               	goto	l39
  2083  0019AA  0A06               	xorlw	6	; case 4
  2084  0019AC  B4D8               	btfsc	status,2,c
  2085  0019AE  D7D8               	goto	l2344
  2086  0019B0  0A0C               	xorlw	12	; case 8
  2087  0019B2  B4D8               	btfsc	status,2,c
  2088  0019B4  D7D9               	goto	l2346
  2089  0019B6  0A18               	xorlw	24	; case 16
  2090  0019B8  B4D8               	btfsc	status,2,c
  2091  0019BA  D7DA               	goto	l2348
  2092  0019BC  0A30               	xorlw	48	; case 32
  2093  0019BE  B4D8               	btfsc	status,2,c
  2094  0019C0  D7DB               	goto	l2350
  2095  0019C2  0A60               	xorlw	96	; case 64
  2096  0019C4  B4D8               	btfsc	status,2,c
  2097  0019C6  D7DC               	goto	l2352
  2098  0019C8  0AC0               	xorlw	192	; case 128
  2099  0019CA  B4D8               	btfsc	status,2,c
  2100  0019CC  D7DD               	goto	l2354
  2101  0019CE  D7C4               	goto	l39
  2102  0019D0                     l2360:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;TIMER0_Driver.c: 49: TMR0L = 0;
  2106  0019D0  0E00               	movlw	0
  2107  0019D2  6ED6               	movwf	4054,c	;volatile
  2108                           
  2109                           ;TIMER0_Driver.c: 50: TMR0H = 0;
  2110  0019D4  0E00               	movlw	0
  2111  0019D6  6ED7               	movwf	4055,c	;volatile
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;TIMER0_Driver.c: 53: RCONbits.IPEN = 1;
  2115  0019D8  8ED0               	bsf	4048,7,c	;volatile
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;TIMER0_Driver.c: 54: INTCONbits.GIEH = 1;
  2119  0019DA  8EF2               	bsf	intcon,7,c	;volatile
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;TIMER0_Driver.c: 55: INTCONbits.GIEL = 1;
  2123  0019DC  8CF2               	bsf	intcon,6,c	;volatile
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;TIMER0_Driver.c: 56: INTCONbits.TMR0IE = 0;
  2127  0019DE  9AF2               	bcf	intcon,5,c	;volatile
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;TIMER0_Driver.c: 57: INTCONbits.TMR0IF = 0;
  2131  0019E0  94F2               	bcf	intcon,2,c	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;TIMER0_Driver.c: 58: INTCON2bits.TMR0IP = 1;
  2135  0019E2  84F1               	bsf	intcon2,2,c	;volatile
  2136                           
  2137                           ; BSR set to: 0
  2138  0019E4  0012               	return		;funcret
  2139  0019E6                     __end_of_D_TIMER0_Init:
  2140                           	opt stack 0
  2141                           tblptru	equ	0xFF8
  2142                           tblptrh	equ	0xFF7
  2143                           tblptrl	equ	0xFF6
  2144                           tablat	equ	0xFF5
  2145                           intcon	equ	0xFF2
  2146                           intcon2	equ	0xFF1
  2147                           postinc0	equ	0xFEE
  2148                           plusw0	equ	0xFEB
  2149                           fsr0h	equ	0xFEA
  2150                           fsr0l	equ	0xFE9
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           plusw2	equ	0xFDB
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _D_PORT_Init *****************
  2160 ;; Defined at:
  2161 ;;		line 31 in file "Drivers/PORT_Driver.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2178 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:   12
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_initialize
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text7
  2190  0022FE                     __ptext7:
  2191                           	opt stack 0
  2192  0022FE                     _D_PORT_Init:
  2193                           	opt stack 17
  2194                           
  2195                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;incstack = 0
  2199  0022FE  0E00               	movlw	0
  2200  002300  6E92               	movwf	3986,c	;volatile
  2201  002302  0E00               	movlw	0
  2202  002304  6E80               	movwf	3968,c	;volatile
  2203                           
  2204                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  2205  002306  0E00               	movlw	0
  2206  002308  6E93               	movwf	3987,c	;volatile
  2207  00230A  0E00               	movlw	0
  2208  00230C  6E81               	movwf	3969,c	;volatile
  2209                           
  2210                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  2211  00230E  0E00               	movlw	0
  2212  002310  6E94               	movwf	3988,c	;volatile
  2213  002312  0E00               	movlw	0
  2214  002314  6E82               	movwf	3970,c	;volatile
  2215                           
  2216                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  2217  002316  0E0F               	movlw	15
  2218  002318  6EC1               	movwf	4033,c	;volatile
  2219  00231A  0012               	return		;funcret
  2220  00231C                     __end_of_D_PORT_Init:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           intcon2	equ	0xFF1
  2228                           postinc0	equ	0xFEE
  2229                           plusw0	equ	0xFEB
  2230                           fsr0h	equ	0xFEA
  2231                           fsr0l	equ	0xFE9
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           plusw2	equ	0xFDB
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _handle_message *****************
  2241 ;; Defined at:
  2242 ;;		line 92 in file "main.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  msg             6   72[BANK0 ] struct .
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2256 ;;      Params:         0       6       0       0       0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2258 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2259 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2260 ;;Total ram usage:        7 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:   17
  2263 ;; This function calls:
  2264 ;;		_D_PWM_Enable
  2265 ;;		_D_PWM_Fade
  2266 ;;		_D_PWM_Flash
  2267 ;;		_D_PWM_GetBlue
  2268 ;;		_D_PWM_GetGreen
  2269 ;;		_D_PWM_GetRed
  2270 ;;		_D_PWM_GetScale
  2271 ;;		_D_PWM_GetState
  2272 ;;		_D_PWM_ScaleDown
  2273 ;;		_D_PWM_ScaleUp
  2274 ;;		_D_PWM_SetRGB
  2275 ;;		_D_PWM_Smooth
  2276 ;;		_D_PWM_Strobe
  2277 ;;		_D_UART_WriteInt
  2278 ;;		_strToInt
  2279 ;;		_strcmp
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text8
  2286  000870                     __ptext8:
  2287                           	opt stack 0
  2288  000870                     _handle_message:
  2289                           	opt stack 13
  2290                           
  2291                           ;main.c: 93: if (strcmp(msg.command, "R") == 0) {
  2292                           
  2293                           ;incstack = 0
  2294  000870  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2295  000874  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2296  000878  0E62               	movlw	low STR_15
  2297  00087A  0100               	movlb	0	; () banked
  2298  00087C  6F89               	movwf	strcmp@s2& (0+255),b
  2299  00087E  0E08               	movlw	high STR_15
  2300  000880  0100               	movlb	0	; () banked
  2301  000882  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2302  000884  EC25  F010         	call	_strcmp	;wreg free
  2303  000888  0100               	movlb	0	; () banked
  2304  00088A  5187               	movf	?_strcmp& (0+255),w,b
  2305  00088C  0100               	movlb	0	; () banked
  2306  00088E  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2307  000890  A4D8               	btfss	status,2,c
  2308  000892  D011               	goto	l3122
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;main.c: 94: r = strToInt(msg.message);
  2312  000894  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2313  000898  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2314  00089C  EC9A  F00F         	call	_strToInt	;wreg free
  2315  0008A0  0100               	movlb	0	; () banked
  2316  0008A2  6FD1               	movwf	_r& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;main.c: 95: D_PWM_SetRGB(r, g, b);
  2320  0008A4  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2321  0008A8  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2322  0008AC  0100               	movlb	0	; () banked
  2323  0008AE  51D1               	movf	_r& (0+255),w,b
  2324  0008B0  EC3C  F011         	call	_D_PWM_SetRGB
  2325                           
  2326                           ;main.c: 96: return;
  2327  0008B4  0012               	return	
  2328  0008B6                     l3122:
  2329                           
  2330                           ;main.c: 97: }
  2331                           ;main.c: 99: if (strcmp(msg.command, "G") == 0) {
  2332  0008B6  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2333  0008BA  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2334  0008BE  0E5C               	movlw	low STR_16
  2335  0008C0  0100               	movlb	0	; () banked
  2336  0008C2  6F89               	movwf	strcmp@s2& (0+255),b
  2337  0008C4  0E08               	movlw	high STR_16
  2338  0008C6  0100               	movlb	0	; () banked
  2339  0008C8  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2340  0008CA  EC25  F010         	call	_strcmp	;wreg free
  2341  0008CE  0100               	movlb	0	; () banked
  2342  0008D0  5187               	movf	?_strcmp& (0+255),w,b
  2343  0008D2  0100               	movlb	0	; () banked
  2344  0008D4  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2345  0008D6  A4D8               	btfss	status,2,c
  2346  0008D8  D011               	goto	l3130
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 100: g = strToInt(msg.message);
  2350  0008DA  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2351  0008DE  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2352  0008E2  EC9A  F00F         	call	_strToInt	;wreg free
  2353  0008E6  0100               	movlb	0	; () banked
  2354  0008E8  6FD0               	movwf	_g& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;main.c: 101: D_PWM_SetRGB(r, g, b);
  2358  0008EA  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2359  0008EE  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2360  0008F2  0100               	movlb	0	; () banked
  2361  0008F4  51D1               	movf	_r& (0+255),w,b
  2362  0008F6  EC3C  F011         	call	_D_PWM_SetRGB
  2363                           
  2364                           ;main.c: 102: return;
  2365  0008FA  0012               	return	
  2366  0008FC                     l3130:
  2367                           
  2368                           ;main.c: 103: }
  2369                           ;main.c: 105: if (strcmp(msg.command, "B") == 0) {
  2370  0008FC  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2371  000900  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2372  000904  0E33               	movlw	low (STR_27+2)
  2373  000906  0100               	movlb	0	; () banked
  2374  000908  6F89               	movwf	strcmp@s2& (0+255),b
  2375  00090A  0E08               	movlw	high (STR_27+2)
  2376  00090C  0100               	movlb	0	; () banked
  2377  00090E  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2378  000910  EC25  F010         	call	_strcmp	;wreg free
  2379  000914  0100               	movlb	0	; () banked
  2380  000916  5187               	movf	?_strcmp& (0+255),w,b
  2381  000918  0100               	movlb	0	; () banked
  2382  00091A  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2383  00091C  A4D8               	btfss	status,2,c
  2384  00091E  D011               	goto	l3138
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 106: b = strToInt(msg.message);
  2388  000920  C0AC  F087         	movff	handle_message@msg+4,strToInt@str
  2389  000924  C0AD  F088         	movff	handle_message@msg+5,strToInt@str+1
  2390  000928  EC9A  F00F         	call	_strToInt	;wreg free
  2391  00092C  0100               	movlb	0	; () banked
  2392  00092E  6FCF               	movwf	_b& (0+255),b
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;main.c: 107: D_PWM_SetRGB(r, g, b);
  2396  000930  C0D0  F08C         	movff	_g,D_PWM_SetRGB@g
  2397  000934  C0CF  F08D         	movff	_b,D_PWM_SetRGB@b
  2398  000938  0100               	movlb	0	; () banked
  2399  00093A  51D1               	movf	_r& (0+255),w,b
  2400  00093C  EC3C  F011         	call	_D_PWM_SetRGB
  2401                           
  2402                           ;main.c: 108: return;
  2403  000940  0012               	return	
  2404  000942                     l3138:
  2405                           
  2406                           ;main.c: 109: }
  2407                           ;main.c: 111: if (strcmp(msg.command, "S") == 0) {
  2408  000942  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2409  000946  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2410  00094A  0E64               	movlw	low STR_18
  2411  00094C  0100               	movlb	0	; () banked
  2412  00094E  6F89               	movwf	strcmp@s2& (0+255),b
  2413  000950  0E08               	movlw	high STR_18
  2414  000952  0100               	movlb	0	; () banked
  2415  000954  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2416  000956  EC25  F010         	call	_strcmp	;wreg free
  2417  00095A  0100               	movlb	0	; () banked
  2418  00095C  5187               	movf	?_strcmp& (0+255),w,b
  2419  00095E  0100               	movlb	0	; () banked
  2420  000960  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2421  000962  A4D8               	btfss	status,2,c
  2422  000964  D028               	goto	l3150
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 112: if (strcmp(msg.message, "D") == 0) {
  2426  000966  C0AC  F087         	movff	handle_message@msg+4,strcmp@s1
  2427  00096A  C0AD  F088         	movff	handle_message@msg+5,strcmp@s1+1
  2428  00096E  0E5A               	movlw	low STR_19
  2429  000970  0100               	movlb	0	; () banked
  2430  000972  6F89               	movwf	strcmp@s2& (0+255),b
  2431  000974  0E08               	movlw	high STR_19
  2432  000976  0100               	movlb	0	; () banked
  2433  000978  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2434  00097A  EC25  F010         	call	_strcmp	;wreg free
  2435  00097E  0100               	movlb	0	; () banked
  2436  000980  5187               	movf	?_strcmp& (0+255),w,b
  2437  000982  0100               	movlb	0	; () banked
  2438  000984  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2439  000986  B4D8               	btfsc	status,2,c
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;main.c: 113: D_PWM_ScaleDown();
  2443  000988  ECCE  F011         	call	_D_PWM_ScaleDown	;wreg free
  2444                           
  2445                           ;main.c: 114: }
  2446                           ;main.c: 115: if (strcmp(msg.message, "U") == 0) {
  2447  00098C  C0AC  F087         	movff	handle_message@msg+4,strcmp@s1
  2448  000990  C0AD  F088         	movff	handle_message@msg+5,strcmp@s1+1
  2449  000994  0E66               	movlw	low STR_20
  2450  000996  0100               	movlb	0	; () banked
  2451  000998  6F89               	movwf	strcmp@s2& (0+255),b
  2452  00099A  0E08               	movlw	high STR_20
  2453  00099C  0100               	movlb	0	; () banked
  2454  00099E  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2455  0009A0  EC25  F010         	call	_strcmp	;wreg free
  2456  0009A4  0100               	movlb	0	; () banked
  2457  0009A6  5187               	movf	?_strcmp& (0+255),w,b
  2458  0009A8  0100               	movlb	0	; () banked
  2459  0009AA  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2460  0009AC  A4D8               	btfss	status,2,c
  2461  0009AE  0012               	return	
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;main.c: 116: D_PWM_ScaleUp();
  2465  0009B0  ECC9  F011         	call	_D_PWM_ScaleUp	;wreg free
  2466                           
  2467                           ;main.c: 117: }
  2468                           ;main.c: 118: return;
  2469  0009B4  0012               	return	
  2470  0009B6                     l3150:
  2471                           
  2472                           ;main.c: 119: }
  2473                           ;main.c: 121: if (strcmp(msg.command, "FL") == 0) {
  2474  0009B6  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2475  0009BA  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2476  0009BE  0E48               	movlw	low STR_21
  2477  0009C0  0100               	movlb	0	; () banked
  2478  0009C2  6F89               	movwf	strcmp@s2& (0+255),b
  2479  0009C4  0E08               	movlw	high STR_21
  2480  0009C6  0100               	movlb	0	; () banked
  2481  0009C8  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2482  0009CA  EC25  F010         	call	_strcmp	;wreg free
  2483  0009CE  0100               	movlb	0	; () banked
  2484  0009D0  5187               	movf	?_strcmp& (0+255),w,b
  2485  0009D2  0100               	movlb	0	; () banked
  2486  0009D4  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2487  0009D6  A4D8               	btfss	status,2,c
  2488  0009D8  D003               	goto	l3156
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;main.c: 122: D_PWM_Flash();
  2492  0009DA  ECB6  F011         	call	_D_PWM_Flash	;wreg free
  2493                           
  2494                           ;main.c: 123: return;
  2495  0009DE  0012               	return	
  2496  0009E0                     l3156:
  2497                           
  2498                           ;main.c: 124: }
  2499                           ;main.c: 126: if (strcmp(msg.command, "ST") == 0) {
  2500  0009E0  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2501  0009E4  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2502  0009E8  0E51               	movlw	low STR_22
  2503  0009EA  0100               	movlb	0	; () banked
  2504  0009EC  6F89               	movwf	strcmp@s2& (0+255),b
  2505  0009EE  0E08               	movlw	high STR_22
  2506  0009F0  0100               	movlb	0	; () banked
  2507  0009F2  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2508  0009F4  EC25  F010         	call	_strcmp	;wreg free
  2509  0009F8  0100               	movlb	0	; () banked
  2510  0009FA  5187               	movf	?_strcmp& (0+255),w,b
  2511  0009FC  0100               	movlb	0	; () banked
  2512  0009FE  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2513  000A00  A4D8               	btfss	status,2,c
  2514  000A02  D003               	goto	l3162
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;main.c: 127: D_PWM_Strobe();
  2518  000A04  ECA8  F011         	call	_D_PWM_Strobe	;wreg free
  2519                           
  2520                           ;main.c: 128: return;
  2521  000A08  0012               	return	
  2522  000A0A                     l3162:
  2523                           
  2524                           ;main.c: 129: }
  2525                           ;main.c: 131: if (strcmp(msg.command, "FA") == 0) {
  2526  000A0A  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2527  000A0E  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2528  000A12  0E45               	movlw	low STR_23
  2529  000A14  0100               	movlb	0	; () banked
  2530  000A16  6F89               	movwf	strcmp@s2& (0+255),b
  2531  000A18  0E08               	movlw	high STR_23
  2532  000A1A  0100               	movlb	0	; () banked
  2533  000A1C  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2534  000A1E  EC25  F010         	call	_strcmp	;wreg free
  2535  000A22  0100               	movlb	0	; () banked
  2536  000A24  5187               	movf	?_strcmp& (0+255),w,b
  2537  000A26  0100               	movlb	0	; () banked
  2538  000A28  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2539  000A2A  A4D8               	btfss	status,2,c
  2540  000A2C  D003               	goto	l3168
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;main.c: 132: D_PWM_Fade();
  2544  000A2E  ECBD  F011         	call	_D_PWM_Fade	;wreg free
  2545                           
  2546                           ;main.c: 133: return;
  2547  000A32  0012               	return	
  2548  000A34                     l3168:
  2549                           
  2550                           ;main.c: 134: }
  2551                           ;main.c: 136: if (strcmp(msg.command, "SM") == 0) {
  2552  000A34  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2553  000A38  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2554  000A3C  0E4B               	movlw	low STR_24
  2555  000A3E  0100               	movlb	0	; () banked
  2556  000A40  6F89               	movwf	strcmp@s2& (0+255),b
  2557  000A42  0E08               	movlw	high STR_24
  2558  000A44  0100               	movlb	0	; () banked
  2559  000A46  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2560  000A48  EC25  F010         	call	_strcmp	;wreg free
  2561  000A4C  0100               	movlb	0	; () banked
  2562  000A4E  5187               	movf	?_strcmp& (0+255),w,b
  2563  000A50  0100               	movlb	0	; () banked
  2564  000A52  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2565  000A54  A4D8               	btfss	status,2,c
  2566  000A56  D003               	goto	l3174
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 137: D_PWM_Smooth();
  2570  000A58  ECAF  F011         	call	_D_PWM_Smooth	;wreg free
  2571                           
  2572                           ;main.c: 138: return;
  2573  000A5C  0012               	return	
  2574  000A5E                     l3174:
  2575                           
  2576                           ;main.c: 139: }
  2577                           ;main.c: 141: if (strcmp(msg.command, "OFF") == 0) {
  2578  000A5E  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2579  000A62  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2580  000A66  0E35               	movlw	low STR_25
  2581  000A68  0100               	movlb	0	; () banked
  2582  000A6A  6F89               	movwf	strcmp@s2& (0+255),b
  2583  000A6C  0E08               	movlw	high STR_25
  2584  000A6E  0100               	movlb	0	; () banked
  2585  000A70  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2586  000A72  EC25  F010         	call	_strcmp	;wreg free
  2587  000A76  0100               	movlb	0	; () banked
  2588  000A78  5187               	movf	?_strcmp& (0+255),w,b
  2589  000A7A  0100               	movlb	0	; () banked
  2590  000A7C  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2591  000A7E  A4D8               	btfss	status,2,c
  2592  000A80  D004               	goto	l3180
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 142: D_PWM_Enable(0);
  2596  000A82  0E00               	movlw	0
  2597  000A84  ECD6  F010         	call	_D_PWM_Enable
  2598                           
  2599                           ;main.c: 143: return;
  2600  000A88  0012               	return	
  2601  000A8A                     l3180:
  2602                           
  2603                           ;main.c: 144: }
  2604                           ;main.c: 146: if (strcmp(msg.command, "ON") == 0) {
  2605  000A8A  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2606  000A8E  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2607  000A92  0E4E               	movlw	low STR_26
  2608  000A94  0100               	movlb	0	; () banked
  2609  000A96  6F89               	movwf	strcmp@s2& (0+255),b
  2610  000A98  0E08               	movlw	high STR_26
  2611  000A9A  0100               	movlb	0	; () banked
  2612  000A9C  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2613  000A9E  EC25  F010         	call	_strcmp	;wreg free
  2614  000AA2  0100               	movlb	0	; () banked
  2615  000AA4  5187               	movf	?_strcmp& (0+255),w,b
  2616  000AA6  0100               	movlb	0	; () banked
  2617  000AA8  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2618  000AAA  A4D8               	btfss	status,2,c
  2619  000AAC  D004               	goto	l3186
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 147: D_PWM_Enable(1);
  2623  000AAE  0E01               	movlw	1
  2624  000AB0  ECD6  F010         	call	_D_PWM_Enable
  2625                           
  2626                           ;main.c: 148: return;
  2627  000AB4  0012               	return	
  2628  000AB6                     l3186:
  2629                           
  2630                           ;main.c: 149: }
  2631                           ;main.c: 151: if(strcmp(msg.command, "RGB") == 0) {
  2632  000AB6  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2633  000ABA  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2634  000ABE  0E31               	movlw	low STR_27
  2635  000AC0  0100               	movlb	0	; () banked
  2636  000AC2  6F89               	movwf	strcmp@s2& (0+255),b
  2637  000AC4  0E08               	movlw	high STR_27
  2638  000AC6  0100               	movlb	0	; () banked
  2639  000AC8  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2640  000ACA  EC25  F010         	call	_strcmp	;wreg free
  2641  000ACE  0100               	movlb	0	; () banked
  2642  000AD0  5187               	movf	?_strcmp& (0+255),w,b
  2643  000AD2  0100               	movlb	0	; () banked
  2644  000AD4  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2645  000AD6  A4D8               	btfss	status,2,c
  2646  000AD8  D03D               	goto	l3200
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 152: D_UART_WriteInt("R", D_PWM_GetRed());
  2650  000ADA  0E62               	movlw	low STR_15
  2651  000ADC  0100               	movlb	0	; () banked
  2652  000ADE  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2653  000AE0  0E08               	movlw	high STR_15
  2654  000AE2  0100               	movlb	0	; () banked
  2655  000AE4  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2656  000AE6  ECD8  F011         	call	_D_PWM_GetRed	;wreg free
  2657  000AEA  0100               	movlb	0	; () banked
  2658  000AEC  6FAE               	movwf	??_handle_message& (0+255),b
  2659  000AEE  0100               	movlb	0	; () banked
  2660  000AF0  51AE               	movf	??_handle_message& (0+255),w,b
  2661  000AF2  0100               	movlb	0	; () banked
  2662  000AF4  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2663  000AF6  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2664  000AF8  EC4F  F00A         	call	_D_UART_WriteInt	;wreg free
  2665                           
  2666                           ;main.c: 153: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2667  000AFC  0E28               	movlw	40
  2668  000AFE                     u3327:
  2669  000AFE  2EE8               	decfsz	wreg,f,c
  2670  000B00  D7FE               	bra	u3327
  2671                           
  2672                           ;main.c: 154: D_UART_WriteInt("G", D_PWM_GetGreen());
  2673  000B02  0E5C               	movlw	low STR_16
  2674  000B04  0100               	movlb	0	; () banked
  2675  000B06  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2676  000B08  0E08               	movlw	high STR_16
  2677  000B0A  0100               	movlb	0	; () banked
  2678  000B0C  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2679  000B0E  ECDB  F011         	call	_D_PWM_GetGreen	;wreg free
  2680  000B12  0100               	movlb	0	; () banked
  2681  000B14  6FAE               	movwf	??_handle_message& (0+255),b
  2682  000B16  0100               	movlb	0	; () banked
  2683  000B18  51AE               	movf	??_handle_message& (0+255),w,b
  2684  000B1A  0100               	movlb	0	; () banked
  2685  000B1C  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2686  000B1E  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2687  000B20  EC4F  F00A         	call	_D_UART_WriteInt	;wreg free
  2688                           
  2689                           ;main.c: 155: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2690  000B24  0E28               	movlw	40
  2691  000B26                     u3337:
  2692  000B26  2EE8               	decfsz	wreg,f,c
  2693  000B28  D7FE               	bra	u3337
  2694                           
  2695                           ;main.c: 156: D_UART_WriteInt("B", D_PWM_GetBlue());
  2696  000B2A  0E33               	movlw	low (STR_27+2)
  2697  000B2C  0100               	movlb	0	; () banked
  2698  000B2E  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2699  000B30  0E08               	movlw	high (STR_27+2)
  2700  000B32  0100               	movlb	0	; () banked
  2701  000B34  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2702  000B36  ECDE  F011         	call	_D_PWM_GetBlue	;wreg free
  2703  000B3A  0100               	movlb	0	; () banked
  2704  000B3C  6FAE               	movwf	??_handle_message& (0+255),b
  2705  000B3E  0100               	movlb	0	; () banked
  2706  000B40  51AE               	movf	??_handle_message& (0+255),w,b
  2707  000B42  0100               	movlb	0	; () banked
  2708  000B44  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2709  000B46  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2710  000B48  EC4F  F00A         	call	_D_UART_WriteInt	;wreg free
  2711                           
  2712                           ;main.c: 157: _delay((unsigned long)((10)*(48000000/4000000.0)));
  2713  000B4C  0E28               	movlw	40
  2714  000B4E                     u3347:
  2715  000B4E  2EE8               	decfsz	wreg,f,c
  2716  000B50  D7FE               	bra	u3347
  2717                           
  2718                           ;main.c: 158: return;
  2719  000B52  0012               	return	
  2720  000B54                     l3200:
  2721                           
  2722                           ;main.c: 159: }
  2723                           ;main.c: 161: if(strcmp(msg.command, "SCA") == 0) {
  2724  000B54  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2725  000B58  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2726  000B5C  0E29               	movlw	low STR_31
  2727  000B5E  0100               	movlb	0	; () banked
  2728  000B60  6F89               	movwf	strcmp@s2& (0+255),b
  2729  000B62  0E08               	movlw	high STR_31
  2730  000B64  0100               	movlb	0	; () banked
  2731  000B66  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2732  000B68  EC25  F010         	call	_strcmp	;wreg free
  2733  000B6C  0100               	movlb	0	; () banked
  2734  000B6E  5187               	movf	?_strcmp& (0+255),w,b
  2735  000B70  0100               	movlb	0	; () banked
  2736  000B72  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2737  000B74  A4D8               	btfss	status,2,c
  2738  000B76  D012               	goto	l3206
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 162: D_UART_WriteInt("SCA", D_PWM_GetScale());
  2742  000B78  0E29               	movlw	low STR_31
  2743  000B7A  0100               	movlb	0	; () banked
  2744  000B7C  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2745  000B7E  0E08               	movlw	high STR_31
  2746  000B80  0100               	movlb	0	; () banked
  2747  000B82  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2748  000B84  ECE6  F011         	call	_D_PWM_GetScale	;wreg free
  2749  000B88  0100               	movlb	0	; () banked
  2750  000B8A  6FAE               	movwf	??_handle_message& (0+255),b
  2751  000B8C  0100               	movlb	0	; () banked
  2752  000B8E  51AE               	movf	??_handle_message& (0+255),w,b
  2753  000B90  0100               	movlb	0	; () banked
  2754  000B92  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2755  000B94  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2756  000B96  EC4F  F00A         	call	_D_UART_WriteInt	;wreg free
  2757                           
  2758                           ;main.c: 163: return;
  2759  000B9A  0012               	return	
  2760  000B9C                     l3206:
  2761                           
  2762                           ;main.c: 164: }
  2763                           ;main.c: 166: if(strcmp(msg.command, "STA") == 0) {
  2764  000B9C  C0AA  F087         	movff	handle_message@msg+2,strcmp@s1
  2765  000BA0  C0AB  F088         	movff	handle_message@msg+3,strcmp@s1+1
  2766  000BA4  0E2D               	movlw	low STR_33
  2767  000BA6  0100               	movlb	0	; () banked
  2768  000BA8  6F89               	movwf	strcmp@s2& (0+255),b
  2769  000BAA  0E08               	movlw	high STR_33
  2770  000BAC  0100               	movlb	0	; () banked
  2771  000BAE  6F8A               	movwf	(strcmp@s2+1)& (0+255),b
  2772  000BB0  EC25  F010         	call	_strcmp	;wreg free
  2773  000BB4  0100               	movlb	0	; () banked
  2774  000BB6  5187               	movf	?_strcmp& (0+255),w,b
  2775  000BB8  0100               	movlb	0	; () banked
  2776  000BBA  1188               	iorwf	(?_strcmp+1)& (0+255),w,b
  2777  000BBC  A4D8               	btfss	status,2,c
  2778  000BBE  0012               	return	
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 167: D_UART_WriteInt("STA", D_PWM_GetState());
  2782  000BC0  0E2D               	movlw	low STR_33
  2783  000BC2  0100               	movlb	0	; () banked
  2784  000BC4  6FA3               	movwf	D_UART_WriteInt@command& (0+255),b
  2785  000BC6  0E08               	movlw	high STR_33
  2786  000BC8  0100               	movlb	0	; () banked
  2787  000BCA  6FA4               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  2788  000BCC  ECE4  F011         	call	_D_PWM_GetState	;wreg free
  2789  000BD0  0100               	movlb	0	; () banked
  2790  000BD2  6FAE               	movwf	??_handle_message& (0+255),b
  2791  000BD4  0100               	movlb	0	; () banked
  2792  000BD6  51AE               	movf	??_handle_message& (0+255),w,b
  2793  000BD8  0100               	movlb	0	; () banked
  2794  000BDA  6FA5               	movwf	D_UART_WriteInt@data& (0+255),b
  2795  000BDC  6BA6               	clrf	(D_UART_WriteInt@data+1)& (0+255),b
  2796  000BDE  EC4F  F00A         	call	_D_UART_WriteInt	;wreg free
  2797                           
  2798                           ;main.c: 168: return;
  2799  000BE2  0012               	return	
  2800  000BE4                     __end_of_handle_message:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           intcon	equ	0xFF2
  2807                           intcon2	equ	0xFF1
  2808                           postinc0	equ	0xFEE
  2809                           plusw0	equ	0xFEB
  2810                           fsr0h	equ	0xFEA
  2811                           fsr0l	equ	0xFE9
  2812                           wreg	equ	0xFE8
  2813                           postdec1	equ	0xFE5
  2814                           fsr1l	equ	0xFE1
  2815                           plusw2	equ	0xFDB
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _strcmp *****************
  2821 ;; Defined at:
  2822 ;;		line 33 in file "/opt/microchip/xc8/v1.40/sources/common/strcmp.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  s1              2   39[BANK0 ] PTR const unsigned char 
  2825 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  2826 ;;  s2              2   41[BANK0 ] PTR const unsigned char 
  2827 ;;		 -> STR_33(4), STR_31(4), STR_27(4), STR_26(3), 
  2828 ;;		 -> STR_25(4), STR_24(3), STR_23(3), STR_22(3), 
  2829 ;;		 -> STR_21(3), STR_20(2), STR_19(2), STR_18(2), 
  2830 ;;		 -> STR_17(2), STR_16(2), STR_15(2), 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  r               1   44[BANK0 ] char 
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2   39[BANK0 ] int 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2842 ;;      Params:         0       4       0       0       0       0       0       0       0
  2843 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2845 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2846 ;;Total ram usage:        6 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:   12
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_handle_message
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text9
  2857  00204A                     __ptext9:
  2858                           	opt stack 0
  2859  00204A                     _strcmp:
  2860                           	opt stack 17
  2861                           
  2862                           ;incstack = 0
  2863  00204A  D006               	goto	l2856
  2864  00204C                     l2854:
  2865  00204C  0100               	movlb	0	; () banked
  2866  00204E  4B87               	infsnz	strcmp@s1& (0+255),f,b
  2867  002050  2B88               	incf	(strcmp@s1+1)& (0+255),f,b
  2868  002052  0100               	movlb	0	; () banked
  2869  002054  4B89               	infsnz	strcmp@s2& (0+255),f,b
  2870  002056  2B8A               	incf	(strcmp@s2+1)& (0+255),f,b
  2871  002058                     l2856:
  2872  002058  C087  FFD9         	movff	strcmp@s1,fsr2l
  2873  00205C  C088  FFDA         	movff	strcmp@s1+1,fsr2h
  2874  002060  50DF               	movf	indf2,w,c
  2875  002062  0100               	movlb	0	; () banked
  2876  002064  6F8B               	movwf	??_strcmp& (0+255),b
  2877  002066  C089  FFF6         	movff	strcmp@s2,tblptrl
  2878  00206A  C08A  FFF7         	movff	strcmp@s2+1,tblptrh
  2879  00206E                     	if	0	;tblptru may be non-zero
  2880  00206E                     	endif
  2881  00206E                     	if	0	;tblptru may be non-zero
  2882  00206E                     	endif
  2883  00206E  0008               	tblrd		*
  2884  002070  50F5               	movf	tablat,w,c
  2885  002072  0800               	sublw	0
  2886  002074  0100               	movlb	0	; () banked
  2887  002076  258B               	addwf	??_strcmp& (0+255),w,b
  2888  002078  0100               	movlb	0	; () banked
  2889  00207A  6F8C               	movwf	strcmp@r& (0+255),b
  2890  00207C  0100               	movlb	0	; () banked
  2891  00207E  518C               	movf	strcmp@r& (0+255),w,b
  2892  002080  A4D8               	btfss	status,2,c
  2893  002082  D007               	goto	l2860
  2894                           
  2895                           ; BSR set to: 0
  2896  002084  C087  FFD9         	movff	strcmp@s1,fsr2l
  2897  002088  C088  FFDA         	movff	strcmp@s1+1,fsr2h
  2898  00208C  50DF               	movf	indf2,w,c
  2899  00208E  A4D8               	btfss	status,2,c
  2900  002090  D7DD               	goto	l2854
  2901  002092                     l2860:
  2902                           
  2903                           ; BSR set to: 0
  2904  002092  0100               	movlb	0	; () banked
  2905  002094  518C               	movf	strcmp@r& (0+255),w,b
  2906  002096  0100               	movlb	0	; () banked
  2907  002098  6F87               	movwf	?_strcmp& (0+255),b
  2908  00209A  6B88               	clrf	(?_strcmp+1)& (0+255),b
  2909  00209C  BF87               	btfsc	?_strcmp& (0+255),7,b
  2910  00209E  0788               	decf	(?_strcmp+1)& (0+255),f,b
  2911  0020A0  0012               	return	
  2912  0020A2                     __end_of_strcmp:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           intcon	equ	0xFF2
  2919                           intcon2	equ	0xFF1
  2920                           postinc0	equ	0xFEE
  2921                           plusw0	equ	0xFEB
  2922                           fsr0h	equ	0xFEA
  2923                           fsr0l	equ	0xFE9
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           plusw2	equ	0xFDB
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _strToInt *****************
  2934 ;; Defined at:
  2935 ;;		line 172 in file "main.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  str             2   39[BANK0 ] PTR const unsigned char 
  2938 ;;		 -> D_UART_ReadBlock@cm(17), D_UART_Read@cm(17), 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  val             1   43[BANK0 ] unsigned char 
  2941 ;;  shift           1   42[BANK0 ] unsigned char 
  2942 ;;  tmp             1   41[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      unsigned char 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2952 ;;      Params:         0       2       0       0       0       0       0       0       0
  2953 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2955 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2956 ;;Total ram usage:        5 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   12
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_handle_message
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text10
  2967  001F34                     __ptext10:
  2968                           	opt stack 0
  2969  001F34                     _strToInt:
  2970                           	opt stack 17
  2971                           
  2972                           ;main.c: 173: uint8_t val = 0;
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;incstack = 0
  2976  001F34  0E00               	movlw	0
  2977  001F36  0100               	movlb	0	; () banked
  2978  001F38  6F8B               	movwf	strToInt@val& (0+255),b
  2979                           
  2980                           ;main.c: 174: uint8_t tmp = 0;
  2981  001F3A  0E00               	movlw	0
  2982  001F3C  0100               	movlb	0	; () banked
  2983  001F3E  6F89               	movwf	strToInt@tmp& (0+255),b
  2984                           
  2985                           ;main.c: 175: uint8_t shift = 0;
  2986  001F40  0E00               	movlw	0
  2987  001F42  0100               	movlb	0	; () banked
  2988  001F44  6F8A               	movwf	strToInt@shift& (0+255),b
  2989                           
  2990                           ;main.c: 176: while(*str != '\0') {
  2991  001F46  D01B               	goto	l2878
  2992  001F48                     l2866:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 177: tmp = *str - 0x30;
  2996  001F48  C087  FFD9         	movff	strToInt@str,fsr2l
  2997  001F4C  C088  FFDA         	movff	strToInt@str+1,fsr2h
  2998  001F50  50DF               	movf	indf2,w,c
  2999  001F52  0FD0               	addlw	208
  3000  001F54  0100               	movlb	0	; () banked
  3001  001F56  6F89               	movwf	strToInt@tmp& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 178: if (shift != 0) {
  3005  001F58  0100               	movlb	0	; () banked
  3006  001F5A  518A               	movf	strToInt@shift& (0+255),w,b
  3007  001F5C  0100               	movlb	0	; () banked
  3008  001F5E  B4D8               	btfsc	status,2,c
  3009  001F60  D005               	goto	l2872
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;main.c: 179: val *= 10;
  3013  001F62  0E0A               	movlw	10
  3014  001F64  0100               	movlb	0	; () banked
  3015  001F66  038B               	mulwf	strToInt@val& (0+255),b
  3016  001F68  50F3               	movf	prodl,w,c
  3017  001F6A  6F8B               	movwf	strToInt@val& (0+255),b
  3018  001F6C                     l2872:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;main.c: 180: }
  3022                           ;main.c: 181: val += tmp;
  3023  001F6C  0100               	movlb	0	; () banked
  3024  001F6E  5189               	movf	strToInt@tmp& (0+255),w,b
  3025  001F70  0100               	movlb	0	; () banked
  3026  001F72  278B               	addwf	strToInt@val& (0+255),f,b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 182: shift++;
  3030  001F74  0100               	movlb	0	; () banked
  3031  001F76  2B8A               	incf	strToInt@shift& (0+255),f,b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;main.c: 183: str++;
  3035  001F78  0100               	movlb	0	; () banked
  3036  001F7A  4B87               	infsnz	strToInt@str& (0+255),f,b
  3037  001F7C  2B88               	incf	(strToInt@str+1)& (0+255),f,b
  3038  001F7E                     l2878:
  3039                           
  3040                           ; BSR set to: 0
  3041  001F7E  C087  FFD9         	movff	strToInt@str,fsr2l
  3042  001F82  C088  FFDA         	movff	strToInt@str+1,fsr2h
  3043  001F86  50DF               	movf	indf2,w,c
  3044  001F88  A4D8               	btfss	status,2,c
  3045  001F8A  D7DE               	goto	l2866
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;main.c: 184: }
  3049                           ;main.c: 185: return val;
  3050                           
  3051                           ; BSR set to: 0
  3052  001F8C  0100               	movlb	0	; () banked
  3053  001F8E  518B               	movf	strToInt@val& (0+255),w,b
  3054  001F90  0012               	return	
  3055  001F92                     __end_of_strToInt:
  3056                           	opt stack 0
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           prodl	equ	0xFF3
  3062                           intcon	equ	0xFF2
  3063                           intcon2	equ	0xFF1
  3064                           postinc0	equ	0xFEE
  3065                           plusw0	equ	0xFEB
  3066                           fsr0h	equ	0xFEA
  3067                           fsr0l	equ	0xFE9
  3068                           wreg	equ	0xFE8
  3069                           postdec1	equ	0xFE5
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           plusw2	equ	0xFDB
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _D_UART_WriteInt *****************
  3078 ;; Defined at:
  3079 ;;		line 285 in file "Drivers/UART_Driver.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  command         2   67[BANK0 ] PTR const unsigned char 
  3082 ;;		 -> STR_34(4), STR_32(4), STR_30(2), STR_29(2), 
  3083 ;;		 -> STR_28(2), 
  3084 ;;  data            2   69[BANK0 ] int 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3096 ;;      Params:         0       4       0       0       0       0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3098 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3099 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3100 ;;Total ram usage:        5 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:   16
  3103 ;; This function calls:
  3104 ;;		_printf
  3105 ;; This function is called by:
  3106 ;;		_handle_message
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text11
  3111  00149E                     __ptext11:
  3112                           	opt stack 0
  3113  00149E                     _D_UART_WriteInt:
  3114                           	opt stack 13
  3115                           
  3116                           ;UART_Driver.c: 286: printf(startCharacter);
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;incstack = 0
  3120  00149E  C040  F093         	movff	_startCharacter,printf@f
  3121  0014A2  C041  F094         	movff	_startCharacter+1,printf@f+1
  3122  0014A6  0100               	movlb	0	; () banked
  3123  0014A8  5193               	movf	printf@f& (0+255),w,b
  3124  0014AA  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3125  0014AC  A4D8               	btfss	status,2,c
  3126  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  3127  0014B0  6F95               	movwf	(printf@f+2)& (0+255),b
  3128  0014B2  EC59  F007         	call	_printf	;wreg free
  3129                           
  3130                           ;UART_Driver.c: 288: printf(messageCharacter);
  3131  0014B6  C0D7  F093         	movff	_messageCharacter,printf@f
  3132  0014BA  C0D8  F094         	movff	_messageCharacter+1,printf@f+1
  3133  0014BE  0100               	movlb	0	; () banked
  3134  0014C0  5193               	movf	printf@f& (0+255),w,b
  3135  0014C2  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3136  0014C4  A4D8               	btfss	status,2,c
  3137  0014C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3138  0014C8  6F95               	movwf	(printf@f+2)& (0+255),b
  3139  0014CA  EC59  F007         	call	_printf	;wreg free
  3140                           
  3141                           ;UART_Driver.c: 289: printf(deviceName);
  3142  0014CE  C0D4  F093         	movff	_deviceName,printf@f
  3143  0014D2  C0D5  F094         	movff	_deviceName+1,printf@f+1
  3144  0014D6  C0D6  F095         	movff	_deviceName+2,printf@f+2
  3145  0014DA  EC59  F007         	call	_printf	;wreg free
  3146                           
  3147                           ;UART_Driver.c: 291: printf(":");printf(command);
  3148  0014DE  0E6C               	movlw	low STR_7
  3149  0014E0  0100               	movlb	0	; () banked
  3150  0014E2  6F93               	movwf	printf@f& (0+255),b
  3151  0014E4  0E08               	movlw	high STR_7
  3152  0014E6  0100               	movlb	0	; () banked
  3153  0014E8  6F94               	movwf	(printf@f+1)& (0+255),b
  3154  0014EA  0100               	movlb	0	; () banked
  3155  0014EC  5193               	movf	printf@f& (0+255),w,b
  3156  0014EE  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3157  0014F0  A4D8               	btfss	status,2,c
  3158  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
  3159  0014F4  6F95               	movwf	(printf@f+2)& (0+255),b
  3160  0014F6  EC59  F007         	call	_printf	;wreg free
  3161  0014FA  C0A3  F093         	movff	D_UART_WriteInt@command,printf@f
  3162  0014FE  C0A4  F094         	movff	D_UART_WriteInt@command+1,printf@f+1
  3163  001502  0100               	movlb	0	; () banked
  3164  001504  5193               	movf	printf@f& (0+255),w,b
  3165  001506  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3166  001508  A4D8               	btfss	status,2,c
  3167  00150A  0E00               	movlw	low (__mediumconst shr (0+16))
  3168  00150C  6F95               	movwf	(printf@f+2)& (0+255),b
  3169  00150E  EC59  F007         	call	_printf	;wreg free
  3170                           
  3171                           ;UART_Driver.c: 293: printf(":");printf("%d",data);
  3172  001512  0E6C               	movlw	low STR_7
  3173  001514  0100               	movlb	0	; () banked
  3174  001516  6F93               	movwf	printf@f& (0+255),b
  3175  001518  0E08               	movlw	high STR_7
  3176  00151A  0100               	movlb	0	; () banked
  3177  00151C  6F94               	movwf	(printf@f+1)& (0+255),b
  3178  00151E  0100               	movlb	0	; () banked
  3179  001520  5193               	movf	printf@f& (0+255),w,b
  3180  001522  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3181  001524  A4D8               	btfss	status,2,c
  3182  001526  0E00               	movlw	low (__mediumconst shr (0+16))
  3183  001528  6F95               	movwf	(printf@f+2)& (0+255),b
  3184  00152A  EC59  F007         	call	_printf	;wreg free
  3185  00152E  0E54               	movlw	low STR_11
  3186  001530  0100               	movlb	0	; () banked
  3187  001532  6F93               	movwf	printf@f& (0+255),b
  3188  001534  0E08               	movlw	high STR_11
  3189  001536  0100               	movlb	0	; () banked
  3190  001538  6F94               	movwf	(printf@f+1)& (0+255),b
  3191  00153A  0100               	movlb	0	; () banked
  3192  00153C  5193               	movf	printf@f& (0+255),w,b
  3193  00153E  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3194  001540  A4D8               	btfss	status,2,c
  3195  001542  0E00               	movlw	low (__mediumconst shr (0+16))
  3196  001544  6F95               	movwf	(printf@f+2)& (0+255),b
  3197  001546  C0A5  F096         	movff	D_UART_WriteInt@data,?_printf+3
  3198  00154A  C0A6  F097         	movff	D_UART_WriteInt@data+1,?_printf+4
  3199  00154E  EC59  F007         	call	_printf	;wreg free
  3200                           
  3201                           ;UART_Driver.c: 295: printf(stopCharacter);
  3202  001552  C042  F093         	movff	_stopCharacter,printf@f
  3203  001556  C043  F094         	movff	_stopCharacter+1,printf@f+1
  3204  00155A  0100               	movlb	0	; () banked
  3205  00155C  5193               	movf	printf@f& (0+255),w,b
  3206  00155E  1194               	iorwf	(printf@f+1)& (0+255),w,b
  3207  001560  A4D8               	btfss	status,2,c
  3208  001562  0E00               	movlw	low (__mediumconst shr (0+16))
  3209  001564  6F95               	movwf	(printf@f+2)& (0+255),b
  3210  001566  EC59  F007         	call	_printf	;wreg free
  3211                           
  3212                           ;UART_Driver.c: 296: _delay((unsigned long)((1)*(48000000/4000.0)));
  3213  00156A  0E10               	movlw	16
  3214  00156C  0100               	movlb	0	; () banked
  3215  00156E  6FA7               	movwf	??_D_UART_WriteInt& (0+255),b
  3216  001570  0E94               	movlw	148
  3217  001572                     u3357:
  3218  001572  2EE8               	decfsz	wreg,f,c
  3219  001574  D7FE               	bra	u3357
  3220  001576  2FA7               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  3221  001578  D7FC               	bra	u3357
  3222  00157A  F000               	nop	
  3223  00157C  0012               	return		;funcret
  3224  00157E                     __end_of_D_UART_WriteInt:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           plusw0	equ	0xFEB
  3235                           fsr0h	equ	0xFEA
  3236                           fsr0l	equ	0xFE9
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           plusw2	equ	0xFDB
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _printf *****************
  3247 ;; Defined at:
  3248 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  f               3   51[BANK0 ] PTR const unsigned char 
  3251 ;;		 -> STR_34(4), STR_32(4), STR_30(2), STR_29(2), 
  3252 ;;		 -> STR_28(2), STR_14(5), STR_13(2), STR_12(2), 
  3253 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  3254 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  3255 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  idx             1   59[BANK0 ] unsigned char 
  3258 ;;  tmpval          4    0        struct .
  3259 ;;  cp              3    0        PTR const unsigned char 
  3260 ;;  val             2   64[BANK0 ] unsigned int 
  3261 ;;  ap              2   60[BANK0 ] PTR void [1]
  3262 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3263 ;;  len             2    0        unsigned int 
  3264 ;;  c               1   66[BANK0 ] char 
  3265 ;;  flag            1   63[BANK0 ] unsigned char 
  3266 ;;  prec            1   62[BANK0 ] char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  2   51[BANK0 ] int 
  3269 ;; Registers used:
  3270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3276 ;;      Params:         0       5       0       0       0       0       0       0       0
  3277 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3278 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3279 ;;      Totals:         0      16       0       0       0       0       0       0       0
  3280 ;;Total ram usage:       16 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:   15
  3283 ;; This function calls:
  3284 ;;		___lwdiv
  3285 ;;		___lwmod
  3286 ;;		_putch
  3287 ;; This function is called by:
  3288 ;;		_D_UART_Write
  3289 ;;		_D_UART_WriteInt
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text12
  3294  000EB2                     __ptext12:
  3295                           	opt stack 0
  3296  000EB2                     _printf:
  3297                           	opt stack 13
  3298                           
  3299                           ;doprnt.c: 466: va_list ap;
  3300                           ;doprnt.c: 499: signed char c;
  3301                           ;doprnt.c: 506: signed char prec;
  3302                           ;doprnt.c: 508: unsigned char flag;
  3303                           ;doprnt.c: 523: union {
  3304                           ;doprnt.c: 524: unsigned long vd;
  3305                           ;doprnt.c: 525: double integ;
  3306                           ;doprnt.c: 526: } tmpval;
  3307                           ;doprnt.c: 528: unsigned int val;
  3308                           ;doprnt.c: 529: unsigned len;
  3309                           ;doprnt.c: 530: const char * cp;
  3310                           ;doprnt.c: 533: *ap = __va_start();
  3311                           
  3312                           ;incstack = 0
  3313  000EB2  0E96               	movlw	low (?_printf+3)
  3314  000EB4  0100               	movlb	0	; () banked
  3315  000EB6  6F9C               	movwf	printf@ap& (0+255),b
  3316  000EB8  0E00               	movlw	high (?_printf+3)
  3317  000EBA  0100               	movlb	0	; () banked
  3318  000EBC  6F9D               	movwf	(printf@ap+1)& (0+255),b
  3319                           
  3320                           ;doprnt.c: 536: while(c = *f++) {
  3321  000EBE  D115               	goto	l2456
  3322  000EC0                     l2376:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;doprnt.c: 538: if(c != '%')
  3326  000EC0  0E25               	movlw	37
  3327  000EC2  0100               	movlb	0	; () banked
  3328  000EC4  19A2               	xorwf	printf@c& (0+255),w,b
  3329  000EC6  B4D8               	btfsc	status,2,c
  3330  000EC8  D005               	goto	l2380
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 540: {
  3334                           ;doprnt.c: 541: (putch(c) );
  3335  000ECA  0100               	movlb	0	; () banked
  3336  000ECC  51A2               	movf	printf@c& (0+255),w,b
  3337  000ECE  ECA1  F011         	call	_putch
  3338                           
  3339                           ;doprnt.c: 542: continue;
  3340  000ED2  D10B               	goto	l2456
  3341  000ED4                     l2380:
  3342                           
  3343                           ;doprnt.c: 543: }
  3344                           ;doprnt.c: 548: flag = 0;
  3345  000ED4  0E00               	movlw	0
  3346  000ED6  0100               	movlb	0	; () banked
  3347  000ED8  6F9F               	movwf	printf@flag& (0+255),b
  3348                           
  3349                           ;doprnt.c: 635: switch(c = *f++) {
  3350  000EDA  D008               	goto	l2388
  3351  000EDC                     l2382:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;doprnt.c: 721: flag |= 0x80;
  3355  000EDC  0100               	movlb	0	; () banked
  3356  000EDE  8F9F               	bsf	printf@flag& (0+255),7,b
  3357                           
  3358                           ;doprnt.c: 723: break;
  3359  000EE0  D028               	goto	l535
  3360  000EE2                     l2384:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 809: (putch(c) );
  3364  000EE2  0100               	movlb	0	; () banked
  3365  000EE4  51A2               	movf	printf@c& (0+255),w,b
  3366  000EE6  ECA1  F011         	call	_putch
  3367                           
  3368                           ;doprnt.c: 810: continue;
  3369  000EEA  D0FF               	goto	l2456
  3370  000EEC                     l2388:
  3371  000EEC  C093  F098         	movff	printf@f,??_printf
  3372  000EF0  C094  F099         	movff	printf@f+1,??_printf+1
  3373  000EF4  C095  F09A         	movff	printf@f+2,??_printf+2
  3374  000EF8  0100               	movlb	0	; () banked
  3375  000EFA  2B93               	incf	printf@f& (0+255),f,b
  3376  000EFC  0E00               	movlw	0
  3377  000EFE  2394               	addwfc	(printf@f+1)& (0+255),f,b
  3378  000F00  2395               	addwfc	(printf@f+2)& (0+255),f,b
  3379  000F02  C098  FFF6         	movff	??_printf,tblptrl
  3380  000F06  C099  FFF7         	movff	??_printf+1,tblptrh
  3381  000F0A  C09A  FFF8         	movff	??_printf+2,tblptru
  3382  000F0E  0008               	tblrd		*
  3383  000F10  CFF5 F0A2          	movff	tablat,printf@c
  3384  000F14  0100               	movlb	0	; () banked
  3385  000F16  51A2               	movf	printf@c& (0+255),w,b
  3386                           
  3387                           ; Switch size 1, requested type "space"
  3388                           ; Number of cases is 4, Range of values is 0 to 120
  3389                           ; switch strategies available:
  3390                           ; Name         Instructions Cycles
  3391                           ; simple_byte           13     7 (average)
  3392                           ;	Chosen strategy is simple_byte
  3393  000F18  0A00               	xorlw	0	; case 0
  3394  000F1A  B4D8               	btfsc	status,2,c
  3395  000F1C  0012               	return	
  3396  000F1E  0A64               	xorlw	100	; case 100
  3397  000F20  B4D8               	btfsc	status,2,c
  3398  000F22  D007               	goto	l535
  3399  000F24  0A0D               	xorlw	13	; case 105
  3400  000F26  B4D8               	btfsc	status,2,c
  3401  000F28  D004               	goto	l535
  3402  000F2A  0A11               	xorlw	17	; case 120
  3403  000F2C  B4D8               	btfsc	status,2,c
  3404  000F2E  D7D6               	goto	l2382
  3405  000F30  D7D8               	goto	l2384
  3406  000F32                     l535:
  3407                           
  3408                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3409  000F32  0100               	movlb	0	; () banked
  3410  000F34  BF9F               	btfsc	printf@flag& (0+255),7,b
  3411  000F36  D019               	goto	l2400
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;doprnt.c: 1253: {
  3415                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3416  000F38  C09C  FFD9         	movff	printf@ap,fsr2l
  3417  000F3C  C09D  FFDA         	movff	printf@ap+1,fsr2h
  3418  000F40  CFDE F0A0          	movff	postinc2,printf@val
  3419  000F44  CFDD F0A1          	movff	postdec2,printf@val+1
  3420                           
  3421                           ; BSR set to: 0
  3422  000F48  0E02               	movlw	2
  3423  000F4A  0100               	movlb	0	; () banked
  3424  000F4C  279C               	addwf	printf@ap& (0+255),f,b
  3425  000F4E  0E00               	movlw	0
  3426  000F50  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 1261: if((int)val < 0) {
  3430  000F52  0100               	movlb	0	; () banked
  3431  000F54  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  3432  000F56  D053               	goto	l2434
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 1262: flag |= 0x03;
  3436  000F58  0E03               	movlw	3
  3437  000F5A  0100               	movlb	0	; () banked
  3438  000F5C  139F               	iorwf	printf@flag& (0+255),f,b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;doprnt.c: 1263: val = -val;
  3442  000F5E  0100               	movlb	0	; () banked
  3443  000F60  6DA0               	negf	printf@val& (0+255),b
  3444  000F62  1FA1               	comf	(printf@val+1)& (0+255),f,b
  3445  000F64  B0D8               	btfsc	status,0,c
  3446  000F66  2BA1               	incf	(printf@val+1)& (0+255),f,b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;doprnt.c: 1264: }
  3450                           ;doprnt.c: 1266: }
  3451  000F68  D04A               	goto	l2434
  3452  000F6A                     l2400:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;doprnt.c: 1268: else
  3456                           ;doprnt.c: 1273: {
  3457                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3458  000F6A  C09C  FFD9         	movff	printf@ap,fsr2l
  3459  000F6E  C09D  FFDA         	movff	printf@ap+1,fsr2h
  3460  000F72  CFDE F0A0          	movff	postinc2,printf@val
  3461  000F76  CFDD F0A1          	movff	postdec2,printf@val+1
  3462                           
  3463                           ; BSR set to: 0
  3464  000F7A  0E02               	movlw	2
  3465  000F7C  0100               	movlb	0	; () banked
  3466  000F7E  279C               	addwf	printf@ap& (0+255),f,b
  3467  000F80  0E00               	movlw	0
  3468  000F82  239D               	addwfc	(printf@ap+1)& (0+255),f,b
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;doprnt.c: 1287: }
  3472                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3473  000F84  D03C               	goto	l2434
  3474  000F86                     l2404:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3478  000F86  0E01               	movlw	1
  3479  000F88  0100               	movlb	0	; () banked
  3480  000F8A  6FA2               	movwf	printf@c& (0+255),b
  3481  000F8C                     l2406:
  3482                           
  3483                           ; BSR set to: 0
  3484  000F8C  0E05               	movlw	5
  3485  000F8E  0100               	movlb	0	; () banked
  3486  000F90  19A2               	xorwf	printf@c& (0+255),w,b
  3487  000F92  B4D8               	btfsc	status,2,c
  3488  000F94  D03D               	goto	l2436
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;doprnt.c: 1306: if(val < dpowers[c])
  3492                           
  3493                           ; BSR set to: 0
  3494                           
  3495                           ; BSR set to: 0
  3496  000F96  0100               	movlb	0	; () banked
  3497  000F98  51A2               	movf	printf@c& (0+255),w,b
  3498  000F9A  0D02               	mullw	2
  3499  000F9C  0E01               	movlw	low _dpowers
  3500  000F9E  24F3               	addwf	prodl,w,c
  3501  000FA0  6EF6               	movwf	tblptrl,c
  3502  000FA2  0E08               	movlw	high _dpowers
  3503  000FA4  20F4               	addwfc	prodh,w,c
  3504  000FA6  6EF7               	movwf	tblptrh,c
  3505  000FA8                     	if	0	;There are less than 3 active tblptr bytes
  3506  000FA8                     	endif
  3507  000FA8  0009               	tblrd		*+
  3508  000FAA  50F5               	movf	tablat,w,c
  3509  000FAC  0100               	movlb	0	; () banked
  3510  000FAE  5DA0               	subwf	printf@val& (0+255),w,b
  3511  000FB0  0009               	tblrd		*+
  3512  000FB2  50F5               	movf	tablat,w,c
  3513  000FB4  0100               	movlb	0	; () banked
  3514  000FB6  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  3515  000FB8  A0D8               	btfss	status,0,c
  3516  000FBA  D02A               	goto	l2436
  3517                           
  3518                           ; BSR set to: 0
  3519                           
  3520                           ; BSR set to: 0
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;doprnt.c: 1307: break;
  3524  000FBC  0100               	movlb	0	; () banked
  3525  000FBE  2BA2               	incf	printf@c& (0+255),f,b
  3526  000FC0  D7E5               	goto	l2406
  3527  000FC2                     l2418:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3531  000FC2  0E01               	movlw	1
  3532  000FC4  0100               	movlb	0	; () banked
  3533  000FC6  6FA2               	movwf	printf@c& (0+255),b
  3534  000FC8                     l2420:
  3535                           
  3536                           ; BSR set to: 0
  3537  000FC8  0E04               	movlw	4
  3538  000FCA  0100               	movlb	0	; () banked
  3539  000FCC  19A2               	xorwf	printf@c& (0+255),w,b
  3540  000FCE  B4D8               	btfsc	status,2,c
  3541  000FD0  D01F               	goto	l2436
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3545                           
  3546                           ; BSR set to: 0
  3547                           
  3548                           ; BSR set to: 0
  3549  000FD2  0100               	movlb	0	; () banked
  3550  000FD4  51A2               	movf	printf@c& (0+255),w,b
  3551  000FD6  0D02               	mullw	2
  3552  000FD8  0E0B               	movlw	low _hexpowers
  3553  000FDA  24F3               	addwf	prodl,w,c
  3554  000FDC  6EF6               	movwf	tblptrl,c
  3555  000FDE  0E08               	movlw	high _hexpowers
  3556  000FE0  20F4               	addwfc	prodh,w,c
  3557  000FE2  6EF7               	movwf	tblptrh,c
  3558  000FE4                     	if	0	;There are less than 3 active tblptr bytes
  3559  000FE4                     	endif
  3560  000FE4  0009               	tblrd		*+
  3561  000FE6  50F5               	movf	tablat,w,c
  3562  000FE8  0100               	movlb	0	; () banked
  3563  000FEA  5DA0               	subwf	printf@val& (0+255),w,b
  3564  000FEC  0009               	tblrd		*+
  3565  000FEE  50F5               	movf	tablat,w,c
  3566  000FF0  0100               	movlb	0	; () banked
  3567  000FF2  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  3568  000FF4  A0D8               	btfss	status,0,c
  3569  000FF6  D00C               	goto	l2436
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;doprnt.c: 1318: break;
  3577  000FF8  0100               	movlb	0	; () banked
  3578  000FFA  2BA2               	incf	printf@c& (0+255),f,b
  3579  000FFC  D7E5               	goto	l2420
  3580  000FFE                     l2434:
  3581                           
  3582                           ; BSR set to: 0
  3583  000FFE  0100               	movlb	0	; () banked
  3584  001000  519F               	movf	printf@flag& (0+255),w,b
  3585  001002  0B80               	andlw	128
  3586                           
  3587                           ; Switch size 1, requested type "space"
  3588                           ; Number of cases is 2, Range of values is 0 to 128
  3589                           ; switch strategies available:
  3590                           ; Name         Instructions Cycles
  3591                           ; simple_byte            7     4 (average)
  3592                           ;	Chosen strategy is simple_byte
  3593  001004  0A00               	xorlw	0	; case 0
  3594  001006  B4D8               	btfsc	status,2,c
  3595  001008  D7BE               	goto	l2404
  3596  00100A  0A80               	xorlw	128	; case 128
  3597  00100C  B4D8               	btfsc	status,2,c
  3598  00100E  D7D9               	goto	l2418
  3599  001010                     l2436:
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;doprnt.c: 1422: {
  3603                           ;doprnt.c: 1438: if(flag & 0x03)
  3604  001010  C09F  F098         	movff	printf@flag,??_printf
  3605  001014  0E03               	movlw	3
  3606  001016  0100               	movlb	0	; () banked
  3607  001018  1798               	andwf	??_printf& (0+255),f,b
  3608  00101A  B4D8               	btfsc	status,2,c
  3609  00101C  D003               	goto	l2440
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;doprnt.c: 1439: (putch('-') );
  3613  00101E  0E2D               	movlw	45
  3614  001020  ECA1  F011         	call	_putch
  3615  001024                     l2440:
  3616                           
  3617                           ;doprnt.c: 1469: }
  3618                           ;doprnt.c: 1472: prec = c;
  3619  001024  C0A2  F09E         	movff	printf@c,printf@prec
  3620                           
  3621                           ;doprnt.c: 1474: while(prec--) {
  3622  001028  D05A               	goto	l2454
  3623  00102A                     l2442:
  3624                           
  3625                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3626  00102A  0100               	movlb	0	; () banked
  3627  00102C  519E               	movf	printf@prec& (0+255),w,b
  3628  00102E  0D02               	mullw	2
  3629  001030  0E01               	movlw	low _dpowers
  3630  001032  24F3               	addwf	prodl,w,c
  3631  001034  6EF6               	movwf	tblptrl,c
  3632  001036  0E08               	movlw	high _dpowers
  3633  001038  20F4               	addwfc	prodh,w,c
  3634  00103A  6EF7               	movwf	tblptrh,c
  3635  00103C                     	if	0	;There are less than 3 active tblptr bytes
  3636  00103C                     	endif
  3637  00103C  0009               	tblrd		*+
  3638  00103E  CFF5 F089          	movff	tablat,___lwdiv@divisor
  3639  001042  000A               	tblrd		*-
  3640  001044  CFF5 F08A          	movff	tablat,___lwdiv@divisor+1
  3641  001048  C0A0  F087         	movff	printf@val,___lwdiv@dividend
  3642  00104C  C0A1  F088         	movff	printf@val+1,___lwdiv@dividend+1
  3643  001050  EC54  F00E         	call	___lwdiv	;wreg free
  3644  001054  C087  F08E         	movff	?___lwdiv,___lwmod@dividend
  3645  001058  C088  F08F         	movff	?___lwdiv+1,___lwmod@dividend+1
  3646  00105C  0E00               	movlw	0
  3647  00105E  0100               	movlb	0	; () banked
  3648  001060  6F91               	movwf	(___lwmod@divisor+1)& (0+255),b
  3649  001062  0E0A               	movlw	10
  3650  001064  6F90               	movwf	___lwmod@divisor& (0+255),b
  3651  001066  EC69  F00F         	call	___lwmod	;wreg free
  3652  00106A  0100               	movlb	0	; () banked
  3653  00106C  518E               	movf	?___lwmod& (0+255),w,b
  3654  00106E  0F30               	addlw	48
  3655  001070  0100               	movlb	0	; () banked
  3656  001072  6FA2               	movwf	printf@c& (0+255),b
  3657                           
  3658                           ;doprnt.c: 1491: break;
  3659  001074  D030               	goto	l2452
  3660  001076                     l2444:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;doprnt.c: 1499: {
  3664                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3665  001076  C0A0  F087         	movff	printf@val,___lwdiv@dividend
  3666  00107A  C0A1  F088         	movff	printf@val+1,___lwdiv@dividend+1
  3667  00107E  0100               	movlb	0	; () banked
  3668  001080  519E               	movf	printf@prec& (0+255),w,b
  3669  001082  0D02               	mullw	2
  3670  001084  0E0B               	movlw	low _hexpowers
  3671  001086  24F3               	addwf	prodl,w,c
  3672  001088  6EF6               	movwf	tblptrl,c
  3673  00108A  0E08               	movlw	high _hexpowers
  3674  00108C  20F4               	addwfc	prodh,w,c
  3675  00108E  6EF7               	movwf	tblptrh,c
  3676  001090                     	if	0	;There are less than 3 active tblptr bytes
  3677  001090                     	endif
  3678  001090  0009               	tblrd		*+
  3679  001092  CFF5 F089          	movff	tablat,___lwdiv@divisor
  3680  001096  000A               	tblrd		*-
  3681  001098  CFF5 F08A          	movff	tablat,___lwdiv@divisor+1
  3682  00109C  EC54  F00E         	call	___lwdiv	;wreg free
  3683  0010A0  0100               	movlb	0	; () banked
  3684  0010A2  5187               	movf	?___lwdiv& (0+255),w,b
  3685  0010A4  0B0F               	andlw	15
  3686  0010A6  0100               	movlb	0	; () banked
  3687  0010A8  6F9B               	movwf	printf@idx& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3691  0010AA  0100               	movlb	0	; () banked
  3692  0010AC  519B               	movf	printf@idx& (0+255),w,b
  3693  0010AE  0D01               	mullw	1
  3694  0010B0  0E13               	movlw	low STR_35
  3695  0010B2  24F3               	addwf	prodl,w,c
  3696  0010B4  6EF6               	movwf	tblptrl,c
  3697  0010B6  0E08               	movlw	high STR_35
  3698  0010B8  20F4               	addwfc	prodh,w,c
  3699  0010BA  6EF7               	movwf	tblptrh,c
  3700  0010BC                     	if	0	;There are less than 3 active tblptr bytes
  3701  0010BC                     	endif
  3702  0010BC  0008               	tblrd		*
  3703  0010BE  CFF5 F0A2          	movff	tablat,printf@c
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;doprnt.c: 1523: }
  3707                           
  3708                           ;doprnt.c: 1508: }
  3709                           ;doprnt.c: 1510: break;
  3710  0010C2  D009               	goto	l2452
  3711  0010C4                     l2450:
  3712  0010C4  0100               	movlb	0	; () banked
  3713  0010C6  519F               	movf	printf@flag& (0+255),w,b
  3714  0010C8  0B80               	andlw	128
  3715                           
  3716                           ; Switch size 1, requested type "space"
  3717                           ; Number of cases is 2, Range of values is 0 to 128
  3718                           ; switch strategies available:
  3719                           ; Name         Instructions Cycles
  3720                           ; simple_byte            7     4 (average)
  3721                           ;	Chosen strategy is simple_byte
  3722  0010CA  0A00               	xorlw	0	; case 0
  3723  0010CC  B4D8               	btfsc	status,2,c
  3724  0010CE  D7AD               	goto	l2442
  3725  0010D0  0A80               	xorlw	128	; case 128
  3726  0010D2  B4D8               	btfsc	status,2,c
  3727  0010D4  D7D0               	goto	l2444
  3728  0010D6                     l2452:
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;doprnt.c: 1524: (putch(c) );
  3732  0010D6  0100               	movlb	0	; () banked
  3733  0010D8  51A2               	movf	printf@c& (0+255),w,b
  3734  0010DA  ECA1  F011         	call	_putch
  3735  0010DE                     l2454:
  3736  0010DE  0100               	movlb	0	; () banked
  3737  0010E0  079E               	decf	printf@prec& (0+255),f,b
  3738  0010E2  0100               	movlb	0	; () banked
  3739  0010E4  299E               	incf	printf@prec& (0+255),w,b
  3740  0010E6  A4D8               	btfss	status,2,c
  3741  0010E8  D7ED               	goto	l2450
  3742  0010EA                     l2456:
  3743  0010EA  C093  F098         	movff	printf@f,??_printf
  3744  0010EE  C094  F099         	movff	printf@f+1,??_printf+1
  3745  0010F2  C095  F09A         	movff	printf@f+2,??_printf+2
  3746  0010F6  0100               	movlb	0	; () banked
  3747  0010F8  2B93               	incf	printf@f& (0+255),f,b
  3748  0010FA  0E00               	movlw	0
  3749  0010FC  2394               	addwfc	(printf@f+1)& (0+255),f,b
  3750  0010FE  2395               	addwfc	(printf@f+2)& (0+255),f,b
  3751  001100  C098  FFF6         	movff	??_printf,tblptrl
  3752  001104  C099  FFF7         	movff	??_printf+1,tblptrh
  3753  001108  C09A  FFF8         	movff	??_printf+2,tblptru
  3754  00110C  0008               	tblrd		*
  3755  00110E  CFF5 F0A2          	movff	tablat,printf@c
  3756  001112  0100               	movlb	0	; () banked
  3757  001114  51A2               	movf	printf@c& (0+255),w,b
  3758  001116  B4D8               	btfsc	status,2,c
  3759  001118  0012               	return	
  3760  00111A  D6D2               	goto	l2376
  3761  00111C                     __end_of_printf:
  3762                           	opt stack 0
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           intcon2	equ	0xFF1
  3771                           postinc0	equ	0xFEE
  3772                           plusw0	equ	0xFEB
  3773                           fsr0h	equ	0xFEA
  3774                           fsr0l	equ	0xFE9
  3775                           wreg	equ	0xFE8
  3776                           postdec1	equ	0xFE5
  3777                           fsr1l	equ	0xFE1
  3778                           indf2	equ	0xFDF
  3779                           postinc2	equ	0xFDE
  3780                           postdec2	equ	0xFDD
  3781                           plusw2	equ	0xFDB
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786 ;; *************** function _putch *****************
  3787 ;; Defined at:
  3788 ;;		line 353 in file "Drivers/UART_Driver.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  data            1    wreg     unsigned char 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  data            1   41[BANK0 ] unsigned char 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3802 ;;      Params:         0       0       0       0       0       0       0       0       0
  3803 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3804 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3805 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3806 ;;Total ram usage:        1 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:   14
  3809 ;; This function calls:
  3810 ;;		_writeByte
  3811 ;; This function is called by:
  3812 ;;		_printf
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           	psect	text13
  3817  002342                     __ptext13:
  3818                           	opt stack 0
  3819  002342                     _putch:
  3820                           	opt stack 13
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;incstack = 0
  3824                           ;putch@data stored from wreg
  3825  002342  0100               	movlb	0	; () banked
  3826  002344  6F89               	movwf	putch@data& (0+255),b
  3827                           
  3828                           ;UART_Driver.c: 354: writeByte(data);
  3829  002346  0100               	movlb	0	; () banked
  3830  002348  5189               	movf	putch@data& (0+255),w,b
  3831  00234A  EC8E  F011         	call	_writeByte
  3832  00234E  0012               	return		;funcret
  3833  002350                     __end_of_putch:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon	equ	0xFF2
  3842                           intcon2	equ	0xFF1
  3843                           postinc0	equ	0xFEE
  3844                           plusw0	equ	0xFEB
  3845                           fsr0h	equ	0xFEA
  3846                           fsr0l	equ	0xFE9
  3847                           wreg	equ	0xFE8
  3848                           postdec1	equ	0xFE5
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           plusw2	equ	0xFDB
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _writeByte *****************
  3859 ;; Defined at:
  3860 ;;		line 84 in file "Drivers/UART_Driver.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  data            1    wreg     unsigned char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  data            1   40[BANK0 ] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3874 ;;      Params:         0       0       0       0       0       0       0       0       0
  3875 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3877 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3878 ;;Total ram usage:        1 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:   13
  3881 ;; This function calls:
  3882 ;;		_D_UART_Enable
  3883 ;; This function is called by:
  3884 ;;		_putch
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text14
  3889  00231C                     __ptext14:
  3890                           	opt stack 0
  3891  00231C                     _writeByte:
  3892                           	opt stack 13
  3893                           
  3894                           ;incstack = 0
  3895                           ;writeByte@data stored from wreg
  3896  00231C  0100               	movlb	0	; () banked
  3897  00231E  6F88               	movwf	writeByte@data& (0+255),b
  3898                           
  3899                           ;UART_Driver.c: 85: D_UART_Enable(1);
  3900  002320  0E01               	movlw	1
  3901  002322  EC17  F011         	call	_D_UART_Enable
  3902  002326                     l107:
  3903  002326  A2AC               	btfss	4012,1,c	;volatile
  3904  002328  D7FE               	goto	l107
  3905                           
  3906                           ;UART_Driver.c: 87: TXREG = data;
  3907  00232A  C088  FFAD         	movff	writeByte@data,4013	;volatile
  3908  00232E  0012               	return		;funcret
  3909  002330                     __end_of_writeByte:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           intcon2	equ	0xFF1
  3919                           postinc0	equ	0xFEE
  3920                           plusw0	equ	0xFEB
  3921                           fsr0h	equ	0xFEA
  3922                           fsr0l	equ	0xFE9
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _D_UART_Enable *****************
  3935 ;; Defined at:
  3936 ;;		line 319 in file "Drivers/UART_Driver.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  enable          1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  enable          1   39[BANK0 ] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3950 ;;      Params:         0       0       0       0       0       0       0       0       0
  3951 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3953 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3954 ;;Total ram usage:        1 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:   12
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_writeByte
  3961 ;;		_D_UART_Init
  3962 ;;		_initialize
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text15
  3967  00222E                     __ptext15:
  3968                           	opt stack 0
  3969  00222E                     _D_UART_Enable:
  3970                           	opt stack 13
  3971                           
  3972                           ;incstack = 0
  3973                           ;D_UART_Enable@enable stored from wreg
  3974  00222E  0100               	movlb	0	; () banked
  3975  002230  6F87               	movwf	D_UART_Enable@enable& (0+255),b
  3976                           
  3977                           ;UART_Driver.c: 320: if(enable) {
  3978  002232  0100               	movlb	0	; () banked
  3979  002234  5187               	movf	D_UART_Enable@enable& (0+255),w,b
  3980  002236  0100               	movlb	0	; () banked
  3981  002238  B4D8               	btfsc	status,2,c
  3982  00223A  D006               	goto	l185
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  3986  00223C  9C94               	bcf	3988,6,c	;volatile
  3987                           
  3988                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  3989  00223E  8E94               	bsf	3988,7,c	;volatile
  3990                           
  3991                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  3992  002240  8AAC               	bsf	4012,5,c	;volatile
  3993                           
  3994                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  3995  002242  88AB               	bsf	4011,4,c	;volatile
  3996                           
  3997                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  3998  002244  8EAB               	bsf	4011,7,c	;volatile
  3999                           
  4000                           ;UART_Driver.c: 326: } else {
  4001  002246  0012               	return	
  4002  002248                     l185:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  4006  002248  9C94               	bcf	3988,6,c	;volatile
  4007                           
  4008                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  4009  00224A  9E94               	bcf	3988,7,c	;volatile
  4010                           
  4011                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  4012  00224C  9AAC               	bcf	4012,5,c	;volatile
  4013                           
  4014                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  4015  00224E  98AB               	bcf	4011,4,c	;volatile
  4016                           
  4017                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  4018  002250  9EAB               	bcf	4011,7,c	;volatile
  4019  002252  0012               	return	
  4020  002254                     __end_of_D_UART_Enable:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           tblptrh	equ	0xFF7
  4024                           tblptrl	equ	0xFF6
  4025                           tablat	equ	0xFF5
  4026                           prodh	equ	0xFF4
  4027                           prodl	equ	0xFF3
  4028                           intcon	equ	0xFF2
  4029                           intcon2	equ	0xFF1
  4030                           postinc0	equ	0xFEE
  4031                           plusw0	equ	0xFEB
  4032                           fsr0h	equ	0xFEA
  4033                           fsr0l	equ	0xFE9
  4034                           wreg	equ	0xFE8
  4035                           postdec1	equ	0xFE5
  4036                           fsr1l	equ	0xFE1
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           plusw2	equ	0xFDB
  4041                           fsr2h	equ	0xFDA
  4042                           fsr2l	equ	0xFD9
  4043                           status	equ	0xFD8
  4044                           
  4045 ;; *************** function ___lwmod *****************
  4046 ;; Defined at:
  4047 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  dividend        2   46[BANK0 ] unsigned int 
  4050 ;;  divisor         2   48[BANK0 ] unsigned int 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  counter         1   50[BANK0 ] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  2   46[BANK0 ] unsigned int 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4062 ;;      Params:         0       4       0       0       0       0       0       0       0
  4063 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4065 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4066 ;;Total ram usage:        5 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:   12
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_printf
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text16
  4077  001ED2                     __ptext16:
  4078                           	opt stack 0
  4079  001ED2                     ___lwmod:
  4080                           	opt stack 15
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;incstack = 0
  4084  001ED2  0100               	movlb	0	; () banked
  4085  001ED4  5190               	movf	___lwmod@divisor& (0+255),w,b
  4086  001ED6  0100               	movlb	0	; () banked
  4087  001ED8  1191               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4088  001EDA  B4D8               	btfsc	status,2,c
  4089  001EDC  D026               	goto	l973
  4090                           
  4091                           ; BSR set to: 0
  4092  001EDE  0E01               	movlw	1
  4093  001EE0  0100               	movlb	0	; () banked
  4094  001EE2  6F92               	movwf	___lwmod@counter& (0+255),b
  4095  001EE4  D006               	goto	l2280
  4096  001EE6                     l2278:
  4097                           
  4098                           ; BSR set to: 0
  4099  001EE6  0100               	movlb	0	; () banked
  4100  001EE8  90D8               	bcf	status,0,c
  4101  001EEA  3790               	rlcf	___lwmod@divisor& (0+255),f,b
  4102  001EEC  3791               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4103  001EEE  0100               	movlb	0	; () banked
  4104  001EF0  2B92               	incf	___lwmod@counter& (0+255),f,b
  4105  001EF2                     l2280:
  4106                           
  4107                           ; BSR set to: 0
  4108  001EF2  0100               	movlb	0	; () banked
  4109  001EF4  AF91               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4110  001EF6  D7F7               	goto	l2278
  4111  001EF8                     l2282:
  4112                           
  4113                           ; BSR set to: 0
  4114  001EF8  0100               	movlb	0	; () banked
  4115  001EFA  5190               	movf	___lwmod@divisor& (0+255),w,b
  4116  001EFC  0100               	movlb	0	; () banked
  4117  001EFE  5D8E               	subwf	___lwmod@dividend& (0+255),w,b
  4118  001F00  0100               	movlb	0	; () banked
  4119  001F02  5191               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4120  001F04  0100               	movlb	0	; () banked
  4121  001F06  598F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4122  001F08  A0D8               	btfss	status,0,c
  4123  001F0A  D008               	goto	l2286
  4124                           
  4125                           ; BSR set to: 0
  4126  001F0C  0100               	movlb	0	; () banked
  4127  001F0E  5190               	movf	___lwmod@divisor& (0+255),w,b
  4128  001F10  0100               	movlb	0	; () banked
  4129  001F12  5F8E               	subwf	___lwmod@dividend& (0+255),f,b
  4130  001F14  0100               	movlb	0	; () banked
  4131  001F16  5191               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4132  001F18  0100               	movlb	0	; () banked
  4133  001F1A  5B8F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4134  001F1C                     l2286:
  4135                           
  4136                           ; BSR set to: 0
  4137  001F1C  0100               	movlb	0	; () banked
  4138  001F1E  90D8               	bcf	status,0,c
  4139  001F20  3391               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4140  001F22  3390               	rrcf	___lwmod@divisor& (0+255),f,b
  4141                           
  4142                           ; BSR set to: 0
  4143  001F24  0100               	movlb	0	; () banked
  4144  001F26  2F92               	decfsz	___lwmod@counter& (0+255),f,b
  4145  001F28  D7E7               	goto	l2282
  4146  001F2A                     l973:
  4147                           
  4148                           ; BSR set to: 0
  4149  001F2A  C08E  F08E         	movff	___lwmod@dividend,?___lwmod
  4150  001F2E  C08F  F08F         	movff	___lwmod@dividend+1,?___lwmod+1
  4151                           
  4152                           ; BSR set to: 0
  4153  001F32  0012               	return		;funcret
  4154  001F34                     __end_of___lwmod:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           intcon2	equ	0xFF1
  4164                           postinc0	equ	0xFEE
  4165                           plusw0	equ	0xFEB
  4166                           fsr0h	equ	0xFEA
  4167                           fsr0l	equ	0xFE9
  4168                           wreg	equ	0xFE8
  4169                           postdec1	equ	0xFE5
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           plusw2	equ	0xFDB
  4175                           fsr2h	equ	0xFDA
  4176                           fsr2l	equ	0xFD9
  4177                           status	equ	0xFD8
  4178                           
  4179 ;; *************** function ___lwdiv *****************
  4180 ;; Defined at:
  4181 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  dividend        2   39[BANK0 ] unsigned int 
  4184 ;;  divisor         2   41[BANK0 ] unsigned int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  quotient        2   43[BANK0 ] unsigned int 
  4187 ;;  counter         1   45[BANK0 ] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  2   39[BANK0 ] unsigned int 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4197 ;;      Params:         0       4       0       0       0       0       0       0       0
  4198 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4200 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4201 ;;Total ram usage:        7 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:   12
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_printf
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text17
  4212  001CA8                     __ptext17:
  4213                           	opt stack 0
  4214  001CA8                     ___lwdiv:
  4215                           	opt stack 15
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;incstack = 0
  4219  001CA8  0E00               	movlw	0
  4220  001CAA  0100               	movlb	0	; () banked
  4221  001CAC  6F8C               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4222  001CAE  0E00               	movlw	0
  4223  001CB0  6F8B               	movwf	___lwdiv@quotient& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226  001CB2  0100               	movlb	0	; () banked
  4227  001CB4  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4228  001CB6  0100               	movlb	0	; () banked
  4229  001CB8  118A               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4230  001CBA  B4D8               	btfsc	status,2,c
  4231  001CBC  D02C               	goto	l963
  4232                           
  4233                           ; BSR set to: 0
  4234  001CBE  0E01               	movlw	1
  4235  001CC0  0100               	movlb	0	; () banked
  4236  001CC2  6F8D               	movwf	___lwdiv@counter& (0+255),b
  4237  001CC4  D006               	goto	l2260
  4238  001CC6                     l2258:
  4239                           
  4240                           ; BSR set to: 0
  4241  001CC6  0100               	movlb	0	; () banked
  4242  001CC8  90D8               	bcf	status,0,c
  4243  001CCA  3789               	rlcf	___lwdiv@divisor& (0+255),f,b
  4244  001CCC  378A               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4245  001CCE  0100               	movlb	0	; () banked
  4246  001CD0  2B8D               	incf	___lwdiv@counter& (0+255),f,b
  4247  001CD2                     l2260:
  4248                           
  4249                           ; BSR set to: 0
  4250  001CD2  0100               	movlb	0	; () banked
  4251  001CD4  AF8A               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4252  001CD6  D7F7               	goto	l2258
  4253  001CD8                     l2262:
  4254                           
  4255                           ; BSR set to: 0
  4256  001CD8  0100               	movlb	0	; () banked
  4257  001CDA  90D8               	bcf	status,0,c
  4258  001CDC  378B               	rlcf	___lwdiv@quotient& (0+255),f,b
  4259  001CDE  378C               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4260                           
  4261                           ; BSR set to: 0
  4262  001CE0  0100               	movlb	0	; () banked
  4263  001CE2  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4264  001CE4  0100               	movlb	0	; () banked
  4265  001CE6  5D87               	subwf	___lwdiv@dividend& (0+255),w,b
  4266  001CE8  0100               	movlb	0	; () banked
  4267  001CEA  518A               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4268  001CEC  0100               	movlb	0	; () banked
  4269  001CEE  5988               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4270  001CF0  A0D8               	btfss	status,0,c
  4271  001CF2  D00A               	goto	l2270
  4272                           
  4273                           ; BSR set to: 0
  4274  001CF4  0100               	movlb	0	; () banked
  4275  001CF6  5189               	movf	___lwdiv@divisor& (0+255),w,b
  4276  001CF8  0100               	movlb	0	; () banked
  4277  001CFA  5F87               	subwf	___lwdiv@dividend& (0+255),f,b
  4278  001CFC  0100               	movlb	0	; () banked
  4279  001CFE  518A               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4280  001D00  0100               	movlb	0	; () banked
  4281  001D02  5B88               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4282                           
  4283                           ; BSR set to: 0
  4284  001D04  0100               	movlb	0	; () banked
  4285  001D06  818B               	bsf	___lwdiv@quotient& (0+255),0,b
  4286  001D08                     l2270:
  4287                           
  4288                           ; BSR set to: 0
  4289  001D08  0100               	movlb	0	; () banked
  4290  001D0A  90D8               	bcf	status,0,c
  4291  001D0C  338A               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4292  001D0E  3389               	rrcf	___lwdiv@divisor& (0+255),f,b
  4293                           
  4294                           ; BSR set to: 0
  4295  001D10  0100               	movlb	0	; () banked
  4296  001D12  2F8D               	decfsz	___lwdiv@counter& (0+255),f,b
  4297  001D14  D7E1               	goto	l2262
  4298  001D16                     l963:
  4299                           
  4300                           ; BSR set to: 0
  4301  001D16  C08B  F087         	movff	___lwdiv@quotient,?___lwdiv
  4302  001D1A  C08C  F088         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4303                           
  4304                           ; BSR set to: 0
  4305  001D1E  0012               	return		;funcret
  4306  001D20                     __end_of___lwdiv:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           postinc0	equ	0xFEE
  4317                           plusw0	equ	0xFEB
  4318                           fsr0h	equ	0xFEA
  4319                           fsr0l	equ	0xFE9
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           plusw2	equ	0xFDB
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _D_PWM_Strobe *****************
  4332 ;; Defined at:
  4333 ;;		line 398 in file "Drivers/PWM_Driver.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4347 ;;      Params:         0       0       0       0       0       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4350 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4351 ;;Total ram usage:        0 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:   12
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_handle_message
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text18
  4362  002350                     __ptext18:
  4363                           	opt stack 0
  4364  002350                     _D_PWM_Strobe:
  4365                           	opt stack 17
  4366                           
  4367                           ;PWM_Driver.c: 399: if (state != Disabled) {
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;incstack = 0
  4371  002350  0E05               	movlw	5
  4372  002352  182E               	xorwf	_state,w,c
  4373  002354  B4D8               	btfsc	status,2,c
  4374  002356  0012               	return	
  4375                           
  4376                           ;PWM_Driver.c: 400: state = Strobe;
  4377  002358  0E02               	movlw	2
  4378  00235A  6E2E               	movwf	_state,c
  4379  00235C  0012               	return	
  4380  00235E                     __end_of_D_PWM_Strobe:
  4381                           	opt stack 0
  4382                           tblptru	equ	0xFF8
  4383                           tblptrh	equ	0xFF7
  4384                           tblptrl	equ	0xFF6
  4385                           tablat	equ	0xFF5
  4386                           prodh	equ	0xFF4
  4387                           prodl	equ	0xFF3
  4388                           intcon	equ	0xFF2
  4389                           intcon2	equ	0xFF1
  4390                           postinc0	equ	0xFEE
  4391                           plusw0	equ	0xFEB
  4392                           fsr0h	equ	0xFEA
  4393                           fsr0l	equ	0xFE9
  4394                           wreg	equ	0xFE8
  4395                           postdec1	equ	0xFE5
  4396                           fsr1l	equ	0xFE1
  4397                           indf2	equ	0xFDF
  4398                           postinc2	equ	0xFDE
  4399                           postdec2	equ	0xFDD
  4400                           plusw2	equ	0xFDB
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _D_PWM_Smooth *****************
  4406 ;; Defined at:
  4407 ;;		line 410 in file "Drivers/PWM_Driver.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4421 ;;      Params:         0       0       0       0       0       0       0       0       0
  4422 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4424 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4425 ;;Total ram usage:        0 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:   12
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_handle_message
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text19
  4436  00235E                     __ptext19:
  4437                           	opt stack 0
  4438  00235E                     _D_PWM_Smooth:
  4439                           	opt stack 17
  4440                           
  4441                           ;PWM_Driver.c: 411: if (state != Disabled) {
  4442                           
  4443                           ;incstack = 0
  4444  00235E  0E05               	movlw	5
  4445  002360  182E               	xorwf	_state,w,c
  4446  002362  B4D8               	btfsc	status,2,c
  4447  002364  0012               	return	
  4448                           
  4449                           ;PWM_Driver.c: 412: state = Smooth;
  4450  002366  0E04               	movlw	4
  4451  002368  6E2E               	movwf	_state,c
  4452  00236A  0012               	return	
  4453  00236C                     __end_of_D_PWM_Smooth:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           intcon	equ	0xFF2
  4462                           intcon2	equ	0xFF1
  4463                           postinc0	equ	0xFEE
  4464                           plusw0	equ	0xFEB
  4465                           fsr0h	equ	0xFEA
  4466                           fsr0l	equ	0xFE9
  4467                           wreg	equ	0xFE8
  4468                           postdec1	equ	0xFE5
  4469                           fsr1l	equ	0xFE1
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           plusw2	equ	0xFDB
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function _D_PWM_SetRGB *****************
  4479 ;; Defined at:
  4480 ;;		line 353 in file "Drivers/PWM_Driver.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  r               1    wreg     unsigned char 
  4483 ;;  g               1   44[BANK0 ] unsigned char 
  4484 ;;  b               1   45[BANK0 ] unsigned char 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  r               1   46[BANK0 ] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4496 ;;      Params:         0       2       0       0       0       0       0       0       0
  4497 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4499 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4500 ;;Total ram usage:        3 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:   14
  4503 ;; This function calls:
  4504 ;;		_setRGB
  4505 ;; This function is called by:
  4506 ;;		_main
  4507 ;;		_handle_message
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text20
  4512  002278                     __ptext20:
  4513                           	opt stack 0
  4514  002278                     _D_PWM_SetRGB:
  4515                           	opt stack 15
  4516                           
  4517                           ;incstack = 0
  4518                           ;D_PWM_SetRGB@r stored from wreg
  4519  002278  0100               	movlb	0	; () banked
  4520  00227A  6F8E               	movwf	D_PWM_SetRGB@r& (0+255),b
  4521                           
  4522                           ;PWM_Driver.c: 354: setRGB(r, g, b);
  4523  00227C  C08C  F089         	movff	D_PWM_SetRGB@g,setRGB@g
  4524  002280  C08D  F08A         	movff	D_PWM_SetRGB@b,setRGB@b
  4525  002284  0100               	movlb	0	; () banked
  4526  002286  518E               	movf	D_PWM_SetRGB@r& (0+255),w,b
  4527  002288  EC2A  F011         	call	_setRGB
  4528                           
  4529                           ;PWM_Driver.c: 355: if (state != Disabled) {
  4530  00228C  0E05               	movlw	5
  4531  00228E  182E               	xorwf	_state,w,c
  4532  002290  B4D8               	btfsc	status,2,c
  4533  002292  0012               	return	
  4534                           
  4535                           ;PWM_Driver.c: 356: state = Color;
  4536  002294  0E00               	movlw	0
  4537  002296  6E2E               	movwf	_state,c
  4538  002298  0012               	return	
  4539  00229A                     __end_of_D_PWM_SetRGB:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           intcon2	equ	0xFF1
  4549                           postinc0	equ	0xFEE
  4550                           plusw0	equ	0xFEB
  4551                           fsr0h	equ	0xFEA
  4552                           fsr0l	equ	0xFE9
  4553                           wreg	equ	0xFE8
  4554                           postdec1	equ	0xFE5
  4555                           fsr1l	equ	0xFE1
  4556                           indf2	equ	0xFDF
  4557                           postinc2	equ	0xFDE
  4558                           postdec2	equ	0xFDD
  4559                           plusw2	equ	0xFDB
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _setRGB *****************
  4565 ;; Defined at:
  4566 ;;		line 43 in file "Drivers/PWM_Driver.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  r               1    wreg     unsigned char 
  4569 ;;  g               1   41[BANK0 ] unsigned char 
  4570 ;;  b               1   42[BANK0 ] unsigned char 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  r               1   43[BANK0 ] unsigned char 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  1    wreg      void 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4582 ;;      Params:         0       2       0       0       0       0       0       0       0
  4583 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4585 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4586 ;;Total ram usage:        3 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:   13
  4589 ;; This function calls:
  4590 ;;		_D_PWM_SetDuty
  4591 ;; This function is called by:
  4592 ;;		_D_PWM_SetRGB
  4593 ;;		_strobe
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text21
  4598  002254                     __ptext21:
  4599                           	opt stack 0
  4600  002254                     _setRGB:
  4601                           	opt stack 15
  4602                           
  4603                           ;incstack = 0
  4604                           ;setRGB@r stored from wreg
  4605  002254  0100               	movlb	0	; () banked
  4606  002256  6F8B               	movwf	setRGB@r& (0+255),b
  4607                           
  4608                           ;PWM_Driver.c: 44: D_PWM_SetDuty(0, r);
  4609  002258  C08B  F087         	movff	setRGB@r,D_PWM_SetDuty@duty
  4610  00225C  0E00               	movlw	0
  4611  00225E  ECBE  F010         	call	_D_PWM_SetDuty
  4612                           
  4613                           ;PWM_Driver.c: 45: D_PWM_SetDuty(1, g);
  4614  002262  C089  F087         	movff	setRGB@g,D_PWM_SetDuty@duty
  4615  002266  0E01               	movlw	1
  4616  002268  ECBE  F010         	call	_D_PWM_SetDuty
  4617                           
  4618                           ;PWM_Driver.c: 46: D_PWM_SetDuty(2, b);
  4619  00226C  C08A  F087         	movff	setRGB@b,D_PWM_SetDuty@duty
  4620  002270  0E02               	movlw	2
  4621  002272  ECBE  F010         	call	_D_PWM_SetDuty
  4622  002276  0012               	return		;funcret
  4623  002278                     __end_of_setRGB:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon2	equ	0xFF1
  4633                           postinc0	equ	0xFEE
  4634                           plusw0	equ	0xFEB
  4635                           fsr0h	equ	0xFEA
  4636                           fsr0l	equ	0xFE9
  4637                           wreg	equ	0xFE8
  4638                           postdec1	equ	0xFE5
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           plusw2	equ	0xFDB
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _D_PWM_SetDuty *****************
  4649 ;; Defined at:
  4650 ;;		line 337 in file "Drivers/PWM_Driver.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  which           1    wreg     unsigned char 
  4653 ;;  duty            1   39[BANK0 ] unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  which           1   40[BANK0 ] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      void 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4665 ;;      Params:         0       1       0       0       0       0       0       0       0
  4666 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4668 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:   12
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_setRGB
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text22
  4680  00217C                     __ptext22:
  4681                           	opt stack 0
  4682  00217C                     _D_PWM_SetDuty:
  4683                           	opt stack 15
  4684                           
  4685                           ;incstack = 0
  4686                           ;D_PWM_SetDuty@which stored from wreg
  4687  00217C  0100               	movlb	0	; () banked
  4688  00217E  6F88               	movwf	D_PWM_SetDuty@which& (0+255),b
  4689                           
  4690                           ;PWM_Driver.c: 338: switch(which) {
  4691  002180  D009               	goto	l2250
  4692  002182                     l358:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;PWM_Driver.c: 340: PWM_Red.duty_val = duty;
  4696  002182  C087  F0CD         	movff	D_PWM_SetDuty@duty,_PWM_Red+1
  4697                           
  4698                           ;PWM_Driver.c: 341: break;
  4699  002186  0012               	return	
  4700  002188                     l360:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;PWM_Driver.c: 344: PWM_Green.duty_val = duty;
  4704  002188  C087  F0CB         	movff	D_PWM_SetDuty@duty,_PWM_Green+1
  4705                           
  4706                           ;PWM_Driver.c: 345: break;
  4707  00218C  0012               	return	
  4708  00218E                     l361:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;PWM_Driver.c: 348: PWM_Blue.duty_val = duty;
  4712  00218E  C087  F0C9         	movff	D_PWM_SetDuty@duty,_PWM_Blue+1
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;PWM_Driver.c: 350: }
  4716                           
  4717                           ;PWM_Driver.c: 349: break;
  4718  002192  0012               	return	
  4719  002194                     l2250:
  4720  002194  0100               	movlb	0	; () banked
  4721  002196  5188               	movf	D_PWM_SetDuty@which& (0+255),w,b
  4722                           
  4723                           ; Switch size 1, requested type "space"
  4724                           ; Number of cases is 3, Range of values is 0 to 2
  4725                           ; switch strategies available:
  4726                           ; Name         Instructions Cycles
  4727                           ; simple_byte           10     6 (average)
  4728                           ;	Chosen strategy is simple_byte
  4729  002198  0A00               	xorlw	0	; case 0
  4730  00219A  B4D8               	btfsc	status,2,c
  4731  00219C  D7F2               	goto	l358
  4732  00219E  0A01               	xorlw	1	; case 1
  4733  0021A0  B4D8               	btfsc	status,2,c
  4734  0021A2  D7F2               	goto	l360
  4735  0021A4  0A03               	xorlw	3	; case 2
  4736  0021A6  A4D8               	btfss	status,2,c
  4737  0021A8  0012               	return	
  4738  0021AA  D7F1               	goto	l361
  4739  0021AC                     __end_of_D_PWM_SetDuty:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon2	equ	0xFF1
  4749                           postinc0	equ	0xFEE
  4750                           plusw0	equ	0xFEB
  4751                           fsr0h	equ	0xFEA
  4752                           fsr0l	equ	0xFE9
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _D_PWM_ScaleUp *****************
  4765 ;; Defined at:
  4766 ;;		line 378 in file "Drivers/PWM_Driver.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:   12
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_handle_message
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text23
  4795  002392                     __ptext23:
  4796                           	opt stack 0
  4797  002392                     _D_PWM_ScaleUp:
  4798                           	opt stack 17
  4799                           
  4800                           ;PWM_Driver.c: 379: if (scale < 7) {
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;incstack = 0
  4804  002392  0E07               	movlw	7
  4805  002394  602D               	cpfslt	_scale,c
  4806  002396  0012               	return	
  4807                           
  4808                           ;PWM_Driver.c: 380: scale++;
  4809  002398  2A2D               	incf	_scale,f,c
  4810  00239A  0012               	return	
  4811  00239C                     __end_of_D_PWM_ScaleUp:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           plusw0	equ	0xFEB
  4823                           fsr0h	equ	0xFEA
  4824                           fsr0l	equ	0xFE9
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           plusw2	equ	0xFDB
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function _D_PWM_ScaleDown *****************
  4837 ;; Defined at:
  4838 ;;		line 372 in file "Drivers/PWM_Driver.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:   12
  4859 ;; This function calls:
  4860 ;;		Nothing
  4861 ;; This function is called by:
  4862 ;;		_handle_message
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text24
  4867  00239C                     __ptext24:
  4868                           	opt stack 0
  4869  00239C                     _D_PWM_ScaleDown:
  4870                           	opt stack 17
  4871                           
  4872                           ;PWM_Driver.c: 373: if (scale > 0) {
  4873                           
  4874                           ;incstack = 0
  4875  00239C  502D               	movf	_scale,w,c
  4876  00239E  B4D8               	btfsc	status,2,c
  4877  0023A0  0012               	return	
  4878                           
  4879                           ;PWM_Driver.c: 374: scale--;
  4880  0023A2  062D               	decf	_scale,f,c
  4881  0023A4  0012               	return	
  4882  0023A6                     __end_of_D_PWM_ScaleDown:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           intcon2	equ	0xFF1
  4892                           postinc0	equ	0xFEE
  4893                           plusw0	equ	0xFEB
  4894                           fsr0h	equ	0xFEA
  4895                           fsr0l	equ	0xFE9
  4896                           wreg	equ	0xFE8
  4897                           postdec1	equ	0xFE5
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           plusw2	equ	0xFDB
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _D_PWM_GetState *****************
  4908 ;; Defined at:
  4909 ;;		line 388 in file "Drivers/PWM_Driver.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      unsigned char 
  4916 ;; Registers used:
  4917 ;;		wreg, status,2
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:   12
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_handle_message
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text25
  4938  0023C8                     __ptext25:
  4939                           	opt stack 0
  4940  0023C8                     _D_PWM_GetState:
  4941                           	opt stack 17
  4942                           
  4943                           ;PWM_Driver.c: 389: return state;
  4944                           
  4945                           ;incstack = 0
  4946  0023C8  502E               	movf	_state,w,c
  4947  0023CA  0012               	return	
  4948  0023CC                     __end_of_D_PWM_GetState:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           intcon2	equ	0xFF1
  4958                           postinc0	equ	0xFEE
  4959                           plusw0	equ	0xFEB
  4960                           fsr0h	equ	0xFEA
  4961                           fsr0l	equ	0xFE9
  4962                           wreg	equ	0xFE8
  4963                           postdec1	equ	0xFE5
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           plusw2	equ	0xFDB
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _D_PWM_GetScale *****************
  4974 ;; Defined at:
  4975 ;;		line 384 in file "Drivers/PWM_Driver.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      unsigned char 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4989 ;;      Params:         0       0       0       0       0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4992 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4993 ;;Total ram usage:        0 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:   12
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_handle_message
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text26
  5004  0023CC                     __ptext26:
  5005                           	opt stack 0
  5006  0023CC                     _D_PWM_GetScale:
  5007                           	opt stack 17
  5008                           
  5009                           ;PWM_Driver.c: 385: return scale;
  5010                           
  5011                           ;incstack = 0
  5012  0023CC  502D               	movf	_scale,w,c
  5013  0023CE  0012               	return	
  5014  0023D0                     __end_of_D_PWM_GetScale:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           prodh	equ	0xFF4
  5021                           prodl	equ	0xFF3
  5022                           intcon	equ	0xFF2
  5023                           intcon2	equ	0xFF1
  5024                           postinc0	equ	0xFEE
  5025                           plusw0	equ	0xFEB
  5026                           fsr0h	equ	0xFEA
  5027                           fsr0l	equ	0xFE9
  5028                           wreg	equ	0xFE8
  5029                           postdec1	equ	0xFE5
  5030                           fsr1l	equ	0xFE1
  5031                           indf2	equ	0xFDF
  5032                           postinc2	equ	0xFDE
  5033                           postdec2	equ	0xFDD
  5034                           plusw2	equ	0xFDB
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function _D_PWM_GetRed *****************
  5040 ;; Defined at:
  5041 ;;		line 360 in file "Drivers/PWM_Driver.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      unsigned char 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5055 ;;      Params:         0       0       0       0       0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5058 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5059 ;;Total ram usage:        0 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:   12
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_handle_message
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text27
  5070  0023B0                     __ptext27:
  5071                           	opt stack 0
  5072  0023B0                     _D_PWM_GetRed:
  5073                           	opt stack 17
  5074                           
  5075                           ;PWM_Driver.c: 361: return PWM_Red.duty_val;
  5076                           
  5077                           ;incstack = 0
  5078  0023B0  0100               	movlb	0	; () banked
  5079  0023B2  51CD               	movf	(_PWM_Red+1)& (0+255),w,b
  5080  0023B4  0012               	return	
  5081  0023B6                     __end_of_D_PWM_GetRed:
  5082                           	opt stack 0
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           intcon2	equ	0xFF1
  5091                           postinc0	equ	0xFEE
  5092                           plusw0	equ	0xFEB
  5093                           fsr0h	equ	0xFEA
  5094                           fsr0l	equ	0xFE9
  5095                           wreg	equ	0xFE8
  5096                           postdec1	equ	0xFE5
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           postdec2	equ	0xFDD
  5101                           plusw2	equ	0xFDB
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function _D_PWM_GetGreen *****************
  5107 ;; Defined at:
  5108 ;;		line 364 in file "Drivers/PWM_Driver.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;		None
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;		None
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      unsigned char 
  5115 ;; Registers used:
  5116 ;;		wreg, status,2
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0
  5123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5125 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5126 ;;Total ram usage:        0 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:   12
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_handle_message
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text28
  5137  0023B6                     __ptext28:
  5138                           	opt stack 0
  5139  0023B6                     _D_PWM_GetGreen:
  5140                           	opt stack 17
  5141                           
  5142                           ;PWM_Driver.c: 365: return PWM_Green.duty_val;
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;incstack = 0
  5146  0023B6  0100               	movlb	0	; () banked
  5147  0023B8  51CB               	movf	(_PWM_Green+1)& (0+255),w,b
  5148  0023BA  0012               	return	
  5149  0023BC                     __end_of_D_PWM_GetGreen:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           intcon	equ	0xFF2
  5158                           intcon2	equ	0xFF1
  5159                           postinc0	equ	0xFEE
  5160                           plusw0	equ	0xFEB
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           postdec1	equ	0xFE5
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _D_PWM_GetBlue *****************
  5175 ;; Defined at:
  5176 ;;		line 368 in file "Drivers/PWM_Driver.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      unsigned char 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:   12
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_handle_message
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           	psect	text29
  5205  0023BC                     __ptext29:
  5206                           	opt stack 0
  5207  0023BC                     _D_PWM_GetBlue:
  5208                           	opt stack 17
  5209                           
  5210                           ;PWM_Driver.c: 369: return PWM_Blue.duty_val;
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;incstack = 0
  5214  0023BC  0100               	movlb	0	; () banked
  5215  0023BE  51C9               	movf	(_PWM_Blue+1)& (0+255),w,b
  5216  0023C0  0012               	return	
  5217  0023C2                     __end_of_D_PWM_GetBlue:
  5218                           	opt stack 0
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon2	equ	0xFF1
  5227                           postinc0	equ	0xFEE
  5228                           plusw0	equ	0xFEB
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           postdec1	equ	0xFE5
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           plusw2	equ	0xFDB
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _D_PWM_Flash *****************
  5243 ;; Defined at:
  5244 ;;		line 392 in file "Drivers/PWM_Driver.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0
  5259 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5261 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5262 ;;Total ram usage:        0 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:   12
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_handle_message
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text30
  5273  00236C                     __ptext30:
  5274                           	opt stack 0
  5275  00236C                     _D_PWM_Flash:
  5276                           	opt stack 17
  5277                           
  5278                           ;PWM_Driver.c: 393: if (state != Disabled) {
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;incstack = 0
  5282  00236C  0E05               	movlw	5
  5283  00236E  182E               	xorwf	_state,w,c
  5284  002370  B4D8               	btfsc	status,2,c
  5285  002372  0012               	return	
  5286                           
  5287                           ;PWM_Driver.c: 394: state = Flash;
  5288  002374  0E01               	movlw	1
  5289  002376  6E2E               	movwf	_state,c
  5290  002378  0012               	return	
  5291  00237A                     __end_of_D_PWM_Flash:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon	equ	0xFF2
  5300                           intcon2	equ	0xFF1
  5301                           postinc0	equ	0xFEE
  5302                           plusw0	equ	0xFEB
  5303                           fsr0h	equ	0xFEA
  5304                           fsr0l	equ	0xFE9
  5305                           wreg	equ	0xFE8
  5306                           postdec1	equ	0xFE5
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           plusw2	equ	0xFDB
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _D_PWM_Fade *****************
  5317 ;; Defined at:
  5318 ;;		line 404 in file "Drivers/PWM_Driver.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5332 ;;      Params:         0       0       0       0       0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5335 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5336 ;;Total ram usage:        0 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:   12
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_handle_message
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text31
  5347  00237A                     __ptext31:
  5348                           	opt stack 0
  5349  00237A                     _D_PWM_Fade:
  5350                           	opt stack 17
  5351                           
  5352                           ;PWM_Driver.c: 405: if (state != Disabled) {
  5353                           
  5354                           ;incstack = 0
  5355  00237A  0E05               	movlw	5
  5356  00237C  182E               	xorwf	_state,w,c
  5357  00237E  B4D8               	btfsc	status,2,c
  5358  002380  0012               	return	
  5359                           
  5360                           ;PWM_Driver.c: 406: state = Fade;
  5361  002382  0E03               	movlw	3
  5362  002384  6E2E               	movwf	_state,c
  5363  002386  0012               	return	
  5364  002388                     __end_of_D_PWM_Fade:
  5365                           	opt stack 0
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           intcon	equ	0xFF2
  5373                           intcon2	equ	0xFF1
  5374                           postinc0	equ	0xFEE
  5375                           plusw0	equ	0xFEB
  5376                           fsr0h	equ	0xFEA
  5377                           fsr0l	equ	0xFE9
  5378                           wreg	equ	0xFE8
  5379                           postdec1	equ	0xFE5
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           plusw2	equ	0xFDB
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _D_PWM_Enable *****************
  5390 ;; Defined at:
  5391 ;;		line 326 in file "Drivers/PWM_Driver.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  enable          1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  enable          1   42[BANK0 ] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0
  5406 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5408 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5409 ;;Total ram usage:        1 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:   13
  5412 ;; This function calls:
  5413 ;;		_D_TIMER0_Enable
  5414 ;;		_pwmColors
  5415 ;; This function is called by:
  5416 ;;		_initialize
  5417 ;;		_handle_message
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text32
  5422  0021AC                     __ptext32:
  5423                           	opt stack 0
  5424  0021AC                     _D_PWM_Enable:
  5425                           	opt stack 16
  5426                           
  5427                           ;incstack = 0
  5428                           ;D_PWM_Enable@enable stored from wreg
  5429  0021AC  0100               	movlb	0	; () banked
  5430  0021AE  6F8A               	movwf	D_PWM_Enable@enable& (0+255),b
  5431                           
  5432                           ;PWM_Driver.c: 327: if (enable) {
  5433  0021B0  0100               	movlb	0	; () banked
  5434  0021B2  518A               	movf	D_PWM_Enable@enable& (0+255),w,b
  5435  0021B4  0100               	movlb	0	; () banked
  5436  0021B6  B4D8               	btfsc	status,2,c
  5437  0021B8  D003               	goto	l352
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;PWM_Driver.c: 328: state = saved_state;
  5441  0021BA  C02C  F02E         	movff	_saved_state,_state
  5442                           
  5443                           ;PWM_Driver.c: 329: } else {
  5444  0021BE  D007               	goto	l2800
  5445  0021C0                     l352:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;PWM_Driver.c: 330: saved_state = state;
  5449  0021C0  C02E  F02C         	movff	_state,_saved_state
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;PWM_Driver.c: 331: state = Disabled;
  5453  0021C4  0E05               	movlw	5
  5454  0021C6  6E2E               	movwf	_state,c
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;PWM_Driver.c: 332: pwmColors(scale);
  5458  0021C8  502D               	movf	_scale,w,c
  5459  0021CA  EC95  F00B         	call	_pwmColors
  5460  0021CE                     l2800:
  5461                           
  5462                           ;PWM_Driver.c: 333: }
  5463                           ;PWM_Driver.c: 334: D_TIMER0_Enable(enable);
  5464  0021CE  0100               	movlb	0	; () banked
  5465  0021D0  518A               	movf	D_PWM_Enable@enable& (0+255),w,b
  5466  0021D2  EC4D  F011         	call	_D_TIMER0_Enable
  5467  0021D6  0012               	return		;funcret
  5468  0021D8                     __end_of_D_PWM_Enable:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           intcon2	equ	0xFF1
  5478                           postinc0	equ	0xFEE
  5479                           plusw0	equ	0xFEB
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           postdec1	equ	0xFE5
  5484                           fsr1l	equ	0xFE1
  5485                           indf2	equ	0xFDF
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           plusw2	equ	0xFDB
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _pwmColors *****************
  5494 ;; Defined at:
  5495 ;;		line 49 in file "Drivers/PWM_Driver.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  birghtness      1    wreg     unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  birghtness      1   41[BANK0 ] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0
  5510 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5511 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5512 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5513 ;;Total ram usage:        3 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:   12
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_D_PWM_Enable
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text33
  5524  00172A                     __ptext33:
  5525                           	opt stack 0
  5526  00172A                     _pwmColors:
  5527                           	opt stack 16
  5528                           
  5529                           ;incstack = 0
  5530                           ;pwmColors@birghtness stored from wreg
  5531  00172A  0100               	movlb	0	; () banked
  5532  00172C  6F89               	movwf	pwmColors@birghtness& (0+255),b
  5533                           
  5534                           ;PWM_Driver.c: 51: if (state != Disabled) {
  5535  00172E  0E05               	movlw	5
  5536  001730  182E               	xorwf	_state,w,c
  5537  001732  B4D8               	btfsc	status,2,c
  5538  001734  D05B               	goto	l233
  5539                           
  5540                           ;PWM_Driver.c: 52: if (PWM_Red.duty_cnt >= (PWM_Red.duty_val >> (7-birghtness))) {
  5541  001736  0100               	movlb	0	; () banked
  5542  001738  5189               	movf	pwmColors@birghtness& (0+255),w,b
  5543  00173A  0800               	sublw	0
  5544  00173C  0100               	movlb	0	; () banked
  5545  00173E  6F87               	movwf	??_pwmColors& (0+255),b
  5546  001740  0E07               	movlw	7
  5547  001742  0100               	movlb	0	; () banked
  5548  001744  2787               	addwf	??_pwmColors& (0+255),f,b
  5549  001746  C0CD  F088         	movff	_PWM_Red+1,??_pwmColors+1
  5550  00174A  0100               	movlb	0	; () banked
  5551  00174C  2B87               	incf	??_pwmColors& (0+255),f,b
  5552  00174E  D003               	goto	u1774
  5553  001750                     u1775:
  5554  001750  0100               	movlb	0	; () banked
  5555  001752  90D8               	bcf	status,0,c
  5556  001754  3388               	rrcf	(??_pwmColors+1)& (0+255),f,b
  5557  001756                     u1774:
  5558  001756  0100               	movlb	0	; () banked
  5559  001758  2F87               	decfsz	??_pwmColors& (0+255),f,b
  5560  00175A  D7FA               	goto	u1775
  5561  00175C  0100               	movlb	0	; () banked
  5562  00175E  5188               	movf	(??_pwmColors+1)& (0+255),w,b
  5563  001760  0100               	movlb	0	; () banked
  5564  001762  5DCC               	subwf	_PWM_Red& (0+255),w,b
  5565  001764  A0D8               	btfss	status,0,c
  5566  001766  D002               	goto	l234
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;PWM_Driver.c: 53: PORTBbits.RB2 = 0;
  5570  001768  9481               	bcf	3969,2,c	;volatile
  5571                           
  5572                           ;PWM_Driver.c: 54: } else {
  5573  00176A  D001               	goto	l2466
  5574  00176C                     l234:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;PWM_Driver.c: 55: PORTBbits.RB2 = 1;
  5578  00176C  8481               	bsf	3969,2,c	;volatile
  5579  00176E                     l2466:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;PWM_Driver.c: 56: }
  5583                           ;PWM_Driver.c: 58: if (PWM_Green.duty_cnt >= (PWM_Green.duty_val >> (7-birghtness))) {
  5584  00176E  0100               	movlb	0	; () banked
  5585  001770  5189               	movf	pwmColors@birghtness& (0+255),w,b
  5586  001772  0800               	sublw	0
  5587  001774  0100               	movlb	0	; () banked
  5588  001776  6F87               	movwf	??_pwmColors& (0+255),b
  5589  001778  0E07               	movlw	7
  5590  00177A  0100               	movlb	0	; () banked
  5591  00177C  2787               	addwf	??_pwmColors& (0+255),f,b
  5592  00177E  C0CB  F088         	movff	_PWM_Green+1,??_pwmColors+1
  5593  001782  0100               	movlb	0	; () banked
  5594  001784  2B87               	incf	??_pwmColors& (0+255),f,b
  5595  001786  D003               	goto	u1794
  5596  001788                     u1795:
  5597  001788  0100               	movlb	0	; () banked
  5598  00178A  90D8               	bcf	status,0,c
  5599  00178C  3388               	rrcf	(??_pwmColors+1)& (0+255),f,b
  5600  00178E                     u1794:
  5601  00178E  0100               	movlb	0	; () banked
  5602  001790  2F87               	decfsz	??_pwmColors& (0+255),f,b
  5603  001792  D7FA               	goto	u1795
  5604  001794  0100               	movlb	0	; () banked
  5605  001796  5188               	movf	(??_pwmColors+1)& (0+255),w,b
  5606  001798  0100               	movlb	0	; () banked
  5607  00179A  5DCA               	subwf	_PWM_Green& (0+255),w,b
  5608  00179C  A0D8               	btfss	status,0,c
  5609  00179E  D002               	goto	l236
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;PWM_Driver.c: 59: PORTBbits.RB3 = 0;
  5613  0017A0  9681               	bcf	3969,3,c	;volatile
  5614                           
  5615                           ;PWM_Driver.c: 60: } else {
  5616  0017A2  D001               	goto	l2470
  5617  0017A4                     l236:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;PWM_Driver.c: 61: PORTBbits.RB3 = 1;
  5621  0017A4  8681               	bsf	3969,3,c	;volatile
  5622  0017A6                     l2470:
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;PWM_Driver.c: 62: }
  5626                           ;PWM_Driver.c: 64: if (PWM_Blue.duty_cnt >= (PWM_Blue.duty_val >> (7-birghtness))) {
  5627  0017A6  0100               	movlb	0	; () banked
  5628  0017A8  5189               	movf	pwmColors@birghtness& (0+255),w,b
  5629  0017AA  0800               	sublw	0
  5630  0017AC  0100               	movlb	0	; () banked
  5631  0017AE  6F87               	movwf	??_pwmColors& (0+255),b
  5632  0017B0  0E07               	movlw	7
  5633  0017B2  0100               	movlb	0	; () banked
  5634  0017B4  2787               	addwf	??_pwmColors& (0+255),f,b
  5635  0017B6  C0C9  F088         	movff	_PWM_Blue+1,??_pwmColors+1
  5636  0017BA  0100               	movlb	0	; () banked
  5637  0017BC  2B87               	incf	??_pwmColors& (0+255),f,b
  5638  0017BE  D003               	goto	u1814
  5639  0017C0                     u1815:
  5640  0017C0  0100               	movlb	0	; () banked
  5641  0017C2  90D8               	bcf	status,0,c
  5642  0017C4  3388               	rrcf	(??_pwmColors+1)& (0+255),f,b
  5643  0017C6                     u1814:
  5644  0017C6  0100               	movlb	0	; () banked
  5645  0017C8  2F87               	decfsz	??_pwmColors& (0+255),f,b
  5646  0017CA  D7FA               	goto	u1815
  5647  0017CC  0100               	movlb	0	; () banked
  5648  0017CE  5188               	movf	(??_pwmColors+1)& (0+255),w,b
  5649  0017D0  0100               	movlb	0	; () banked
  5650  0017D2  5DC8               	subwf	_PWM_Blue& (0+255),w,b
  5651  0017D4  A0D8               	btfss	status,0,c
  5652  0017D6  D002               	goto	l238
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;PWM_Driver.c: 65: PORTBbits.RB1 = 0;
  5656  0017D8  9281               	bcf	3969,1,c	;volatile
  5657                           
  5658                           ;PWM_Driver.c: 66: } else {
  5659  0017DA  D001               	goto	l2474
  5660  0017DC                     l238:
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;PWM_Driver.c: 67: PORTBbits.RB1 = 1;
  5664  0017DC  8281               	bsf	3969,1,c	;volatile
  5665  0017DE                     l2474:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;PWM_Driver.c: 68: }
  5669                           ;PWM_Driver.c: 71: PWM_Red.duty_cnt++;
  5670  0017DE  0100               	movlb	0	; () banked
  5671  0017E0  2BCC               	incf	_PWM_Red& (0+255),f,b
  5672                           
  5673                           ;PWM_Driver.c: 72: PWM_Green.duty_cnt++;
  5674  0017E2  0100               	movlb	0	; () banked
  5675  0017E4  2BCA               	incf	_PWM_Green& (0+255),f,b
  5676                           
  5677                           ;PWM_Driver.c: 73: PWM_Blue.duty_cnt++;
  5678  0017E6  0100               	movlb	0	; () banked
  5679  0017E8  2BC8               	incf	_PWM_Blue& (0+255),f,b
  5680                           
  5681                           ;PWM_Driver.c: 74: } else {
  5682  0017EA  0012               	return	
  5683  0017EC                     l233:
  5684                           
  5685                           ;PWM_Driver.c: 75: PORTBbits.RB2 = 0;
  5686  0017EC  9481               	bcf	3969,2,c	;volatile
  5687                           
  5688                           ;PWM_Driver.c: 76: PORTBbits.RB3 = 0;
  5689  0017EE  9681               	bcf	3969,3,c	;volatile
  5690                           
  5691                           ;PWM_Driver.c: 77: PORTBbits.RB1 = 0;
  5692  0017F0  9281               	bcf	3969,1,c	;volatile
  5693  0017F2  0012               	return	
  5694  0017F4                     __end_of_pwmColors:
  5695                           	opt stack 0
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           intcon	equ	0xFF2
  5703                           intcon2	equ	0xFF1
  5704                           postinc0	equ	0xFEE
  5705                           plusw0	equ	0xFEB
  5706                           fsr0h	equ	0xFEA
  5707                           fsr0l	equ	0xFE9
  5708                           wreg	equ	0xFE8
  5709                           postdec1	equ	0xFE5
  5710                           fsr1l	equ	0xFE1
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           plusw2	equ	0xFDB
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function _D_TIMER0_Enable *****************
  5720 ;; Defined at:
  5721 ;;		line 61 in file "Drivers/TIMER0_Driver.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  enable          1    wreg     unsigned char 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  enable          1   39[BANK0 ] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      void 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5735 ;;      Params:         0       0       0       0       0       0       0       0       0
  5736 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5738 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5739 ;;Total ram usage:        1 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:   12
  5742 ;; This function calls:
  5743 ;;		Nothing
  5744 ;; This function is called by:
  5745 ;;		_D_TIMER0_Init
  5746 ;;		_D_PWM_Init
  5747 ;;		_D_PWM_Enable
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text34
  5752  00229A                     __ptext34:
  5753                           	opt stack 0
  5754  00229A                     _D_TIMER0_Enable:
  5755                           	opt stack 15
  5756                           
  5757                           ;incstack = 0
  5758                           ;D_TIMER0_Enable@enable stored from wreg
  5759  00229A  0100               	movlb	0	; () banked
  5760  00229C  6F87               	movwf	D_TIMER0_Enable@enable& (0+255),b
  5761                           
  5762                           ;TIMER0_Driver.c: 62: if (enable) {
  5763  00229E  0100               	movlb	0	; () banked
  5764  0022A0  5187               	movf	D_TIMER0_Enable@enable& (0+255),w,b
  5765  0022A2  0100               	movlb	0	; () banked
  5766  0022A4  B4D8               	btfsc	status,2,c
  5767  0022A6  D005               	goto	l50
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;TIMER0_Driver.c: 63: T0CONbits.TMR0ON = 1;
  5771  0022A8  8ED5               	bsf	4053,7,c	;volatile
  5772                           
  5773                           ;TIMER0_Driver.c: 64: INTCONbits.TMR0IE = 1;
  5774  0022AA  8AF2               	bsf	intcon,5,c	;volatile
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;TIMER0_Driver.c: 65: D_TIMER0_Flag = 0;
  5778  0022AC  0E00               	movlw	0
  5779  0022AE  6E28               	movwf	_D_TIMER0_Flag,c
  5780                           
  5781                           ;TIMER0_Driver.c: 66: } else {
  5782  0022B0  0012               	return	
  5783  0022B2                     l50:
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;TIMER0_Driver.c: 67: T0CONbits.TMR0ON = 0;
  5787  0022B2  9ED5               	bcf	4053,7,c	;volatile
  5788                           
  5789                           ;TIMER0_Driver.c: 68: INTCONbits.TMR0IE = 0;
  5790  0022B4  9AF2               	bcf	intcon,5,c	;volatile
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;TIMER0_Driver.c: 69: D_TIMER0_Flag = 0;
  5794  0022B6  0E00               	movlw	0
  5795  0022B8  6E28               	movwf	_D_TIMER0_Flag,c
  5796  0022BA  0012               	return	
  5797  0022BC                     __end_of_D_TIMER0_Enable:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon2	equ	0xFF1
  5807                           postinc0	equ	0xFEE
  5808                           plusw0	equ	0xFEB
  5809                           fsr0h	equ	0xFEA
  5810                           fsr0l	equ	0xFE9
  5811                           wreg	equ	0xFE8
  5812                           postdec1	equ	0xFE5
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           plusw2	equ	0xFDB
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _D_UART_ReadBlock *****************
  5823 ;; Defined at:
  5824 ;;		line 307 in file "Drivers/UART_Driver.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  cnt             1    wreg     unsigned char 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  cnt             1   46[BANK0 ] unsigned char 
  5829 ;;  cm             17   47[BANK0 ] struct .
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  6   39[BANK0 ] struct .
  5832 ;; Registers used:
  5833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5839 ;;      Params:         0       7       0       0       0       0       0       0       0
  5840 ;;      Locals:         0      18       0       0       0       0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5842 ;;      Totals:         0      25       0       0       0       0       0       0       0
  5843 ;;Total ram usage:       25 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:   12
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text35
  5854  001F92                     __ptext35:
  5855                           	opt stack 0
  5856  001F92                     _D_UART_ReadBlock:
  5857                           	opt stack 18
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;incstack = 0
  5861                           ;D_UART_ReadBlock@cnt stored from wreg
  5862  001F92  0100               	movlb	0	; () banked
  5863  001F94  6F8E               	movwf	D_UART_ReadBlock@cnt& (0+255),b
  5864                           
  5865                           ;UART_Driver.c: 308: READ_ComMes cm = readBuffer.comMes[cnt];
  5866  001F96  0100               	movlb	0	; () banked
  5867  001F98  518E               	movf	D_UART_ReadBlock@cnt& (0+255),w,b
  5868  001F9A  0D11               	mullw	17
  5869  001F9C  0E0A               	movlw	low (_readBuffer+10)
  5870  001F9E  24F3               	addwf	prodl,w,c
  5871  001FA0  6ED9               	movwf	fsr2l,c
  5872  001FA2  0E01               	movlw	high (_readBuffer+10)
  5873  001FA4  20F4               	addwfc	prodh,w,c
  5874  001FA6  6EDA               	movwf	fsr2h,c
  5875  001FA8  EE10  F08F         	lfsr	1,D_UART_ReadBlock@cm
  5876  001FAC  0E10               	movlw	16
  5877  001FAE                     u2611:
  5878  001FAE  CFDB FFE3          	movff	plusw2,plusw1
  5879  001FB2  06E8               	decf	wreg,f,c
  5880  001FB4  E2FC               	bc	u2611
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;UART_Driver.c: 309: readData.sender = readBuffer.sender;
  5884  001FB6  0E04               	movlw	low (_readBuffer+4)
  5885  001FB8  0100               	movlb	0	; () banked
  5886  001FBA  6FC2               	movwf	_readData& (0+255),b
  5887  001FBC  0E01               	movlw	high (_readBuffer+4)
  5888  001FBE  0100               	movlb	0	; () banked
  5889  001FC0  6FC3               	movwf	(_readData+1)& (0+255),b
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;UART_Driver.c: 310: readData.command = cm.command;
  5893  001FC2  0E8F               	movlw	low D_UART_ReadBlock@cm
  5894  001FC4  0100               	movlb	0	; () banked
  5895  001FC6  6FC4               	movwf	(_readData+2)& (0+255),b
  5896  001FC8  0E00               	movlw	high D_UART_ReadBlock@cm
  5897  001FCA  0100               	movlb	0	; () banked
  5898  001FCC  6FC5               	movwf	(_readData+3)& (0+255),b
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;UART_Driver.c: 311: readData.message = cm.message;
  5902  001FCE  0E95               	movlw	low (D_UART_ReadBlock@cm+6)
  5903  001FD0  0100               	movlb	0	; () banked
  5904  001FD2  6FC6               	movwf	(_readData+4)& (0+255),b
  5905  001FD4  0E00               	movlw	high (D_UART_ReadBlock@cm+6)
  5906  001FD6  0100               	movlb	0	; () banked
  5907  001FD8  6FC7               	movwf	(_readData+5)& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;UART_Driver.c: 312: return readData;
  5911  001FDA  EE20  F0C2         	lfsr	2,_readData
  5912  001FDE  EE00  F087         	lfsr	0,?_D_UART_ReadBlock
  5913  001FE2  0E05               	movlw	5
  5914  001FE4                     u2621:
  5915  001FE4  CFDB FFEB          	movff	plusw2,plusw0
  5916  001FE8  06E8               	decf	wreg,f,c
  5917  001FEA  E2FC               	bc	u2621
  5918  001FEC  0012               	return	
  5919  001FEE                     __end_of_D_UART_ReadBlock:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           intcon	equ	0xFF2
  5928                           intcon2	equ	0xFF1
  5929                           postinc0	equ	0xFEE
  5930                           plusw0	equ	0xFEB
  5931                           fsr0h	equ	0xFEA
  5932                           fsr0l	equ	0xFE9
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           plusw1	equ	0xFE3
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           plusw2	equ	0xFDB
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945 ;; *************** function _D_UART_Read *****************
  5946 ;; Defined at:
  5947 ;;		line 299 in file "Drivers/UART_Driver.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;		None
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  cm             17   45[BANK0 ] struct .
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  6   39[BANK0 ] struct .
  5954 ;; Registers used:
  5955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5961 ;;      Params:         0       6       0       0       0       0       0       0       0
  5962 ;;      Locals:         0      17       0       0       0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5964 ;;      Totals:         0      23       0       0       0       0       0       0       0
  5965 ;;Total ram usage:       23 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:   12
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_main
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text36
  5976  0020F4                     __ptext36:
  5977                           	opt stack 0
  5978  0020F4                     _D_UART_Read:
  5979                           	opt stack 18
  5980                           
  5981                           ;UART_Driver.c: 300: READ_ComMes cm = readBuffer.comMes[0];
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;incstack = 0
  5985  0020F4  EE21  F00A         	lfsr	2,_readBuffer+10
  5986  0020F8  EE10  F08D         	lfsr	1,D_UART_Read@cm
  5987  0020FC  0E10               	movlw	16
  5988  0020FE                     u2591:
  5989  0020FE  CFDB FFE3          	movff	plusw2,plusw1
  5990  002102  06E8               	decf	wreg,f,c
  5991  002104  E2FC               	bc	u2591
  5992                           
  5993                           ;UART_Driver.c: 301: readData.sender = readBuffer.sender;
  5994  002106  0E04               	movlw	low (_readBuffer+4)
  5995  002108  0100               	movlb	0	; () banked
  5996  00210A  6FC2               	movwf	_readData& (0+255),b
  5997  00210C  0E01               	movlw	high (_readBuffer+4)
  5998  00210E  0100               	movlb	0	; () banked
  5999  002110  6FC3               	movwf	(_readData+1)& (0+255),b
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;UART_Driver.c: 302: readData.command = cm.command;
  6003  002112  0E8D               	movlw	low D_UART_Read@cm
  6004  002114  0100               	movlb	0	; () banked
  6005  002116  6FC4               	movwf	(_readData+2)& (0+255),b
  6006  002118  0E00               	movlw	high D_UART_Read@cm
  6007  00211A  0100               	movlb	0	; () banked
  6008  00211C  6FC5               	movwf	(_readData+3)& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;UART_Driver.c: 303: readData.message = cm.message;
  6012  00211E  0E93               	movlw	low (D_UART_Read@cm+6)
  6013  002120  0100               	movlb	0	; () banked
  6014  002122  6FC6               	movwf	(_readData+4)& (0+255),b
  6015  002124  0E00               	movlw	high (D_UART_Read@cm+6)
  6016  002126  0100               	movlb	0	; () banked
  6017  002128  6FC7               	movwf	(_readData+5)& (0+255),b
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;UART_Driver.c: 304: return readData;
  6021  00212A  EE20  F0C2         	lfsr	2,_readData
  6022  00212E  EE00  F087         	lfsr	0,?_D_UART_Read
  6023  002132  0E05               	movlw	5
  6024  002134                     u2601:
  6025  002134  CFDB FFEB          	movff	plusw2,plusw0
  6026  002138  06E8               	decf	wreg,f,c
  6027  00213A  E2FC               	bc	u2601
  6028  00213C  0012               	return	
  6029  00213E                     __end_of_D_UART_Read:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           intcon	equ	0xFF2
  6038                           intcon2	equ	0xFF1
  6039                           postinc0	equ	0xFEE
  6040                           plusw0	equ	0xFEB
  6041                           fsr0h	equ	0xFEA
  6042                           fsr0l	equ	0xFE9
  6043                           wreg	equ	0xFE8
  6044                           postdec1	equ	0xFE5
  6045                           plusw1	equ	0xFE3
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           plusw2	equ	0xFDB
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _D_UART_BlockLength *****************
  6056 ;; Defined at:
  6057 ;;		line 315 in file "Drivers/UART_Driver.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;		None
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;		None
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      unsigned char 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0
  6072 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6074 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6075 ;;Total ram usage:        0 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:   12
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text37
  6086  0023C2                     __ptext37:
  6087                           	opt stack 0
  6088  0023C2                     _D_UART_BlockLength:
  6089                           	opt stack 18
  6090                           
  6091                           ;UART_Driver.c: 316: return readBuffer.blockLength;
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;incstack = 0
  6095  0023C2  0101               	movlb	1	; () banked
  6096  0023C4  5103               	movf	(_readBuffer+3)& (0+255),w,b
  6097  0023C6  0012               	return	
  6098  0023C8                     __end_of_D_UART_BlockLength:
  6099                           	opt stack 0
  6100                           tblptru	equ	0xFF8
  6101                           tblptrh	equ	0xFF7
  6102                           tblptrl	equ	0xFF6
  6103                           tablat	equ	0xFF5
  6104                           prodh	equ	0xFF4
  6105                           prodl	equ	0xFF3
  6106                           intcon	equ	0xFF2
  6107                           intcon2	equ	0xFF1
  6108                           postinc0	equ	0xFEE
  6109                           plusw0	equ	0xFEB
  6110                           fsr0h	equ	0xFEA
  6111                           fsr0l	equ	0xFE9
  6112                           wreg	equ	0xFE8
  6113                           postdec1	equ	0xFE5
  6114                           plusw1	equ	0xFE3
  6115                           fsr1l	equ	0xFE1
  6116                           indf2	equ	0xFDF
  6117                           postinc2	equ	0xFDE
  6118                           postdec2	equ	0xFDD
  6119                           plusw2	equ	0xFDB
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _LowISR *****************
  6125 ;; Defined at:
  6126 ;;		line 361 in file "Drivers/UART_Driver.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6142 ;;      Temps:          0      17       0       0       0       0       0       0       0
  6143 ;;      Totals:         0      17       0       0       0       0       0       0       0
  6144 ;;Total ram usage:       17 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:   11
  6147 ;; This function calls:
  6148 ;;		_fillDataBuffer
  6149 ;;		_readByte
  6150 ;; This function is called by:
  6151 ;;		Interrupt level 1
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	intcodelo
  6156  000018                     __pintcodelo:
  6157                           	opt stack 0
  6158  000018                     _LowISR:
  6159                           	opt stack 13
  6160                           
  6161                           ; BSR set to: 1
  6162                           ;incstack = 0
  6163  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6164  00001A  CFD8 F076          	movff	status,??_LowISR
  6165  00001E  CFE8 F077          	movff	wreg,??_LowISR+1
  6166  000022  CFE0 F078          	movff	bsr,??_LowISR+2
  6167  000026  CFFA F079          	movff	pclath,??_LowISR+3
  6168  00002A  CFFB F07A          	movff	pclatu,??_LowISR+4
  6169  00002E  CFE9 F07B          	movff	fsr0l,??_LowISR+5
  6170  000032  CFEA F07C          	movff	fsr0h,??_LowISR+6
  6171  000036  CFE1 F07D          	movff	fsr1l,??_LowISR+7
  6172  00003A  CFE2 F07E          	movff	fsr1h,??_LowISR+8
  6173  00003E  CFD9 F07F          	movff	fsr2l,??_LowISR+9
  6174  000042  CFDA F080          	movff	fsr2h,??_LowISR+10
  6175  000046  CFF3 F081          	movff	prodl,??_LowISR+11
  6176  00004A  CFF4 F082          	movff	prodh,??_LowISR+12
  6177  00004E  CFF6 F083          	movff	tblptrl,??_LowISR+13
  6178  000052  CFF7 F084          	movff	tblptrh,??_LowISR+14
  6179  000056  CFF8 F085          	movff	tblptru,??_LowISR+15
  6180  00005A  CFF5 F086          	movff	tablat,??_LowISR+16
  6181                           
  6182                           ;UART_Driver.c: 362: if (PIR1bits.RC1IF) {
  6183  00005E  AA9E               	btfss	3998,5,c	;volatile
  6184  000060  D005               	goto	i1l197
  6185                           
  6186                           ;UART_Driver.c: 363: fillDataBuffer(readByte());
  6187  000062  EC02  F011         	call	_readByte	;wreg free
  6188  000066  ECF2  F005         	call	_fillDataBuffer
  6189                           
  6190                           ;UART_Driver.c: 364: PIR1bits.RC1IF = 0;
  6191  00006A  9A9E               	bcf	3998,5,c	;volatile
  6192  00006C                     i1l197:
  6193  00006C  C086  FFF5         	movff	??_LowISR+16,tablat
  6194  000070  C085  FFF8         	movff	??_LowISR+15,tblptru
  6195  000074  C084  FFF7         	movff	??_LowISR+14,tblptrh
  6196  000078  C083  FFF6         	movff	??_LowISR+13,tblptrl
  6197  00007C  C082  FFF4         	movff	??_LowISR+12,prodh
  6198  000080  C081  FFF3         	movff	??_LowISR+11,prodl
  6199  000084  C080  FFDA         	movff	??_LowISR+10,fsr2h
  6200  000088  C07F  FFD9         	movff	??_LowISR+9,fsr2l
  6201  00008C  C07E  FFE2         	movff	??_LowISR+8,fsr1h
  6202  000090  C07D  FFE1         	movff	??_LowISR+7,fsr1l
  6203  000094  C07C  FFEA         	movff	??_LowISR+6,fsr0h
  6204  000098  C07B  FFE9         	movff	??_LowISR+5,fsr0l
  6205  00009C  C07A  FFFB         	movff	??_LowISR+4,pclatu
  6206  0000A0  C079  FFFA         	movff	??_LowISR+3,pclath
  6207  0000A4  C078  FFE0         	movff	??_LowISR+2,bsr
  6208  0000A8  C077  FFE8         	movff	??_LowISR+1,wreg
  6209  0000AC  C076  FFD8         	movff	??_LowISR,status
  6210  0000B0  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6211  0000B2  0010               	retfie	
  6212  0000B4                     __end_of_LowISR:
  6213                           	opt stack 0
  6214                           pclatu	equ	0xFFB
  6215                           pclath	equ	0xFFA
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           intcon	equ	0xFF2
  6223                           intcon2	equ	0xFF1
  6224                           postinc0	equ	0xFEE
  6225                           plusw0	equ	0xFEB
  6226                           fsr0h	equ	0xFEA
  6227                           fsr0l	equ	0xFE9
  6228                           wreg	equ	0xFE8
  6229                           postdec1	equ	0xFE5
  6230                           plusw1	equ	0xFE3
  6231                           fsr1h	equ	0xFE2
  6232                           fsr1l	equ	0xFE1
  6233                           bsr	equ	0xFE0
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _readByte *****************
  6243 ;; Defined at:
  6244 ;;		line 90 in file "Drivers/UART_Driver.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  dum             1   26[COMRAM] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      unsigned char 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0
  6259 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6261 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6262 ;;Total ram usage:        1 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    6
  6265 ;; This function calls:
  6266 ;;		i1_D_UART_Enable
  6267 ;; This function is called by:
  6268 ;;		_LowISR
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text39
  6273  002204                     __ptext39:
  6274                           	opt stack 0
  6275  002204                     _readByte:
  6276                           	opt stack 17
  6277                           
  6278                           ;UART_Driver.c: 91: if(RCSTAbits.FERR == 1) {
  6279                           
  6280                           ;incstack = 0
  6281  002204  A4AB               	btfss	4011,2,c	;volatile
  6282  002206  D004               	goto	i1l113
  6283                           
  6284                           ;UART_Driver.c: 92: uint8_t dum = RCREG;
  6285  002208  CFAE F01B          	movff	4014,readByte@dum	;volatile
  6286                           
  6287                           ;UART_Driver.c: 93: return 0;
  6288  00220C  0E00               	movlw	0
  6289  00220E  0012               	return	
  6290  002210                     i1l113:
  6291                           
  6292                           ;UART_Driver.c: 94: }
  6293                           ;UART_Driver.c: 95: if(RCSTAbits.OERR == 1) {
  6294  002210  A2AB               	btfss	4011,1,c	;volatile
  6295  002212  D00B               	goto	i1l3412
  6296                           
  6297                           ;UART_Driver.c: 96: D_UART_Enable(0);
  6298  002214  0E00               	movlw	0
  6299  002216  EC6F  F011         	call	i1_D_UART_Enable
  6300                           
  6301                           ;UART_Driver.c: 97: _delay((unsigned long)((10)*(48000000/4000000.0)));
  6302  00221A  0E28               	movlw	40
  6303  00221C                     i1u336_27:
  6304  00221C  2EE8               	decfsz	wreg,f,c
  6305  00221E  D7FE               	bra	i1u336_27
  6306                           
  6307                           ;UART_Driver.c: 98: D_UART_Enable(1);
  6308  002220  0E01               	movlw	1
  6309  002222  EC6F  F011         	call	i1_D_UART_Enable
  6310                           
  6311                           ;UART_Driver.c: 99: return 0;
  6312  002226  0E00               	movlw	0
  6313  002228  0012               	return	
  6314  00222A                     i1l3412:
  6315                           
  6316                           ;UART_Driver.c: 100: }
  6317                           ;UART_Driver.c: 101: return RCREG;
  6318  00222A  50AE               	movf	4014,w,c	;volatile
  6319  00222C  0012               	return	
  6320  00222E                     __end_of_readByte:
  6321                           	opt stack 0
  6322                           pclatu	equ	0xFFB
  6323                           pclath	equ	0xFFA
  6324                           tblptru	equ	0xFF8
  6325                           tblptrh	equ	0xFF7
  6326                           tblptrl	equ	0xFF6
  6327                           tablat	equ	0xFF5
  6328                           prodh	equ	0xFF4
  6329                           prodl	equ	0xFF3
  6330                           intcon	equ	0xFF2
  6331                           intcon2	equ	0xFF1
  6332                           postinc0	equ	0xFEE
  6333                           plusw0	equ	0xFEB
  6334                           fsr0h	equ	0xFEA
  6335                           fsr0l	equ	0xFE9
  6336                           wreg	equ	0xFE8
  6337                           postdec1	equ	0xFE5
  6338                           plusw1	equ	0xFE3
  6339                           fsr1h	equ	0xFE2
  6340                           fsr1l	equ	0xFE1
  6341                           bsr	equ	0xFE0
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _fillDataBuffer *****************
  6351 ;; Defined at:
  6352 ;;		line 107 in file "Drivers/UART_Driver.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  data            1    wreg     unsigned char 
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  data            1   21[BANK0 ] unsigned char 
  6357 ;;  i               1   20[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0
  6368 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6370 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6371 ;;Total ram usage:        2 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:   10
  6374 ;; This function calls:
  6375 ;;		_acknowledge
  6376 ;; This function is called by:
  6377 ;;		_LowISR
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text40
  6382  000BE4                     __ptext40:
  6383                           	opt stack 0
  6384  000BE4                     _fillDataBuffer:
  6385                           	opt stack 13
  6386                           
  6387                           ;incstack = 0
  6388                           ;fillDataBuffer@data stored from wreg
  6389  000BE4  0100               	movlb	0	; () banked
  6390  000BE6  6F75               	movwf	fillDataBuffer@data& (0+255),b
  6391                           
  6392                           ;UART_Driver.c: 108: switch(readBuffer.state) {
  6393  000BE8  D14C               	goto	i1l3532
  6394  000BEA                     i1l3418:
  6395                           
  6396                           ;UART_Driver.c: 110: if(data == 0x26) {
  6397  000BEA  0E26               	movlw	38
  6398  000BEC  0100               	movlb	0	; () banked
  6399  000BEE  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6400  000BF0  A4D8               	btfss	status,2,c
  6401  000BF2  D01A               	goto	i1l3422
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;UART_Driver.c: 111: readBuffer.typeCnt = 0;
  6405  000BF4  0E00               	movlw	0
  6406  000BF6  0101               	movlb	1	; () banked
  6407  000BF8  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6408                           
  6409                           ;UART_Driver.c: 112: readBuffer.blockLength = 0;
  6410  000BFA  0E00               	movlw	0
  6411  000BFC  0101               	movlb	1	; () banked
  6412  000BFE  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6413                           
  6414                           ;UART_Driver.c: 113: blockLength = 0;
  6415  000C00  0E00               	movlw	0
  6416  000C02  6E2A               	movwf	_blockLength,c
  6417                           
  6418                           ;UART_Driver.c: 114: readBuffer.senderCnt = 0;
  6419  000C04  0E00               	movlw	0
  6420  000C06  0101               	movlb	1	; () banked
  6421  000C08  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6422                           
  6423                           ;UART_Driver.c: 115: bufferCnt = 0;
  6424  000C0A  0E00               	movlw	0
  6425  000C0C  6E2B               	movwf	_bufferCnt,c
  6426                           
  6427                           ;UART_Driver.c: 116: comMes.commandCnt = 0;
  6428  000C0E  0E00               	movlw	0
  6429  000C10  0100               	movlb	0	; () banked
  6430  000C12  6FB6               	movwf	(_comMes+5)& (0+255),b
  6431                           
  6432                           ;UART_Driver.c: 117: comMes.messageCnt = 0;
  6433  000C14  0E00               	movlw	0
  6434  000C16  0100               	movlb	0	; () banked
  6435  000C18  6FC1               	movwf	(_comMes+16)& (0+255),b
  6436                           
  6437                           ;UART_Driver.c: 118: D_UART_ReadFlag = 0;
  6438  000C1A  0E00               	movlw	0
  6439  000C1C  0100               	movlb	0	; () banked
  6440  000C1E  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  6441                           
  6442                           ;UART_Driver.c: 119: readBuffer.state = 0x01;
  6443  000C20  0E01               	movlw	1
  6444  000C22  0101               	movlb	1	; () banked
  6445  000C24  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6446                           
  6447                           ;UART_Driver.c: 120: } else {
  6448  000C26  0012               	return	
  6449  000C28                     i1l3422:
  6450                           
  6451                           ;UART_Driver.c: 121: readBuffer.state = 0x00;
  6452  000C28  0E00               	movlw	0
  6453  000C2A  0101               	movlb	1	; () banked
  6454  000C2C  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;UART_Driver.c: 123: }
  6458                           ;UART_Driver.c: 124: break;
  6459                           
  6460                           ; BSR set to: 1
  6461                           ;UART_Driver.c: 122: return;
  6462  000C2E  0012               	return	
  6463  000C30                     i1l3426:
  6464                           
  6465                           ; BSR set to: 1
  6466                           ;UART_Driver.c: 127: if (data == 0x3A) {
  6467  000C30  0E3A               	movlw	58
  6468  000C32  0100               	movlb	0	; () banked
  6469  000C34  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6470  000C36  A4D8               	btfss	status,2,c
  6471  000C38  D00F               	goto	i1l3432
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;UART_Driver.c: 128: readBuffer.state = 0x02;
  6475  000C3A  0E02               	movlw	2
  6476  000C3C  0101               	movlb	1	; () banked
  6477  000C3E  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6478                           
  6479                           ; BSR set to: 1
  6480                           ;UART_Driver.c: 129: readBuffer.type[readBuffer.typeCnt] = '\0';
  6481  000C40  0101               	movlb	1	; () banked
  6482  000C42  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6483  000C44  0D01               	mullw	1
  6484  000C46  0E00               	movlw	low _readBuffer
  6485  000C48  24F3               	addwf	prodl,w,c
  6486  000C4A  6ED9               	movwf	fsr2l,c
  6487  000C4C  0E01               	movlw	high _readBuffer
  6488  000C4E  20F4               	addwfc	prodh,w,c
  6489  000C50  6EDA               	movwf	fsr2h,c
  6490  000C52  0E00               	movlw	0
  6491  000C54  6EDF               	movwf	indf2,c
  6492                           
  6493                           ;UART_Driver.c: 130: } else {
  6494  000C56  0012               	return	
  6495  000C58                     i1l3432:
  6496                           
  6497                           ;UART_Driver.c: 131: readBuffer.type[readBuffer.typeCnt] = data;
  6498  000C58  0101               	movlb	1	; () banked
  6499  000C5A  5102               	movf	(_readBuffer+2)& (0+255),w,b
  6500  000C5C  0D01               	mullw	1
  6501  000C5E  0E00               	movlw	low _readBuffer
  6502  000C60  24F3               	addwf	prodl,w,c
  6503  000C62  6ED9               	movwf	fsr2l,c
  6504  000C64  0E01               	movlw	high _readBuffer
  6505  000C66  20F4               	addwfc	prodh,w,c
  6506  000C68  6EDA               	movwf	fsr2h,c
  6507  000C6A  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6508                           
  6509                           ; BSR set to: 1
  6510                           ;UART_Driver.c: 132: readBuffer.typeCnt++;
  6511  000C6E  0101               	movlb	1	; () banked
  6512  000C70  2B02               	incf	(_readBuffer+2)& (0+255),f,b
  6513                           
  6514                           ; BSR set to: 1
  6515                           ;UART_Driver.c: 133: if(readBuffer.typeCnt > 10) {
  6516  000C72  0E0A               	movlw	10
  6517  000C74  0101               	movlb	1	; () banked
  6518  000C76  6502               	cpfsgt	(_readBuffer+2)& (0+255),b
  6519  000C78  0012               	return	
  6520                           
  6521                           ; BSR set to: 1
  6522                           ;UART_Driver.c: 134: readBuffer.typeCnt = 0;
  6523  000C7A  0E00               	movlw	0
  6524  000C7C  0101               	movlb	1	; () banked
  6525  000C7E  6F02               	movwf	(_readBuffer+2)& (0+255),b
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;UART_Driver.c: 135: }
  6529                           ;UART_Driver.c: 136: }
  6530                           ;UART_Driver.c: 137: break;
  6531                           
  6532                           ; BSR set to: 1
  6533  000C80  0012               	return	
  6534  000C82                     i1l3440:
  6535                           
  6536                           ; BSR set to: 1
  6537                           ;UART_Driver.c: 140: if (data == 0x3A) {
  6538  000C82  0E3A               	movlw	58
  6539  000C84  0100               	movlb	0	; () banked
  6540  000C86  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6541  000C88  A4D8               	btfss	status,2,c
  6542  000C8A  D00F               	goto	i1l3446
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;UART_Driver.c: 141: readBuffer.state = 0x03;
  6546  000C8C  0E03               	movlw	3
  6547  000C8E  0101               	movlb	1	; () banked
  6548  000C90  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6549                           
  6550                           ; BSR set to: 1
  6551                           ;UART_Driver.c: 142: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6552  000C92  0101               	movlb	1	; () banked
  6553  000C94  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6554  000C96  0D01               	mullw	1
  6555  000C98  0E04               	movlw	low (_readBuffer+4)
  6556  000C9A  24F3               	addwf	prodl,w,c
  6557  000C9C  6ED9               	movwf	fsr2l,c
  6558  000C9E  0E01               	movlw	high (_readBuffer+4)
  6559  000CA0  20F4               	addwfc	prodh,w,c
  6560  000CA2  6EDA               	movwf	fsr2h,c
  6561  000CA4  0E00               	movlw	0
  6562  000CA6  6EDF               	movwf	indf2,c
  6563                           
  6564                           ;UART_Driver.c: 143: } else {
  6565  000CA8  0012               	return	
  6566  000CAA                     i1l3446:
  6567                           
  6568                           ;UART_Driver.c: 144: readBuffer.sender[readBuffer.senderCnt] = data;
  6569  000CAA  0101               	movlb	1	; () banked
  6570  000CAC  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6571  000CAE  0D01               	mullw	1
  6572  000CB0  0E04               	movlw	low (_readBuffer+4)
  6573  000CB2  24F3               	addwf	prodl,w,c
  6574  000CB4  6ED9               	movwf	fsr2l,c
  6575  000CB6  0E01               	movlw	high (_readBuffer+4)
  6576  000CB8  20F4               	addwfc	prodh,w,c
  6577  000CBA  6EDA               	movwf	fsr2h,c
  6578  000CBC  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6579                           
  6580                           ; BSR set to: 1
  6581                           ;UART_Driver.c: 145: readBuffer.senderCnt++;
  6582  000CC0  0101               	movlb	1	; () banked
  6583  000CC2  2B09               	incf	(_readBuffer+9)& (0+255),f,b
  6584                           
  6585                           ; BSR set to: 1
  6586                           ;UART_Driver.c: 146: if(readBuffer.senderCnt > 50) {
  6587  000CC4  0E32               	movlw	50
  6588  000CC6  0101               	movlb	1	; () banked
  6589  000CC8  6509               	cpfsgt	(_readBuffer+9)& (0+255),b
  6590  000CCA  0012               	return	
  6591                           
  6592                           ; BSR set to: 1
  6593                           ;UART_Driver.c: 147: readBuffer.senderCnt = 0;
  6594  000CCC  0E00               	movlw	0
  6595  000CCE  0101               	movlb	1	; () banked
  6596  000CD0  6F09               	movwf	(_readBuffer+9)& (0+255),b
  6597                           
  6598                           ; BSR set to: 1
  6599                           ;UART_Driver.c: 148: }
  6600                           ;UART_Driver.c: 149: }
  6601                           ;UART_Driver.c: 150: break;
  6602                           
  6603                           ; BSR set to: 1
  6604  000CD2  0012               	return	
  6605  000CD4                     i1l3454:
  6606                           
  6607                           ; BSR set to: 1
  6608                           ;UART_Driver.c: 153: if (data == 0x3A) {
  6609  000CD4  0E3A               	movlw	58
  6610  000CD6  0100               	movlb	0	; () banked
  6611  000CD8  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6612  000CDA  A4D8               	btfss	status,2,c
  6613  000CDC  D00F               	goto	i1l3460
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;UART_Driver.c: 154: readBuffer.state = 0x04;
  6617  000CDE  0E04               	movlw	4
  6618  000CE0  0101               	movlb	1	; () banked
  6619  000CE2  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6620                           
  6621                           ; BSR set to: 1
  6622                           ;UART_Driver.c: 155: readBuffer.sender[readBuffer.senderCnt] = '\0';
  6623  000CE4  0101               	movlb	1	; () banked
  6624  000CE6  5109               	movf	(_readBuffer+9)& (0+255),w,b
  6625  000CE8  0D01               	mullw	1
  6626  000CEA  0E04               	movlw	low (_readBuffer+4)
  6627  000CEC  24F3               	addwf	prodl,w,c
  6628  000CEE  6ED9               	movwf	fsr2l,c
  6629  000CF0  0E01               	movlw	high (_readBuffer+4)
  6630  000CF2  20F4               	addwfc	prodh,w,c
  6631  000CF4  6EDA               	movwf	fsr2h,c
  6632  000CF6  0E00               	movlw	0
  6633  000CF8  6EDF               	movwf	indf2,c
  6634                           
  6635                           ;UART_Driver.c: 156: } else {
  6636  000CFA  0012               	return	
  6637  000CFC                     i1l3460:
  6638                           
  6639                           ;UART_Driver.c: 157: readBuffer.blockLength = (data - 0x30);
  6640  000CFC  0100               	movlb	0	; () banked
  6641  000CFE  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6642  000D00  0FD0               	addlw	208
  6643  000D02  0101               	movlb	1	; () banked
  6644  000D04  6F03               	movwf	(_readBuffer+3)& (0+255),b
  6645                           
  6646                           ;UART_Driver.c: 158: blockLength = (data - 0x30);
  6647  000D06  0100               	movlb	0	; () banked
  6648  000D08  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6649  000D0A  0FD0               	addlw	208
  6650  000D0C  6E2A               	movwf	_blockLength,c
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;UART_Driver.c: 159: }
  6654                           ;UART_Driver.c: 160: break;
  6655  000D0E  0012               	return	
  6656  000D10                     i1l3462:
  6657                           
  6658                           ;UART_Driver.c: 163: if (data == 0x3A) {
  6659  000D10  0E3A               	movlw	58
  6660  000D12  0100               	movlb	0	; () banked
  6661  000D14  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6662  000D16  A4D8               	btfss	status,2,c
  6663  000D18  D00F               	goto	i1l3468
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;UART_Driver.c: 164: readBuffer.state = 0x05;
  6667  000D1A  0E05               	movlw	5
  6668  000D1C  0101               	movlb	1	; () banked
  6669  000D1E  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6670                           
  6671                           ; BSR set to: 1
  6672                           ;UART_Driver.c: 165: comMes.command[comMes.commandCnt] = '\0';
  6673  000D20  0100               	movlb	0	; () banked
  6674  000D22  51B6               	movf	(_comMes+5)& (0+255),w,b
  6675  000D24  0D01               	mullw	1
  6676  000D26  0EB1               	movlw	low _comMes
  6677  000D28  24F3               	addwf	prodl,w,c
  6678  000D2A  6ED9               	movwf	fsr2l,c
  6679  000D2C  0E00               	movlw	high _comMes
  6680  000D2E  20F4               	addwfc	prodh,w,c
  6681  000D30  6EDA               	movwf	fsr2h,c
  6682  000D32  0E00               	movlw	0
  6683  000D34  6EDF               	movwf	indf2,c
  6684                           
  6685                           ;UART_Driver.c: 166: } else {
  6686  000D36  0012               	return	
  6687  000D38                     i1l3468:
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;UART_Driver.c: 167: comMes.command[comMes.commandCnt] = data;
  6691  000D38  0100               	movlb	0	; () banked
  6692  000D3A  51B6               	movf	(_comMes+5)& (0+255),w,b
  6693  000D3C  0D01               	mullw	1
  6694  000D3E  0EB1               	movlw	low _comMes
  6695  000D40  24F3               	addwf	prodl,w,c
  6696  000D42  6ED9               	movwf	fsr2l,c
  6697  000D44  0E00               	movlw	high _comMes
  6698  000D46  20F4               	addwfc	prodh,w,c
  6699  000D48  6EDA               	movwf	fsr2h,c
  6700  000D4A  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;UART_Driver.c: 168: comMes.commandCnt++;
  6704  000D4E  0100               	movlb	0	; () banked
  6705  000D50  2BB6               	incf	(_comMes+5)& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;UART_Driver.c: 169: if(comMes.commandCnt > 50) {
  6709  000D52  0E32               	movlw	50
  6710  000D54  0100               	movlb	0	; () banked
  6711  000D56  65B6               	cpfsgt	(_comMes+5)& (0+255),b
  6712  000D58  0012               	return	
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;UART_Driver.c: 170: comMes.commandCnt = 0;
  6716  000D5A  0E00               	movlw	0
  6717  000D5C  0100               	movlb	0	; () banked
  6718  000D5E  6FB6               	movwf	(_comMes+5)& (0+255),b
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;UART_Driver.c: 171: }
  6722                           ;UART_Driver.c: 172: }
  6723                           ;UART_Driver.c: 173: break;
  6724                           
  6725                           ; BSR set to: 0
  6726  000D60  0012               	return	
  6727  000D62                     i1l3476:
  6728                           
  6729                           ;UART_Driver.c: 176: if (data == 0x3A) {
  6730  000D62  0E3A               	movlw	58
  6731  000D64  0100               	movlb	0	; () banked
  6732  000D66  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6733  000D68  A4D8               	btfss	status,2,c
  6734  000D6A  D05E               	goto	i1l3510
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;UART_Driver.c: 177: comMes.message[comMes.messageCnt] = '\0';
  6738  000D6C  0100               	movlb	0	; () banked
  6739  000D6E  51C1               	movf	(_comMes+16)& (0+255),w,b
  6740  000D70  0D01               	mullw	1
  6741  000D72  0EB7               	movlw	low (_comMes+6)
  6742  000D74  24F3               	addwf	prodl,w,c
  6743  000D76  6ED9               	movwf	fsr2l,c
  6744  000D78  0E00               	movlw	high (_comMes+6)
  6745  000D7A  20F4               	addwfc	prodh,w,c
  6746  000D7C  6EDA               	movwf	fsr2h,c
  6747  000D7E  0E00               	movlw	0
  6748  000D80  6EDF               	movwf	indf2,c
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;UART_Driver.c: 178: readBuffer.comMes[bufferCnt] = comMes;
  6752  000D82  EE20  F0B1         	lfsr	2,_comMes
  6753  000D86  502B               	movf	_bufferCnt,w,c
  6754  000D88  0D11               	mullw	17
  6755  000D8A  0E0A               	movlw	low (_readBuffer+10)
  6756  000D8C  24F3               	addwf	prodl,w,c
  6757  000D8E  6EE1               	movwf	fsr1l,c
  6758  000D90  0E01               	movlw	high (_readBuffer+10)
  6759  000D92  20F4               	addwfc	prodh,w,c
  6760  000D94  6EE2               	movwf	fsr1h,c
  6761  000D96  0E10               	movlw	16
  6762  000D98                     i1u324_21:
  6763  000D98  CFDB FFE3          	movff	plusw2,plusw1
  6764  000D9C  06E8               	decf	wreg,f,c
  6765  000D9E  E2FC               	bc	i1u324_21
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;UART_Driver.c: 179: uint8_t i = 0;
  6769  000DA0  0E00               	movlw	0
  6770  000DA2  0100               	movlb	0	; () banked
  6771  000DA4  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;UART_Driver.c: 180: for (i=0; i < comMes.commandCnt; i++) {
  6775  000DA6  0E00               	movlw	0
  6776  000DA8  0100               	movlb	0	; () banked
  6777  000DAA  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6778  000DAC  D00D               	goto	i1l3490
  6779  000DAE                     i1l3486:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;UART_Driver.c: 181: comMes.command[i] = 0;
  6783  000DAE  0100               	movlb	0	; () banked
  6784  000DB0  5174               	movf	fillDataBuffer@i& (0+255),w,b
  6785  000DB2  0D01               	mullw	1
  6786  000DB4  0EB1               	movlw	low _comMes
  6787  000DB6  24F3               	addwf	prodl,w,c
  6788  000DB8  6ED9               	movwf	fsr2l,c
  6789  000DBA  0E00               	movlw	high _comMes
  6790  000DBC  20F4               	addwfc	prodh,w,c
  6791  000DBE  6EDA               	movwf	fsr2h,c
  6792  000DC0  0E00               	movlw	0
  6793  000DC2  6EDF               	movwf	indf2,c
  6794                           
  6795                           ; BSR set to: 0
  6796  000DC4  0100               	movlb	0	; () banked
  6797  000DC6  2B74               	incf	fillDataBuffer@i& (0+255),f,b
  6798  000DC8                     i1l3490:
  6799                           
  6800                           ; BSR set to: 0
  6801  000DC8  0100               	movlb	0	; () banked
  6802  000DCA  51B6               	movf	(_comMes+5)& (0+255),w,b
  6803  000DCC  0100               	movlb	0	; () banked
  6804  000DCE  5D74               	subwf	fillDataBuffer@i& (0+255),w,b
  6805  000DD0  A0D8               	btfss	status,0,c
  6806  000DD2  D7ED               	goto	i1l3486
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;UART_Driver.c: 182: }
  6810                           ;UART_Driver.c: 183: for (i=0; i < comMes.messageCnt; i++) {
  6811                           
  6812                           ; BSR set to: 0
  6813  000DD4  0E00               	movlw	0
  6814  000DD6  0100               	movlb	0	; () banked
  6815  000DD8  6F74               	movwf	fillDataBuffer@i& (0+255),b
  6816  000DDA  D00D               	goto	i1l3498
  6817  000DDC                     i1l3494:
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;UART_Driver.c: 184: comMes.message[i] = 0;
  6821  000DDC  0100               	movlb	0	; () banked
  6822  000DDE  5174               	movf	fillDataBuffer@i& (0+255),w,b
  6823  000DE0  0D01               	mullw	1
  6824  000DE2  0EB7               	movlw	low (_comMes+6)
  6825  000DE4  24F3               	addwf	prodl,w,c
  6826  000DE6  6ED9               	movwf	fsr2l,c
  6827  000DE8  0E00               	movlw	high (_comMes+6)
  6828  000DEA  20F4               	addwfc	prodh,w,c
  6829  000DEC  6EDA               	movwf	fsr2h,c
  6830  000DEE  0E00               	movlw	0
  6831  000DF0  6EDF               	movwf	indf2,c
  6832                           
  6833                           ; BSR set to: 0
  6834  000DF2  0100               	movlb	0	; () banked
  6835  000DF4  2B74               	incf	fillDataBuffer@i& (0+255),f,b
  6836  000DF6                     i1l3498:
  6837                           
  6838                           ; BSR set to: 0
  6839  000DF6  0100               	movlb	0	; () banked
  6840  000DF8  51C1               	movf	(_comMes+16)& (0+255),w,b
  6841  000DFA  0100               	movlb	0	; () banked
  6842  000DFC  5D74               	subwf	fillDataBuffer@i& (0+255),w,b
  6843  000DFE  A0D8               	btfss	status,0,c
  6844  000E00  D7ED               	goto	i1l3494
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;UART_Driver.c: 185: }
  6848                           ;UART_Driver.c: 186: comMes.commandCnt = 0;
  6849                           
  6850                           ; BSR set to: 0
  6851  000E02  0E00               	movlw	0
  6852  000E04  0100               	movlb	0	; () banked
  6853  000E06  6FB6               	movwf	(_comMes+5)& (0+255),b
  6854                           
  6855                           ;UART_Driver.c: 187: comMes.messageCnt = 0;
  6856  000E08  0E00               	movlw	0
  6857  000E0A  0100               	movlb	0	; () banked
  6858  000E0C  6FC1               	movwf	(_comMes+16)& (0+255),b
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;UART_Driver.c: 188: blockLength--;
  6862  000E0E  062A               	decf	_blockLength,f,c
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;UART_Driver.c: 189: bufferCnt++;
  6866  000E10  2A2B               	incf	_bufferCnt,f,c
  6867                           
  6868                           ;UART_Driver.c: 190: if (blockLength == 0) {
  6869  000E12  502A               	movf	_blockLength,w,c
  6870  000E14  A4D8               	btfss	status,2,c
  6871  000E16  D004               	goto	i1l3508
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;UART_Driver.c: 191: readBuffer.state = 0x06;
  6875  000E18  0E06               	movlw	6
  6876  000E1A  0101               	movlb	1	; () banked
  6877  000E1C  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6878                           
  6879                           ;UART_Driver.c: 192: } else {
  6880  000E1E  0012               	return	
  6881  000E20                     i1l3508:
  6882                           
  6883                           ;UART_Driver.c: 193: readBuffer.state = 0x04;
  6884  000E20  0E04               	movlw	4
  6885  000E22  0101               	movlb	1	; () banked
  6886  000E24  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6887                           
  6888                           ; BSR set to: 1
  6889                           ;UART_Driver.c: 194: }
  6890                           ;UART_Driver.c: 195: } else {
  6891  000E26  0012               	return	
  6892  000E28                     i1l3510:
  6893                           
  6894                           ;UART_Driver.c: 196: comMes.message[comMes.messageCnt] = data;
  6895  000E28  0100               	movlb	0	; () banked
  6896  000E2A  51C1               	movf	(_comMes+16)& (0+255),w,b
  6897  000E2C  0D01               	mullw	1
  6898  000E2E  0EB7               	movlw	low (_comMes+6)
  6899  000E30  24F3               	addwf	prodl,w,c
  6900  000E32  6ED9               	movwf	fsr2l,c
  6901  000E34  0E00               	movlw	high (_comMes+6)
  6902  000E36  20F4               	addwfc	prodh,w,c
  6903  000E38  6EDA               	movwf	fsr2h,c
  6904  000E3A  C075  FFDF         	movff	fillDataBuffer@data,indf2
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;UART_Driver.c: 197: comMes.messageCnt++;
  6908  000E3E  0100               	movlb	0	; () banked
  6909  000E40  2BC1               	incf	(_comMes+16)& (0+255),f,b
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;UART_Driver.c: 198: if(comMes.messageCnt > 50) {
  6913  000E42  0E32               	movlw	50
  6914  000E44  0100               	movlb	0	; () banked
  6915  000E46  65C1               	cpfsgt	(_comMes+16)& (0+255),b
  6916  000E48  0012               	return	
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;UART_Driver.c: 199: comMes.messageCnt = 0;
  6920  000E4A  0E00               	movlw	0
  6921  000E4C  0100               	movlb	0	; () banked
  6922  000E4E  6FC1               	movwf	(_comMes+16)& (0+255),b
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;UART_Driver.c: 200: }
  6926                           ;UART_Driver.c: 201: }
  6927                           ;UART_Driver.c: 202: break;
  6928                           
  6929                           ; BSR set to: 0
  6930  000E50  0012               	return	
  6931  000E52                     i1l3518:
  6932                           
  6933                           ;UART_Driver.c: 205: if (data == 0x24) {
  6934  000E52  0E24               	movlw	36
  6935  000E54  0100               	movlb	0	; () banked
  6936  000E56  1975               	xorwf	fillDataBuffer@data& (0+255),w,b
  6937  000E58  A4D8               	btfss	status,2,c
  6938  000E5A  D009               	goto	i1l3526
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;UART_Driver.c: 206: acknowledge();
  6942  000E5C  ECCC  F00E         	call	_acknowledge	;wreg free
  6943                           
  6944                           ;UART_Driver.c: 207: readBuffer.state = 0x00;
  6945  000E60  0E00               	movlw	0
  6946  000E62  0101               	movlb	1	; () banked
  6947  000E64  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6948                           
  6949                           ; BSR set to: 1
  6950                           ;UART_Driver.c: 208: D_UART_ReadFlag = 1;
  6951  000E66  0E01               	movlw	1
  6952  000E68  0100               	movlb	0	; () banked
  6953  000E6A  6FCE               	movwf	_D_UART_ReadFlag& (0+255),b
  6954                           
  6955                           ;UART_Driver.c: 209: } else {
  6956  000E6C  0012               	return	
  6957  000E6E                     i1l3526:
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;UART_Driver.c: 210: readBuffer.readId = (data - 0x30);
  6961  000E6E  0100               	movlb	0	; () banked
  6962  000E70  5175               	movf	fillDataBuffer@data& (0+255),w,b
  6963  000E72  0FD0               	addlw	208
  6964  000E74  0101               	movlb	1	; () banked
  6965  000E76  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  6966                           
  6967                           ; BSR set to: 1
  6968                           ;UART_Driver.c: 211: }
  6969                           ;UART_Driver.c: 212: break;
  6970  000E78  0012               	return	
  6971  000E7A                     i1l3528:
  6972                           
  6973                           ; BSR set to: 1
  6974                           ;UART_Driver.c: 215: readBuffer.state = 0x00;
  6975  000E7A  0E00               	movlw	0
  6976  000E7C  0101               	movlb	1	; () banked
  6977  000E7E  6F3E               	movwf	(_readBuffer+62)& (0+255),b
  6978                           
  6979                           ; BSR set to: 1
  6980                           ;UART_Driver.c: 217: }
  6981                           
  6982                           ;UART_Driver.c: 216: break;
  6983  000E80  0012               	return	
  6984  000E82                     i1l3532:
  6985  000E82  0101               	movlb	1	; () banked
  6986  000E84  513E               	movf	(_readBuffer+62)& (0+255),w,b
  6987                           
  6988                           ; Switch size 1, requested type "space"
  6989                           ; Number of cases is 7, Range of values is 0 to 6
  6990                           ; switch strategies available:
  6991                           ; Name         Instructions Cycles
  6992                           ; simple_byte           22    12 (average)
  6993                           ;	Chosen strategy is simple_byte
  6994  000E86  0A00               	xorlw	0	; case 0
  6995  000E88  B4D8               	btfsc	status,2,c
  6996  000E8A  D6AF               	goto	i1l3418
  6997  000E8C  0A01               	xorlw	1	; case 1
  6998  000E8E  B4D8               	btfsc	status,2,c
  6999  000E90  D6CF               	goto	i1l3426
  7000  000E92  0A03               	xorlw	3	; case 2
  7001  000E94  B4D8               	btfsc	status,2,c
  7002  000E96  D6F5               	goto	i1l3440
  7003  000E98  0A01               	xorlw	1	; case 3
  7004  000E9A  B4D8               	btfsc	status,2,c
  7005  000E9C  D71B               	goto	i1l3454
  7006  000E9E  0A07               	xorlw	7	; case 4
  7007  000EA0  B4D8               	btfsc	status,2,c
  7008  000EA2  D736               	goto	i1l3462
  7009  000EA4  0A01               	xorlw	1	; case 5
  7010  000EA6  B4D8               	btfsc	status,2,c
  7011  000EA8  D75C               	goto	i1l3476
  7012  000EAA  0A03               	xorlw	3	; case 6
  7013  000EAC  B4D8               	btfsc	status,2,c
  7014  000EAE  D7D1               	goto	i1l3518
  7015  000EB0  D7E4               	goto	i1l3528
  7016  000EB2                     __end_of_fillDataBuffer:
  7017                           	opt stack 0
  7018                           pclatu	equ	0xFFB
  7019                           pclath	equ	0xFFA
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           intcon2	equ	0xFF1
  7028                           postinc0	equ	0xFEE
  7029                           plusw0	equ	0xFEB
  7030                           fsr0h	equ	0xFEA
  7031                           fsr0l	equ	0xFE9
  7032                           wreg	equ	0xFE8
  7033                           postdec1	equ	0xFE5
  7034                           plusw1	equ	0xFE3
  7035                           fsr1h	equ	0xFE2
  7036                           fsr1l	equ	0xFE1
  7037                           bsr	equ	0xFE0
  7038                           indf2	equ	0xFDF
  7039                           postinc2	equ	0xFDE
  7040                           postdec2	equ	0xFDD
  7041                           plusw2	equ	0xFDB
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _acknowledge *****************
  7047 ;; Defined at:
  7048 ;;		line 220 in file "Drivers/UART_Driver.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7065 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    9
  7069 ;; This function calls:
  7070 ;;		i1_printf
  7071 ;; This function is called by:
  7072 ;;		_fillDataBuffer
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text41
  7077  001D98                     __ptext41:
  7078                           	opt stack 0
  7079  001D98                     _acknowledge:
  7080                           	opt stack 13
  7081                           
  7082                           ;UART_Driver.c: 221: printf(startCharacter);
  7083                           
  7084                           ;incstack = 0
  7085  001D98  C040  F064         	movff	_startCharacter,i1printf@f
  7086  001D9C  C041  F065         	movff	_startCharacter+1,i1printf@f+1
  7087  001DA0  0100               	movlb	0	; () banked
  7088  001DA2  5164               	movf	i1printf@f& (0+255),w,b
  7089  001DA4  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  7090  001DA6  A4D8               	btfss	status,2,c
  7091  001DA8  0E00               	movlw	low (__mediumconst shr (0+16))
  7092  001DAA  6F66               	movwf	(i1printf@f+2)& (0+255),b
  7093  001DAC  EC8E  F008         	call	i1_printf	;wreg free
  7094                           
  7095                           ;UART_Driver.c: 223: printf(ackCharacter);
  7096  001DB0  C03C  F064         	movff	_ackCharacter,i1printf@f
  7097  001DB4  C03D  F065         	movff	_ackCharacter+1,i1printf@f+1
  7098  001DB8  0100               	movlb	0	; () banked
  7099  001DBA  5164               	movf	i1printf@f& (0+255),w,b
  7100  001DBC  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  7101  001DBE  A4D8               	btfss	status,2,c
  7102  001DC0  0E00               	movlw	low (__mediumconst shr (0+16))
  7103  001DC2  6F66               	movwf	(i1printf@f+2)& (0+255),b
  7104  001DC4  EC8E  F008         	call	i1_printf	;wreg free
  7105                           
  7106                           ;UART_Driver.c: 225: printf("%x",readBuffer.readId);
  7107  001DC8  0E57               	movlw	low STR_6
  7108  001DCA  0100               	movlb	0	; () banked
  7109  001DCC  6F64               	movwf	i1printf@f& (0+255),b
  7110  001DCE  0E08               	movlw	high STR_6
  7111  001DD0  0100               	movlb	0	; () banked
  7112  001DD2  6F65               	movwf	(i1printf@f+1)& (0+255),b
  7113  001DD4  0100               	movlb	0	; () banked
  7114  001DD6  5164               	movf	i1printf@f& (0+255),w,b
  7115  001DD8  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  7116  001DDA  A4D8               	btfss	status,2,c
  7117  001DDC  0E00               	movlw	low (__mediumconst shr (0+16))
  7118  001DDE  6F66               	movwf	(i1printf@f+2)& (0+255),b
  7119  001DE0  C13D  F067         	movff	_readBuffer+61,?i1_printf+3
  7120  001DE4  0100               	movlb	0	; () banked
  7121  001DE6  6B68               	clrf	(?i1_printf+4)& (0+255),b
  7122  001DE8  EC8E  F008         	call	i1_printf	;wreg free
  7123                           
  7124                           ;UART_Driver.c: 227: printf(stopCharacter);
  7125  001DEC  C042  F064         	movff	_stopCharacter,i1printf@f
  7126  001DF0  C043  F065         	movff	_stopCharacter+1,i1printf@f+1
  7127  001DF4  0100               	movlb	0	; () banked
  7128  001DF6  5164               	movf	i1printf@f& (0+255),w,b
  7129  001DF8  1165               	iorwf	(i1printf@f+1)& (0+255),w,b
  7130  001DFA  A4D8               	btfss	status,2,c
  7131  001DFC  0E00               	movlw	low (__mediumconst shr (0+16))
  7132  001DFE  6F66               	movwf	(i1printf@f+2)& (0+255),b
  7133  001E00  EC8E  F008         	call	i1_printf	;wreg free
  7134  001E04  0012               	return		;funcret
  7135  001E06                     __end_of_acknowledge:
  7136                           	opt stack 0
  7137                           pclatu	equ	0xFFB
  7138                           pclath	equ	0xFFA
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           intcon2	equ	0xFF1
  7147                           postinc0	equ	0xFEE
  7148                           plusw0	equ	0xFEB
  7149                           fsr0h	equ	0xFEA
  7150                           fsr0l	equ	0xFE9
  7151                           wreg	equ	0xFE8
  7152                           postdec1	equ	0xFE5
  7153                           plusw1	equ	0xFE3
  7154                           fsr1h	equ	0xFE2
  7155                           fsr1l	equ	0xFE1
  7156                           bsr	equ	0xFE0
  7157                           indf2	equ	0xFDF
  7158                           postinc2	equ	0xFDE
  7159                           postdec2	equ	0xFDD
  7160                           plusw2	equ	0xFDB
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function i1_printf *****************
  7166 ;; Defined at:
  7167 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  f               3    4[BANK0 ] PTR const unsigned char 
  7170 ;;		 -> STR_34(4), STR_32(4), STR_30(2), STR_29(2), 
  7171 ;;		 -> STR_28(2), STR_14(5), STR_13(2), STR_12(2), 
  7172 ;;		 -> STR_11(3), STR_10(2), STR_9(2), STR_8(2), 
  7173 ;;		 -> STR_7(2), STR_6(3), STR_5(4), STR_3(4), 
  7174 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  printf          4    0        struct .
  7177 ;;  printf          3    0        PTR const unsigned char 
  7178 ;;  printf          2   17[BANK0 ] unsigned int 
  7179 ;;  printf          2   13[BANK0 ] PTR void [1]
  7180 ;;		 -> ?i1_printf(2), ?_printf(2), 
  7181 ;;  printf          2    0        unsigned int 
  7182 ;;  printf          1   19[BANK0 ] char 
  7183 ;;  printf          1   16[BANK0 ] unsigned char 
  7184 ;;  printf          1   15[BANK0 ] char 
  7185 ;;  printf          1   12[BANK0 ] unsigned char 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  2    4[BANK0 ] int 
  7188 ;; Registers used:
  7189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7195 ;;      Params:         0       5       0       0       0       0       0       0       0
  7196 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7197 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7198 ;;      Totals:         0      16       0       0       0       0       0       0       0
  7199 ;;Total ram usage:       16 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    8
  7202 ;; This function calls:
  7203 ;;		i1___lwdiv
  7204 ;;		i1___lwmod
  7205 ;;		i1_putch
  7206 ;; This function is called by:
  7207 ;;		_acknowledge
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text42
  7212  00111C                     __ptext42:
  7213                           	opt stack 0
  7214  00111C                     i1_printf:
  7215                           	opt stack 13
  7216                           
  7217                           ;doprnt.c: 466: va_list ap;
  7218                           ;doprnt.c: 499: signed char c;
  7219                           ;doprnt.c: 506: signed char prec;
  7220                           ;doprnt.c: 508: unsigned char flag;
  7221                           ;doprnt.c: 523: union {
  7222                           ;doprnt.c: 524: unsigned long vd;
  7223                           ;doprnt.c: 525: double integ;
  7224                           ;doprnt.c: 526: } tmpval;
  7225                           ;doprnt.c: 528: unsigned int val;
  7226                           ;doprnt.c: 529: unsigned len;
  7227                           ;doprnt.c: 530: const char * cp;
  7228                           ;doprnt.c: 533: *ap = __va_start();
  7229                           
  7230                           ;incstack = 0
  7231  00111C  0E67               	movlw	low (?i1_printf+3)
  7232  00111E  0100               	movlb	0	; () banked
  7233  001120  6F6D               	movwf	i1printf@ap& (0+255),b
  7234  001122  0E00               	movlw	high (?i1_printf+3)
  7235  001124  0100               	movlb	0	; () banked
  7236  001126  6F6E               	movwf	(i1printf@ap+1)& (0+255),b
  7237                           
  7238                           ;doprnt.c: 536: while(c = *f++) {
  7239  001128  D114               	goto	i1l3392
  7240  00112A                     i1l3312:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;doprnt.c: 538: if(c != '%')
  7244  00112A  0E25               	movlw	37
  7245  00112C  0100               	movlb	0	; () banked
  7246  00112E  1973               	xorwf	i1printf@c& (0+255),w,b
  7247  001130  B4D8               	btfsc	status,2,c
  7248  001132  D005               	goto	i1l3316
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;doprnt.c: 540: {
  7252                           ;doprnt.c: 541: (putch(c) );
  7253  001134  0100               	movlb	0	; () banked
  7254  001136  5173               	movf	i1printf@c& (0+255),w,b
  7255  001138  ECD3  F011         	call	i1_putch
  7256                           
  7257                           ;doprnt.c: 542: continue;
  7258  00113C  D10A               	goto	i1l3392
  7259  00113E                     i1l3316:
  7260                           
  7261                           ;doprnt.c: 543: }
  7262                           ;doprnt.c: 548: flag = 0;
  7263  00113E  0E00               	movlw	0
  7264  001140  0100               	movlb	0	; () banked
  7265  001142  6F70               	movwf	i1printf@flag& (0+255),b
  7266                           
  7267                           ;doprnt.c: 635: switch(c = *f++) {
  7268  001144  D008               	goto	i1l3324
  7269  001146                     i1l3318:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;doprnt.c: 721: flag |= 0x80;
  7273  001146  0100               	movlb	0	; () banked
  7274  001148  8F70               	bsf	i1printf@flag& (0+255),7,b
  7275                           
  7276                           ;doprnt.c: 723: break;
  7277  00114A  D028               	goto	i1l535
  7278  00114C                     i1l3320:
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;doprnt.c: 809: (putch(c) );
  7282  00114C  0100               	movlb	0	; () banked
  7283  00114E  5173               	movf	i1printf@c& (0+255),w,b
  7284  001150  ECD3  F011         	call	i1_putch
  7285                           
  7286                           ;doprnt.c: 810: continue;
  7287  001154  D0FE               	goto	i1l3392
  7288  001156                     i1l3324:
  7289  001156  C064  F069         	movff	i1printf@f,??i1_printf
  7290  00115A  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  7291  00115E  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  7292  001162  0100               	movlb	0	; () banked
  7293  001164  2B64               	incf	i1printf@f& (0+255),f,b
  7294  001166  0E00               	movlw	0
  7295  001168  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  7296  00116A  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  7297  00116C  C069  FFF6         	movff	??i1_printf,tblptrl
  7298  001170  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  7299  001174  C06B  FFF8         	movff	??i1_printf+2,tblptru
  7300  001178  0008               	tblrd		*
  7301  00117A  CFF5 F073          	movff	tablat,i1printf@c
  7302  00117E  0100               	movlb	0	; () banked
  7303  001180  5173               	movf	i1printf@c& (0+255),w,b
  7304                           
  7305                           ; Switch size 1, requested type "space"
  7306                           ; Number of cases is 4, Range of values is 0 to 120
  7307                           ; switch strategies available:
  7308                           ; Name         Instructions Cycles
  7309                           ; simple_byte           13     7 (average)
  7310                           ;	Chosen strategy is simple_byte
  7311  001182  0A00               	xorlw	0	; case 0
  7312  001184  B4D8               	btfsc	status,2,c
  7313  001186  0012               	return	
  7314  001188  0A64               	xorlw	100	; case 100
  7315  00118A  B4D8               	btfsc	status,2,c
  7316  00118C  D007               	goto	i1l535
  7317  00118E  0A0D               	xorlw	13	; case 105
  7318  001190  B4D8               	btfsc	status,2,c
  7319  001192  D004               	goto	i1l535
  7320  001194  0A11               	xorlw	17	; case 120
  7321  001196  B4D8               	btfsc	status,2,c
  7322  001198  D7D6               	goto	i1l3318
  7323  00119A  D7D8               	goto	i1l3320
  7324  00119C                     i1l535:
  7325                           
  7326                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7327  00119C  0100               	movlb	0	; () banked
  7328  00119E  BF70               	btfsc	i1printf@flag& (0+255),7,b
  7329  0011A0  D019               	goto	i1l3336
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;doprnt.c: 1253: {
  7333                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7334  0011A2  C06D  FFD9         	movff	i1printf@ap,fsr2l
  7335  0011A6  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  7336  0011AA  CFDE F071          	movff	postinc2,i1printf@val
  7337  0011AE  CFDD F072          	movff	postdec2,i1printf@val+1
  7338                           
  7339                           ; BSR set to: 0
  7340  0011B2  0E02               	movlw	2
  7341  0011B4  0100               	movlb	0	; () banked
  7342  0011B6  276D               	addwf	i1printf@ap& (0+255),f,b
  7343  0011B8  0E00               	movlw	0
  7344  0011BA  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;doprnt.c: 1261: if((int)val < 0) {
  7348  0011BC  0100               	movlb	0	; () banked
  7349  0011BE  AF72               	btfss	(i1printf@val+1)& (0+255),7,b
  7350  0011C0  D053               	goto	i1l3370
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;doprnt.c: 1262: flag |= 0x03;
  7354  0011C2  0E03               	movlw	3
  7355  0011C4  0100               	movlb	0	; () banked
  7356  0011C6  1370               	iorwf	i1printf@flag& (0+255),f,b
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;doprnt.c: 1263: val = -val;
  7360  0011C8  0100               	movlb	0	; () banked
  7361  0011CA  6D71               	negf	i1printf@val& (0+255),b
  7362  0011CC  1F72               	comf	(i1printf@val+1)& (0+255),f,b
  7363  0011CE  B0D8               	btfsc	status,0,c
  7364  0011D0  2B72               	incf	(i1printf@val+1)& (0+255),f,b
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;doprnt.c: 1264: }
  7368                           ;doprnt.c: 1266: }
  7369  0011D2  D04A               	goto	i1l3370
  7370  0011D4                     i1l3336:
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;doprnt.c: 1268: else
  7374                           ;doprnt.c: 1273: {
  7375                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7376  0011D4  C06D  FFD9         	movff	i1printf@ap,fsr2l
  7377  0011D8  C06E  FFDA         	movff	i1printf@ap+1,fsr2h
  7378  0011DC  CFDE F071          	movff	postinc2,i1printf@val
  7379  0011E0  CFDD F072          	movff	postdec2,i1printf@val+1
  7380                           
  7381                           ; BSR set to: 0
  7382  0011E4  0E02               	movlw	2
  7383  0011E6  0100               	movlb	0	; () banked
  7384  0011E8  276D               	addwf	i1printf@ap& (0+255),f,b
  7385  0011EA  0E00               	movlw	0
  7386  0011EC  236E               	addwfc	(i1printf@ap+1)& (0+255),f,b
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;doprnt.c: 1287: }
  7390                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7391  0011EE  D03C               	goto	i1l3370
  7392  0011F0                     i1l3340:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7396  0011F0  0E01               	movlw	1
  7397  0011F2  0100               	movlb	0	; () banked
  7398  0011F4  6F73               	movwf	i1printf@c& (0+255),b
  7399  0011F6                     i1l3342:
  7400                           
  7401                           ; BSR set to: 0
  7402  0011F6  0E05               	movlw	5
  7403  0011F8  0100               	movlb	0	; () banked
  7404  0011FA  1973               	xorwf	i1printf@c& (0+255),w,b
  7405  0011FC  B4D8               	btfsc	status,2,c
  7406  0011FE  D03D               	goto	i1l3372
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;doprnt.c: 1306: if(val < dpowers[c])
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ; BSR set to: 0
  7414  001200  0100               	movlb	0	; () banked
  7415  001202  5173               	movf	i1printf@c& (0+255),w,b
  7416  001204  0D02               	mullw	2
  7417  001206  0E01               	movlw	low _dpowers
  7418  001208  24F3               	addwf	prodl,w,c
  7419  00120A  6EF6               	movwf	tblptrl,c
  7420  00120C  0E08               	movlw	high _dpowers
  7421  00120E  20F4               	addwfc	prodh,w,c
  7422  001210  6EF7               	movwf	tblptrh,c
  7423  001212                     	if	0	;There are less than 3 active tblptr bytes
  7424  001212                     	endif
  7425  001212  0009               	tblrd		*+
  7426  001214  50F5               	movf	tablat,w,c
  7427  001216  0100               	movlb	0	; () banked
  7428  001218  5D71               	subwf	i1printf@val& (0+255),w,b
  7429  00121A  0009               	tblrd		*+
  7430  00121C  50F5               	movf	tablat,w,c
  7431  00121E  0100               	movlb	0	; () banked
  7432  001220  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7433  001222  A0D8               	btfss	status,0,c
  7434  001224  D02A               	goto	i1l3372
  7435                           
  7436                           ; BSR set to: 0
  7437                           
  7438                           ; BSR set to: 0
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;doprnt.c: 1307: break;
  7442  001226  0100               	movlb	0	; () banked
  7443  001228  2B73               	incf	i1printf@c& (0+255),f,b
  7444  00122A  D7E5               	goto	i1l3342
  7445  00122C                     i1l3354:
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7449  00122C  0E01               	movlw	1
  7450  00122E  0100               	movlb	0	; () banked
  7451  001230  6F73               	movwf	i1printf@c& (0+255),b
  7452  001232                     i1l3356:
  7453                           
  7454                           ; BSR set to: 0
  7455  001232  0E04               	movlw	4
  7456  001234  0100               	movlb	0	; () banked
  7457  001236  1973               	xorwf	i1printf@c& (0+255),w,b
  7458  001238  B4D8               	btfsc	status,2,c
  7459  00123A  D01F               	goto	i1l3372
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7463                           
  7464                           ; BSR set to: 0
  7465                           
  7466                           ; BSR set to: 0
  7467  00123C  0100               	movlb	0	; () banked
  7468  00123E  5173               	movf	i1printf@c& (0+255),w,b
  7469  001240  0D02               	mullw	2
  7470  001242  0E0B               	movlw	low _hexpowers
  7471  001244  24F3               	addwf	prodl,w,c
  7472  001246  6EF6               	movwf	tblptrl,c
  7473  001248  0E08               	movlw	high _hexpowers
  7474  00124A  20F4               	addwfc	prodh,w,c
  7475  00124C  6EF7               	movwf	tblptrh,c
  7476  00124E                     	if	0	;There are less than 3 active tblptr bytes
  7477  00124E                     	endif
  7478  00124E  0009               	tblrd		*+
  7479  001250  50F5               	movf	tablat,w,c
  7480  001252  0100               	movlb	0	; () banked
  7481  001254  5D71               	subwf	i1printf@val& (0+255),w,b
  7482  001256  0009               	tblrd		*+
  7483  001258  50F5               	movf	tablat,w,c
  7484  00125A  0100               	movlb	0	; () banked
  7485  00125C  5972               	subwfb	(i1printf@val+1)& (0+255),w,b
  7486  00125E  A0D8               	btfss	status,0,c
  7487  001260  D00C               	goto	i1l3372
  7488                           
  7489                           ; BSR set to: 0
  7490                           
  7491                           ; BSR set to: 0
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;doprnt.c: 1318: break;
  7495  001262  0100               	movlb	0	; () banked
  7496  001264  2B73               	incf	i1printf@c& (0+255),f,b
  7497  001266  D7E5               	goto	i1l3356
  7498  001268                     i1l3370:
  7499                           
  7500                           ; BSR set to: 0
  7501  001268  0100               	movlb	0	; () banked
  7502  00126A  5170               	movf	i1printf@flag& (0+255),w,b
  7503  00126C  0B80               	andlw	128
  7504                           
  7505                           ; Switch size 1, requested type "space"
  7506                           ; Number of cases is 2, Range of values is 0 to 128
  7507                           ; switch strategies available:
  7508                           ; Name         Instructions Cycles
  7509                           ; simple_byte            7     4 (average)
  7510                           ;	Chosen strategy is simple_byte
  7511  00126E  0A00               	xorlw	0	; case 0
  7512  001270  B4D8               	btfsc	status,2,c
  7513  001272  D7BE               	goto	i1l3340
  7514  001274  0A80               	xorlw	128	; case 128
  7515  001276  B4D8               	btfsc	status,2,c
  7516  001278  D7D9               	goto	i1l3354
  7517  00127A                     i1l3372:
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;doprnt.c: 1422: {
  7521                           ;doprnt.c: 1438: if(flag & 0x03)
  7522  00127A  C070  F069         	movff	i1printf@flag,??i1_printf
  7523  00127E  0E03               	movlw	3
  7524  001280  0100               	movlb	0	; () banked
  7525  001282  1769               	andwf	??i1_printf& (0+255),f,b
  7526  001284  B4D8               	btfsc	status,2,c
  7527  001286  D003               	goto	i1l3376
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;doprnt.c: 1439: (putch('-') );
  7531  001288  0E2D               	movlw	45
  7532  00128A  ECD3  F011         	call	i1_putch
  7533  00128E                     i1l3376:
  7534                           
  7535                           ;doprnt.c: 1469: }
  7536                           ;doprnt.c: 1472: prec = c;
  7537  00128E  C073  F06F         	movff	i1printf@c,i1printf@prec
  7538                           
  7539                           ;doprnt.c: 1474: while(prec--) {
  7540  001292  D059               	goto	i1l3390
  7541  001294                     i1l3378:
  7542                           
  7543                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7544  001294  0100               	movlb	0	; () banked
  7545  001296  516F               	movf	i1printf@prec& (0+255),w,b
  7546  001298  0D02               	mullw	2
  7547  00129A  0E01               	movlw	low _dpowers
  7548  00129C  24F3               	addwf	prodl,w,c
  7549  00129E  6EF6               	movwf	tblptrl,c
  7550  0012A0  0E08               	movlw	high _dpowers
  7551  0012A2  20F4               	addwfc	prodh,w,c
  7552  0012A4  6EF7               	movwf	tblptrh,c
  7553  0012A6                     	if	0	;There are less than 3 active tblptr bytes
  7554  0012A6                     	endif
  7555  0012A6  0009               	tblrd		*+
  7556  0012A8  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7557  0012AC  000A               	tblrd		*-
  7558  0012AE  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7559  0012B2  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7560  0012B6  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7561  0012BA  EC51  F010         	call	i1___lwdiv	;wreg free
  7562  0012BE  C01A  F060         	movff	?i1___lwdiv,i1___lwmod@dividend
  7563  0012C2  C01B  F061         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7564  0012C6  0E00               	movlw	0
  7565  0012C8  0100               	movlb	0	; () banked
  7566  0012CA  6F63               	movwf	(i1___lwmod@divisor+1)& (0+255),b
  7567  0012CC  0E0A               	movlw	10
  7568  0012CE  6F62               	movwf	i1___lwmod@divisor& (0+255),b
  7569  0012D0  ECF7  F00F         	call	i1___lwmod	;wreg free
  7570  0012D4  0100               	movlb	0	; () banked
  7571  0012D6  5160               	movf	?i1___lwmod& (0+255),w,b
  7572  0012D8  0F30               	addlw	48
  7573  0012DA  0100               	movlb	0	; () banked
  7574  0012DC  6F73               	movwf	i1printf@c& (0+255),b
  7575                           
  7576                           ;doprnt.c: 1491: break;
  7577  0012DE  D02F               	goto	i1l3388
  7578  0012E0                     i1l3380:
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;doprnt.c: 1499: {
  7582                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7583  0012E0  C071  F01A         	movff	i1printf@val,i1___lwdiv@dividend
  7584  0012E4  C072  F01B         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  7585  0012E8  0100               	movlb	0	; () banked
  7586  0012EA  516F               	movf	i1printf@prec& (0+255),w,b
  7587  0012EC  0D02               	mullw	2
  7588  0012EE  0E0B               	movlw	low _hexpowers
  7589  0012F0  24F3               	addwf	prodl,w,c
  7590  0012F2  6EF6               	movwf	tblptrl,c
  7591  0012F4  0E08               	movlw	high _hexpowers
  7592  0012F6  20F4               	addwfc	prodh,w,c
  7593  0012F8  6EF7               	movwf	tblptrh,c
  7594  0012FA                     	if	0	;There are less than 3 active tblptr bytes
  7595  0012FA                     	endif
  7596  0012FA  0009               	tblrd		*+
  7597  0012FC  CFF5 F01C          	movff	tablat,i1___lwdiv@divisor
  7598  001300  000A               	tblrd		*-
  7599  001302  CFF5 F01D          	movff	tablat,i1___lwdiv@divisor+1
  7600  001306  EC51  F010         	call	i1___lwdiv	;wreg free
  7601  00130A  501A               	movf	?i1___lwdiv,w,c
  7602  00130C  0B0F               	andlw	15
  7603  00130E  0100               	movlb	0	; () banked
  7604  001310  6F6C               	movwf	i1printf@idx& (0+255),b
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7608  001312  0100               	movlb	0	; () banked
  7609  001314  516C               	movf	i1printf@idx& (0+255),w,b
  7610  001316  0D01               	mullw	1
  7611  001318  0E13               	movlw	low STR_35
  7612  00131A  24F3               	addwf	prodl,w,c
  7613  00131C  6EF6               	movwf	tblptrl,c
  7614  00131E  0E08               	movlw	high STR_35
  7615  001320  20F4               	addwfc	prodh,w,c
  7616  001322  6EF7               	movwf	tblptrh,c
  7617  001324                     	if	0	;There are less than 3 active tblptr bytes
  7618  001324                     	endif
  7619  001324  0008               	tblrd		*
  7620  001326  CFF5 F073          	movff	tablat,i1printf@c
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;doprnt.c: 1523: }
  7624                           
  7625                           ;doprnt.c: 1508: }
  7626                           ;doprnt.c: 1510: break;
  7627  00132A  D009               	goto	i1l3388
  7628  00132C                     i1l3386:
  7629  00132C  0100               	movlb	0	; () banked
  7630  00132E  5170               	movf	i1printf@flag& (0+255),w,b
  7631  001330  0B80               	andlw	128
  7632                           
  7633                           ; Switch size 1, requested type "space"
  7634                           ; Number of cases is 2, Range of values is 0 to 128
  7635                           ; switch strategies available:
  7636                           ; Name         Instructions Cycles
  7637                           ; simple_byte            7     4 (average)
  7638                           ;	Chosen strategy is simple_byte
  7639  001332  0A00               	xorlw	0	; case 0
  7640  001334  B4D8               	btfsc	status,2,c
  7641  001336  D7AE               	goto	i1l3378
  7642  001338  0A80               	xorlw	128	; case 128
  7643  00133A  B4D8               	btfsc	status,2,c
  7644  00133C  D7D1               	goto	i1l3380
  7645  00133E                     i1l3388:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;doprnt.c: 1524: (putch(c) );
  7649  00133E  0100               	movlb	0	; () banked
  7650  001340  5173               	movf	i1printf@c& (0+255),w,b
  7651  001342  ECD3  F011         	call	i1_putch
  7652  001346                     i1l3390:
  7653  001346  0100               	movlb	0	; () banked
  7654  001348  076F               	decf	i1printf@prec& (0+255),f,b
  7655  00134A  0100               	movlb	0	; () banked
  7656  00134C  296F               	incf	i1printf@prec& (0+255),w,b
  7657  00134E  A4D8               	btfss	status,2,c
  7658  001350  D7ED               	goto	i1l3386
  7659  001352                     i1l3392:
  7660  001352  C064  F069         	movff	i1printf@f,??i1_printf
  7661  001356  C065  F06A         	movff	i1printf@f+1,??i1_printf+1
  7662  00135A  C066  F06B         	movff	i1printf@f+2,??i1_printf+2
  7663  00135E  0100               	movlb	0	; () banked
  7664  001360  2B64               	incf	i1printf@f& (0+255),f,b
  7665  001362  0E00               	movlw	0
  7666  001364  2365               	addwfc	(i1printf@f+1)& (0+255),f,b
  7667  001366  2366               	addwfc	(i1printf@f+2)& (0+255),f,b
  7668  001368  C069  FFF6         	movff	??i1_printf,tblptrl
  7669  00136C  C06A  FFF7         	movff	??i1_printf+1,tblptrh
  7670  001370  C06B  FFF8         	movff	??i1_printf+2,tblptru
  7671  001374  0008               	tblrd		*
  7672  001376  CFF5 F073          	movff	tablat,i1printf@c
  7673  00137A  0100               	movlb	0	; () banked
  7674  00137C  5173               	movf	i1printf@c& (0+255),w,b
  7675  00137E  B4D8               	btfsc	status,2,c
  7676  001380  0012               	return	
  7677  001382  D6D3               	goto	i1l3312
  7678  001384                     __end_ofi1_printf:
  7679                           	opt stack 0
  7680                           pclatu	equ	0xFFB
  7681                           pclath	equ	0xFFA
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           intcon2	equ	0xFF1
  7690                           postinc0	equ	0xFEE
  7691                           plusw0	equ	0xFEB
  7692                           fsr0h	equ	0xFEA
  7693                           fsr0l	equ	0xFE9
  7694                           wreg	equ	0xFE8
  7695                           postdec1	equ	0xFE5
  7696                           plusw1	equ	0xFE3
  7697                           fsr1h	equ	0xFE2
  7698                           fsr1l	equ	0xFE1
  7699                           bsr	equ	0xFE0
  7700                           indf2	equ	0xFDF
  7701                           postinc2	equ	0xFDE
  7702                           postdec2	equ	0xFDD
  7703                           plusw2	equ	0xFDB
  7704                           fsr2h	equ	0xFDA
  7705                           fsr2l	equ	0xFD9
  7706                           status	equ	0xFD8
  7707                           
  7708 ;; *************** function i1_putch *****************
  7709 ;; Defined at:
  7710 ;;		line 353 in file "Drivers/UART_Driver.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  data            1    wreg     unsigned char 
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;  data            1   27[COMRAM] unsigned char 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      void 
  7717 ;; Registers used:
  7718 ;;		wreg, status,2, cstack
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7724 ;;      Params:         0       0       0       0       0       0       0       0       0
  7725 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7726 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7727 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7728 ;;Total ram usage:        1 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    7
  7731 ;; This function calls:
  7732 ;;		i1_writeByte
  7733 ;; This function is called by:
  7734 ;;		i1_printf
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           	psect	text43
  7739  0023A6                     __ptext43:
  7740                           	opt stack 0
  7741  0023A6                     i1_putch:
  7742                           	opt stack 13
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;incstack = 0
  7746                           ;i1putch@data stored from wreg
  7747  0023A6  6E1C               	movwf	i1putch@data,c
  7748                           
  7749                           ;UART_Driver.c: 354: writeByte(data);
  7750  0023A8  501C               	movf	i1putch@data,w,c
  7751  0023AA  EC98  F011         	call	i1_writeByte
  7752  0023AE  0012               	return		;funcret
  7753  0023B0                     __end_ofi1_putch:
  7754                           	opt stack 0
  7755                           pclatu	equ	0xFFB
  7756                           pclath	equ	0xFFA
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           intcon2	equ	0xFF1
  7765                           postinc0	equ	0xFEE
  7766                           plusw0	equ	0xFEB
  7767                           fsr0h	equ	0xFEA
  7768                           fsr0l	equ	0xFE9
  7769                           wreg	equ	0xFE8
  7770                           postdec1	equ	0xFE5
  7771                           plusw1	equ	0xFE3
  7772                           fsr1h	equ	0xFE2
  7773                           fsr1l	equ	0xFE1
  7774                           bsr	equ	0xFE0
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           plusw2	equ	0xFDB
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function i1_writeByte *****************
  7784 ;; Defined at:
  7785 ;;		line 84 in file "Drivers/UART_Driver.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  data            1    wreg     unsigned char 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  data            1   26[COMRAM] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0
  7800 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7802 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7803 ;;Total ram usage:        1 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    6
  7806 ;; This function calls:
  7807 ;;		i1_D_UART_Enable
  7808 ;; This function is called by:
  7809 ;;		i1_putch
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text44
  7814  002330                     __ptext44:
  7815                           	opt stack 0
  7816  002330                     i1_writeByte:
  7817                           	opt stack 13
  7818                           
  7819                           ;incstack = 0
  7820                           ;i1writeByte@data stored from wreg
  7821  002330  6E1B               	movwf	i1writeByte@data,c
  7822                           
  7823                           ;UART_Driver.c: 85: D_UART_Enable(1);
  7824  002332  0E01               	movlw	1
  7825  002334  EC6F  F011         	call	i1_D_UART_Enable
  7826  002338                     i1l107:
  7827  002338  A2AC               	btfss	4012,1,c	;volatile
  7828  00233A  D7FE               	goto	i1l107
  7829                           
  7830                           ;UART_Driver.c: 87: TXREG = data;
  7831  00233C  C01B  FFAD         	movff	i1writeByte@data,4013	;volatile
  7832  002340  0012               	return		;funcret
  7833  002342                     __end_ofi1_writeByte:
  7834                           	opt stack 0
  7835                           pclatu	equ	0xFFB
  7836                           pclath	equ	0xFFA
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           intcon2	equ	0xFF1
  7845                           postinc0	equ	0xFEE
  7846                           plusw0	equ	0xFEB
  7847                           fsr0h	equ	0xFEA
  7848                           fsr0l	equ	0xFE9
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           plusw1	equ	0xFE3
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           bsr	equ	0xFE0
  7855                           indf2	equ	0xFDF
  7856                           postinc2	equ	0xFDE
  7857                           postdec2	equ	0xFDD
  7858                           plusw2	equ	0xFDB
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function i1_D_UART_Enable *****************
  7864 ;; Defined at:
  7865 ;;		line 319 in file "Drivers/UART_Driver.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  enable          1    wreg     unsigned char 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  enable          1   25[COMRAM] unsigned char 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  1    wreg      void 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7879 ;;      Params:         0       0       0       0       0       0       0       0       0
  7880 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7882 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7883 ;;Total ram usage:        1 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    5
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_readByte
  7890 ;;		i1_writeByte
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text45
  7895  0022DE                     __ptext45:
  7896                           	opt stack 0
  7897  0022DE                     i1_D_UART_Enable:
  7898                           	opt stack 17
  7899                           
  7900                           ;incstack = 0
  7901                           ;i1D_UART_Enable@enable stored from wreg
  7902  0022DE  6E1A               	movwf	i1D_UART_Enable@enable,c
  7903                           
  7904                           ;UART_Driver.c: 320: if(enable) {
  7905  0022E0  501A               	movf	i1D_UART_Enable@enable,w,c
  7906  0022E2  B4D8               	btfsc	status,2,c
  7907  0022E4  D006               	goto	i1l185
  7908                           
  7909                           ;UART_Driver.c: 321: TRISCbits.TRISC6 = 0;
  7910  0022E6  9C94               	bcf	3988,6,c	;volatile
  7911                           
  7912                           ;UART_Driver.c: 322: TRISCbits.TRISC7 = 1;
  7913  0022E8  8E94               	bsf	3988,7,c	;volatile
  7914                           
  7915                           ;UART_Driver.c: 323: TXSTAbits.TXEN = 1;
  7916  0022EA  8AAC               	bsf	4012,5,c	;volatile
  7917                           
  7918                           ;UART_Driver.c: 324: RCSTAbits.CREN = 1;
  7919  0022EC  88AB               	bsf	4011,4,c	;volatile
  7920                           
  7921                           ;UART_Driver.c: 325: RCSTAbits.SPEN = 1;
  7922  0022EE  8EAB               	bsf	4011,7,c	;volatile
  7923                           
  7924                           ;UART_Driver.c: 326: } else {
  7925  0022F0  0012               	return	
  7926  0022F2                     i1l185:
  7927                           
  7928                           ;UART_Driver.c: 327: TRISCbits.TRISC6 = 0;
  7929  0022F2  9C94               	bcf	3988,6,c	;volatile
  7930                           
  7931                           ;UART_Driver.c: 328: TRISCbits.TRISC7 = 0;
  7932  0022F4  9E94               	bcf	3988,7,c	;volatile
  7933                           
  7934                           ;UART_Driver.c: 329: TXSTAbits.TXEN = 0;
  7935  0022F6  9AAC               	bcf	4012,5,c	;volatile
  7936                           
  7937                           ;UART_Driver.c: 330: RCSTAbits.CREN = 0;
  7938  0022F8  98AB               	bcf	4011,4,c	;volatile
  7939                           
  7940                           ;UART_Driver.c: 331: RCSTAbits.SPEN = 0;
  7941  0022FA  9EAB               	bcf	4011,7,c	;volatile
  7942  0022FC  0012               	return	
  7943  0022FE                     __end_ofi1_D_UART_Enable:
  7944                           	opt stack 0
  7945                           pclatu	equ	0xFFB
  7946                           pclath	equ	0xFFA
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           intcon2	equ	0xFF1
  7955                           postinc0	equ	0xFEE
  7956                           plusw0	equ	0xFEB
  7957                           fsr0h	equ	0xFEA
  7958                           fsr0l	equ	0xFE9
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           plusw1	equ	0xFE3
  7962                           fsr1h	equ	0xFE2
  7963                           fsr1l	equ	0xFE1
  7964                           bsr	equ	0xFE0
  7965                           indf2	equ	0xFDF
  7966                           postinc2	equ	0xFDE
  7967                           postdec2	equ	0xFDD
  7968                           plusw2	equ	0xFDB
  7969                           fsr2h	equ	0xFDA
  7970                           fsr2l	equ	0xFD9
  7971                           status	equ	0xFD8
  7972                           
  7973 ;; *************** function i1___lwmod *****************
  7974 ;; Defined at:
  7975 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwmod.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  dividend        2    0[BANK0 ] unsigned int 
  7978 ;;  divisor         2    2[BANK0 ] unsigned int 
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  __lwmod         1   32[COMRAM] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  2    0[BANK0 ] unsigned int 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7990 ;;      Params:         0       4       0       0       0       0       0       0       0
  7991 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7993 ;;      Totals:         1       4       0       0       0       0       0       0       0
  7994 ;;Total ram usage:        5 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    5
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		i1_printf
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text46
  8005  001FEE                     __ptext46:
  8006                           	opt stack 0
  8007  001FEE                     i1___lwmod:
  8008                           	opt stack 15
  8009                           
  8010                           ;incstack = 0
  8011  001FEE  0100               	movlb	0	; () banked
  8012  001FF0  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  8013  001FF2  0100               	movlb	0	; () banked
  8014  001FF4  1163               	iorwf	(i1___lwmod@divisor+1)& (0+255),w,b
  8015  001FF6  B4D8               	btfsc	status,2,c
  8016  001FF8  D023               	goto	i1l973
  8017                           
  8018                           ; BSR set to: 0
  8019  001FFA  0E01               	movlw	1
  8020  001FFC  6E21               	movwf	i1___lwmod@counter,c
  8021  001FFE  D005               	goto	i1l3300
  8022  002000                     i1l3298:
  8023                           
  8024                           ; BSR set to: 0
  8025  002000  0100               	movlb	0	; () banked
  8026  002002  90D8               	bcf	status,0,c
  8027  002004  3762               	rlcf	i1___lwmod@divisor& (0+255),f,b
  8028  002006  3763               	rlcf	(i1___lwmod@divisor+1)& (0+255),f,b
  8029  002008  2A21               	incf	i1___lwmod@counter,f,c
  8030  00200A                     i1l3300:
  8031                           
  8032                           ; BSR set to: 0
  8033  00200A  0100               	movlb	0	; () banked
  8034  00200C  AF63               	btfss	(i1___lwmod@divisor+1)& (0+255),7,b
  8035  00200E  D7F8               	goto	i1l3298
  8036  002010                     i1l3302:
  8037                           
  8038                           ; BSR set to: 0
  8039  002010  0100               	movlb	0	; () banked
  8040  002012  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  8041  002014  0100               	movlb	0	; () banked
  8042  002016  5D60               	subwf	i1___lwmod@dividend& (0+255),w,b
  8043  002018  0100               	movlb	0	; () banked
  8044  00201A  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  8045  00201C  0100               	movlb	0	; () banked
  8046  00201E  5961               	subwfb	(i1___lwmod@dividend+1)& (0+255),w,b
  8047  002020  A0D8               	btfss	status,0,c
  8048  002022  D008               	goto	i1l3306
  8049                           
  8050                           ; BSR set to: 0
  8051  002024  0100               	movlb	0	; () banked
  8052  002026  5162               	movf	i1___lwmod@divisor& (0+255),w,b
  8053  002028  0100               	movlb	0	; () banked
  8054  00202A  5F60               	subwf	i1___lwmod@dividend& (0+255),f,b
  8055  00202C  0100               	movlb	0	; () banked
  8056  00202E  5163               	movf	(i1___lwmod@divisor+1)& (0+255),w,b
  8057  002030  0100               	movlb	0	; () banked
  8058  002032  5B61               	subwfb	(i1___lwmod@dividend+1)& (0+255),f,b
  8059  002034                     i1l3306:
  8060                           
  8061                           ; BSR set to: 0
  8062  002034  0100               	movlb	0	; () banked
  8063  002036  90D8               	bcf	status,0,c
  8064  002038  3363               	rrcf	(i1___lwmod@divisor+1)& (0+255),f,b
  8065  00203A  3362               	rrcf	i1___lwmod@divisor& (0+255),f,b
  8066                           
  8067                           ; BSR set to: 0
  8068  00203C  2E21               	decfsz	i1___lwmod@counter,f,c
  8069  00203E  D7E8               	goto	i1l3302
  8070  002040                     i1l973:
  8071                           
  8072                           ; BSR set to: 0
  8073  002040  C060  F060         	movff	i1___lwmod@dividend,?i1___lwmod
  8074  002044  C061  F061         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  8075                           
  8076                           ; BSR set to: 0
  8077  002048  0012               	return		;funcret
  8078  00204A                     __end_ofi1___lwmod:
  8079                           	opt stack 0
  8080                           pclatu	equ	0xFFB
  8081                           pclath	equ	0xFFA
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon2	equ	0xFF1
  8090                           postinc0	equ	0xFEE
  8091                           plusw0	equ	0xFEB
  8092                           fsr0h	equ	0xFEA
  8093                           fsr0l	equ	0xFE9
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           plusw1	equ	0xFE3
  8097                           fsr1h	equ	0xFE2
  8098                           fsr1l	equ	0xFE1
  8099                           bsr	equ	0xFE0
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           plusw2	equ	0xFDB
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function i1___lwdiv *****************
  8109 ;; Defined at:
  8110 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/lwdiv.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  dividend        2   25[COMRAM] unsigned int 
  8113 ;;  divisor         2   27[COMRAM] unsigned int 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  __lwdiv         2   30[COMRAM] unsigned int 
  8116 ;;  __lwdiv         1   29[COMRAM] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  2   25[COMRAM] unsigned int 
  8119 ;; Registers used:
  8120 ;;		wreg, status,2, status,0
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8126 ;;      Params:         4       0       0       0       0       0       0       0       0
  8127 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8129 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8130 ;;Total ram usage:        7 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    5
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		i1_printf
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text47
  8141  0020A2                     __ptext47:
  8142                           	opt stack 0
  8143  0020A2                     i1___lwdiv:
  8144                           	opt stack 15
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;incstack = 0
  8148  0020A2  0E00               	movlw	0
  8149  0020A4  6E20               	movwf	i1___lwdiv@quotient+1,c
  8150  0020A6  0E00               	movlw	0
  8151  0020A8  6E1F               	movwf	i1___lwdiv@quotient,c
  8152  0020AA  501C               	movf	i1___lwdiv@divisor,w,c
  8153  0020AC  101D               	iorwf	i1___lwdiv@divisor+1,w,c
  8154  0020AE  B4D8               	btfsc	status,2,c
  8155  0020B0  D01C               	goto	i1l963
  8156  0020B2  0E01               	movlw	1
  8157  0020B4  6E1E               	movwf	i1___lwdiv@counter,c
  8158  0020B6  D004               	goto	i1l3280
  8159  0020B8                     i1l3278:
  8160  0020B8  90D8               	bcf	status,0,c
  8161  0020BA  361C               	rlcf	i1___lwdiv@divisor,f,c
  8162  0020BC  361D               	rlcf	i1___lwdiv@divisor+1,f,c
  8163  0020BE  2A1E               	incf	i1___lwdiv@counter,f,c
  8164  0020C0                     i1l3280:
  8165  0020C0  AE1D               	btfss	i1___lwdiv@divisor+1,7,c
  8166  0020C2  D7FA               	goto	i1l3278
  8167  0020C4                     i1l3282:
  8168  0020C4  90D8               	bcf	status,0,c
  8169  0020C6  361F               	rlcf	i1___lwdiv@quotient,f,c
  8170  0020C8  3620               	rlcf	i1___lwdiv@quotient+1,f,c
  8171  0020CA  501C               	movf	i1___lwdiv@divisor,w,c
  8172  0020CC  5C1A               	subwf	i1___lwdiv@dividend,w,c
  8173  0020CE  501D               	movf	i1___lwdiv@divisor+1,w,c
  8174  0020D0  581B               	subwfb	i1___lwdiv@dividend+1,w,c
  8175  0020D2  A0D8               	btfss	status,0,c
  8176  0020D4  D005               	goto	i1l3290
  8177  0020D6  501C               	movf	i1___lwdiv@divisor,w,c
  8178  0020D8  5E1A               	subwf	i1___lwdiv@dividend,f,c
  8179  0020DA  501D               	movf	i1___lwdiv@divisor+1,w,c
  8180  0020DC  5A1B               	subwfb	i1___lwdiv@dividend+1,f,c
  8181  0020DE  801F               	bsf	i1___lwdiv@quotient,0,c
  8182  0020E0                     i1l3290:
  8183  0020E0  90D8               	bcf	status,0,c
  8184  0020E2  321D               	rrcf	i1___lwdiv@divisor+1,f,c
  8185  0020E4  321C               	rrcf	i1___lwdiv@divisor,f,c
  8186  0020E6  2E1E               	decfsz	i1___lwdiv@counter,f,c
  8187  0020E8  D7ED               	goto	i1l3282
  8188  0020EA                     i1l963:
  8189  0020EA  C01F  F01A         	movff	i1___lwdiv@quotient,?i1___lwdiv
  8190  0020EE  C020  F01B         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  8191  0020F2  0012               	return		;funcret
  8192  0020F4                     __end_ofi1___lwdiv:
  8193                           	opt stack 0
  8194                           pclatu	equ	0xFFB
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           intcon	equ	0xFF2
  8203                           intcon2	equ	0xFF1
  8204                           postinc0	equ	0xFEE
  8205                           plusw0	equ	0xFEB
  8206                           fsr0h	equ	0xFEA
  8207                           fsr0l	equ	0xFE9
  8208                           wreg	equ	0xFE8
  8209                           postdec1	equ	0xFE5
  8210                           plusw1	equ	0xFE3
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           bsr	equ	0xFE0
  8214                           indf2	equ	0xFDF
  8215                           postinc2	equ	0xFDE
  8216                           postdec2	equ	0xFDD
  8217                           plusw2	equ	0xFDB
  8218                           fsr2h	equ	0xFDA
  8219                           fsr2l	equ	0xFD9
  8220                           status	equ	0xFD8
  8221                           
  8222 ;; *************** function _HighISR *****************
  8223 ;; Defined at:
  8224 ;;		line 419 in file "Drivers/PWM_Driver.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8238 ;;      Params:         0       0       0       0       0       0       0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8240 ;;      Temps:         14       0       0       0       0       0       0       0       0
  8241 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8242 ;;Total ram usage:       14 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    4
  8245 ;; This function calls:
  8246 ;;		_handleState
  8247 ;; This function is called by:
  8248 ;;		Interrupt level 2
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	intcode
  8253  000008                     __pintcode:
  8254                           	opt stack 0
  8255  000008                     _HighISR:
  8256                           	opt stack 13
  8257                           
  8258                           ;incstack = 0
  8259  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8260  00000A  EDD3  F00D         	call	int_func,f	;refresh shadow registers
  8261                           pclatu	equ	0xFFB
  8262                           pclath	equ	0xFFA
  8263                           tblptru	equ	0xFF8
  8264                           tblptrh	equ	0xFF7
  8265                           tblptrl	equ	0xFF6
  8266                           tablat	equ	0xFF5
  8267                           prodh	equ	0xFF4
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           intcon2	equ	0xFF1
  8271                           postinc0	equ	0xFEE
  8272                           plusw0	equ	0xFEB
  8273                           fsr0h	equ	0xFEA
  8274                           fsr0l	equ	0xFE9
  8275                           wreg	equ	0xFE8
  8276                           postdec1	equ	0xFE5
  8277                           plusw1	equ	0xFE3
  8278                           fsr1h	equ	0xFE2
  8279                           fsr1l	equ	0xFE1
  8280                           bsr	equ	0xFE0
  8281                           indf2	equ	0xFDF
  8282                           postinc2	equ	0xFDE
  8283                           postdec2	equ	0xFDD
  8284                           plusw2	equ	0xFDB
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8
  8288                           
  8289                           	psect	intcode_body
  8290  001BA6                     __pintcode_body:
  8291                           	opt stack 13
  8292  001BA6                     int_func:
  8293                           	opt stack 13
  8294  001BA6  0006               	pop		; remove dummy address from shadow register refresh
  8295  001BA8  CFFA F00C          	movff	pclath,??_HighISR
  8296  001BAC  CFFB F00D          	movff	pclatu,??_HighISR+1
  8297  001BB0  CFE9 F00E          	movff	fsr0l,??_HighISR+2
  8298  001BB4  CFEA F00F          	movff	fsr0h,??_HighISR+3
  8299  001BB8  CFE1 F010          	movff	fsr1l,??_HighISR+4
  8300  001BBC  CFE2 F011          	movff	fsr1h,??_HighISR+5
  8301  001BC0  CFD9 F012          	movff	fsr2l,??_HighISR+6
  8302  001BC4  CFDA F013          	movff	fsr2h,??_HighISR+7
  8303  001BC8  CFF3 F014          	movff	prodl,??_HighISR+8
  8304  001BCC  CFF4 F015          	movff	prodh,??_HighISR+9
  8305  001BD0  CFF6 F016          	movff	tblptrl,??_HighISR+10
  8306  001BD4  CFF7 F017          	movff	tblptrh,??_HighISR+11
  8307  001BD8  CFF8 F018          	movff	tblptru,??_HighISR+12
  8308  001BDC  CFF5 F019          	movff	tablat,??_HighISR+13
  8309                           
  8310                           ;PWM_Driver.c: 420: if (INTCONbits.TMR0IF) {
  8311  001BE0  A4F2               	btfss	intcon,2,c	;volatile
  8312  001BE2  D007               	goto	i2l409
  8313                           
  8314                           ;PWM_Driver.c: 421: TMR0L = 0;
  8315  001BE4  0E00               	movlw	0
  8316  001BE6  6ED6               	movwf	4054,c	;volatile
  8317                           
  8318                           ;PWM_Driver.c: 422: TMR0H = 0;
  8319  001BE8  0E00               	movlw	0
  8320  001BEA  6ED7               	movwf	4055,c	;volatile
  8321                           
  8322                           ;PWM_Driver.c: 423: INTCONbits.TMR0IF = 0;
  8323  001BEC  94F2               	bcf	intcon,2,c	;volatile
  8324                           
  8325                           ;PWM_Driver.c: 424: handleState();
  8326  001BEE  EC90  F00E         	call	_handleState	;wreg free
  8327  001BF2                     i2l409:
  8328  001BF2  C019  FFF5         	movff	??_HighISR+13,tablat
  8329  001BF6  C018  FFF8         	movff	??_HighISR+12,tblptru
  8330  001BFA  C017  FFF7         	movff	??_HighISR+11,tblptrh
  8331  001BFE  C016  FFF6         	movff	??_HighISR+10,tblptrl
  8332  001C02  C015  FFF4         	movff	??_HighISR+9,prodh
  8333  001C06  C014  FFF3         	movff	??_HighISR+8,prodl
  8334  001C0A  C013  FFDA         	movff	??_HighISR+7,fsr2h
  8335  001C0E  C012  FFD9         	movff	??_HighISR+6,fsr2l
  8336  001C12  C011  FFE2         	movff	??_HighISR+5,fsr1h
  8337  001C16  C010  FFE1         	movff	??_HighISR+4,fsr1l
  8338  001C1A  C00F  FFEA         	movff	??_HighISR+3,fsr0h
  8339  001C1E  C00E  FFE9         	movff	??_HighISR+2,fsr0l
  8340  001C22  C00D  FFFB         	movff	??_HighISR+1,pclatu
  8341  001C26  C00C  FFFA         	movff	??_HighISR,pclath
  8342  001C2A  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8343  001C2C  0011               	retfie		f
  8344  001C2E                     __end_of_HighISR:
  8345                           	opt stack 0
  8346                           pclatu	equ	0xFFB
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           intcon2	equ	0xFF1
  8356                           postinc0	equ	0xFEE
  8357                           plusw0	equ	0xFEB
  8358                           fsr0h	equ	0xFEA
  8359                           fsr0l	equ	0xFE9
  8360                           wreg	equ	0xFE8
  8361                           postdec1	equ	0xFE5
  8362                           plusw1	equ	0xFE3
  8363                           fsr1h	equ	0xFE2
  8364                           fsr1l	equ	0xFE1
  8365                           bsr	equ	0xFE0
  8366                           indf2	equ	0xFDF
  8367                           postinc2	equ	0xFDE
  8368                           postdec2	equ	0xFDD
  8369                           plusw2	equ	0xFDB
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _handleState *****************
  8375 ;; Defined at:
  8376 ;;		line 248 in file "Drivers/PWM_Driver.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;		None
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      void 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0, cstack
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8390 ;;      Params:         0       0       0       0       0       0       0       0       0
  8391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8393 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8394 ;;Total ram usage:        0 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    3
  8397 ;; This function calls:
  8398 ;;		_fade
  8399 ;;		_flash
  8400 ;;		_smooth
  8401 ;;		_strobe2
  8402 ;;		i2_pwmColors
  8403 ;; This function is called by:
  8404 ;;		_HighISR
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           	psect	text49
  8409  001D20                     __ptext49:
  8410                           	opt stack 0
  8411  001D20                     _handleState:
  8412                           	opt stack 13
  8413                           
  8414                           ;PWM_Driver.c: 249: static uint8_t cnt;
  8415                           ;PWM_Driver.c: 251: switch(state) {
  8416                           
  8417                           ;incstack = 0
  8418  001D20  D029               	goto	i2l3098
  8419  001D22                     i2l3068:
  8420                           
  8421                           ;PWM_Driver.c: 253: pwmColors(scale);
  8422  001D22  502D               	movf	_scale,w,c
  8423  001D24  ECF3  F00C         	call	i2_pwmColors
  8424                           
  8425                           ;PWM_Driver.c: 254: cnt++;
  8426  001D28  2A36               	incf	handleState@cnt,f,c
  8427                           
  8428                           ;PWM_Driver.c: 255: break;
  8429  001D2A  0012               	return	
  8430  001D2C                     i2l3072:
  8431                           
  8432                           ;PWM_Driver.c: 258: if (cnt == 0) {
  8433  001D2C  5036               	movf	handleState@cnt,w,c
  8434  001D2E  B4D8               	btfsc	status,2,c
  8435                           
  8436                           ;PWM_Driver.c: 259: flash();
  8437  001D30  EC4F  F00C         	call	_flash	;wreg free
  8438                           
  8439                           ;PWM_Driver.c: 260: }
  8440                           ;PWM_Driver.c: 261: pwmColors(7);
  8441  001D34  0E07               	movlw	7
  8442  001D36  ECF3  F00C         	call	i2_pwmColors
  8443                           
  8444                           ;PWM_Driver.c: 262: cnt++;
  8445  001D3A  2A36               	incf	handleState@cnt,f,c
  8446                           
  8447                           ;PWM_Driver.c: 263: break;
  8448  001D3C  0012               	return	
  8449  001D3E                     i2l3078:
  8450                           
  8451                           ;PWM_Driver.c: 266: if (cnt == 0) {
  8452  001D3E  5036               	movf	handleState@cnt,w,c
  8453  001D40  B4D8               	btfsc	status,2,c
  8454                           
  8455                           ;PWM_Driver.c: 267: strobe2();
  8456  001D42  EC17  F00E         	call	_strobe2	;wreg free
  8457                           
  8458                           ;PWM_Driver.c: 268: }
  8459                           ;PWM_Driver.c: 269: pwmColors(7);
  8460  001D46  0E07               	movlw	7
  8461  001D48  ECF3  F00C         	call	i2_pwmColors
  8462                           
  8463                           ;PWM_Driver.c: 270: cnt++;
  8464  001D4C  2A36               	incf	handleState@cnt,f,c
  8465                           
  8466                           ;PWM_Driver.c: 271: break;
  8467  001D4E  0012               	return	
  8468  001D50                     i2l3084:
  8469                           
  8470                           ;PWM_Driver.c: 274: if (cnt == 0) {
  8471  001D50  5036               	movf	handleState@cnt,w,c
  8472  001D52  B4D8               	btfsc	status,2,c
  8473                           
  8474                           ;PWM_Driver.c: 275: fade();
  8475  001D54  EC8D  F00D         	call	_fade	;wreg free
  8476                           
  8477                           ;PWM_Driver.c: 276: }
  8478                           ;PWM_Driver.c: 277: pwmColors(7);
  8479  001D58  0E07               	movlw	7
  8480  001D5A  ECF3  F00C         	call	i2_pwmColors
  8481                           
  8482                           ;PWM_Driver.c: 278: cnt++;
  8483  001D5E  2A36               	incf	handleState@cnt,f,c
  8484                           
  8485                           ;PWM_Driver.c: 279: break;
  8486  001D60  0012               	return	
  8487  001D62                     i2l3090:
  8488                           
  8489                           ;PWM_Driver.c: 282: if (cnt == 0) {
  8490  001D62  5036               	movf	handleState@cnt,w,c
  8491  001D64  B4D8               	btfsc	status,2,c
  8492                           
  8493                           ;PWM_Driver.c: 283: smooth();
  8494  001D66  ECBF  F00A         	call	_smooth	;wreg free
  8495                           
  8496                           ;PWM_Driver.c: 284: }
  8497                           ;PWM_Driver.c: 285: pwmColors(7);
  8498  001D6A  0E07               	movlw	7
  8499  001D6C  ECF3  F00C         	call	i2_pwmColors
  8500                           
  8501                           ;PWM_Driver.c: 286: cnt++;
  8502  001D70  2A36               	incf	handleState@cnt,f,c
  8503                           
  8504                           ;PWM_Driver.c: 294: }
  8505                           
  8506                           ;PWM_Driver.c: 293: break;
  8507                           
  8508                           ;PWM_Driver.c: 292: default:
  8509                           
  8510                           ;PWM_Driver.c: 290: break;
  8511                           
  8512                           ;PWM_Driver.c: 289: case Disabled:
  8513                           
  8514                           ;PWM_Driver.c: 287: break;
  8515  001D72  0012               	return	
  8516  001D74                     i2l3098:
  8517  001D74  502E               	movf	_state,w,c
  8518                           
  8519                           ; Switch size 1, requested type "space"
  8520                           ; Number of cases is 6, Range of values is 0 to 5
  8521                           ; switch strategies available:
  8522                           ; Name         Instructions Cycles
  8523                           ; simple_byte           19    10 (average)
  8524                           ;	Chosen strategy is simple_byte
  8525  001D76  0A00               	xorlw	0	; case 0
  8526  001D78  B4D8               	btfsc	status,2,c
  8527  001D7A  D7D3               	goto	i2l3068
  8528  001D7C  0A01               	xorlw	1	; case 1
  8529  001D7E  B4D8               	btfsc	status,2,c
  8530  001D80  D7D5               	goto	i2l3072
  8531  001D82  0A03               	xorlw	3	; case 2
  8532  001D84  B4D8               	btfsc	status,2,c
  8533  001D86  D7DB               	goto	i2l3078
  8534  001D88  0A01               	xorlw	1	; case 3
  8535  001D8A  B4D8               	btfsc	status,2,c
  8536  001D8C  D7E1               	goto	i2l3084
  8537  001D8E  0A07               	xorlw	7	; case 4
  8538  001D90  B4D8               	btfsc	status,2,c
  8539  001D92  D7E7               	goto	i2l3090
  8540  001D94  0A01               	xorlw	1	; case 5
  8541  001D96  0012               	return	
  8542  001D98                     __end_of_handleState:
  8543                           	opt stack 0
  8544                           pclatu	equ	0xFFB
  8545                           pclath	equ	0xFFA
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           intcon2	equ	0xFF1
  8554                           postinc0	equ	0xFEE
  8555                           plusw0	equ	0xFEB
  8556                           fsr0h	equ	0xFEA
  8557                           fsr0l	equ	0xFE9
  8558                           wreg	equ	0xFE8
  8559                           postdec1	equ	0xFE5
  8560                           plusw1	equ	0xFE3
  8561                           fsr1h	equ	0xFE2
  8562                           fsr1l	equ	0xFE1
  8563                           bsr	equ	0xFE0
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           postdec2	equ	0xFDD
  8567                           plusw2	equ	0xFDB
  8568                           fsr2h	equ	0xFDA
  8569                           fsr2l	equ	0xFD9
  8570                           status	equ	0xFD8
  8571                           
  8572 ;; *************** function i2_pwmColors *****************
  8573 ;; Defined at:
  8574 ;;		line 49 in file "Drivers/PWM_Driver.c"
  8575 ;; Parameters:    Size  Location     Type
  8576 ;;  birghtness      1    wreg     unsigned char 
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  birghtness      1    2[COMRAM] unsigned char 
  8579 ;; Return value:  Size  Location     Type
  8580 ;;                  1    wreg      void 
  8581 ;; Registers used:
  8582 ;;		wreg, status,2, status,0
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : 0/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8588 ;;      Params:         0       0       0       0       0       0       0       0       0
  8589 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8590 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8591 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8592 ;;Total ram usage:        3 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_handleState
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text50
  8602  0019E6                     __ptext50:
  8603                           	opt stack 0
  8604  0019E6                     i2_pwmColors:
  8605                           	opt stack 15
  8606                           
  8607                           ;incstack = 0
  8608                           ;i2pwmColors@birghtness stored from wreg
  8609  0019E6  6E03               	movwf	i2pwmColors@birghtness,c
  8610                           
  8611                           ;PWM_Driver.c: 51: if (state != Disabled) {
  8612  0019E8  0E05               	movlw	5
  8613  0019EA  182E               	xorwf	_state,w,c
  8614  0019EC  B4D8               	btfsc	status,2,c
  8615  0019EE  D046               	goto	i2l233
  8616                           
  8617                           ;PWM_Driver.c: 52: if (PWM_Red.duty_cnt >= (PWM_Red.duty_val >> (7-birghtness))) {
  8618  0019F0  5003               	movf	i2pwmColors@birghtness,w,c
  8619  0019F2  0800               	sublw	0
  8620  0019F4  6E01               	movwf	??i2_pwmColors& (0+255),c
  8621  0019F6  0E07               	movlw	7
  8622  0019F8  2601               	addwf	??i2_pwmColors,f,c
  8623  0019FA  C0CD  F002         	movff	_PWM_Red+1,??i2_pwmColors+1
  8624  0019FE  2A01               	incf	??i2_pwmColors,f,c
  8625  001A00  D002               	goto	i2u236_44
  8626  001A02                     i2u236_45:
  8627  001A02  90D8               	bcf	status,0,c
  8628  001A04  3202               	rrcf	??i2_pwmColors+1,f,c
  8629  001A06                     i2u236_44:
  8630  001A06  2E01               	decfsz	??i2_pwmColors,f,c
  8631  001A08  D7FC               	goto	i2u236_45
  8632  001A0A  5002               	movf	??i2_pwmColors+1,w,c
  8633  001A0C  0100               	movlb	0	; () banked
  8634  001A0E  5DCC               	subwf	_PWM_Red& (0+255),w,b
  8635  001A10  A0D8               	btfss	status,0,c
  8636  001A12  D002               	goto	i2l234
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;PWM_Driver.c: 53: PORTBbits.RB2 = 0;
  8640  001A14  9481               	bcf	3969,2,c	;volatile
  8641                           
  8642                           ;PWM_Driver.c: 54: } else {
  8643  001A16  D001               	goto	i2l2890
  8644  001A18                     i2l234:
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;PWM_Driver.c: 55: PORTBbits.RB2 = 1;
  8648  001A18  8481               	bsf	3969,2,c	;volatile
  8649  001A1A                     i2l2890:
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;PWM_Driver.c: 56: }
  8653                           ;PWM_Driver.c: 58: if (PWM_Green.duty_cnt >= (PWM_Green.duty_val >> (7-birghtness))) {
  8654  001A1A  5003               	movf	i2pwmColors@birghtness,w,c
  8655  001A1C  0800               	sublw	0
  8656  001A1E  6E01               	movwf	??i2_pwmColors& (0+255),c
  8657  001A20  0E07               	movlw	7
  8658  001A22  2601               	addwf	??i2_pwmColors,f,c
  8659  001A24  C0CB  F002         	movff	_PWM_Green+1,??i2_pwmColors+1
  8660  001A28  2A01               	incf	??i2_pwmColors,f,c
  8661  001A2A  D002               	goto	i2u238_44
  8662  001A2C                     i2u238_45:
  8663  001A2C  90D8               	bcf	status,0,c
  8664  001A2E  3202               	rrcf	??i2_pwmColors+1,f,c
  8665  001A30                     i2u238_44:
  8666  001A30  2E01               	decfsz	??i2_pwmColors,f,c
  8667  001A32  D7FC               	goto	i2u238_45
  8668  001A34  5002               	movf	??i2_pwmColors+1,w,c
  8669  001A36  0100               	movlb	0	; () banked
  8670  001A38  5DCA               	subwf	_PWM_Green& (0+255),w,b
  8671  001A3A  A0D8               	btfss	status,0,c
  8672  001A3C  D002               	goto	i2l236
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;PWM_Driver.c: 59: PORTBbits.RB3 = 0;
  8676  001A3E  9681               	bcf	3969,3,c	;volatile
  8677                           
  8678                           ;PWM_Driver.c: 60: } else {
  8679  001A40  D001               	goto	i2l2894
  8680  001A42                     i2l236:
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;PWM_Driver.c: 61: PORTBbits.RB3 = 1;
  8684  001A42  8681               	bsf	3969,3,c	;volatile
  8685  001A44                     i2l2894:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;PWM_Driver.c: 62: }
  8689                           ;PWM_Driver.c: 64: if (PWM_Blue.duty_cnt >= (PWM_Blue.duty_val >> (7-birghtness))) {
  8690  001A44  5003               	movf	i2pwmColors@birghtness,w,c
  8691  001A46  0800               	sublw	0
  8692  001A48  6E01               	movwf	??i2_pwmColors& (0+255),c
  8693  001A4A  0E07               	movlw	7
  8694  001A4C  2601               	addwf	??i2_pwmColors,f,c
  8695  001A4E  C0C9  F002         	movff	_PWM_Blue+1,??i2_pwmColors+1
  8696  001A52  2A01               	incf	??i2_pwmColors,f,c
  8697  001A54  D002               	goto	i2u240_44
  8698  001A56                     i2u240_45:
  8699  001A56  90D8               	bcf	status,0,c
  8700  001A58  3202               	rrcf	??i2_pwmColors+1,f,c
  8701  001A5A                     i2u240_44:
  8702  001A5A  2E01               	decfsz	??i2_pwmColors,f,c
  8703  001A5C  D7FC               	goto	i2u240_45
  8704  001A5E  5002               	movf	??i2_pwmColors+1,w,c
  8705  001A60  0100               	movlb	0	; () banked
  8706  001A62  5DC8               	subwf	_PWM_Blue& (0+255),w,b
  8707  001A64  A0D8               	btfss	status,0,c
  8708  001A66  D002               	goto	i2l238
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;PWM_Driver.c: 65: PORTBbits.RB1 = 0;
  8712  001A68  9281               	bcf	3969,1,c	;volatile
  8713                           
  8714                           ;PWM_Driver.c: 66: } else {
  8715  001A6A  D001               	goto	i2l2898
  8716  001A6C                     i2l238:
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;PWM_Driver.c: 67: PORTBbits.RB1 = 1;
  8720  001A6C  8281               	bsf	3969,1,c	;volatile
  8721  001A6E                     i2l2898:
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;PWM_Driver.c: 68: }
  8725                           ;PWM_Driver.c: 71: PWM_Red.duty_cnt++;
  8726  001A6E  0100               	movlb	0	; () banked
  8727  001A70  2BCC               	incf	_PWM_Red& (0+255),f,b
  8728                           
  8729                           ;PWM_Driver.c: 72: PWM_Green.duty_cnt++;
  8730  001A72  0100               	movlb	0	; () banked
  8731  001A74  2BCA               	incf	_PWM_Green& (0+255),f,b
  8732                           
  8733                           ;PWM_Driver.c: 73: PWM_Blue.duty_cnt++;
  8734  001A76  0100               	movlb	0	; () banked
  8735  001A78  2BC8               	incf	_PWM_Blue& (0+255),f,b
  8736                           
  8737                           ;PWM_Driver.c: 74: } else {
  8738  001A7A  0012               	return	
  8739  001A7C                     i2l233:
  8740                           
  8741                           ;PWM_Driver.c: 75: PORTBbits.RB2 = 0;
  8742  001A7C  9481               	bcf	3969,2,c	;volatile
  8743                           
  8744                           ;PWM_Driver.c: 76: PORTBbits.RB3 = 0;
  8745  001A7E  9681               	bcf	3969,3,c	;volatile
  8746                           
  8747                           ;PWM_Driver.c: 77: PORTBbits.RB1 = 0;
  8748  001A80  9281               	bcf	3969,1,c	;volatile
  8749  001A82  0012               	return	
  8750  001A84                     __end_ofi2_pwmColors:
  8751                           	opt stack 0
  8752                           pclatu	equ	0xFFB
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           postinc0	equ	0xFEE
  8763                           plusw0	equ	0xFEB
  8764                           fsr0h	equ	0xFEA
  8765                           fsr0l	equ	0xFE9
  8766                           wreg	equ	0xFE8
  8767                           postdec1	equ	0xFE5
  8768                           plusw1	equ	0xFE3
  8769                           fsr1h	equ	0xFE2
  8770                           fsr1l	equ	0xFE1
  8771                           bsr	equ	0xFE0
  8772                           indf2	equ	0xFDF
  8773                           postinc2	equ	0xFDE
  8774                           postdec2	equ	0xFDD
  8775                           plusw2	equ	0xFDB
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _strobe2 *****************
  8781 ;; Defined at:
  8782 ;;		line 132 in file "Drivers/PWM_Driver.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  1    wreg      void 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0
  8797 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8798 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8799 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8800 ;;Total ram usage:        5 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    2
  8803 ;; This function calls:
  8804 ;;		i2_setRGB
  8805 ;; This function is called by:
  8806 ;;		_handleState
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text51
  8811  001C2E                     __ptext51:
  8812                           	opt stack 0
  8813  001C2E                     _strobe2:
  8814                           	opt stack 13
  8815                           
  8816                           ;PWM_Driver.c: 133: static uint8_t cnt;
  8817                           ;PWM_Driver.c: 134: static uint8_t on_cnt;
  8818                           ;PWM_Driver.c: 135: static bool on;
  8819                           ;PWM_Driver.c: 137: if (cnt < ((scale<<6)+1)) {
  8820                           
  8821                           ;incstack = 0
  8822  001C2E  502D               	movf	_scale,w,c
  8823  001C30  6E06               	movwf	??_strobe2& (0+255),c
  8824  001C32  6A07               	clrf	(??_strobe2+1)& (0+255),c
  8825  001C34  0E06               	movlw	6
  8826  001C36                     i2u205_45:
  8827  001C36  90D8               	bcf	status,0,c
  8828  001C38  3606               	rlcf	??_strobe2,f,c
  8829  001C3A  3607               	rlcf	??_strobe2+1,f,c
  8830  001C3C  2EE8               	decfsz	wreg,f,c
  8831  001C3E  D7FB               	goto	i2u205_45
  8832  001C40  0E01               	movlw	1
  8833  001C42  2606               	addwf	??_strobe2,f,c
  8834  001C44  0E00               	movlw	0
  8835  001C46  2207               	addwfc	??_strobe2+1,f,c
  8836  001C48  5039               	movf	strobe2@cnt,w,c
  8837  001C4A  6E08               	movwf	(??_strobe2+2)& (0+255),c
  8838  001C4C  6A09               	clrf	(??_strobe2+3)& (0+255),c
  8839  001C4E  5006               	movf	??_strobe2,w,c
  8840  001C50  5C08               	subwf	??_strobe2+2,w,c
  8841  001C52  5009               	movf	??_strobe2+3,w,c
  8842  001C54  0A80               	xorlw	128
  8843  001C56  6E0A               	movwf	(??_strobe2+4)& (0+255),c
  8844  001C58  5007               	movf	??_strobe2+1,w,c
  8845  001C5A  0A80               	xorlw	128
  8846  001C5C  580A               	subwfb	(??_strobe2+4)& (0+255),w,c
  8847  001C5E  B0D8               	btfsc	status,0,c
  8848  001C60  D018               	goto	i2l2686
  8849                           
  8850                           ;PWM_Driver.c: 138: if (on_cnt < 2) {
  8851  001C62  0E02               	movlw	2
  8852  001C64  603B               	cpfslt	strobe2@on_cnt,c
  8853  001C66  D008               	goto	i2l2678
  8854                           
  8855                           ;PWM_Driver.c: 139: setRGB(255,255,255);
  8856  001C68  0EFF               	movlw	255
  8857  001C6A  6E03               	movwf	i2setRGB@g,c
  8858  001C6C  0EFF               	movlw	255
  8859  001C6E  6E04               	movwf	i2setRGB@b,c
  8860  001C70  0EFF               	movlw	255
  8861  001C72  EC5E  F011         	call	i2_setRGB
  8862                           
  8863                           ;PWM_Driver.c: 140: } else {
  8864  001C76  D007               	goto	i2l2680
  8865  001C78                     i2l2678:
  8866                           
  8867                           ;PWM_Driver.c: 141: setRGB(0,0,0);
  8868  001C78  0E00               	movlw	0
  8869  001C7A  6E03               	movwf	i2setRGB@g,c
  8870  001C7C  0E00               	movlw	0
  8871  001C7E  6E04               	movwf	i2setRGB@b,c
  8872  001C80  0E00               	movlw	0
  8873  001C82  EC5E  F011         	call	i2_setRGB
  8874  001C86                     i2l2680:
  8875                           
  8876                           ;PWM_Driver.c: 142: }
  8877                           ;PWM_Driver.c: 144: on_cnt++;
  8878  001C86  2A3B               	incf	strobe2@on_cnt,f,c
  8879                           
  8880                           ;PWM_Driver.c: 145: if (on_cnt >= 20) {
  8881  001C88  0E13               	movlw	19
  8882  001C8A  643B               	cpfsgt	strobe2@on_cnt,c
  8883  001C8C  D002               	goto	i2l2686
  8884                           
  8885                           ;PWM_Driver.c: 146: on_cnt = 0;
  8886  001C8E  0E00               	movlw	0
  8887  001C90  6E3B               	movwf	strobe2@on_cnt,c
  8888  001C92                     i2l2686:
  8889                           
  8890                           ;PWM_Driver.c: 147: }
  8891                           ;PWM_Driver.c: 148: }
  8892                           ;PWM_Driver.c: 149: cnt += ((scale<<6) + 1);
  8893  001C92  C02D  F006         	movff	_scale,??_strobe2
  8894  001C96  0E06               	movlw	6
  8895  001C98  6E07               	movwf	(??_strobe2+1)& (0+255),c
  8896  001C9A                     i2u209_45:
  8897  001C9A  90D8               	bcf	status,0,c
  8898  001C9C  3606               	rlcf	??_strobe2,f,c
  8899  001C9E  2E07               	decfsz	(??_strobe2+1)& (0+255),f,c
  8900  001CA0  D7FC               	goto	i2u209_45
  8901  001CA2  2806               	incf	??_strobe2,w,c
  8902  001CA4  2639               	addwf	strobe2@cnt,f,c
  8903  001CA6  0012               	return		;funcret
  8904  001CA8                     __end_of_strobe2:
  8905                           	opt stack 0
  8906                           pclatu	equ	0xFFB
  8907                           pclath	equ	0xFFA
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           intcon2	equ	0xFF1
  8916                           postinc0	equ	0xFEE
  8917                           plusw0	equ	0xFEB
  8918                           fsr0h	equ	0xFEA
  8919                           fsr0l	equ	0xFE9
  8920                           wreg	equ	0xFE8
  8921                           postdec1	equ	0xFE5
  8922                           plusw1	equ	0xFE3
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           bsr	equ	0xFE0
  8926                           indf2	equ	0xFDF
  8927                           postinc2	equ	0xFDE
  8928                           postdec2	equ	0xFDD
  8929                           plusw2	equ	0xFDB
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _smooth *****************
  8935 ;; Defined at:
  8936 ;;		line 209 in file "Drivers/PWM_Driver.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8950 ;;      Params:         0       0       0       0       0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8952 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8953 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8954 ;;Total ram usage:        6 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    2
  8957 ;; This function calls:
  8958 ;;		i2_setRGB
  8959 ;; This function is called by:
  8960 ;;		_handleState
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           	psect	text52
  8965  00157E                     __ptext52:
  8966                           	opt stack 0
  8967  00157E                     _smooth:
  8968                           	opt stack 13
  8969                           
  8970                           ;PWM_Driver.c: 210: static uint8_t count;
  8971                           ;PWM_Driver.c: 211: static uint8_t color;
  8972                           ;PWM_Driver.c: 213: if (count >= (0xFF >> scale)) {
  8973                           
  8974                           ;incstack = 0
  8975  00157E  C02D  F006         	movff	_scale,??_smooth
  8976  001582  0EFF               	movlw	255
  8977  001584  6E07               	movwf	(??_smooth+1)& (0+255),c
  8978  001586  0E00               	movlw	0
  8979  001588  6E08               	movwf	(??_smooth+2)& (0+255),c
  8980  00158A  2A06               	incf	??_smooth,f,c
  8981  00158C  D003               	goto	i2u220_44
  8982  00158E                     i2u220_45:
  8983  00158E  3408               	rlcf	??_smooth+2,w,c
  8984  001590  3208               	rrcf	??_smooth+2,f,c
  8985  001592  3207               	rrcf	??_smooth+1,f,c
  8986  001594                     i2u220_44:
  8987  001594  2E06               	decfsz	??_smooth,f,c
  8988  001596  D7FB               	goto	i2u220_45
  8989  001598  5038               	movf	smooth@count,w,c
  8990  00159A  6E09               	movwf	(??_smooth+3)& (0+255),c
  8991  00159C  6A0A               	clrf	(??_smooth+4)& (0+255),c
  8992  00159E  5007               	movf	??_smooth+1,w,c
  8993  0015A0  5C09               	subwf	??_smooth+3,w,c
  8994  0015A2  500A               	movf	??_smooth+4,w,c
  8995  0015A4  0A80               	xorlw	128
  8996  0015A6  6E0B               	movwf	(??_smooth+5)& (0+255),c
  8997  0015A8  5008               	movf	??_smooth+2,w,c
  8998  0015AA  0A80               	xorlw	128
  8999  0015AC  580B               	subwfb	(??_smooth+5)& (0+255),w,c
  9000  0015AE  A0D8               	btfss	status,0,c
  9001  0015B0  D002               	goto	i2l318
  9002                           
  9003                           ;PWM_Driver.c: 214: count = 0;
  9004  0015B2  0E00               	movlw	0
  9005  0015B4  6E38               	movwf	smooth@count,c
  9006  0015B6                     i2l318:
  9007                           
  9008                           ;PWM_Driver.c: 215: }
  9009                           ;PWM_Driver.c: 216: if (count == 0) {
  9010  0015B6  5038               	movf	smooth@count,w,c
  9011  0015B8  B4D8               	btfsc	status,2,c
  9012  0015BA  D038               	goto	i2l2768
  9013  0015BC  D04A               	goto	i2l2770
  9014  0015BE                     i2l2742:
  9015                           
  9016                           ;PWM_Driver.c: 219: setRGB(255, 0, 0);
  9017  0015BE  0E00               	movlw	0
  9018  0015C0  6E03               	movwf	i2setRGB@g,c
  9019  0015C2  0E00               	movlw	0
  9020  0015C4  6E04               	movwf	i2setRGB@b,c
  9021  0015C6  0EFF               	movlw	255
  9022  0015C8  EC5E  F011         	call	i2_setRGB
  9023                           
  9024                           ;PWM_Driver.c: 220: color = 1;
  9025  0015CC  0E01               	movlw	1
  9026  0015CE  D02C               	goto	L10
  9027  0015D0                     i2l2746:
  9028                           
  9029                           ;PWM_Driver.c: 223: setRGB(255, 255, 0);
  9030  0015D0  0EFF               	movlw	255
  9031  0015D2  6E03               	movwf	i2setRGB@g,c
  9032  0015D4  0E00               	movlw	0
  9033  0015D6  6E04               	movwf	i2setRGB@b,c
  9034  0015D8  0EFF               	movlw	255
  9035  0015DA  EC5E  F011         	call	i2_setRGB
  9036                           
  9037                           ;PWM_Driver.c: 224: color = 2;
  9038  0015DE  0E02               	movlw	2
  9039  0015E0  D023               	goto	L10
  9040  0015E2                     i2l2750:
  9041                           
  9042                           ;PWM_Driver.c: 227: setRGB(0, 255, 0);
  9043  0015E2  0EFF               	movlw	255
  9044  0015E4  6E03               	movwf	i2setRGB@g,c
  9045  0015E6  0E00               	movlw	0
  9046  0015E8  6E04               	movwf	i2setRGB@b,c
  9047  0015EA  0E00               	movlw	0
  9048  0015EC  EC5E  F011         	call	i2_setRGB
  9049                           
  9050                           ;PWM_Driver.c: 228: color = 3;
  9051  0015F0  0E03               	movlw	3
  9052  0015F2  D01A               	goto	L10
  9053  0015F4                     i2l2754:
  9054                           
  9055                           ;PWM_Driver.c: 231: setRGB(0, 255, 255);
  9056  0015F4  0EFF               	movlw	255
  9057  0015F6  6E03               	movwf	i2setRGB@g,c
  9058  0015F8  0EFF               	movlw	255
  9059  0015FA  6E04               	movwf	i2setRGB@b,c
  9060  0015FC  0E00               	movlw	0
  9061  0015FE  EC5E  F011         	call	i2_setRGB
  9062                           
  9063                           ;PWM_Driver.c: 232: color = 4;
  9064  001602  0E04               	movlw	4
  9065  001604  D011               	goto	L10
  9066  001606                     i2l2758:
  9067                           
  9068                           ;PWM_Driver.c: 235: setRGB(0, 0, 255);
  9069  001606  0E00               	movlw	0
  9070  001608  6E03               	movwf	i2setRGB@g,c
  9071  00160A  0EFF               	movlw	255
  9072  00160C  6E04               	movwf	i2setRGB@b,c
  9073  00160E  0E00               	movlw	0
  9074  001610  EC5E  F011         	call	i2_setRGB
  9075                           
  9076                           ;PWM_Driver.c: 236: color = 5;
  9077  001614  0E05               	movlw	5
  9078  001616  D008               	goto	L10
  9079  001618                     i2l2762:
  9080                           
  9081                           ;PWM_Driver.c: 239: setRGB(255, 0, 255);
  9082  001618  0E00               	movlw	0
  9083  00161A  6E03               	movwf	i2setRGB@g,c
  9084  00161C  0EFF               	movlw	255
  9085  00161E  6E04               	movwf	i2setRGB@b,c
  9086  001620  0EFF               	movlw	255
  9087  001622  EC5E  F011         	call	i2_setRGB
  9088                           
  9089                           ;PWM_Driver.c: 240: color = 0;
  9090  001626  0E00               	movlw	0
  9091  001628                     L10:
  9092  001628  6E37               	movwf	smooth@color,c
  9093                           
  9094                           ;PWM_Driver.c: 242: }
  9095                           
  9096                           ;PWM_Driver.c: 241: break;
  9097  00162A  D013               	goto	i2l2770
  9098  00162C                     i2l2768:
  9099  00162C  5037               	movf	smooth@color,w,c
  9100                           
  9101                           ; Switch size 1, requested type "space"
  9102                           ; Number of cases is 6, Range of values is 0 to 5
  9103                           ; switch strategies available:
  9104                           ; Name         Instructions Cycles
  9105                           ; simple_byte           19    10 (average)
  9106                           ;	Chosen strategy is simple_byte
  9107  00162E  0A00               	xorlw	0	; case 0
  9108  001630  B4D8               	btfsc	status,2,c
  9109  001632  D7C5               	goto	i2l2742
  9110  001634  0A01               	xorlw	1	; case 1
  9111  001636  B4D8               	btfsc	status,2,c
  9112  001638  D7CB               	goto	i2l2746
  9113  00163A  0A03               	xorlw	3	; case 2
  9114  00163C  B4D8               	btfsc	status,2,c
  9115  00163E  D7D1               	goto	i2l2750
  9116  001640  0A01               	xorlw	1	; case 3
  9117  001642  B4D8               	btfsc	status,2,c
  9118  001644  D7D7               	goto	i2l2754
  9119  001646  0A07               	xorlw	7	; case 4
  9120  001648  B4D8               	btfsc	status,2,c
  9121  00164A  D7DD               	goto	i2l2758
  9122  00164C  0A01               	xorlw	1	; case 5
  9123  00164E  B4D8               	btfsc	status,2,c
  9124  001650  D7E3               	goto	i2l2762
  9125  001652                     i2l2770:
  9126                           
  9127                           ;PWM_Driver.c: 243: }
  9128                           ;PWM_Driver.c: 245: count++;
  9129  001652  2A38               	incf	smooth@count,f,c
  9130  001654  0012               	return		;funcret
  9131  001656                     __end_of_smooth:
  9132                           	opt stack 0
  9133                           pclatu	equ	0xFFB
  9134                           pclath	equ	0xFFA
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           intcon	equ	0xFF2
  9142                           intcon2	equ	0xFF1
  9143                           postinc0	equ	0xFEE
  9144                           plusw0	equ	0xFEB
  9145                           fsr0h	equ	0xFEA
  9146                           fsr0l	equ	0xFE9
  9147                           wreg	equ	0xFE8
  9148                           postdec1	equ	0xFE5
  9149                           plusw1	equ	0xFE3
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           bsr	equ	0xFE0
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           plusw2	equ	0xFDB
  9157                           fsr2h	equ	0xFDA
  9158                           fsr2l	equ	0xFD9
  9159                           status	equ	0xFD8
  9160                           
  9161 ;; *************** function _flash *****************
  9162 ;; Defined at:
  9163 ;;		line 81 in file "Drivers/PWM_Driver.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;		None
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;		None
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  1    wreg      void 
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9177 ;;      Params:         0       0       0       0       0       0       0       0       0
  9178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9179 ;;      Temps:          6       0       0       0       0       0       0       0       0
  9180 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9181 ;;Total ram usage:        6 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    2
  9184 ;; This function calls:
  9185 ;;		i2_setRGB
  9186 ;; This function is called by:
  9187 ;;		_handleState
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text53
  9192  00189E                     __ptext53:
  9193                           	opt stack 0
  9194  00189E                     _flash:
  9195                           	opt stack 13
  9196                           
  9197                           ;PWM_Driver.c: 82: static uint8_t count;
  9198                           ;PWM_Driver.c: 83: static uint8_t color;
  9199                           ;PWM_Driver.c: 85: if (count >= (0xFF >> scale)) {
  9200                           
  9201                           ;incstack = 0
  9202  00189E  C02D  F006         	movff	_scale,??_flash
  9203  0018A2  0EFF               	movlw	255
  9204  0018A4  6E07               	movwf	(??_flash+1)& (0+255),c
  9205  0018A6  0E00               	movlw	0
  9206  0018A8  6E08               	movwf	(??_flash+2)& (0+255),c
  9207  0018AA  2A06               	incf	??_flash,f,c
  9208  0018AC  D003               	goto	i2u202_44
  9209  0018AE                     i2u202_45:
  9210  0018AE  3408               	rlcf	??_flash+2,w,c
  9211  0018B0  3208               	rrcf	??_flash+2,f,c
  9212  0018B2  3207               	rrcf	??_flash+1,f,c
  9213  0018B4                     i2u202_44:
  9214  0018B4  2E06               	decfsz	??_flash,f,c
  9215  0018B6  D7FB               	goto	i2u202_45
  9216  0018B8  5035               	movf	flash@count,w,c
  9217  0018BA  6E09               	movwf	(??_flash+3)& (0+255),c
  9218  0018BC  6A0A               	clrf	(??_flash+4)& (0+255),c
  9219  0018BE  5007               	movf	??_flash+1,w,c
  9220  0018C0  5C09               	subwf	??_flash+3,w,c
  9221  0018C2  500A               	movf	??_flash+4,w,c
  9222  0018C4  0A80               	xorlw	128
  9223  0018C6  6E0B               	movwf	(??_flash+5)& (0+255),c
  9224  0018C8  5008               	movf	??_flash+2,w,c
  9225  0018CA  0A80               	xorlw	128
  9226  0018CC  580B               	subwfb	(??_flash+5)& (0+255),w,c
  9227  0018CE  A0D8               	btfss	status,0,c
  9228  0018D0  D002               	goto	i2l248
  9229                           
  9230                           ;PWM_Driver.c: 86: count = 0;
  9231  0018D2  0E00               	movlw	0
  9232  0018D4  6E35               	movwf	flash@count,c
  9233  0018D6                     i2l248:
  9234                           
  9235                           ;PWM_Driver.c: 87: }
  9236                           ;PWM_Driver.c: 88: if (count == 0) {
  9237  0018D6  5035               	movf	flash@count,w,c
  9238  0018D8  B4D8               	btfsc	status,2,c
  9239  0018DA  D026               	goto	i2l2668
  9240  0018DC  D032               	goto	i2l2670
  9241  0018DE                     i2l2650:
  9242                           
  9243                           ;PWM_Driver.c: 91: setRGB(255, 0, 0);
  9244  0018DE  0E00               	movlw	0
  9245  0018E0  6E03               	movwf	i2setRGB@g,c
  9246  0018E2  0E00               	movlw	0
  9247  0018E4  6E04               	movwf	i2setRGB@b,c
  9248  0018E6  0EFF               	movlw	255
  9249  0018E8  EC5E  F011         	call	i2_setRGB
  9250                           
  9251                           ;PWM_Driver.c: 92: color = 1;
  9252  0018EC  0E01               	movlw	1
  9253  0018EE  D01A               	goto	L13
  9254  0018F0                     i2l2654:
  9255                           
  9256                           ;PWM_Driver.c: 95: setRGB(0, 255, 0);
  9257  0018F0  0EFF               	movlw	255
  9258  0018F2  6E03               	movwf	i2setRGB@g,c
  9259  0018F4  0E00               	movlw	0
  9260  0018F6  6E04               	movwf	i2setRGB@b,c
  9261  0018F8  0E00               	movlw	0
  9262  0018FA  EC5E  F011         	call	i2_setRGB
  9263                           
  9264                           ;PWM_Driver.c: 96: color = 2;
  9265  0018FE  0E02               	movlw	2
  9266  001900  D011               	goto	L13
  9267  001902                     i2l2658:
  9268                           
  9269                           ;PWM_Driver.c: 99: setRGB(0, 0, 255);
  9270  001902  0E00               	movlw	0
  9271  001904  6E03               	movwf	i2setRGB@g,c
  9272  001906  0EFF               	movlw	255
  9273  001908  6E04               	movwf	i2setRGB@b,c
  9274  00190A  0E00               	movlw	0
  9275  00190C  EC5E  F011         	call	i2_setRGB
  9276                           
  9277                           ;PWM_Driver.c: 100: color = 3;
  9278  001910  0E03               	movlw	3
  9279  001912  D008               	goto	L13
  9280  001914                     i2l2662:
  9281                           
  9282                           ;PWM_Driver.c: 103: setRGB(255, 255, 255);
  9283  001914  0EFF               	movlw	255
  9284  001916  6E03               	movwf	i2setRGB@g,c
  9285  001918  0EFF               	movlw	255
  9286  00191A  6E04               	movwf	i2setRGB@b,c
  9287  00191C  0EFF               	movlw	255
  9288  00191E  EC5E  F011         	call	i2_setRGB
  9289                           
  9290                           ;PWM_Driver.c: 104: color = 0;
  9291  001922  0E00               	movlw	0
  9292  001924                     L13:
  9293  001924  6E34               	movwf	flash@color,c
  9294                           
  9295                           ;PWM_Driver.c: 106: }
  9296                           
  9297                           ;PWM_Driver.c: 105: break;
  9298  001926  D00D               	goto	i2l2670
  9299  001928                     i2l2668:
  9300  001928  5034               	movf	flash@color,w,c
  9301                           
  9302                           ; Switch size 1, requested type "space"
  9303                           ; Number of cases is 4, Range of values is 0 to 3
  9304                           ; switch strategies available:
  9305                           ; Name         Instructions Cycles
  9306                           ; simple_byte           13     7 (average)
  9307                           ;	Chosen strategy is simple_byte
  9308  00192A  0A00               	xorlw	0	; case 0
  9309  00192C  B4D8               	btfsc	status,2,c
  9310  00192E  D7D7               	goto	i2l2650
  9311  001930  0A01               	xorlw	1	; case 1
  9312  001932  B4D8               	btfsc	status,2,c
  9313  001934  D7DD               	goto	i2l2654
  9314  001936  0A03               	xorlw	3	; case 2
  9315  001938  B4D8               	btfsc	status,2,c
  9316  00193A  D7E3               	goto	i2l2658
  9317  00193C  0A01               	xorlw	1	; case 3
  9318  00193E  B4D8               	btfsc	status,2,c
  9319  001940  D7E9               	goto	i2l2662
  9320  001942                     i2l2670:
  9321                           
  9322                           ;PWM_Driver.c: 107: }
  9323                           ;PWM_Driver.c: 109: count++;
  9324  001942  2A35               	incf	flash@count,f,c
  9325  001944  0012               	return		;funcret
  9326  001946                     __end_of_flash:
  9327                           	opt stack 0
  9328                           pclatu	equ	0xFFB
  9329                           pclath	equ	0xFFA
  9330                           tblptru	equ	0xFF8
  9331                           tblptrh	equ	0xFF7
  9332                           tblptrl	equ	0xFF6
  9333                           tablat	equ	0xFF5
  9334                           prodh	equ	0xFF4
  9335                           prodl	equ	0xFF3
  9336                           intcon	equ	0xFF2
  9337                           intcon2	equ	0xFF1
  9338                           postinc0	equ	0xFEE
  9339                           plusw0	equ	0xFEB
  9340                           fsr0h	equ	0xFEA
  9341                           fsr0l	equ	0xFE9
  9342                           wreg	equ	0xFE8
  9343                           postdec1	equ	0xFE5
  9344                           plusw1	equ	0xFE3
  9345                           fsr1h	equ	0xFE2
  9346                           fsr1l	equ	0xFE1
  9347                           bsr	equ	0xFE0
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           plusw2	equ	0xFDB
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _fade *****************
  9357 ;; Defined at:
  9358 ;;		line 152 in file "Drivers/PWM_Driver.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		wreg, status,2, status,0, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9375 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9376 ;;Total ram usage:        0 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    2
  9379 ;; This function calls:
  9380 ;;		i2_setRGB
  9381 ;; This function is called by:
  9382 ;;		_handleState
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           	psect	text54
  9387  001B1A                     __ptext54:
  9388                           	opt stack 0
  9389  001B1A                     _fade:
  9390                           	opt stack 13
  9391                           
  9392                           ;PWM_Driver.c: 153: static uint8_t r_cnt = 0x00;
  9393                           ;PWM_Driver.c: 154: static uint8_t g_cnt = 0x80;
  9394                           ;PWM_Driver.c: 155: static uint8_t b_cnt = 0xFF;
  9395                           ;PWM_Driver.c: 156: static bool r_up;
  9396                           ;PWM_Driver.c: 157: static bool g_up;
  9397                           ;PWM_Driver.c: 158: static bool b_up;
  9398                           ;PWM_Driver.c: 159: static bool fade;
  9399                           ;PWM_Driver.c: 161: if (fade) {
  9400                           
  9401                           ;incstack = 0
  9402  001B1A  5030               	movf	fade@fade,w,c
  9403  001B1C  B4D8               	btfsc	status,2,c
  9404  001B1E  D039               	goto	i2l2732
  9405                           
  9406                           ;PWM_Driver.c: 162: fade = 0;
  9407  001B20  0E00               	movlw	0
  9408  001B22  6E30               	movwf	fade@fade,c
  9409                           
  9410                           ;PWM_Driver.c: 164: if (r_cnt > 0xF7) {
  9411  001B24  0EF7               	movlw	247
  9412  001B26  6432               	cpfsgt	fade@r_cnt,c
  9413  001B28  D002               	goto	i2l2696
  9414                           
  9415                           ;PWM_Driver.c: 165: r_up = 0;
  9416  001B2A  0E00               	movlw	0
  9417  001B2C  6E33               	movwf	fade@r_up,c
  9418  001B2E                     i2l2696:
  9419                           
  9420                           ;PWM_Driver.c: 166: }
  9421                           ;PWM_Driver.c: 167: if (r_cnt < 8) {
  9422  001B2E  0E08               	movlw	8
  9423  001B30  6032               	cpfslt	fade@r_cnt,c
  9424  001B32  D002               	goto	i2l2700
  9425                           
  9426                           ;PWM_Driver.c: 168: r_up = 1;
  9427  001B34  0E01               	movlw	1
  9428  001B36  6E33               	movwf	fade@r_up,c
  9429  001B38                     i2l2700:
  9430                           
  9431                           ;PWM_Driver.c: 169: }
  9432                           ;PWM_Driver.c: 171: if (g_cnt > 0xF7) {
  9433  001B38  0EF7               	movlw	247
  9434  001B3A  6445               	cpfsgt	fade@g_cnt,c
  9435  001B3C  D002               	goto	i2l2704
  9436                           
  9437                           ;PWM_Driver.c: 172: g_up = 0;
  9438  001B3E  0E00               	movlw	0
  9439  001B40  6E31               	movwf	fade@g_up,c
  9440  001B42                     i2l2704:
  9441                           
  9442                           ;PWM_Driver.c: 173: }
  9443                           ;PWM_Driver.c: 174: if (g_cnt < 8) {
  9444  001B42  0E08               	movlw	8
  9445  001B44  6045               	cpfslt	fade@g_cnt,c
  9446  001B46  D002               	goto	i2l2708
  9447                           
  9448                           ;PWM_Driver.c: 175: g_up = 1;
  9449  001B48  0E01               	movlw	1
  9450  001B4A  6E31               	movwf	fade@g_up,c
  9451  001B4C                     i2l2708:
  9452                           
  9453                           ;PWM_Driver.c: 176: }
  9454                           ;PWM_Driver.c: 178: if (b_cnt > 0xF7) {
  9455  001B4C  0EF7               	movlw	247
  9456  001B4E  6444               	cpfsgt	fade@b_cnt,c
  9457  001B50  D002               	goto	i2l2712
  9458                           
  9459                           ;PWM_Driver.c: 179: b_up = 0;
  9460  001B52  0E00               	movlw	0
  9461  001B54  6E2F               	movwf	fade@b_up,c
  9462  001B56                     i2l2712:
  9463                           
  9464                           ;PWM_Driver.c: 180: }
  9465                           ;PWM_Driver.c: 181: if (b_cnt < 8) {
  9466  001B56  0E08               	movlw	8
  9467  001B58  6044               	cpfslt	fade@b_cnt,c
  9468  001B5A  D002               	goto	i2l303
  9469                           
  9470                           ;PWM_Driver.c: 182: b_up = 1;
  9471  001B5C  0E01               	movlw	1
  9472  001B5E  6E2F               	movwf	fade@b_up,c
  9473  001B60                     i2l303:
  9474                           
  9475                           ;PWM_Driver.c: 183: }
  9476                           ;PWM_Driver.c: 185: if (r_up) {
  9477  001B60  5033               	movf	fade@r_up,w,c
  9478  001B62  B4D8               	btfsc	status,2,c
  9479  001B64  D003               	goto	i2l2718
  9480                           
  9481                           ;PWM_Driver.c: 186: r_cnt+=(scale+1);
  9482  001B66  282D               	incf	_scale,w,c
  9483  001B68  2632               	addwf	fade@r_cnt,f,c
  9484                           
  9485                           ;PWM_Driver.c: 187: } else {
  9486  001B6A  D002               	goto	i2l2720
  9487  001B6C                     i2l2718:
  9488                           
  9489                           ;PWM_Driver.c: 188: r_cnt-=(scale+1);
  9490  001B6C  282D               	incf	_scale,w,c
  9491  001B6E  5E32               	subwf	fade@r_cnt,f,c
  9492  001B70                     i2l2720:
  9493                           
  9494                           ;PWM_Driver.c: 189: }
  9495                           ;PWM_Driver.c: 191: if (g_up) {
  9496  001B70  5031               	movf	fade@g_up,w,c
  9497  001B72  B4D8               	btfsc	status,2,c
  9498  001B74  D003               	goto	i2l2724
  9499                           
  9500                           ;PWM_Driver.c: 192: g_cnt+=(scale+1);
  9501  001B76  282D               	incf	_scale,w,c
  9502  001B78  2645               	addwf	fade@g_cnt,f,c
  9503                           
  9504                           ;PWM_Driver.c: 193: } else {
  9505  001B7A  D002               	goto	i2l2726
  9506  001B7C                     i2l2724:
  9507                           
  9508                           ;PWM_Driver.c: 194: g_cnt-=(scale+1);
  9509  001B7C  282D               	incf	_scale,w,c
  9510  001B7E  5E45               	subwf	fade@g_cnt,f,c
  9511  001B80                     i2l2726:
  9512                           
  9513                           ;PWM_Driver.c: 195: }
  9514                           ;PWM_Driver.c: 197: if (b_up) {
  9515  001B80  502F               	movf	fade@b_up,w,c
  9516  001B82  B4D8               	btfsc	status,2,c
  9517  001B84  D003               	goto	i2l2730
  9518                           
  9519                           ;PWM_Driver.c: 198: b_cnt+=(scale+1);
  9520  001B86  282D               	incf	_scale,w,c
  9521  001B88  2644               	addwf	fade@b_cnt,f,c
  9522                           
  9523                           ;PWM_Driver.c: 199: } else {
  9524  001B8A  D005               	goto	i2l2734
  9525  001B8C                     i2l2730:
  9526                           
  9527                           ;PWM_Driver.c: 200: b_cnt-=(scale+1);
  9528  001B8C  282D               	incf	_scale,w,c
  9529  001B8E  5E44               	subwf	fade@b_cnt,f,c
  9530                           
  9531                           ;PWM_Driver.c: 201: }
  9532                           ;PWM_Driver.c: 202: } else {
  9533  001B90  D002               	goto	i2l2734
  9534  001B92                     i2l2732:
  9535                           
  9536                           ;PWM_Driver.c: 203: fade = 1;
  9537  001B92  0E01               	movlw	1
  9538  001B94  6E30               	movwf	fade@fade,c
  9539  001B96                     i2l2734:
  9540                           
  9541                           ;PWM_Driver.c: 204: }
  9542                           ;PWM_Driver.c: 206: setRGB(r_cnt, g_cnt, b_cnt);
  9543  001B96  C045  F003         	movff	fade@g_cnt,i2setRGB@g
  9544  001B9A  C044  F004         	movff	fade@b_cnt,i2setRGB@b
  9545  001B9E  5032               	movf	fade@r_cnt,w,c
  9546  001BA0  EC5E  F011         	call	i2_setRGB
  9547  001BA4  0012               	return		;funcret
  9548  001BA6                     __end_of_fade:
  9549                           	opt stack 0
  9550                           pclatu	equ	0xFFB
  9551                           pclath	equ	0xFFA
  9552                           tblptru	equ	0xFF8
  9553                           tblptrh	equ	0xFF7
  9554                           tblptrl	equ	0xFF6
  9555                           tablat	equ	0xFF5
  9556                           prodh	equ	0xFF4
  9557                           prodl	equ	0xFF3
  9558                           intcon	equ	0xFF2
  9559                           intcon2	equ	0xFF1
  9560                           postinc0	equ	0xFEE
  9561                           plusw0	equ	0xFEB
  9562                           fsr0h	equ	0xFEA
  9563                           fsr0l	equ	0xFE9
  9564                           wreg	equ	0xFE8
  9565                           postdec1	equ	0xFE5
  9566                           plusw1	equ	0xFE3
  9567                           fsr1h	equ	0xFE2
  9568                           fsr1l	equ	0xFE1
  9569                           bsr	equ	0xFE0
  9570                           indf2	equ	0xFDF
  9571                           postinc2	equ	0xFDE
  9572                           postdec2	equ	0xFDD
  9573                           plusw2	equ	0xFDB
  9574                           fsr2h	equ	0xFDA
  9575                           fsr2l	equ	0xFD9
  9576                           status	equ	0xFD8
  9577                           
  9578 ;; *************** function i2_setRGB *****************
  9579 ;; Defined at:
  9580 ;;		line 43 in file "Drivers/PWM_Driver.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;  r               1    wreg     unsigned char 
  9583 ;;  g               1    2[COMRAM] unsigned char 
  9584 ;;  b               1    3[COMRAM] unsigned char 
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;  r               1    4[COMRAM] unsigned char 
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      void 
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9596 ;;      Params:         2       0       0       0       0       0       0       0       0
  9597 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9599 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9600 ;;Total ram usage:        3 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    1
  9603 ;; This function calls:
  9604 ;;		i2_D_PWM_SetDuty
  9605 ;; This function is called by:
  9606 ;;		_flash
  9607 ;;		_strobe2
  9608 ;;		_fade
  9609 ;;		_smooth
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           	psect	text55
  9614  0022BC                     __ptext55:
  9615                           	opt stack 0
  9616  0022BC                     i2_setRGB:
  9617                           	opt stack 13
  9618                           
  9619                           ;incstack = 0
  9620                           ;i2setRGB@r stored from wreg
  9621  0022BC  6E05               	movwf	i2setRGB@r,c
  9622                           
  9623                           ;PWM_Driver.c: 44: D_PWM_SetDuty(0, r);
  9624  0022BE  C005  F001         	movff	i2setRGB@r,i2D_PWM_SetDuty@duty
  9625  0022C2  0E00               	movlw	0
  9626  0022C4  ECEC  F010         	call	i2_D_PWM_SetDuty
  9627                           
  9628                           ;PWM_Driver.c: 45: D_PWM_SetDuty(1, g);
  9629  0022C8  C003  F001         	movff	i2setRGB@g,i2D_PWM_SetDuty@duty
  9630  0022CC  0E01               	movlw	1
  9631  0022CE  ECEC  F010         	call	i2_D_PWM_SetDuty
  9632                           
  9633                           ;PWM_Driver.c: 46: D_PWM_SetDuty(2, b);
  9634  0022D2  C004  F001         	movff	i2setRGB@b,i2D_PWM_SetDuty@duty
  9635  0022D6  0E02               	movlw	2
  9636  0022D8  ECEC  F010         	call	i2_D_PWM_SetDuty
  9637  0022DC  0012               	return		;funcret
  9638  0022DE                     __end_ofi2_setRGB:
  9639                           	opt stack 0
  9640                           pclatu	equ	0xFFB
  9641                           pclath	equ	0xFFA
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           intcon	equ	0xFF2
  9649                           intcon2	equ	0xFF1
  9650                           postinc0	equ	0xFEE
  9651                           plusw0	equ	0xFEB
  9652                           fsr0h	equ	0xFEA
  9653                           fsr0l	equ	0xFE9
  9654                           wreg	equ	0xFE8
  9655                           postdec1	equ	0xFE5
  9656                           plusw1	equ	0xFE3
  9657                           fsr1h	equ	0xFE2
  9658                           fsr1l	equ	0xFE1
  9659                           bsr	equ	0xFE0
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           postdec2	equ	0xFDD
  9663                           plusw2	equ	0xFDB
  9664                           fsr2h	equ	0xFDA
  9665                           fsr2l	equ	0xFD9
  9666                           status	equ	0xFD8
  9667                           
  9668 ;; *************** function i2_D_PWM_SetDuty *****************
  9669 ;; Defined at:
  9670 ;;		line 337 in file "Drivers/PWM_Driver.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  which           1    wreg     unsigned char 
  9673 ;;  duty            1    0[COMRAM] unsigned char 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  which           1    1[COMRAM] unsigned char 
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  1    wreg      void 
  9678 ;; Registers used:
  9679 ;;		wreg, status,2, status,0
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9685 ;;      Params:         1       0       0       0       0       0       0       0       0
  9686 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9688 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9689 ;;Total ram usage:        2 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; This function calls:
  9692 ;;		Nothing
  9693 ;; This function is called by:
  9694 ;;		i2_setRGB
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text56
  9699  0021D8                     __ptext56:
  9700                           	opt stack 0
  9701  0021D8                     i2_D_PWM_SetDuty:
  9702                           	opt stack 13
  9703                           
  9704                           ;incstack = 0
  9705                           ;i2D_PWM_SetDuty@which stored from wreg
  9706  0021D8  6E02               	movwf	i2D_PWM_SetDuty@which,c
  9707                           
  9708                           ;PWM_Driver.c: 338: switch(which) {
  9709  0021DA  D009               	goto	i2l2296
  9710  0021DC                     i2l358:
  9711                           
  9712                           ;PWM_Driver.c: 340: PWM_Red.duty_val = duty;
  9713  0021DC  C001  F0CD         	movff	i2D_PWM_SetDuty@duty,_PWM_Red+1
  9714                           
  9715                           ;PWM_Driver.c: 341: break;
  9716  0021E0  0012               	return	
  9717  0021E2                     i2l360:
  9718                           
  9719                           ;PWM_Driver.c: 344: PWM_Green.duty_val = duty;
  9720  0021E2  C001  F0CB         	movff	i2D_PWM_SetDuty@duty,_PWM_Green+1
  9721                           
  9722                           ;PWM_Driver.c: 345: break;
  9723  0021E6  0012               	return	
  9724  0021E8                     i2l361:
  9725                           
  9726                           ;PWM_Driver.c: 348: PWM_Blue.duty_val = duty;
  9727  0021E8  C001  F0C9         	movff	i2D_PWM_SetDuty@duty,_PWM_Blue+1
  9728                           
  9729                           ;PWM_Driver.c: 350: }
  9730                           
  9731                           ;PWM_Driver.c: 349: break;
  9732  0021EC  0012               	return	
  9733  0021EE                     i2l2296:
  9734  0021EE  5002               	movf	i2D_PWM_SetDuty@which,w,c
  9735                           
  9736                           ; Switch size 1, requested type "space"
  9737                           ; Number of cases is 3, Range of values is 0 to 2
  9738                           ; switch strategies available:
  9739                           ; Name         Instructions Cycles
  9740                           ; simple_byte           10     6 (average)
  9741                           ;	Chosen strategy is simple_byte
  9742  0021F0  0A00               	xorlw	0	; case 0
  9743  0021F2  B4D8               	btfsc	status,2,c
  9744  0021F4  D7F3               	goto	i2l358
  9745  0021F6  0A01               	xorlw	1	; case 1
  9746  0021F8  B4D8               	btfsc	status,2,c
  9747  0021FA  D7F3               	goto	i2l360
  9748  0021FC  0A03               	xorlw	3	; case 2
  9749  0021FE  A4D8               	btfss	status,2,c
  9750  002200  0012               	return	
  9751  002202  D7F2               	goto	i2l361
  9752  002204                     __end_ofi2_D_PWM_SetDuty:
  9753                           	opt stack 0
  9754                           pclatu	equ	0xFFB
  9755                           pclath	equ	0xFFA
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon2	equ	0xFF1
  9764                           postinc0	equ	0xFEE
  9765                           plusw0	equ	0xFEB
  9766                           fsr0h	equ	0xFEA
  9767                           fsr0l	equ	0xFE9
  9768                           wreg	equ	0xFE8
  9769                           postdec1	equ	0xFE5
  9770                           plusw1	equ	0xFE3
  9771                           fsr1h	equ	0xFE2
  9772                           fsr1l	equ	0xFE1
  9773                           bsr	equ	0xFE0
  9774                           indf2	equ	0xFDF
  9775                           postinc2	equ	0xFDE
  9776                           postdec2	equ	0xFDD
  9777                           plusw2	equ	0xFDB
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           pclatu	equ	0xFFB
  9782                           pclath	equ	0xFFA
  9783                           tblptru	equ	0xFF8
  9784                           tblptrh	equ	0xFF7
  9785                           tblptrl	equ	0xFF6
  9786                           tablat	equ	0xFF5
  9787                           prodh	equ	0xFF4
  9788                           prodl	equ	0xFF3
  9789                           intcon	equ	0xFF2
  9790                           intcon2	equ	0xFF1
  9791                           postinc0	equ	0xFEE
  9792                           plusw0	equ	0xFEB
  9793                           fsr0h	equ	0xFEA
  9794                           fsr0l	equ	0xFE9
  9795                           wreg	equ	0xFE8
  9796                           postdec1	equ	0xFE5
  9797                           plusw1	equ	0xFE3
  9798                           fsr1h	equ	0xFE2
  9799                           fsr1l	equ	0xFE1
  9800                           bsr	equ	0xFE0
  9801                           indf2	equ	0xFDF
  9802                           postinc2	equ	0xFDE
  9803                           postdec2	equ	0xFDD
  9804                           plusw2	equ	0xFDB
  9805                           fsr2h	equ	0xFDA
  9806                           fsr2l	equ	0xFD9
  9807                           status	equ	0xFD8
  9808                           
  9809                           	psect	rparam
  9810  0000                     pclatu	equ	0xFFB
  9811                           pclath	equ	0xFFA
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           intcon2	equ	0xFF1
  9820                           postinc0	equ	0xFEE
  9821                           plusw0	equ	0xFEB
  9822                           fsr0h	equ	0xFEA
  9823                           fsr0l	equ	0xFE9
  9824                           wreg	equ	0xFE8
  9825                           postdec1	equ	0xFE5
  9826                           plusw1	equ	0xFE3
  9827                           fsr1h	equ	0xFE2
  9828                           fsr1l	equ	0xFE1
  9829                           bsr	equ	0xFE0
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           plusw2	equ	0xFDB
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838                           	psect	temp
  9839  000046                     btemp:
  9840                           	opt stack 0
  9841  000046                     	ds	1
  9842  0000                     int$flags	set	btemp
  9843                           pclatu	equ	0xFFB
  9844                           pclath	equ	0xFFA
  9845                           tblptru	equ	0xFF8
  9846                           tblptrh	equ	0xFF7
  9847                           tblptrl	equ	0xFF6
  9848                           tablat	equ	0xFF5
  9849                           prodh	equ	0xFF4
  9850                           prodl	equ	0xFF3
  9851                           intcon	equ	0xFF2
  9852                           intcon2	equ	0xFF1
  9853                           postinc0	equ	0xFEE
  9854                           plusw0	equ	0xFEB
  9855                           fsr0h	equ	0xFEA
  9856                           fsr0l	equ	0xFE9
  9857                           wreg	equ	0xFE8
  9858                           postdec1	equ	0xFE5
  9859                           plusw1	equ	0xFE3
  9860                           fsr1h	equ	0xFE2
  9861                           fsr1l	equ	0xFE1
  9862                           bsr	equ	0xFE0
  9863                           indf2	equ	0xFDF
  9864                           postinc2	equ	0xFDE
  9865                           postdec2	equ	0xFDD
  9866                           plusw2	equ	0xFDB
  9867                           fsr2h	equ	0xFDA
  9868                           fsr2l	equ	0xFD9
  9869                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    18
    Data        12
    BSS         124
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      69
    BANK0           160     81     121
    BANK1           256      0      63
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_ReadBlock.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_ReadBlock.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_33(CODE[4]), STR_31(CODE[4]), STR_27(CODE[4]), STR_26(CODE[3]), 
		 -> STR_25(CODE[4]), STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_34(CODE[4]), STR_32(CODE[4]), STR_30(CODE[2]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_14(CODE[5]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(BANK0[2]), ?_printf(BANK0[2]), 

    strToInt@str	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    msg.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    read.message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    sp__D_UART_GetDeviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_34(CODE[4]), STR_32(CODE[4]), STR_30(CODE[2]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[2]), ROM(CODE[32767]), 

    S280$message	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.message(COMRAM[10]), D_UART_ReadBlock@cm(BANK0[17]), cm.message(COMRAM[10]), D_UART_Read@cm(BANK0[17]), 

    S280$command	PTR const unsigned char  size(2) Largest target is 17
		 -> D_UART_ReadBlock@cm(BANK0[17]), D_UART_Read@cm(BANK0[17]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 17
		 -> cm.command(COMRAM[5]), D_UART_ReadBlock@cm(BANK0[17]), cm.command(COMRAM[5]), D_UART_Read@cm(BANK0[17]), 

    S280$sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer(BANK1[63]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 63
		 -> readBuffer.sender(BANK1[5]), readBuffer(BANK1[63]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    blockCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _readByte->i1_D_UART_Enable
    i1_printf->i1___lwmod
    i1_putch->i1_writeByte
    i1_writeByte->i1_D_UART_Enable
    i1___lwmod->i1___lwdiv

Critical Paths under _HighISR in COMRAM

    _handleState->_flash
    _handleState->_smooth
    _strobe2->i2_setRGB
    _smooth->i2_setRGB
    _flash->i2_setRGB
    _fade->i2_setRGB
    i2_setRGB->i2_D_PWM_SetDuty

Critical Paths under _main in BANK0

    _main->_handle_message
    _initialize->_D_UART_Write
    _D_UART_Write->_printf
    _D_UART_Init->___aldiv
    _D_PWM_Init->_D_TIMER0_Init
    _D_TIMER0_Init->_D_TIMER0_Enable
    _handle_message->_D_UART_WriteInt
    _D_UART_WriteInt->_printf
    _printf->___lwmod
    _putch->_writeByte
    _writeByte->_D_UART_Enable
    ___lwmod->___lwdiv
    _D_PWM_SetRGB->_setRGB
    _setRGB->_D_PWM_SetDuty
    _D_PWM_Enable->_pwmColors

Critical Paths under _LowISR in BANK0

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwmod

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14707
                                             79 BANK0      2     2      0
                       _D_PWM_SetRGB
                 _D_UART_BlockLength
                        _D_UART_Read
                   _D_UART_ReadBlock
                     _handle_message
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    3855
                        _D_PORT_Init
                       _D_PWM_Enable
                         _D_PWM_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    2776
                                             67 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Init                                          9     4      5     859
                                             53 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                             39 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Init                                           0     0      0      66
                    _D_TIMER0_Enable
                      _D_TIMER0_Init
 ---------------------------------------------------------------------------------
 (3) _D_TIMER0_Init                                        1     1      0      44
                                             40 BANK0      1     1      0
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_message                                       7     1      6    8451
                                             72 BANK0      7     1      6
                       _D_PWM_Enable
                         _D_PWM_Fade
                        _D_PWM_Flash
                      _D_PWM_GetBlue
                     _D_PWM_GetGreen
                       _D_PWM_GetRed
                     _D_PWM_GetScale
                     _D_PWM_GetState
                    _D_PWM_ScaleDown
                      _D_PWM_ScaleUp
                       _D_PWM_SetRGB
                       _D_PWM_Smooth
                       _D_PWM_Strobe
                        _D_UART_Read (ARG)
                   _D_UART_ReadBlock (ARG)
                    _D_UART_WriteInt
                           _strToInt
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    2011
                                             39 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strToInt                                             5     3      2     310
                                             39 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    3288
                                             67 BANK0      5     1      4
                      _D_PWM_GetBlue (ARG)
                     _D_PWM_GetGreen (ARG)
                       _D_PWM_GetRed (ARG)
                     _D_PWM_GetScale (ARG)
                     _D_PWM_GetState (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              25    20      5    2604
                                             51 BANK0     16    11      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                             41 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            1     1      0      44
                                             40 BANK0      1     1      0
                      _D_UART_Enable
 ---------------------------------------------------------------------------------
 (6) _D_UART_Enable                                        1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                             46 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                             39 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Strobe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Smooth                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetRGB                                         3     1      2    2168
                                             44 BANK0      3     1      2
                             _setRGB
 ---------------------------------------------------------------------------------
 (3) _setRGB                                               3     1      2    1590
                                             41 BANK0      3     1      2
                      _D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (4) _D_PWM_SetDuty                                        2     1      1     280
                                             39 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleUp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_ScaleDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetScale                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetRed                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetGreen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_GetBlue                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Flash                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Fade                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_PWM_Enable                                         1     1      0     132
                                             42 BANK0      1     1      0
                    _D_TIMER0_Enable
                          _pwmColors
 ---------------------------------------------------------------------------------
 (3) _pwmColors                                            3     3      0      66
                                             39 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _D_TIMER0_Enable                                      1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_ReadBlock                                    25    18      7      71
                                             39 BANK0     25    18      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                         23    17      6      49
                                             39 BANK0     23    17      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_BlockLength                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _LowISR                                              17    17      0    2479
                                             22 BANK0     17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (8) _readByte                                             1     1      0      34
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       2     2      0    2445
                                             20 BANK0      2     2      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (9) _acknowledge                                          0     0      0    1872
                           i1_printf
 ---------------------------------------------------------------------------------
 (10) i1_printf                                           25    20      5    1872
                                              4 BANK0     16    11      5
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (11) i1_putch                                             1     1      0      93
                                             27 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (12) i1_writeByte                                         1     1      0      62
                                             26 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (9) i1_D_UART_Enable                                      1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           5     1      4     302
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           7     3      4     381
                                             25 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _HighISR                                            14    14      0    3698
                                             11 COMRAM    14    14      0
                        _handleState
 ---------------------------------------------------------------------------------
 (15) _handleState                                         0     0      0    3698
                               _fade
                              _flash
                             _smooth
                            _strobe2
                        i2_pwmColors
 ---------------------------------------------------------------------------------
 (16) i2_pwmColors                                         3     3      0      66
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (16) _strobe2                                             5     5      0     908
                                              5 COMRAM     5     5      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _smooth                                              6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _flash                                               6     6      0     908
                                              5 COMRAM     6     6      0
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (16) _fade                                                0     0      0     908
                           i2_setRGB
 ---------------------------------------------------------------------------------
 (17) i2_setRGB                                            3     1      2     908
                                              2 COMRAM     3     1      2
                    i2_D_PWM_SetDuty
 ---------------------------------------------------------------------------------
 (18) i2_D_PWM_SetDuty                                     2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PWM_SetRGB
     _setRGB
       _D_PWM_SetDuty
   _D_UART_BlockLength
   _D_UART_Read
   _D_UART_ReadBlock
   _handle_message
     _D_PWM_Enable
       _D_TIMER0_Enable
       _pwmColors
     _D_PWM_Fade
     _D_PWM_Flash
     _D_PWM_GetBlue
     _D_PWM_GetGreen
     _D_PWM_GetRed
     _D_PWM_GetScale
     _D_PWM_GetState
     _D_PWM_ScaleDown
     _D_PWM_ScaleUp
     _D_PWM_SetRGB
       _setRGB
         _D_PWM_SetDuty
     _D_PWM_Smooth
     _D_PWM_Strobe
     _D_UART_Read (ARG)
     _D_UART_ReadBlock (ARG)
     _D_UART_WriteInt (ARG)
       _D_PWM_GetBlue (ARG)
       _D_PWM_GetGreen (ARG)
       _D_PWM_GetRed (ARG)
       _D_PWM_GetScale (ARG)
       _D_PWM_GetState (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _strToInt (ARG)
     _strcmp (ARG)
   _initialize
     _D_PORT_Init
     _D_PWM_Enable
       _D_TIMER0_Enable
       _pwmColors
     _D_PWM_Init
       _D_TIMER0_Enable
       _D_TIMER0_Init
         _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_Init
       _D_UART_Enable
       ___aldiv
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1___lwmod
           i1___lwdiv (ARG)
         i1_putch
           i1_writeByte
             i1_D_UART_Enable
   _readByte
     i1_D_UART_Enable

 _HighISR (ROOT)
   _handleState
     _fade
       i2_setRGB
         i2_D_PWM_SetDuty
     _flash
       i2_setRGB
         i2_D_PWM_SetDuty
     _smooth
       i2_setRGB
         i2_D_PWM_SetDuty
     _strobe2
       i2_setRGB
         i2_D_PWM_SetDuty
     i2_pwmColors

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3F       7       24.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FD      20        0.0%
DATA                 0      0      FD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun May  7 12:06:32 2017

                          _b 00CF                            _g 00D0                            _r 00D1  
                         l50 22B2                           l46 1992                           l39 1958  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
      __end_of_D_PWM_GetBlue 23C2                 _ackCharacter 003C                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l107 2326                          l233 17EC                          l234 176C  
                        l236 17A4                          l238 17DC                          l352 21C0  
                        l360 2188                          l361 218E                          l185 2248  
                        l358 2182                          l535 0F32                          l963 1D16  
                        l973 1F2A          __end_ofi2_pwmColors 1A84                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000        __end_of_D_PWM_ScaleUp 239C        __end_of_D_PWM_SetDuty 21AC  
                        prod 000FF3                          wreg 000FE8       __end_of_D_PWM_GetGreen 23BC  
     __end_of_D_PWM_GetScale 23D0       __end_of_D_PWM_GetState 23CC     __size_of_D_TIMER0_Enable 0022  
    __end_ofi2_D_PWM_SetDuty 2204          __end_ofi1_writeByte 2342                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2400 0F6A                         l3200 0B54  
                       l2250 2194                         l3130 08FC                         l3122 08B6  
                       l2260 1CD2                         l2420 0FC8                         l2404 0F86  
                       l2500 140A                         l2270 1D08                         l2262 1CD8  
                       l2406 0F8C                         l3206 0B9C                         l3150 09B6  
                       l2350 1978                         l2280 1EF2                         l2440 1024  
                       l2352 1980                         l2344 1960                         l2360 19D0  
                       l2512 1470                         l2258 1CC6                         l2282 1EF8  
                       l2442 102A                         l2450 10C4                         l2418 0FC2  
                       l2434 0FFE                         l3162 0A0A                         l3138 0942  
                       l2354 1988                         l2346 1968                         l2444 1076  
                       l2452 10D6                         l2436 1010                         l2380 0ED4  
                       l3180 0A8A                         l3156 09E0                         l2348 1970  
                       l2516 148C                         l2508 145E                         l3244 1A98  
                       l2470 17A6                         l2286 1F1C                         l2278 1EE6  
                       l2454 10DE                         l2382 0EDC                         l3174 0A5E  
                       l2358 199A                         l3262 1B0C                         l3254 1AD6  
                       l2800 21CE                         l2384 0EE2                         l2376 0EC0  
                       l2456 10EA                         l3168 0A34                         l2474 17DE  
                       l2466 176E                         l3186 0AB6                         l2490 13C6  
                       l3258 1AE6                         l2388 0EEC                         l2484 13A8  
                       l2496 13F4                         l2498 1404                         l2860 2092  
                       l2854 204C                         l2872 1F6C                         l2856 2058  
                       l2866 1F48                         l2878 1F7E                         STR_1 086A  
                       STR_2 0868                         STR_3 0841                         STR_4 083D  
                       STR_5 0839                         STR_6 0857                         STR_7 086C  
                       STR_8 086C                         STR_9 086C                         u2601 2134  
                       u2611 1FAE                         u2621 1FE4                         u3317 171E  
                       u1814 17C6                         u1815 17C0                         u3327 0AFE  
                       u3337 0B26                         u3347 0B4E                         u3357 1572  
                       u1774 1756                         u2591 20FE                         u1775 1750  
                       u2911 1AFC                         u1794 178E                         u1795 1788  
                       u2891 1AC8                         _fade 1B1A                         _baud 0029  
                       _main 1A84                         _read 0022                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0046                         prodh 000FF4                         prodl 000FF3  
                       start 00B4                D_UART_Read@cm 008D                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 23B0              __end_of_HighISR 1C2E                __CFG_MCLRE$ON 000000  
                ?_D_PWM_Fade 0001                 ___param_bank 000000        D_TIMER0_Enable@enable 0087  
                ?_D_PWM_Init 0001               _startCharacter 0040                __CFG_PLLDIV$4 000000  
                      ?_fade 0001              __end_of___aldiv 149E                        ?_main 0001  
                      STR_10 086C                        STR_11 0854                        STR_20 0866  
                      STR_12 0860                        STR_13 085E                        STR_21 0848  
                      STR_30 0833                        STR_22 0851                        STR_14 0824  
                      STR_15 0862                        STR_23 0845                        STR_31 0829  
                      STR_32 0829                        STR_16 085C                        STR_24 084B  
                      STR_17 0833                        STR_25 0835                        STR_33 082D  
                      STR_34 082D                        STR_18 0864                        STR_26 084E  
                      STR_19 085A                        STR_27 0831                        STR_35 0813  
                      STR_28 0862                        STR_29 085C              __end_of___lwdiv 1D20  
                      i1l113 2210                        i1l107 2338                        i1l185 22F2  
            __end_of___lwmod 1F34                        i1l197 006C                        i2l303 1B60  
                      i1l535 119C                        i2l233 1A7C                        i2l234 1A18  
                      i2l236 1A42                        i2l318 15B6                        i2l238 1A6C  
                      i2l360 21E2                        i2l248 18D6                        i2l361 21E8  
                      i2l409 1BF2                        i2l358 21DC                        i1l963 20EA  
                      i1l973 2040                        _RCREG 000FAE                        _TMR0H 000FD7  
                      _TMR0L 000FD6         __size_of_acknowledge 006E                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              ?_D_PWM_GetGreen 0001              ?_D_PWM_GetScale 0001  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000      __end_of_D_PWM_ScaleDown 23A6               __CFG_EBTR3$OFF 000000  
            ?_D_PWM_GetState 0001                __CFG_WRTB$OFF 000000           i1___lwmod@dividend 0060  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
                      _flash 189E              __end_of_dpowers 080B                        _scale 002D  
                      _state 002E                        _putch 2342                        main@i 00AF  
            i1writeByte@data 001B                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 0095                 ?_D_UART_Read 0087                        plusw0 000FEB  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
            __end_of_strobe2 1CA8                 ?_D_PORT_Init 0001             __end_ofi2_setRGB 22DE  
         __size_ofi1___lwdiv 0052           __size_ofi1___lwmod 005C                _stopCharacter 0042  
           __end_ofi1_printf 1384                   i1printf@ap 006D              __initialization 1E06  
           _D_UART_Init$1760 009A                 __end_of_fade 1BA6                 ?_D_PWM_Flash 0001  
               __end_of_main 1B1A                  i2_pwmColors 19E6     __size_ofi1_D_UART_Enable 0020  
                     ??_fade 0006                       ??_main 00AF                  i1_writeByte 2330  
              __activetblptr 000002             _D_UART_ReadBlock 1F92              __CFG_CCP2MX$OFF 000000  
       __size_of_handleState 0078             ?i2_D_PWM_SetDuty 0001                       ?_flash 0001  
                     _ADCON1 000FC1          __size_of_D_PWM_Fade 000E          __size_of_D_PWM_Init 003E  
                     ?_putch 0001                       i1l3300 200A                       i1l3302 2010  
                     i1l3320 114C                       i1l3312 112A                       i1l3306 2034  
                     i1l3340 11F0                       i1l3324 1156                       i1l3316 113E  
                     i1l3412 222A                       i1l3342 11F6                       i1l3318 1146  
                     i1l3510 0E28                       i1l3422 0C28                       i1l3280 20C0  
                     i1l3336 11D4                       i1l3440 0C82                       i1l3432 0C58  
                     i1l3290 20E0                       i1l3282 20C4                       i1l3354 122C  
                     i1l3370 1268                       i1l3426 0C30                       i1l3418 0BEA  
                     i1l3380 12E0                       i1l3356 1232                       i1l3372 127A  
                     i1l3508 0E20                       i1l3460 0CFC                       i1l3532 0E82  
                     i1l3278 20B8                       i1l3390 1346                       i1l3526 0E6E  
                     i1l3518 0E52                       i1l3462 0D10                       i1l3454 0CD4  
                     i1l3446 0CAA                       i1l3376 128E                       i1l3392 1352  
                     i1l3528 0E7A                       i1l3298 2000                       i1l3378 1294  
                     i1l3386 132C                       i1l3490 0DC8                       i1l3388 133E  
                     i1l3476 0D62                       i1l3468 0D38                       i1l3494 0DDC  
                     i1l3486 0DAE                       i1l3498 0DF6                       i2l3072 1D2C  
                     i2l3090 1D62                       i2l2700 1B38                       i2l3084 1D50  
                     i2l3068 1D22                       i2l3078 1D3E                       i2l2296 21EE  
                     i2l2720 1B70                       i2l2712 1B56                       i2l2704 1B42  
                     i2l2730 1B8C                       i2l2650 18DE                       i2l3098 1D74  
                     i2l2724 1B7C                       i2l2708 1B4C                       i2l2732 1B92  
                     i2l2734 1B96                       i2l2726 1B80                       i2l2718 1B6C  
                     i2l2662 1914                       i2l2654 18F0                       i2l2670 1942  
                     i2l2750 15E2                       i2l2742 15BE                       i2l2680 1C86  
                     i2l2658 1902                       i2l2762 1618                       i2l2754 15F4  
                     i2l2746 15D0                       i2l2770 1652                       i2l2668 1928  
                     i2l2758 1606                       i2l2678 1C78                       i2l2686 1C92  
                     i2l2696 1B2E                       i2l2768 162C                       i2l2890 1A1A  
                     i2l2894 1A44                       i2l2898 1A6E                    ??i1_putch 001C  
                  ??_HighISR 000C            ??_D_TIMER0_Enable 0087                  readByte@dum 001B  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___aldiv 008F  
                     _comMes 00B1                    ??___lwdiv 008B                    ??___lwmod 0092  
           __end_of_readByte 222E                       _setRGB 2254                       clear_0 1E44  
                     clear_1 1E50                       clear_2 1E5C                       _printf 0EB2  
 __end_of_D_UART_BlockLength 23C8                       _smooth 157E     __size_of_D_UART_WriteInt 00E0  
                     _strcmp 204A            __end_ofi1___lwdiv 20F4                 __pdataCOMRAM 003C  
          __end_ofi1___lwmod 204A        D_UART_Init@interrupts 0099                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
              ?_D_UART_Write 00A3             ?_D_PWM_ScaleDown 0001              D_UART_Init@baud 0097  
            D_UART_Init@name 0095             __end_of_strToInt 1F92                    ??_strobe2 0006  
                 __accesstop 0060      __end_of__initialization 1E62              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001       __size_of_D_TIMER0_Init 00A0                D_PWM_SetRGB@b 008D  
              D_PWM_SetRGB@g 008C                D_PWM_SetRGB@r 008E                  i1printf@idx 006C  
                i1printf@val 0071               __pcstackCOMRAM 0001                 __pidataBANK0 23D0  
              ?_D_PWM_GetRed 0001                ?_D_PWM_Enable 0001                __end_of_flash 1946  
                i1putch@data 001C                ?_D_PWM_SetRGB 008C                __end_of_putch 2350  
           _messageCharacter 00D7            D_PWM_SetDuty@duty 0087                ?_D_PWM_Smooth 0001  
              ?_D_PWM_Strobe 0001       __size_of_D_UART_Enable 0026            ??i1_D_UART_Enable 001A  
             ??_D_UART_Write 00A7                    ?i2_setRGB 0003                    ?i1_printf 0064  
                    ??_flash 0006                      ??_putch 0089                   __pbssBANK0 00B1  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 004A  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Fade 0087  
            fillDataBuffer@i 0074                 ??_D_PWM_Init 0089               ??_D_PWM_GetRed 0087  
             ??_D_PWM_Enable 008A               ??_D_PWM_SetRGB 008E                   _deviceName 00D4  
                    ?_setRGB 0089         __size_of_D_PWM_Flash 000E               ??_D_PWM_Smooth 0087  
             ??_D_PWM_Strobe 0087             ??_D_PWM_GetGreen 0087             ??_D_PWM_GetScale 0087  
                    ?_printf 0093                      ?_smooth 0001             ??_D_PWM_GetState 0087  
                    ?_strcmp 0087                _D_TIMER0_Flag 0028           __size_of_pwmColors 00CA  
              _D_TIMER0_Init 1946                   ??i2_setRGB 0005                   ??i1_printf 0069  
    __size_of_fillDataBuffer 02CE          D_UART_Enable@enable 0087      __size_of_handle_message 0374  
          ??_D_UART_WriteInt 00A7               _blockCharacter 003E           __end_of_D_PWM_Fade 2388  
                    _PWM_Red 00CC           __end_of_D_PWM_Init 217C              __CFG_VREGEN$OFF 000000  
                    i1_putch 23A6                      _HighISR 0008                    ?_readByte 0001  
     __size_of_D_PWM_GetBlue 0006           __size_of_writeByte 0014                _D_UART_Enable 222E  
   __end_of_D_UART_ReadBlock 1FEE                      __Hparam 0000       __size_of_D_PWM_ScaleUp 000A  
                    __Lparam 0000              __size_of_LowISR 009C       __size_of_D_PWM_SetDuty 0030  
                 _readBuffer 0100                strToInt@shift 008A                      ___aldiv 1384  
               ?i2_pwmColors 0001                      ___lwdiv 1CA8                      ___lwmod 1ED2  
                  ?_strToInt 0087                 __psmallconst 0800            handle_message@msg 00A8  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0022                      __pcinit 1E06  
            __size_of_setRGB 0024                      __ramtop 0800                   _initialize 1E70  
                    __ptext0 1A84                      __ptext1 1E70                      __ptext2 1656  
                    __ptext3 17F4                      __ptext4 1384                      __ptext5 213E  
                    __ptext6 1946                      __ptext7 22FE                      __ptext8 0870  
                    __ptext9 204A              __size_of_printf 026A               ?_D_TIMER0_Init 0001  
                  _T0CONbits 000FD5              __size_of_smooth 00D8                 ?i1_writeByte 0001  
            __size_of_strcmp 0058            __end_of_hexpowers 0813                      _dpowers 0801  
          i1___lwdiv@divisor 001C            i1___lwdiv@counter 001E              _D_TIMER0_Enable 229A  
           ___aldiv@dividend 0087                      _strobe2 1C2E               __pintcode_body 1BA6  
       end_of_initialization 1E62                   ??_readByte 001B                      setRGB@b 008A  
                    setRGB@g 0089                      setRGB@r 008B                __Lmediumconst 0000  
                    int_func 1BA6               ?_D_UART_Enable 0001            __end_of_pwmColors 17F4  
       __end_of_D_UART_Write 172A                    _RCSTAbits 000FAB                      printf@c 00A2  
                    printf@f 0093             ___aldiv@quotient 0091                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                 ??_strToInt 0089                      strcmp@r 008C                _D_PWM_GetBlue 23BC  
                  _PORTBbits 000F81                ??_handleState 000C            __end_of_writeByte 2330  
                 flash@color 0034                   flash@count 0035                _D_PWM_ScaleUp 2392  
                  _TRISBbits 000F93                _D_PWM_SetDuty 217C                    _TRISCbits 000F94  
        __end_of_acknowledge 1E06                    _PWM_Green 00CA                    i1___lwdiv 20A2  
                  i1___lwmod 1FEE         __end_of_D_PWM_GetRed 23B6         __end_of_D_PWM_Enable 21D8  
         _D_UART_BlockLength 23C2         __end_of_D_PWM_SetRGB 229A         __end_of_D_PWM_Smooth 236C  
      D_TIMER0_Init@prescale 0088         __end_of_D_PWM_Strobe 235E                    _TXSTAbits 000FAC  
   __size_ofi2_D_PWM_SetDuty 002C                   main@length 00B0                 i1printf@flag 0070  
        ?_D_UART_BlockLength 0001                 i1printf@prec 006F               __end_of_LowISR 00B4  
            i1_D_UART_Enable 22DE      __end_of_D_TIMER0_Enable 22BC              ??_D_TIMER0_Init 0088  
                _BAUDCONbits 000FB8               ?_D_PWM_GetBlue 0001                __pidataCOMRAM 2388  
                ?_initialize 0001            i1___lwmod@divisor 0062                    i2setRGB@b 0004  
                  i2setRGB@g 0003                    i2setRGB@r 0005               __end_of_setRGB 2278  
          i1___lwmod@counter 0021               __end_of_printf 111C               ?_D_PWM_ScaleUp 0001  
       ??_D_UART_BlockLength 0087               __end_of_smooth 1656               __end_of_strcmp 20A2  
             ?_D_PWM_SetDuty 0087          start_initialization 1E06               _fillDataBuffer 0BE4  
                  i1printf@c 0073                    i1printf@f 0064               _handle_message 0870  
         D_PWM_SetDuty@which 0088                   ?i1___lwdiv 001A                   ?i1___lwmod 0060  
          __size_ofi2_setRGB 0022          __end_of_handleState 1D98            __size_ofi1_printf 0268  
            _D_UART_ReadFlag 00CE              ??_D_UART_Enable 0087     __size_of_D_PWM_ScaleDown 000A  
                smooth@color 0037                  smooth@count 0038                     ??_LowISR 0076  
                strToInt@val 008B                  strToInt@tmp 0089                  strToInt@str 0087  
                __pdataBANK0 00D7             __CFG_LPT1OSC$OFF 000000                     ??_setRGB 008B  
            _D_UART_WriteInt 149E         __size_ofi2_pwmColors 009E                  _acknowledge 1D98  
           D_UART_Write@data 00A5                     ??_printf 0098                     ??_smooth 0006  
                   ??_strcmp 008B       __end_of_fillDataBuffer 0EB2       __end_of_handle_message 0BE4  
                __pbssCOMRAM 0022               handleState@cnt 0036         __size_ofi1_writeByte 0012  
              __pcstackBANK0 0060                ??_D_UART_Init 009A                ??_D_UART_Read 008D  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00D4  
              ??_D_PORT_Init 0087          __size_of_initialize 0062      __end_ofi1_D_UART_Enable 22FE  
                  __pnvBANK0 00D4            __size_of_readByte 002A            ?_D_UART_ReadBlock 0087  
           ___lwdiv@dividend 0087                ??_D_PWM_Flash 0087                    __pintcode 0008  
                   ?___aldiv 0087           ??_D_UART_ReadBlock 008E            ??i2_D_PWM_SetDuty 0002  
            ??_D_PWM_GetBlue 0087                     ?___lwdiv 0087                     ?___lwmod 008E  
                _blockLength 002A                    fade@b_cnt 0044                    fade@g_cnt 0045  
                __pintcodelo 0018             ?_D_TIMER0_Enable 0001                    _bufferCnt 002B  
         fillDataBuffer@data 0075                    fade@r_cnt 0032              ??_D_PWM_ScaleUp 0087  
          __size_of_strToInt 005E              ??_D_PWM_SetDuty 0088              ?_fillDataBuffer 0001  
                __smallconst 0800                  _handleState 1D20        __size_of_D_PWM_GetRed 0006  
      __size_of_D_PWM_Enable 002C              ?_handle_message 00A8        __size_of_D_PWM_SetRGB 0022  
               _D_UART_Write 1656                    _hexpowers 080B        __size_of_D_PWM_Smooth 000E  
           ___lwdiv@quotient 008B                  ??i1___lwdiv 001E                  ??i1___lwmod 0021  
      __size_of_D_PWM_Strobe 000E               __size_of_flash 00A8                     ?_strobe2 0001  
              strobe2@on_cnt 003B               __size_of_putch 000E              ___aldiv@divisor 008B  
            ___aldiv@counter 008F                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
                   i1u324_21 0D98                     i1u336_27 221C                     i2u202_44 18B4  
                   i2u202_45 18AE                     i2u220_44 1594                     i2u220_45 158E  
                   i2u205_45 1C36                     i2u240_44 1A5A                     i2u240_45 1A56  
                   i2u209_45 1C9A          __end_of_D_UART_Init 189E          __end_of_D_UART_Read 213E  
                   i2u236_44 1A06                     i2u236_45 1A02                     i2u238_44 1A30  
                   i2u238_45 1A2C                     _PIR1bits 000F9E      __end_of_D_UART_WriteInt 157E  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 00A3  
          ??_D_PWM_ScaleDown 0087                    _pwmColors 172A          __end_of_D_PORT_Init 231C  
               _D_PWM_GetRed 23B0                 _D_PWM_Enable 21AC           D_PWM_Enable@enable 008A  
               _D_PWM_SetRGB 2278                     _PWM_Blue 00C8                 _D_PWM_Smooth 235E  
        __end_of_D_PWM_Flash 237A                 _D_PWM_Strobe 2350                   printf@flag 009F  
                 printf@prec 009E                     i2_setRGB 22BC                     i1_printf 111C  
                  _writeByte 231C      __size_of_D_PWM_GetGreen 0006                  _INTCON2bits 000FF1  
    __size_of_D_PWM_GetScale 0004                    copy_data0 1E32        i2pwmColors@birghtness 0003  
    __size_of_D_PWM_GetState 0004             __size_ofi1_putch 000A             __size_of_HighISR 1C26  
           ?i1_D_UART_Enable 0001                     __Hrparam 0000                     __Lrparam 0000  
                 ?_pwmColors 0001             __size_of___aldiv 011A             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 00A8        i1D_UART_Enable@enable 001A  
            ___lwdiv@divisor 0089              ___lwdiv@counter 008D                     __ptext10 1F34  
                   __ptext11 149E                     __ptext20 2278                     __ptext12 0EB2  
                   __ptext21 2254                     __ptext13 2342                     __ptext30 236C  
                   __ptext22 217C                     __ptext14 231C                     __ptext31 237A  
                   __ptext23 2392                     __ptext15 222E                     __ptext40 0BE4  
                   __ptext32 21AC                     __ptext24 239C                     __ptext16 1ED2  
                   __ptext41 1D98                     __ptext33 172A                     __ptext25 23C8  
                   __ptext17 1CA8                     __ptext50 19E6                     __ptext42 111C  
                   __ptext34 229A                     __ptext26 23CC                     __ptext18 2350  
                   __ptext51 1C2E                     __ptext43 23A6                     __ptext35 1F92  
                   __ptext27 23B0                     __ptext19 235E                     __ptext52 157E  
                   __ptext44 2330                     __ptext36 20F4                     __ptext28 23B6  
                   __ptext53 189E                     __ptext45 22DE                     __ptext37 23C2  
                   __ptext29 23BC                     __ptext54 1B1A                     __ptext46 1FEE  
                   __ptext55 22BC                     __ptext47 20A2                     __ptext39 2204  
                   __ptext56 21D8                     __ptext49 1D20                   strobe2@cnt 0039  
                 ?_writeByte 0001                     fade@fade 0030                     fade@b_up 002F  
                   fade@g_up 0031          D_UART_ReadBlock@cnt 008E                     fade@r_up 0033  
           __size_of_strobe2 007A           i1___lwdiv@dividend 001A                  _D_UART_Init 17F4  
                _D_UART_Read 20F4                     _readData 00C2                     _readByte 2204  
              __size_of_fade 008C                __size_of_main 0096                  _D_PORT_Init 22FE  
         __end_of_initialize 1ED2             ?_D_UART_WriteInt 00A3                  _D_PWM_Flash 236C  
                   int$flags 0046                     _strToInt 1F34                    printf@idx 009B  
                  printf@val 00A0                 ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000  
      __end_of_D_TIMER0_Init 19E6           i1___lwdiv@quotient 001F                    putch@data 0089  
                 _INTCONbits 000FF2  __size_of_D_UART_BlockLength 0006                     intlevel1 0000  
                   intlevel2 0000                  _saved_state 002C              i2_D_PWM_SetDuty 21D8  
           ___lwmod@dividend 008E                    strobe2@on 003A           D_UART_ReadBlock@cm 008F  
      __end_of_D_UART_Enable 2254                    strobe@cnt 00D2                   _D_PWM_Fade 237A  
                 _D_PWM_Init 213E                ??i2_pwmColors 0001                  ??_pwmColors 0087  
                   printf@ap 009C             ??_fillDataBuffer 0022          D_UART_Write@command 00A3  
           ??_handle_message 00AE                ??i1_writeByte 001B                 ?_handleState 0001  
                   strcmp@s1 0087                     strcmp@s2 0089              ___lwmod@divisor 0090  
  __size_of_D_UART_ReadBlock 005C                     strobe@up 00D3                writeByte@data 0088  
            ___lwmod@counter 0092                 ___aldiv@sign 0090          D_UART_WriteInt@data 00A5  
       i2D_PWM_SetDuty@which 0002                  ??_writeByte 0088               _D_PWM_GetGreen 23B6  
             _D_PWM_GetScale 23CC               _D_PWM_GetState 23C8           __CFG_FOSC$HSPLL_HS 000000  
        pwmColors@birghtness 0089              _D_PWM_ScaleDown 239C          i2D_PWM_SetDuty@duty 0001  
